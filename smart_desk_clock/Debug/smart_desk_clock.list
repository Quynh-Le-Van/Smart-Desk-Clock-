
smart_desk_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001499c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010678  08014b40  08014b40  00024b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080251b8  080251b8  00041600  2**0
                  CONTENTS
  4 .ARM          00000008  080251b8  080251b8  000351b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080251c0  080251c0  00041600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080251c0  080251c0  000351c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080251c4  080251c4  000351c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001600  20000000  080251c8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003abc  20001600  080267c8  00041600  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050bc  080267c8  000450bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00041600  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd71  00000000  00000000  00041630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d57  00000000  00000000  0005e3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  000630f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  00064aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d463  00000000  00000000  00066220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025fcf  00000000  00000000  00083683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096bec  00000000  00000000  000a9652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014023e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007da4  00000000  00000000  00140290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001600 	.word	0x20001600
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014b24 	.word	0x08014b24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001604 	.word	0x20001604
 80001dc:	08014b24 	.word	0x08014b24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_ldivmod>:
 8000c4c:	b97b      	cbnz	r3, 8000c6e <__aeabi_ldivmod+0x22>
 8000c4e:	b972      	cbnz	r2, 8000c6e <__aeabi_ldivmod+0x22>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bfbe      	ittt	lt
 8000c54:	2000      	movlt	r0, #0
 8000c56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5a:	e006      	blt.n	8000c6a <__aeabi_ldivmod+0x1e>
 8000c5c:	bf08      	it	eq
 8000c5e:	2800      	cmpeq	r0, #0
 8000c60:	bf1c      	itt	ne
 8000c62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c66:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6a:	f000 b9bf 	b.w	8000fec <__aeabi_idiv0>
 8000c6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c76:	2900      	cmp	r1, #0
 8000c78:	db09      	blt.n	8000c8e <__aeabi_ldivmod+0x42>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db1a      	blt.n	8000cb4 <__aeabi_ldivmod+0x68>
 8000c7e:	f000 f84d 	bl	8000d1c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db1b      	blt.n	8000cd0 <__aeabi_ldivmod+0x84>
 8000c98:	f000 f840 	bl	8000d1c <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f82f 	bl	8000d1c <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4240      	negs	r0, r0
 8000cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f821 	bl	8000d1c <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	4770      	bx	lr

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b974 	b.w	8000fec <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468e      	mov	lr, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d14d      	bne.n	8000dc6 <__udivmoddi4+0xaa>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d969      	bls.n	8000e04 <__udivmoddi4+0xe8>
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	b152      	cbz	r2, 8000d4c <__udivmoddi4+0x30>
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	f1c2 0120 	rsb	r1, r2, #32
 8000d3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d46:	ea41 0e03 	orr.w	lr, r1, r3
 8000d4a:	4094      	lsls	r4, r2
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	0c21      	lsrs	r1, r4, #16
 8000d52:	fbbe f6f8 	udiv	r6, lr, r8
 8000d56:	fa1f f78c 	uxth.w	r7, ip
 8000d5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d62:	fb06 f107 	mul.w	r1, r6, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x64>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d72:	f080 811f 	bcs.w	8000fb4 <__udivmoddi4+0x298>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 811c 	bls.w	8000fb4 <__udivmoddi4+0x298>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb00 f707 	mul.w	r7, r0, r7
 8000d94:	42a7      	cmp	r7, r4
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x92>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	f080 810a 	bcs.w	8000fb8 <__udivmoddi4+0x29c>
 8000da4:	42a7      	cmp	r7, r4
 8000da6:	f240 8107 	bls.w	8000fb8 <__udivmoddi4+0x29c>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db2:	1be4      	subs	r4, r4, r7
 8000db4:	2600      	movs	r6, #0
 8000db6:	b11d      	cbz	r5, 8000dc0 <__udivmoddi4+0xa4>
 8000db8:	40d4      	lsrs	r4, r2
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d909      	bls.n	8000dde <__udivmoddi4+0xc2>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	f000 80ef 	beq.w	8000fae <__udivmoddi4+0x292>
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	fab3 f683 	clz	r6, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d14a      	bne.n	8000e7c <__udivmoddi4+0x160>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xd4>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 80f9 	bhi.w	8000fe2 <__udivmoddi4+0x2c6>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb61 0303 	sbc.w	r3, r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	469e      	mov	lr, r3
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e0      	beq.n	8000dc0 <__udivmoddi4+0xa4>
 8000dfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e02:	e7dd      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xec>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	f040 8092 	bne.w	8000f36 <__udivmoddi4+0x21a>
 8000e12:	eba1 010c 	sub.w	r1, r1, ip
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2601      	movs	r6, #1
 8000e20:	0c20      	lsrs	r0, r4, #16
 8000e22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e26:	fb07 1113 	mls	r1, r7, r3, r1
 8000e2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2e:	fb0e f003 	mul.w	r0, lr, r3
 8000e32:	4288      	cmp	r0, r1
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x12c>
 8000e36:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x12a>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2c0>
 8000e46:	4643      	mov	r3, r8
 8000e48:	1a09      	subs	r1, r1, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e50:	fb07 1110 	mls	r1, r7, r0, r1
 8000e54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x156>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x154>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2ca>
 8000e70:	4608      	mov	r0, r1
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000e7c:	f1c6 0720 	rsb	r7, r6, #32
 8000e80:	40b3      	lsls	r3, r6
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e92:	431c      	orrs	r4, r3
 8000e94:	40f9      	lsrs	r1, r7
 8000e96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	0c20      	lsrs	r0, r4, #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fb09 1118 	mls	r1, r9, r8, r1
 8000eac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b8>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000edc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee8:	458e      	cmp	lr, r1
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1e2>
 8000eec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2b4>
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2b4>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4461      	add	r1, ip
 8000efe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f02:	fba0 9402 	umull	r9, r4, r0, r2
 8000f06:	eba1 010e 	sub.w	r1, r1, lr
 8000f0a:	42a1      	cmp	r1, r4
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x2a4>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x2a0>
 8000f14:	b15d      	cbz	r5, 8000f2e <__udivmoddi4+0x212>
 8000f16:	ebb3 0208 	subs.w	r2, r3, r8
 8000f1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000f22:	fa22 f306 	lsr.w	r3, r2, r6
 8000f26:	40f1      	lsrs	r1, r6
 8000f28:	431f      	orrs	r7, r3
 8000f2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	f1c2 0320 	rsb	r3, r2, #32
 8000f3a:	40d8      	lsrs	r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa21 f303 	lsr.w	r3, r1, r3
 8000f44:	4091      	lsls	r1, r2
 8000f46:	4301      	orrs	r1, r0
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f54:	fb07 3610 	mls	r6, r7, r0, r3
 8000f58:	0c0b      	lsrs	r3, r1, #16
 8000f5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f62:	429e      	cmp	r6, r3
 8000f64:	fa04 f402 	lsl.w	r4, r4, r2
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x260>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f74:	429e      	cmp	r6, r3
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1b9b      	subs	r3, r3, r6
 8000f7e:	b289      	uxth	r1, r1
 8000f80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f84:	fb07 3316 	mls	r3, r7, r6, r3
 8000f88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x28a>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2b0>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2b0>
 8000fa2:	3e02      	subs	r6, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0x104>
 8000fae:	462e      	mov	r6, r5
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e705      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	e6e3      	b.n	8000d80 <__udivmoddi4+0x64>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6f8      	b.n	8000dae <__udivmoddi4+0x92>
 8000fbc:	454b      	cmp	r3, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f8>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc8:	3801      	subs	r0, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f8>
 8000fcc:	4646      	mov	r6, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x28a>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1e2>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b8>
 8000fdc:	3b02      	subs	r3, #2
 8000fde:	4461      	add	r1, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x12c>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e709      	b.n	8000dfa <__udivmoddi4+0xde>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x156>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <bsp_button_init_one_button>:
 * @return false      Button init failure
 */
static bool bsp_button_init_one_button(button_t *button, button_id_t button_id, GPIO_TypeDef *button_port, uint16_t button_pin);
/* Function definitions ----------------------------------------------- */
static bool bsp_button_init_one_button(button_t *button, button_id_t button_id, GPIO_TypeDef *button_port, uint16_t button_pin)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	72fb      	strb	r3, [r7, #11]
 8001000:	4613      	mov	r3, r2
 8001002:	813b      	strh	r3, [r7, #8]
    BSP_BUTTON_CHECK_NUM_BUTTON_INIT(button_id);
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	2b06      	cmp	r3, #6
 8001008:	d802      	bhi.n	8001010 <bsp_button_init_one_button+0x20>
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <bsp_button_init_one_button+0x24>
 8001010:	2300      	movs	r3, #0
 8001012:	e009      	b.n	8001028 <bsp_button_init_one_button+0x38>

    button->gpio_port = button_port;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	605a      	str	r2, [r3, #4]
    button->gpio_pin  = button_pin;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	893a      	ldrh	r2, [r7, #8]
 800101e:	811a      	strh	r2, [r3, #8]
    button->state     = IDLE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2210      	movs	r2, #16
 8001024:	701a      	strb	r2, [r3, #0]

    return true;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <bsp_button_init>:

bool bsp_button_init(button_t *button)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
#ifdef HAVE_BUTTON

    /* Init 6 buttons */
    if (bsp_button_init_one_button(&button[BUTTON_1 - 1u], BUTTON_1, BUTTON_1_GPIO_Port, BUTTON_1_Pin)
 800103c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001040:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <bsp_button_init+0x9c>)
 8001042:	2101      	movs	r1, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ffd3 	bl	8000ff0 <bsp_button_init_one_button>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d03a      	beq.n	80010c6 <bsp_button_init+0x92>
        && bsp_button_init_one_button(&button[BUTTON_2 - 1u], BUTTON_2, BUTTON_2_GPIO_Port, BUTTON_2_Pin)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f103 0010 	add.w	r0, r3, #16
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <bsp_button_init+0xa0>)
 800105a:	2102      	movs	r1, #2
 800105c:	f7ff ffc8 	bl	8000ff0 <bsp_button_init_one_button>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d02f      	beq.n	80010c6 <bsp_button_init+0x92>
        && bsp_button_init_one_button(&button[BUTTON_3 - 1u], BUTTON_3, BUTTON_3_GPIO_Port, BUTTON_3_Pin)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f103 0020 	add.w	r0, r3, #32
 800106c:	2304      	movs	r3, #4
 800106e:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <bsp_button_init+0xa4>)
 8001070:	2103      	movs	r1, #3
 8001072:	f7ff ffbd 	bl	8000ff0 <bsp_button_init_one_button>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d024      	beq.n	80010c6 <bsp_button_init+0x92>
        && bsp_button_init_one_button(&button[BUTTON_4 - 1u], BUTTON_4, BUTTON_4_GPIO_Port, BUTTON_4_Pin)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <bsp_button_init+0xa4>)
 8001088:	2104      	movs	r1, #4
 800108a:	f7ff ffb1 	bl	8000ff0 <bsp_button_init_one_button>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d018      	beq.n	80010c6 <bsp_button_init+0x92>
        && bsp_button_init_one_button(&button[BUTTON_5 - 1u], BUTTON_5, BUTTON_5_GPIO_Port, BUTTON_5_Pin)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <bsp_button_init+0xa4>)
 80010a0:	2105      	movs	r1, #5
 80010a2:	f7ff ffa5 	bl	8000ff0 <bsp_button_init_one_button>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00c      	beq.n	80010c6 <bsp_button_init+0x92>
        && bsp_button_init_one_button(&button[BUTTON_6 - 1u], BUTTON_6, BUTTON_6_GPIO_Port, BUTTON_6_Pin) == true)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80010b2:	2308      	movs	r3, #8
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <bsp_button_init+0xa4>)
 80010b6:	2106      	movs	r1, #6
 80010b8:	f7ff ff9a 	bl	8000ff0 <bsp_button_init_one_button>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <bsp_button_init+0x92>
        return true;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <bsp_button_init+0x94>
    return false;
 80010c6:	2300      	movs	r3, #0
#endif
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800

080010dc <bsp_button_check_state_one_button>:

button_event_t bsp_button_check_state_one_button(button_id_t button_id, bool *interrupt_trigger, button_t *button)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	73fb      	strb	r3, [r7, #15]
    button_event_t event = INVALID_EVENT;
 80010ea:	23a2      	movs	r3, #162	; 0xa2
 80010ec:	75fb      	strb	r3, [r7, #23]

    switch (button->state)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3b10      	subs	r3, #16
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	f200 80b2 	bhi.w	800125e <bsp_button_check_state_one_button+0x182>
 80010fa:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <bsp_button_check_state_one_button+0x24>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	08001115 	.word	0x08001115
 8001104:	0800125f 	.word	0x0800125f
 8001108:	0800114d 	.word	0x0800114d
 800110c:	080011b1 	.word	0x080011b1
 8001110:	08001219 	.word	0x08001219
    {
    case IDLE:
        if (*interrupt_trigger == true && (HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_RESET))
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a4 	beq.w	8001266 <bsp_button_check_state_one_button+0x18a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	891b      	ldrh	r3, [r3, #8]
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f009 fffb 	bl	800b124 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 8098 	bne.w	8001266 <bsp_button_check_state_one_button+0x18a>
        {
            button->state   = WAIT_PRESS_TIMEOUT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2212      	movs	r2, #18
 800113a:	701a      	strb	r2, [r3, #0]
            button->timeout = HAL_GetTick() + 20;  //Set max press time is 20ms to detect press event
 800113c:	f009 f910 	bl	800a360 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	f103 0214 	add.w	r2, r3, #20
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60da      	str	r2, [r3, #12]
        }
        break;
 800114a:	e08c      	b.n	8001266 <bsp_button_check_state_one_button+0x18a>

    case WAIT_PRESS_TIMEOUT:
        if ((HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_RESET) && HAL_GetTick() > button->timeout)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	891b      	ldrh	r3, [r3, #8]
 8001154:	4619      	mov	r1, r3
 8001156:	4610      	mov	r0, r2
 8001158:	f009 ffe4 	bl	800b124 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d110      	bne.n	8001184 <bsp_button_check_state_one_button+0xa8>
 8001162:	f009 f8fd 	bl	800a360 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d909      	bls.n	8001184 <bsp_button_check_state_one_button+0xa8>
        {
            button->state   = WAIT_CLICK_TIMEOUT;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2213      	movs	r2, #19
 8001174:	701a      	strb	r2, [r3, #0]
            button->timeout = HAL_GetTick() + 180;  //Set max press time is 200ms to detect click event
 8001176:	f009 f8f3 	bl	800a360 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	60da      	str	r2, [r3, #12]
        }
        if ((HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_SET) && HAL_GetTick() <= button->timeout)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	891b      	ldrh	r3, [r3, #8]
 800118c:	4619      	mov	r1, r3
 800118e:	4610      	mov	r0, r2
 8001190:	f009 ffc8 	bl	800b124 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b01      	cmp	r3, #1
 8001198:	d167      	bne.n	800126a <bsp_button_check_state_one_button+0x18e>
 800119a:	f009 f8e1 	bl	800a360 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d860      	bhi.n	800126a <bsp_button_check_state_one_button+0x18e>
        {
            button->state = IDLE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2210      	movs	r2, #16
 80011ac:	701a      	strb	r2, [r3, #0]
        }
        break;
 80011ae:	e05c      	b.n	800126a <bsp_button_check_state_one_button+0x18e>

    case WAIT_CLICK_TIMEOUT:
        if ((HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_SET) && HAL_GetTick() <= button->timeout)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	891b      	ldrh	r3, [r3, #8]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f009 ffb2 	bl	800b124 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10b      	bne.n	80011de <bsp_button_check_state_one_button+0x102>
 80011c6:	f009 f8cb 	bl	800a360 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d804      	bhi.n	80011de <bsp_button_check_state_one_button+0x102>
        {
            /* Click handle */
            button->state = IDLE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2210      	movs	r2, #16
 80011d8:	701a      	strb	r2, [r3, #0]
            /* Return state current */
            event = CLICK_EVENT;
 80011da:	23a0      	movs	r3, #160	; 0xa0
 80011dc:	75fb      	strb	r3, [r7, #23]
        }

        if ((HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_RESET) && HAL_GetTick() > button->timeout)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	891b      	ldrh	r3, [r3, #8]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4610      	mov	r0, r2
 80011ea:	f009 ff9b 	bl	800b124 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d13c      	bne.n	800126e <bsp_button_check_state_one_button+0x192>
 80011f4:	f009 f8b4 	bl	800a360 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d935      	bls.n	800126e <bsp_button_check_state_one_button+0x192>
        {
            button->state   = WAIT_HOLD_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2214      	movs	r2, #20
 8001206:	701a      	strb	r2, [r3, #0]
            button->timeout = HAL_GetTick() + 500;  //Set max press time is 500ms to detect hold event
 8001208:	f009 f8aa 	bl	800a360 <HAL_GetTick>
 800120c:	4603      	mov	r3, r0
 800120e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60da      	str	r2, [r3, #12]
        }
        break;
 8001216:	e02a      	b.n	800126e <bsp_button_check_state_one_button+0x192>

    case WAIT_HOLD_TIMEOUT:
        if ((HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_RESET) && HAL_GetTick() > button->timeout)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	891b      	ldrh	r3, [r3, #8]
 8001220:	4619      	mov	r1, r3
 8001222:	4610      	mov	r0, r2
 8001224:	f009 ff7e 	bl	800b124 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d108      	bne.n	8001240 <bsp_button_check_state_one_button+0x164>
 800122e:	f009 f897 	bl	800a360 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d901      	bls.n	8001240 <bsp_button_check_state_one_button+0x164>
        {
            /* Holding time out handle */
            event = HOLD_EVENT;
 800123c:	23a1      	movs	r3, #161	; 0xa1
 800123e:	75fb      	strb	r3, [r7, #23]
        }

        if ((HAL_GPIO_ReadPin(button->gpio_port, button->gpio_pin) == GPIO_PIN_SET))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	891b      	ldrh	r3, [r3, #8]
 8001248:	4619      	mov	r1, r3
 800124a:	4610      	mov	r0, r2
 800124c:	f009 ff6a 	bl	800b124 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d10d      	bne.n	8001272 <bsp_button_check_state_one_button+0x196>
        {
            button->state = IDLE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2210      	movs	r2, #16
 800125a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800125c:	e009      	b.n	8001272 <bsp_button_check_state_one_button+0x196>

    default: button->state = IDLE; break;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2210      	movs	r2, #16
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e006      	b.n	8001274 <bsp_button_check_state_one_button+0x198>
        break;
 8001266:	bf00      	nop
 8001268:	e004      	b.n	8001274 <bsp_button_check_state_one_button+0x198>
        break;
 800126a:	bf00      	nop
 800126c:	e002      	b.n	8001274 <bsp_button_check_state_one_button+0x198>
        break;
 800126e:	bf00      	nop
 8001270:	e000      	b.n	8001274 <bsp_button_check_state_one_button+0x198>
        break;
 8001272:	bf00      	nop
    }

    /* Reset interrupt variable */
    *interrupt_trigger = false;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
    return event;
 800127a:	7dfb      	ldrb	r3, [r7, #23]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <bsp_flash_unlock>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void bsp_flash_unlock(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  FLASH->KEYR = KEY1;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <bsp_flash_unlock+0x1c>)
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <bsp_flash_unlock+0x20>)
 800128c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = KEY2;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <bsp_flash_unlock+0x1c>)
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <bsp_flash_unlock+0x24>)
 8001292:	605a      	str	r2, [r3, #4]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00
 80012a4:	45670123 	.word	0x45670123
 80012a8:	cdef89ab 	.word	0xcdef89ab

080012ac <bsp_get_sector_from_address>:

uint8_t bsp_get_sector_from_address(uint32_t start_address)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint8_t sector_number = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  if ((start_address >= 0x08000000) && (start_address < 0x08003FFF))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012be:	d306      	bcc.n	80012ce <bsp_get_sector_from_address+0x22>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <bsp_get_sector_from_address+0xc8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d802      	bhi.n	80012ce <bsp_get_sector_from_address+0x22>
    sector_number = BSP_FLASH_SECTOR_0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e04b      	b.n	8001366 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08004000) && (start_address < 0x08007FFF))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <bsp_get_sector_from_address+0xcc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d306      	bcc.n	80012e4 <bsp_get_sector_from_address+0x38>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a28      	ldr	r2, [pc, #160]	; (800137c <bsp_get_sector_from_address+0xd0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d802      	bhi.n	80012e4 <bsp_get_sector_from_address+0x38>
    sector_number = BSP_FLASH_SECTOR_1;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e040      	b.n	8001366 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08008000) && (start_address < 0x0800BFFF))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <bsp_get_sector_from_address+0xd4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d306      	bcc.n	80012fa <bsp_get_sector_from_address+0x4e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a25      	ldr	r2, [pc, #148]	; (8001384 <bsp_get_sector_from_address+0xd8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d802      	bhi.n	80012fa <bsp_get_sector_from_address+0x4e>
    sector_number = BSP_FLASH_SECTOR_2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e035      	b.n	8001366 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x0800C000) && (start_address < 0x0800FFFF))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <bsp_get_sector_from_address+0xdc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d306      	bcc.n	8001310 <bsp_get_sector_from_address+0x64>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <bsp_get_sector_from_address+0xe0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d202      	bcs.n	8001310 <bsp_get_sector_from_address+0x64>
    sector_number = BSP_FLASH_SECTOR_3;
 800130a:	2303      	movs	r3, #3
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e02a      	b.n	8001366 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08010000) && (start_address < 0x0801FFFF))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <bsp_get_sector_from_address+0xe0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d906      	bls.n	8001326 <bsp_get_sector_from_address+0x7a>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <bsp_get_sector_from_address+0xe4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d202      	bcs.n	8001326 <bsp_get_sector_from_address+0x7a>
    sector_number = BSP_FLASH_SECTOR_4;
 8001320:	2304      	movs	r3, #4
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e01f      	b.n	8001366 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08020000) && (start_address < 0x0803FFFF))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <bsp_get_sector_from_address+0xe4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d906      	bls.n	800133c <bsp_get_sector_from_address+0x90>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a18      	ldr	r2, [pc, #96]	; (8001394 <bsp_get_sector_from_address+0xe8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d202      	bcs.n	800133c <bsp_get_sector_from_address+0x90>
    sector_number = BSP_FLASH_SECTOR_5;
 8001336:	2305      	movs	r3, #5
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e014      	b.n	8001366 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08040000) && (start_address < 0x0805FFFF))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <bsp_get_sector_from_address+0xe8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d906      	bls.n	8001352 <bsp_get_sector_from_address+0xa6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <bsp_get_sector_from_address+0xec>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d202      	bcs.n	8001352 <bsp_get_sector_from_address+0xa6>
    sector_number = BSP_FLASH_SECTOR_6;
 800134c:	2306      	movs	r3, #6
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e009      	b.n	8001366 <bsp_get_sector_from_address+0xba>
  else if ((start_address >= 0x08060000) && (start_address < 0x0807FFFF))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <bsp_get_sector_from_address+0xec>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d905      	bls.n	8001366 <bsp_get_sector_from_address+0xba>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <bsp_get_sector_from_address+0xf0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d201      	bcs.n	8001366 <bsp_get_sector_from_address+0xba>
    sector_number = BSP_FLASH_SECTOR_7;
 8001362:	2307      	movs	r3, #7
 8001364:	73fb      	strb	r3, [r7, #15]
  return sector_number;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	08003ffe 	.word	0x08003ffe
 8001378:	08004000 	.word	0x08004000
 800137c:	08007ffe 	.word	0x08007ffe
 8001380:	08008000 	.word	0x08008000
 8001384:	0800bffe 	.word	0x0800bffe
 8001388:	0800c000 	.word	0x0800c000
 800138c:	0800ffff 	.word	0x0800ffff
 8001390:	0801ffff 	.word	0x0801ffff
 8001394:	0803ffff 	.word	0x0803ffff
 8001398:	0805ffff 	.word	0x0805ffff
 800139c:	0807ffff 	.word	0x0807ffff

080013a0 <bsp_flash_erase>:
    address_sector = 0x08060000;
  return address_sector;
}

bsp_flash_status_t bsp_flash_erase(uint32_t start_address)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 80013a8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013ac:	60fb      	str	r3, [r7, #12]
  /* Check that no Flash memory operation is ongoing by checking the BSY bit in the FLASH CR register */
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80013ae:	e007      	b.n	80013c0 <bsp_flash_erase+0x20>
  {
    if (--time_out == 0x00)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <bsp_flash_erase+0x20>
    {
      return bsp_flash_status_errors;
 80013bc:	2300      	movs	r3, #0
 80013be:	e064      	b.n	800148a <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <bsp_flash_erase+0xf4>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d102      	bne.n	80013d4 <bsp_flash_erase+0x34>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ed      	bne.n	80013b0 <bsp_flash_erase+0x10>
    }
  }
  /* Wating for Bsy bit */
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 80013d4:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <bsp_flash_erase+0xf4>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80013dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013e0:	d101      	bne.n	80013e6 <bsp_flash_erase+0x46>
  {
    bsp_flash_unlock();
 80013e2:	f7ff ff4f 	bl	8001284 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <bsp_flash_erase+0xf4>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <bsp_flash_erase+0xf4>)
 80013ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f0:	6113      	str	r3, [r2, #16]
  /* Set the SER bit in the FLASH_CR register */
  FLASH->CR |= FLASH_CR_SER;
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <bsp_flash_erase+0xf4>)
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <bsp_flash_erase+0xf4>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6113      	str	r3, [r2, #16]
  /* Program the FLASH_CR register to select a sector_number to erase */
  FLASH->CR |= bsp_get_sector_from_address(start_address) << 3;
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff54 	bl	80012ac <bsp_get_sector_from_address>
 8001404:	4603      	mov	r3, r0
 8001406:	00da      	lsls	r2, r3, #3
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <bsp_flash_erase+0xf4>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	4611      	mov	r1, r2
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <bsp_flash_erase+0xf4>)
 8001410:	430b      	orrs	r3, r1
 8001412:	6113      	str	r3, [r2, #16]
  /* Set the STRT bit in the FLASH CR register */
  FLASH->CR |= FLASH_CR_STRT;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <bsp_flash_erase+0xf4>)
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <bsp_flash_erase+0xf4>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6113      	str	r3, [r2, #16]
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 8001420:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001424:	60fb      	str	r3, [r7, #12]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001426:	e007      	b.n	8001438 <bsp_flash_erase+0x98>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3b01      	subs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <bsp_flash_erase+0x98>
    {
      return bsp_flash_status_errors;
 8001434:	2300      	movs	r3, #0
 8001436:	e028      	b.n	800148a <bsp_flash_erase+0xea>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <bsp_flash_erase+0xf4>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d102      	bne.n	800144c <bsp_flash_erase+0xac>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ed      	bne.n	8001428 <bsp_flash_erase+0x88>
    }
  }
  /* Check FLASH End of Operation flag  */
  if ((FLASH->SR & FLASH_FLAG_EOP) != RESET)
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <bsp_flash_erase+0xf4>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <bsp_flash_erase+0xc4>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->SR &= ~FLASH_FLAG_EOP;
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <bsp_flash_erase+0xf4>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <bsp_flash_erase+0xf4>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	60d3      	str	r3, [r2, #12]
  }
  /* Clear SER bit in the FLASH_CR register */
  FLASH->CR &= FLASH_CR_SER;
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <bsp_flash_erase+0xf4>)
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <bsp_flash_erase+0xf4>)
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	6113      	str	r3, [r2, #16]
  /* Clear STRT bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_STRT;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <bsp_flash_erase+0xf4>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <bsp_flash_erase+0xf4>)
 8001476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147a:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <bsp_flash_erase+0xf4>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <bsp_flash_erase+0xf4>)
 8001482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001486:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023c00 	.word	0x40023c00

08001498 <bsp_flash_write>:

bsp_flash_status_t bsp_flash_write(volatile uint32_t start_address, uint32_t *buffer_write, uint32_t length)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t count    = 0u;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  uint32_t time_out = BSP_FLASH_TIMEOUT;
 80014a8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014ac:	613b      	str	r3, [r7, #16]
  /* Check input parameters */
  if ((buffer_write == 0u) || (length == 0u))
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <bsp_flash_write+0x22>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <bsp_flash_write+0x36>
  {
    return bsp_flash_status_errors;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e05d      	b.n	800157a <bsp_flash_write+0xe2>
  }
  /* Check thet no Flash memory ope ration is ongoing by checking the BSY bit in the FLASH_CR register*/
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <bsp_flash_write+0x36>
    {
      return bsp_flash_status_errors;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e055      	b.n	800157a <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <bsp_flash_write+0xec>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014da:	d102      	bne.n	80014e2 <bsp_flash_write+0x4a>
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ed      	bne.n	80014be <bsp_flash_write+0x26>
    }
  }
  /* Check unlock sequences */
  if ((FLASH->CR & FLASH_CR_LOCK) == FLASH_CR_LOCK)
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <bsp_flash_write+0xec>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ee:	d101      	bne.n	80014f4 <bsp_flash_write+0x5c>
  {
    bsp_flash_unlock();
 80014f0:	f7ff fec8 	bl	8001284 <bsp_flash_unlock>
  }
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <bsp_flash_write+0xec>)
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <bsp_flash_write+0xec>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	6113      	str	r3, [r2, #16]
  /* Write FLASH CR_PG to 1 */
  FLASH->CR |= FLASH_CR_PG;
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <bsp_flash_write+0xec>)
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <bsp_flash_write+0xec>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6113      	str	r3, [r2, #16]
  /* Perform word write at the desired address */
  for (count = 0; count < length; count++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00c      	b.n	800152c <bsp_flash_write+0x94>
  {
    *(__IO uint32_t *) (start_address + count * 4u) = *(uint32_t *) (buffer_write + count);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	4413      	add	r3, r2
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	0091      	lsls	r1, r2, #2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	440a      	add	r2, r1
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6013      	str	r3, [r2, #0]
  for (count = 0; count < length; count++)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	d3ee      	bcc.n	8001512 <bsp_flash_write+0x7a>
  }
  /* Wait for the BSY bit to be reset */
  time_out = BSP_FLASH_TIMEOUT;
 8001534:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001538:	613b      	str	r3, [r7, #16]
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 800153a:	e007      	b.n	800154c <bsp_flash_write+0xb4>
  {
    /* Wating for Bsy bit */
    if (--time_out == 0x00)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3b01      	subs	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <bsp_flash_write+0xb4>
    {
      return bsp_flash_status_errors;
 8001548:	2300      	movs	r3, #0
 800154a:	e016      	b.n	800157a <bsp_flash_write+0xe2>
  while (((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY) && time_out)
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <bsp_flash_write+0xec>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d102      	bne.n	8001560 <bsp_flash_write+0xc8>
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ed      	bne.n	800153c <bsp_flash_write+0xa4>
    }
  }
  /* Clear PG bit in the FLASH CR register */
  FLASH->CR &= FLASH_CR_PG;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <bsp_flash_write+0xec>)
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <bsp_flash_write+0xec>)
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	6113      	str	r3, [r2, #16]
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <bsp_flash_write+0xec>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <bsp_flash_write+0xec>)
 8001572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001576:	6113      	str	r3, [r2, #16]
  return bsp_flash_status_ok;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <bsp_flash_read>:

bsp_flash_status_t bsp_flash_read(uint32_t start_address, uint32_t *buffer_read, uint32_t length)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t count = 0u;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  /* Check input paras */
  if ((buffer_read == 0u) || (length == 0u))
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <bsp_flash_read+0x1c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <bsp_flash_read+0x20>
  {
    return bsp_flash_status_errors;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e015      	b.n	80015d4 <bsp_flash_read+0x4c>
  }
  /* Read data buffer */
  for (count = 0u; count < length; count++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00d      	b.n	80015ca <bsp_flash_read+0x42>
  {
    *(uint32_t *) (buffer_read + count) = *(uint32_t *) (start_address + count * 4u);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	009a      	lsls	r2, r3, #2
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	4413      	add	r3, r2
 80015c0:	680a      	ldr	r2, [r1, #0]
 80015c2:	601a      	str	r2, [r3, #0]
  for (count = 0u; count < length; count++)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d3ed      	bcc.n	80015ae <bsp_flash_read+0x26>
  }
  return bsp_flash_status_ok;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <bsp_gpio_read_pin>:
{
    HAL_GPIO_WritePin(bsp_gpio_port, bsp_gpio_pin, GPIO_PIN_RESET);
}

bool bsp_gpio_read_pin(GPIO_TypeDef *bsp_gpio_port, uint16_t bsp_gpio_pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
    return HAL_GPIO_ReadPin(bsp_gpio_port, bsp_gpio_pin) == GPIO_PIN_SET ? true : false;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f009 fd97 	bl	800b124 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <bsp_i2c1_is_device_ready>:

/* Function definitions ----------------------------------------------- */

#if BSP_I2C1 == 1
bool bsp_i2c1_is_device_ready(uint8_t address_device)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  return (HAL_I2C_IsDeviceReady(&hi2c1, address_device, 5, BSP_I2C_TIMEOUT) == HAL_ERROR) ? false : true;
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	b299      	uxth	r1, r3
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	2205      	movs	r2, #5
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <bsp_i2c1_is_device_ready+0x2c>)
 8001620:	f00a fb78 	bl	800bd14 <HAL_I2C_IsDeviceReady>
 8001624:	4603      	mov	r3, r0
 8001626:	2b01      	cmp	r3, #1
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20003a68 	.word	0x20003a68

0800163c <bsp_i2c1_write_mem>:
{
  return (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_BUSY) ? false : true;
}

bool bsp_i2c1_write_mem(uint8_t address_slave, uint8_t reg_write, uint8_t *data_write, uint16_t size_data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af04      	add	r7, sp, #16
 8001642:	603a      	str	r2, [r7, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	460b      	mov	r3, r1
 800164c:	71bb      	strb	r3, [r7, #6]
 800164e:	4613      	mov	r3, r2
 8001650:	80bb      	strh	r3, [r7, #4]
  /* Get status bus I2C */
  if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_BUSY)
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <bsp_i2c1_write_mem+0x58>)
 8001654:	f00a fe51 	bl	800c2fa <HAL_I2C_GetState>
 8001658:	4603      	mov	r3, r0
 800165a:	2b24      	cmp	r3, #36	; 0x24
 800165c:	d101      	bne.n	8001662 <bsp_i2c1_write_mem+0x26>
    return false;
 800165e:	2300      	movs	r3, #0
 8001660:	e013      	b.n	800168a <bsp_i2c1_write_mem+0x4e>
  /* Transmit data */
  if (HAL_I2C_Mem_Write(&hi2c1, address_slave, reg_write, I2C_MEMADD_SIZE_8BIT, data_write, size_data, BSP_I2C_TIMEOUT) == HAL_ERROR)
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	b299      	uxth	r1, r3
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	b29a      	uxth	r2, r3
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2301      	movs	r3, #1
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <bsp_i2c1_write_mem+0x58>)
 800167a:	f009 fec7 	bl	800b40c <HAL_I2C_Mem_Write>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <bsp_i2c1_write_mem+0x4c>
    return false;
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <bsp_i2c1_write_mem+0x4e>
  return true;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20003a68 	.word	0x20003a68

08001698 <bsp_i2c1_read_mem>:

bool bsp_i2c1_read_mem(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read, uint16_t size_data)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af04      	add	r7, sp, #16
 800169e:	603a      	str	r2, [r7, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	460b      	mov	r3, r1
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	4613      	mov	r3, r2
 80016ac:	80bb      	strh	r3, [r7, #4]
  /* Get status bus I2C */
  if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_BUSY)
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <bsp_i2c1_read_mem+0x58>)
 80016b0:	f00a fe23 	bl	800c2fa <HAL_I2C_GetState>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b24      	cmp	r3, #36	; 0x24
 80016b8:	d101      	bne.n	80016be <bsp_i2c1_read_mem+0x26>
    return false;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e013      	b.n	80016e6 <bsp_i2c1_read_mem+0x4e>
  /* Transmit data */
  if (HAL_I2C_Mem_Read(&hi2c1, address_slave, reg_read, I2C_MEMADD_SIZE_8BIT, data_read, size_data, BSP_I2C_TIMEOUT) != HAL_OK)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	b299      	uxth	r1, r3
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	2364      	movs	r3, #100	; 0x64
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <bsp_i2c1_read_mem+0x58>)
 80016d6:	f009 ff93 	bl	800b600 <HAL_I2C_Mem_Read>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <bsp_i2c1_read_mem+0x4c>
    return false;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e000      	b.n	80016e6 <bsp_i2c1_read_mem+0x4e>
  return true;
 80016e4:	2301      	movs	r3, #1
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20003a68 	.word	0x20003a68

080016f4 <bsp_i2c3_is_device_ready>:
#endif
#endif

#if BSP_I2C3 == 1
bool bsp_i2c3_is_device_ready(uint8_t address_device)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  return (HAL_I2C_IsDeviceReady(&hi2c3, address_device, 5, BSP_I2C_TIMEOUT) == HAL_ERROR) ? false : true;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	b299      	uxth	r1, r3
 8001702:	2364      	movs	r3, #100	; 0x64
 8001704:	2205      	movs	r2, #5
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <bsp_i2c3_is_device_ready+0x2c>)
 8001708:	f00a fb04 	bl	800bd14 <HAL_I2C_IsDeviceReady>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	bf14      	ite	ne
 8001712:	2301      	movne	r3, #1
 8001714:	2300      	moveq	r3, #0
 8001716:	b2db      	uxtb	r3, r3
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20003abc 	.word	0x20003abc

08001724 <bsp_i2c3_is_busy>:

bool bsp_i2c3_is_busy(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  return (HAL_I2C_GetState(&hi2c3) == HAL_I2C_STATE_BUSY) ? false : true;
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <bsp_i2c3_is_busy+0x1c>)
 800172a:	f00a fde6 	bl	800c2fa <HAL_I2C_GetState>
 800172e:	4603      	mov	r3, r0
 8001730:	2b24      	cmp	r3, #36	; 0x24
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20003abc 	.word	0x20003abc

08001744 <bsp_i2c3_read_mem>:
    return false;
  return true;
}

bool bsp_i2c3_read_mem(uint8_t address_slave, uint8_t reg_read, uint8_t *data_read, uint16_t size_data)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af04      	add	r7, sp, #16
 800174a:	603a      	str	r2, [r7, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	460b      	mov	r3, r1
 8001754:	71bb      	strb	r3, [r7, #6]
 8001756:	4613      	mov	r3, r2
 8001758:	80bb      	strh	r3, [r7, #4]
  /* Get status bus I2C */
  if (HAL_I2C_GetState(&hi2c3) == HAL_I2C_STATE_BUSY)
 800175a:	4810      	ldr	r0, [pc, #64]	; (800179c <bsp_i2c3_read_mem+0x58>)
 800175c:	f00a fdcd 	bl	800c2fa <HAL_I2C_GetState>
 8001760:	4603      	mov	r3, r0
 8001762:	2b24      	cmp	r3, #36	; 0x24
 8001764:	d101      	bne.n	800176a <bsp_i2c3_read_mem+0x26>
    return false;
 8001766:	2300      	movs	r3, #0
 8001768:	e013      	b.n	8001792 <bsp_i2c3_read_mem+0x4e>
  /* Transmit data */
  if (HAL_I2C_Mem_Read(&hi2c3, address_slave, reg_read, I2C_MEMADD_SIZE_8BIT, data_read, size_data, BSP_I2C_TIMEOUT) != HAL_OK)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	b299      	uxth	r1, r3
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	b29a      	uxth	r2, r3
 8001772:	2364      	movs	r3, #100	; 0x64
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <bsp_i2c3_read_mem+0x58>)
 8001782:	f009 ff3d 	bl	800b600 <HAL_I2C_Mem_Read>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <bsp_i2c3_read_mem+0x4c>
    return false;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <bsp_i2c3_read_mem+0x4e>
  return true;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20003abc 	.word	0x20003abc

080017a0 <bsp_i2c3_write_mem_dma>:

#if BSP_I2C_DMA == 1
bool bsp_i2c3_write_mem_dma(uint8_t address_slave, uint8_t reg_write, uint8_t *data_write, uint16_t size_data)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	603a      	str	r2, [r7, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	460b      	mov	r3, r1
 80017b0:	71bb      	strb	r3, [r7, #6]
 80017b2:	4613      	mov	r3, r2
 80017b4:	80bb      	strh	r3, [r7, #4]
  uint16_t timeout_dma = BSP_I2C_TIMEOUT_DMA;
 80017b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80017ba:	81fb      	strh	r3, [r7, #14]
  /* Get status bus I2C */
  if (HAL_I2C_GetState(&hi2c3) == HAL_I2C_STATE_BUSY)
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <bsp_i2c3_write_mem_dma+0x80>)
 80017be:	f00a fd9c 	bl	800c2fa <HAL_I2C_GetState>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b24      	cmp	r3, #36	; 0x24
 80017c6:	d101      	bne.n	80017cc <bsp_i2c3_write_mem_dma+0x2c>
    return false;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e024      	b.n	8001816 <bsp_i2c3_write_mem_dma+0x76>
  /* Transmit data */
  if (HAL_I2C_Mem_Write_DMA(&hi2c3, address_slave, reg_write, I2C_MEMADD_SIZE_8BIT, data_write, size_data) == HAL_ERROR)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	b299      	uxth	r1, r3
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	4810      	ldr	r0, [pc, #64]	; (8001820 <bsp_i2c3_write_mem_dma+0x80>)
 80017e0:	f00a f934 	bl	800ba4c <HAL_I2C_Mem_Write_DMA>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d10a      	bne.n	8001800 <bsp_i2c3_write_mem_dma+0x60>
    return false;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e013      	b.n	8001816 <bsp_i2c3_write_mem_dma+0x76>
  /* Wait for the end of the transfer */
  while (timeout_dma > 0)
  {
    if (HAL_I2C_GetState(&hi2c3) == HAL_I2C_STATE_READY)
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <bsp_i2c3_write_mem_dma+0x80>)
 80017f0:	f00a fd83 	bl	800c2fa <HAL_I2C_GetState>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b20      	cmp	r3, #32
 80017f8:	d006      	beq.n	8001808 <bsp_i2c3_write_mem_dma+0x68>
      break;
    timeout_dma--;
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	81fb      	strh	r3, [r7, #14]
  while (timeout_dma > 0)
 8001800:	89fb      	ldrh	r3, [r7, #14]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f3      	bne.n	80017ee <bsp_i2c3_write_mem_dma+0x4e>
 8001806:	e000      	b.n	800180a <bsp_i2c3_write_mem_dma+0x6a>
      break;
 8001808:	bf00      	nop
  }
  return timeout_dma > 0 ? true : false;
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20003abc 	.word	0x20003abc

08001824 <HAL_I2C_MemTxCpltCallback>:
  i2c3_mem_dma_rx_cplt_callback = cb;
}
#endif

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
#if BSP_I2C1 == 1
  if (hi2c->Instance == I2C1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_I2C_MemTxCpltCallback+0x44>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d107      	bne.n	8001846 <HAL_I2C_MemTxCpltCallback+0x22>
  {
    if (i2c1_mem_dma_tx_cplt_callback != NULL)
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_I2C_MemTxCpltCallback+0x48>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_I2C_MemTxCpltCallback+0x22>
    {
      i2c1_mem_dma_tx_cplt_callback(hi2c);
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_I2C_MemTxCpltCallback+0x48>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
      i2c2_mem_dma_tx_cplt_callback(hi2c);
    }
  }
#endif
#if BSP_I2C3 == 1
  if (hi2c->Instance == I2C3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_I2C_MemTxCpltCallback+0x4c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d107      	bne.n	8001860 <HAL_I2C_MemTxCpltCallback+0x3c>
  {
    if (i2c3_mem_dma_tx_cplt_callback != NULL)
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_I2C_MemTxCpltCallback+0x50>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_I2C_MemTxCpltCallback+0x3c>
    {
      i2c3_mem_dma_tx_cplt_callback(hi2c);
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_I2C_MemTxCpltCallback+0x50>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
    }
  }
#endif
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40005400 	.word	0x40005400
 800186c:	2000161c 	.word	0x2000161c
 8001870:	40005c00 	.word	0x40005c00
 8001874:	20001624 	.word	0x20001624

08001878 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
#if BSP_I2C1 == 1
  if (hi2c->Instance == I2C1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_I2C_MemRxCpltCallback+0x44>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d107      	bne.n	800189a <HAL_I2C_MemRxCpltCallback+0x22>
  {
    if (i2c1_mem_dma_rx_cplt_callback != NULL)
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_I2C_MemRxCpltCallback+0x48>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_I2C_MemRxCpltCallback+0x22>
    {
      i2c1_mem_dma_rx_cplt_callback(hi2c);
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_I2C_MemRxCpltCallback+0x48>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
      i2c2_mem_dma_rx_cplt_callback(hi2c);
    }
  }
#endif
#if BSP_I2C3 == 1
  if (hi2c->Instance == I2C3)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d107      	bne.n	80018b4 <HAL_I2C_MemRxCpltCallback+0x3c>
  {
    if (i2c3_mem_dma_rx_cplt_callback != NULL)
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MemRxCpltCallback+0x50>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_I2C_MemRxCpltCallback+0x3c>
    {
      i2c3_mem_dma_rx_cplt_callback(hi2c);
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_I2C_MemRxCpltCallback+0x50>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
    }
  }
#endif
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40005400 	.word	0x40005400
 80018c0:	20001620 	.word	0x20001620
 80018c4:	40005c00 	.word	0x40005c00
 80018c8:	20001628 	.word	0x20001628

080018cc <bsp_tim3_start_tim_it>:
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
/*                Timer 3 implement                */
bool bsp_tim3_start_tim_it()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <bsp_tim3_start_tim_it+0x1c>)
 80018d2:	f00d f861 	bl	800e998 <HAL_TIM_Base_Start_IT>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <bsp_tim3_start_tim_it+0x14>
    {
        return false;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <bsp_tim3_start_tim_it+0x16>
    }
    return true;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20003b70 	.word	0x20003b70

080018ec <bsp_tim3_pwm_start>:

bool bsp_tim3_pwm_start()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK || HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK
 80018f0:	2100      	movs	r1, #0
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <bsp_tim3_pwm_start+0x38>)
 80018f4:	f00d f90c 	bl	800eb10 <HAL_TIM_PWM_Start>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <bsp_tim3_pwm_start+0x2e>
 80018fe:	2104      	movs	r1, #4
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <bsp_tim3_pwm_start+0x38>)
 8001902:	f00d f905 	bl	800eb10 <HAL_TIM_PWM_Start>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d106      	bne.n	800191a <bsp_tim3_pwm_start+0x2e>
        || HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 800190c:	2108      	movs	r1, #8
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <bsp_tim3_pwm_start+0x38>)
 8001910:	f00d f8fe 	bl	800eb10 <HAL_TIM_PWM_Start>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <bsp_tim3_pwm_start+0x32>
    {
        return false;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <bsp_tim3_pwm_start+0x34>
    }
    return true;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20003b70 	.word	0x20003b70

08001928 <bsp_tim3_pwm_set_compare>:

void bsp_tim3_pwm_set_compare(uint32_t tim_channel, uint32_t value_ch_1)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SetCompare(&htim3, tim_channel, value_ch_1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d104      	bne.n	8001942 <bsp_tim3_pwm_set_compare+0x1a>
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <bsp_tim3_pwm_set_compare+0x50>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001940:	e013      	b.n	800196a <bsp_tim3_pwm_set_compare+0x42>
    __HAL_TIM_SetCompare(&htim3, tim_channel, value_ch_1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d104      	bne.n	8001952 <bsp_tim3_pwm_set_compare+0x2a>
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <bsp_tim3_pwm_set_compare+0x50>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001950:	e00b      	b.n	800196a <bsp_tim3_pwm_set_compare+0x42>
    __HAL_TIM_SetCompare(&htim3, tim_channel, value_ch_1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d104      	bne.n	8001962 <bsp_tim3_pwm_set_compare+0x3a>
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <bsp_tim3_pwm_set_compare+0x50>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001960:	e003      	b.n	800196a <bsp_tim3_pwm_set_compare+0x42>
    __HAL_TIM_SetCompare(&htim3, tim_channel, value_ch_1);
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <bsp_tim3_pwm_set_compare+0x50>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20003b70 	.word	0x20003b70

0800197c <bsp_tim4_start_tim_it>:

/*                Timer 4 implement                */
bool bsp_tim4_start_tim_it()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <bsp_tim4_start_tim_it+0x1c>)
 8001982:	f00d f809 	bl	800e998 <HAL_TIM_Base_Start_IT>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <bsp_tim4_start_tim_it+0x14>
    {
        return false;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <bsp_tim4_start_tim_it+0x16>
    }
    return true;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20003bb8 	.word	0x20003bb8

0800199c <bsp_tim4_pwm_start>:

bool bsp_tim4_pwm_start()
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <bsp_tim4_pwm_start+0x1c>)
 80019a4:	f00d f8b4 	bl	800eb10 <HAL_TIM_PWM_Start>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <bsp_tim4_pwm_start+0x16>
    {
        return false;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <bsp_tim4_pwm_start+0x18>
    }
    return true;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20003bb8 	.word	0x20003bb8

080019bc <bsp_tim4_pwm_set_compare>:

void bsp_tim4_pwm_set_compare(uint32_t tim_channel, uint32_t value_ch_1)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SetCompare(&htim4, tim_channel, value_ch_1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <bsp_tim4_pwm_set_compare+0x1a>
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <bsp_tim4_pwm_set_compare+0x50>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019d4:	e013      	b.n	80019fe <bsp_tim4_pwm_set_compare+0x42>
    __HAL_TIM_SetCompare(&htim4, tim_channel, value_ch_1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d104      	bne.n	80019e6 <bsp_tim4_pwm_set_compare+0x2a>
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <bsp_tim4_pwm_set_compare+0x50>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019e4:	e00b      	b.n	80019fe <bsp_tim4_pwm_set_compare+0x42>
    __HAL_TIM_SetCompare(&htim4, tim_channel, value_ch_1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d104      	bne.n	80019f6 <bsp_tim4_pwm_set_compare+0x3a>
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <bsp_tim4_pwm_set_compare+0x50>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80019f4:	e003      	b.n	80019fe <bsp_tim4_pwm_set_compare+0x42>
    __HAL_TIM_SetCompare(&htim4, tim_channel, value_ch_1);
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <bsp_tim4_pwm_set_compare+0x50>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20003bb8 	.word	0x20003bb8

08001a10 <bsp_tim11_start_tim_it>:
    return true;
}

/*                Timer 11 implement                */
bool bsp_tim11_start_tim_it()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_Start_IT(&htim11) != HAL_OK)
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <bsp_tim11_start_tim_it+0x1c>)
 8001a16:	f00c ffbf 	bl	800e998 <HAL_TIM_Base_Start_IT>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <bsp_tim11_start_tim_it+0x14>
    {
        return false;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <bsp_tim11_start_tim_it+0x16>
    }
    return true;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20003c48 	.word	0x20003c48

08001a30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim9.Instance)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d102      	bne.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        bsp_tim9_handle();
 8001a44:	f000 f828 	bl	8001a98 <bsp_tim9_handle>
    }
    else if (htim->Instance == htim11.Instance)
    {
        bsp_tim11_handle();
    }
}
 8001a48:	e019      	b.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x4e>
    else if (htim->Instance == htim3.Instance)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d102      	bne.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0x2c>
        bsp_tim3_handle();
 8001a56:	f001 f9af 	bl	8002db8 <bsp_tim3_handle>
}
 8001a5a:	e010      	b.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x4e>
    else if (htim->Instance == htim4.Instance)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d102      	bne.n	8001a6e <HAL_TIM_PeriodElapsedCallback+0x3e>
        bsp_tim4_handle();
 8001a68:	f000 fb38 	bl	80020dc <bsp_tim4_handle>
}
 8001a6c:	e007      	b.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x4e>
    else if (htim->Instance == htim11.Instance)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x4e>
        bsp_tim11_handle();
 8001a7a:	f008 fa1b 	bl	8009eb4 <bsp_tim11_handle>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20003c00 	.word	0x20003c00
 8001a8c:	20003b70 	.word	0x20003b70
 8001a90:	20003bb8 	.word	0x20003bb8
 8001a94:	20003c48 	.word	0x20003c48

08001a98 <bsp_tim9_handle>:
{
    // do nothing
}

__weak void bsp_tim9_handle()
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
    // do nothing
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <bsp_tim_set_prescale>:
{
    // do nothing
}

void bsp_tim_set_prescale(TIM_HandleTypeDef *timer, uint32_t prescale)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_PRESCALER(timer, prescale);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <bsp_tim_set_autoreload>:

void bsp_tim_set_autoreload(TIM_HandleTypeDef *timer, uint32_t autoreload)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_AUTORELOAD(timer, autoreload);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <bsp_delay>:

void bsp_delay(uint32_t ms)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f008 fc41 	bl	800a378 <HAL_Delay>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <bsp_uart_init>:
bootloader_handle_error_t bsp_uart_bootloader_error;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void bsp_uart_init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
    cb_init(&cb, rx_buffer, RX_BUFFER_SIZE);
 8001b04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b08:	4902      	ldr	r1, [pc, #8]	; (8001b14 <bsp_uart_init+0x14>)
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <bsp_uart_init+0x18>)
 8001b0c:	f003 fde8 	bl	80056e0 <cb_init>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20001644 	.word	0x20001644
 8001b18:	2000162c 	.word	0x2000162c

08001b1c <bsp_uart_printf>:

void bsp_uart_printf(UART_HandleTypeDef *huart, uint8_t *string)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, string, strlen((char *) string), TIME_OUT_TRANSMIT_UART);
 8001b26:	6838      	ldr	r0, [r7, #0]
 8001b28:	f7fe fb5a 	bl	80001e0 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b34:	6839      	ldr	r1, [r7, #0]
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f00d feef 	bl	800f91a <HAL_UART_Transmit>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <bsp_uart_receive_to_idle_dma>:
{
    HAL_UART_Transmit(huart, string, len, TIME_OUT_TRANSMIT_UART);
}

void bsp_uart_receive_to_idle_dma(UART_HandleTypeDef *huart, uint8_t *data, uint16_t size)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	80fb      	strh	r3, [r7, #6]
    p_buffer_for_reception = rx_buffer_one;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <bsp_uart_receive_to_idle_dma+0x38>)
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <bsp_uart_receive_to_idle_dma+0x3c>)
 8001b56:	601a      	str	r2, [r3, #0]
    p_buffer_for_user      = rx_buffer_two;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <bsp_uart_receive_to_idle_dma+0x40>)
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <bsp_uart_receive_to_idle_dma+0x44>)
 8001b5c:	601a      	str	r2, [r3, #0]

    if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(huart, data, size))
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	461a      	mov	r2, r3
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f00d ff6a 	bl	800fa3e <HAL_UARTEx_ReceiveToIdle_DMA>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <bsp_uart_receive_to_idle_dma+0x30>
    {
        Error_Handler();
 8001b70:	f003 f990 	bl	8004e94 <Error_Handler>
    }
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20003584 	.word	0x20003584
 8001b80:	200025e4 	.word	0x200025e4
 8001b84:	20003588 	.word	0x20003588
 8001b88:	20002db4 	.word	0x20002db4

08001b8c <bsp_uart_handle_data>:
    HAL_NVIC_DisableIRQ(DMA2_Stream2_IRQn);
    HAL_UART_DeInit(&huart2);
}

void bsp_uart_handle_data(UART_HandleTypeDef *huart, uint16_t size)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
    static uint8_t old_pos = 0;
    uint8_t       *p_temp;
    uint8_t        i;

    /*Check if number of received data in reception buffer has changed*/
    if (size != old_pos)
 8001b98:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <bsp_uart_handle_data+0x108>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d06f      	beq.n	8001c84 <bsp_uart_handle_data+0xf8>
    {
        /*Check if of index in reception buffer has be increased */
        if (size > old_pos)
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <bsp_uart_handle_data+0x108>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d91e      	bls.n	8001bee <bsp_uart_handle_data+0x62>
        {
            /*Current position is higher than previous one*/
            num_received_chars = size - old_pos;
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <bsp_uart_handle_data+0x108>)
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <bsp_uart_handle_data+0x10c>)
 8001bbc:	601a      	str	r2, [r3, #0]
            /*Coppy received data in "User" buffer for evacution*/
            for (i = 0; i < num_received_chars; i++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e00e      	b.n	8001be2 <bsp_uart_handle_data+0x56>
            {
                p_buffer_for_user[i] = rx_buffer_user[old_pos + i];
 8001bc4:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <bsp_uart_handle_data+0x108>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	441a      	add	r2, r3
 8001bce:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <bsp_uart_handle_data+0x110>)
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	440b      	add	r3, r1
 8001bd6:	4932      	ldr	r1, [pc, #200]	; (8001ca0 <bsp_uart_handle_data+0x114>)
 8001bd8:	5c8a      	ldrb	r2, [r1, r2]
 8001bda:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < num_received_chars; i++)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3301      	adds	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <bsp_uart_handle_data+0x10c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3eb      	bcc.n	8001bc4 <bsp_uart_handle_data+0x38>
 8001bec:	e038      	b.n	8001c60 <bsp_uart_handle_data+0xd4>
        }
        else
        {
            /*Current position is lower than previous one: end of buffer*/
            /*First coppy data from current potion till end of buffer*/
            num_received_chars = RX_BUFFER_SIZE - old_pos;
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <bsp_uart_handle_data+0x108>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <bsp_uart_handle_data+0x10c>)
 8001bfa:	601a      	str	r2, [r3, #0]
            /*Coppy received data in "User" buffer for evacuation*/
            for (i = 0; i < num_received_chars; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e00d      	b.n	8001c1e <bsp_uart_handle_data+0x92>
            {
                p_buffer_for_user[i] = rx_buffer_user[i + old_pos];
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <bsp_uart_handle_data+0x108>)
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	441a      	add	r2, r3
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <bsp_uart_handle_data+0x110>)
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	440b      	add	r3, r1
 8001c12:	4923      	ldr	r1, [pc, #140]	; (8001ca0 <bsp_uart_handle_data+0x114>)
 8001c14:	5c8a      	ldrb	r2, [r1, r2]
 8001c16:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < num_received_chars; i++)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <bsp_uart_handle_data+0x10c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3ec      	bcc.n	8001c02 <bsp_uart_handle_data+0x76>
            }

            /*Check and continue with beginning of buffer*/
            if (size > 0)
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d018      	beq.n	8001c60 <bsp_uart_handle_data+0xd4>
            {
                for (i = 0; i < size; i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e00a      	b.n	8001c4a <bsp_uart_handle_data+0xbe>
                {
                    p_buffer_for_user[i] = rx_buffer_user[i];
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <bsp_uart_handle_data+0x110>)
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	440b      	add	r3, r1
 8001c3e:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <bsp_uart_handle_data+0x114>)
 8001c40:	5c8a      	ldrb	r2, [r1, r2]
 8001c42:	701a      	strb	r2, [r3, #0]
                for (i = 0; i < size; i++)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d8ef      	bhi.n	8001c34 <bsp_uart_handle_data+0xa8>
                }
                num_received_chars = num_received_chars + size;
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <bsp_uart_handle_data+0x10c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <bsp_uart_handle_data+0x10c>)
 8001c5e:	6013      	str	r3, [r2, #0]
            }
        }
        /* Write data to cbuffer */
        cb_write(&cb, p_buffer_for_user, num_received_chars);
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <bsp_uart_handle_data+0x110>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <bsp_uart_handle_data+0x10c>)
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <bsp_uart_handle_data+0x118>)
 8001c6c:	f003 fdd2 	bl	8005814 <cb_write>

        /*Swap buffers for next bytes to be processed*/
        /*p_buffer_for_user <--> p_buffer_for_reception*/
        p_temp                 = p_buffer_for_user;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <bsp_uart_handle_data+0x110>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60bb      	str	r3, [r7, #8]
        p_buffer_for_user      = p_buffer_for_reception;
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <bsp_uart_handle_data+0x11c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <bsp_uart_handle_data+0x110>)
 8001c7c:	6013      	str	r3, [r2, #0]
        p_buffer_for_reception = p_temp;
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <bsp_uart_handle_data+0x11c>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	6013      	str	r3, [r2, #0]
    }

    /*Update old_pos*/
    old_pos = size;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <bsp_uart_handle_data+0x108>)
 8001c8a:	701a      	strb	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20003590 	.word	0x20003590
 8001c98:	2000358c 	.word	0x2000358c
 8001c9c:	20003588 	.word	0x20003588
 8001ca0:	20001e14 	.word	0x20001e14
 8001ca4:	2000162c 	.word	0x2000162c
 8001ca8:	20003584 	.word	0x20003584

08001cac <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
    bsp_uart_handle_data(&huart, size);
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff64 	bl	8001b8c <bsp_uart_handle_data>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <drv_button_init>:
static drv_button_t drv_button;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
bool drv_button_init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
    bsp_button_init(button);
 8001cd2:	4826      	ldr	r0, [pc, #152]	; (8001d6c <drv_button_init+0xa0>)
 8001cd4:	f7ff f9ae 	bl	8001034 <bsp_button_init>

    for (uint8_t i = 0; i < BUTTON_MAX; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	e006      	b.n	8001cec <drv_button_init+0x20>
    {
        button_initialized[i] = false;
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <drv_button_init+0xa4>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < BUTTON_MAX; i++)
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d9f5      	bls.n	8001cde <drv_button_init+0x12>
    }

    drv_button.button_event_button_1 = INVALID_EVENT;
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <drv_button_init+0xa8>)
 8001cf4:	22a2      	movs	r2, #162	; 0xa2
 8001cf6:	701a      	strb	r2, [r3, #0]
    drv_button.button_event_button_2 = INVALID_EVENT;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <drv_button_init+0xa8>)
 8001cfa:	22a2      	movs	r2, #162	; 0xa2
 8001cfc:	705a      	strb	r2, [r3, #1]
    drv_button.button_event_button_3 = INVALID_EVENT;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <drv_button_init+0xa8>)
 8001d00:	22a2      	movs	r2, #162	; 0xa2
 8001d02:	709a      	strb	r2, [r3, #2]
    drv_button.button_event_button_4 = INVALID_EVENT;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <drv_button_init+0xa8>)
 8001d06:	22a2      	movs	r2, #162	; 0xa2
 8001d08:	70da      	strb	r2, [r3, #3]
    drv_button.button_event_button_5 = INVALID_EVENT;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <drv_button_init+0xa8>)
 8001d0c:	22a2      	movs	r2, #162	; 0xa2
 8001d0e:	711a      	strb	r2, [r3, #4]
    drv_button.button_event_button_6 = INVALID_EVENT;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <drv_button_init+0xa8>)
 8001d12:	22a2      	movs	r2, #162	; 0xa2
 8001d14:	715a      	strb	r2, [r3, #5]

    drv_button.button_1_interrupt = false;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <drv_button_init+0xa8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	719a      	strb	r2, [r3, #6]
    drv_button.button_2_interrupt = false;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <drv_button_init+0xa8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	731a      	strb	r2, [r3, #12]
    drv_button.button_3_interrupt = false;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <drv_button_init+0xa8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	751a      	strb	r2, [r3, #20]
    drv_button.button_4_interrupt = false;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <drv_button_init+0xa8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	771a      	strb	r2, [r3, #28]
    drv_button.button_5_interrupt = false;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <drv_button_init+0xa8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    drv_button.button_6_interrupt = false;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <drv_button_init+0xa8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    drv_button.button_1_interrupt_p = &drv_button.button_1_interrupt;
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <drv_button_init+0xa8>)
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <drv_button_init+0xac>)
 8001d42:	609a      	str	r2, [r3, #8]
    drv_button.button_2_interrupt_p = &drv_button.button_2_interrupt;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <drv_button_init+0xa8>)
 8001d46:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <drv_button_init+0xb0>)
 8001d48:	611a      	str	r2, [r3, #16]
    drv_button.button_3_interrupt_p = &drv_button.button_3_interrupt;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <drv_button_init+0xa8>)
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <drv_button_init+0xb4>)
 8001d4e:	619a      	str	r2, [r3, #24]
    drv_button.button_4_interrupt_p = &drv_button.button_4_interrupt;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <drv_button_init+0xa8>)
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <drv_button_init+0xb8>)
 8001d54:	621a      	str	r2, [r3, #32]
    drv_button.button_5_interrupt_p = &drv_button.button_5_interrupt;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <drv_button_init+0xa8>)
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <drv_button_init+0xbc>)
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
    drv_button.button_6_interrupt_p = &drv_button.button_6_interrupt;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <drv_button_init+0xa8>)
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <drv_button_init+0xc0>)
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30

    return true;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20003594 	.word	0x20003594
 8001d70:	200035f4 	.word	0x200035f4
 8001d74:	200035fc 	.word	0x200035fc
 8001d78:	20003602 	.word	0x20003602
 8001d7c:	20003608 	.word	0x20003608
 8001d80:	20003610 	.word	0x20003610
 8001d84:	20003618 	.word	0x20003618
 8001d88:	20003620 	.word	0x20003620
 8001d8c:	20003628 	.word	0x20003628

08001d90 <drv_button_check_event>:

void drv_button_check_event(button_name_t *button_state)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    /* State machine for every button */
    drv_button.button_event_button_1 =
      bsp_button_check_state_one_button(BUTTON_1, drv_button.button_1_interrupt_p, &button[BUTTON_1 - 1]);
 8001d98:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <drv_button_check_event+0x180>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <drv_button_check_event+0x184>)
 8001d9e:	4619      	mov	r1, r3
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff f99b 	bl	80010dc <bsp_button_check_state_one_button>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
    drv_button.button_event_button_1 =
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <drv_button_check_event+0x180>)
 8001dac:	701a      	strb	r2, [r3, #0]
    drv_button.button_event_button_2 =
      bsp_button_check_state_one_button(BUTTON_2, drv_button.button_2_interrupt_p, &button[BUTTON_2 - 1]);
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <drv_button_check_event+0x180>)
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	4a59      	ldr	r2, [pc, #356]	; (8001f18 <drv_button_check_event+0x188>)
 8001db4:	4619      	mov	r1, r3
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7ff f990 	bl	80010dc <bsp_button_check_state_one_button>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
    drv_button.button_event_button_2 =
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <drv_button_check_event+0x180>)
 8001dc2:	705a      	strb	r2, [r3, #1]
    drv_button.button_event_button_3 =
      bsp_button_check_state_one_button(BUTTON_3, drv_button.button_3_interrupt_p, &button[BUTTON_3 - 1]);
 8001dc4:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <drv_button_check_event+0x180>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a54      	ldr	r2, [pc, #336]	; (8001f1c <drv_button_check_event+0x18c>)
 8001dca:	4619      	mov	r1, r3
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f7ff f985 	bl	80010dc <bsp_button_check_state_one_button>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
    drv_button.button_event_button_3 =
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <drv_button_check_event+0x180>)
 8001dd8:	709a      	strb	r2, [r3, #2]
    drv_button.button_event_button_4 =
      bsp_button_check_state_one_button(BUTTON_4, drv_button.button_4_interrupt_p, &button[BUTTON_4 - 1]);
 8001dda:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <drv_button_check_event+0x180>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a50      	ldr	r2, [pc, #320]	; (8001f20 <drv_button_check_event+0x190>)
 8001de0:	4619      	mov	r1, r3
 8001de2:	2004      	movs	r0, #4
 8001de4:	f7ff f97a 	bl	80010dc <bsp_button_check_state_one_button>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
    drv_button.button_event_button_4 =
 8001dec:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <drv_button_check_event+0x180>)
 8001dee:	70da      	strb	r2, [r3, #3]
    drv_button.button_event_button_5 =
      bsp_button_check_state_one_button(BUTTON_5, drv_button.button_5_interrupt_p, &button[BUTTON_5 - 1]);
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <drv_button_check_event+0x180>)
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <drv_button_check_event+0x194>)
 8001df6:	4619      	mov	r1, r3
 8001df8:	2005      	movs	r0, #5
 8001dfa:	f7ff f96f 	bl	80010dc <bsp_button_check_state_one_button>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
    drv_button.button_event_button_5 =
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <drv_button_check_event+0x180>)
 8001e04:	711a      	strb	r2, [r3, #4]
    drv_button.button_event_button_6 =
      bsp_button_check_state_one_button(BUTTON_6, drv_button.button_6_interrupt_p, &button[BUTTON_6 - 1]);
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <drv_button_check_event+0x180>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <drv_button_check_event+0x198>)
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f7ff f964 	bl	80010dc <bsp_button_check_state_one_button>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
    drv_button.button_event_button_6 =
 8001e18:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <drv_button_check_event+0x180>)
 8001e1a:	715a      	strb	r2, [r3, #5]

    /* Export state to global variable */
    if (drv_button.button_event_button_1 == CLICK_EVENT)  // Right
 8001e1c:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <drv_button_check_event+0x180>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2ba0      	cmp	r3, #160	; 0xa0
 8001e22:	d103      	bne.n	8001e2c <drv_button_check_event+0x9c>
    {
        *button_state = CLICK_RIGHT_BUTTON;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e006      	b.n	8001e3a <drv_button_check_event+0xaa>
    }

    else if (drv_button.button_event_button_1 == HOLD_EVENT)
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <drv_button_check_event+0x180>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2ba1      	cmp	r3, #161	; 0xa1
 8001e32:	d102      	bne.n	8001e3a <drv_button_check_event+0xaa>
    {
        *button_state = HOLD_RIGHT_BUTTON;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2207      	movs	r2, #7
 8001e38:	701a      	strb	r2, [r3, #0]
    }

    if (drv_button.button_event_button_2 == CLICK_EVENT)  // Up
 8001e3a:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <drv_button_check_event+0x180>)
 8001e3c:	785b      	ldrb	r3, [r3, #1]
 8001e3e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e40:	d103      	bne.n	8001e4a <drv_button_check_event+0xba>
    {
        *button_state = CLICK_UP_BUTTON;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2202      	movs	r2, #2
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e006      	b.n	8001e58 <drv_button_check_event+0xc8>
    }

    else if (drv_button.button_event_button_2 == HOLD_EVENT)
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <drv_button_check_event+0x180>)
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2ba1      	cmp	r3, #161	; 0xa1
 8001e50:	d102      	bne.n	8001e58 <drv_button_check_event+0xc8>
    {
        *button_state = HOLD_UP_BUTTON;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2208      	movs	r2, #8
 8001e56:	701a      	strb	r2, [r3, #0]
    }

    if (drv_button.button_event_button_3 == CLICK_EVENT)  // Down
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <drv_button_check_event+0x180>)
 8001e5a:	789b      	ldrb	r3, [r3, #2]
 8001e5c:	2ba0      	cmp	r3, #160	; 0xa0
 8001e5e:	d103      	bne.n	8001e68 <drv_button_check_event+0xd8>
    {
        *button_state = CLICK_DOWN_BUTTON;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e006      	b.n	8001e76 <drv_button_check_event+0xe6>
    }

    else if (drv_button.button_event_button_3 == HOLD_EVENT)
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <drv_button_check_event+0x180>)
 8001e6a:	789b      	ldrb	r3, [r3, #2]
 8001e6c:	2ba1      	cmp	r3, #161	; 0xa1
 8001e6e:	d102      	bne.n	8001e76 <drv_button_check_event+0xe6>
    {
        *button_state = HOLD_DOWN_BUTTON;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2209      	movs	r2, #9
 8001e74:	701a      	strb	r2, [r3, #0]
    }

    if (drv_button.button_event_button_4 == CLICK_EVENT)  // Left
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <drv_button_check_event+0x180>)
 8001e78:	78db      	ldrb	r3, [r3, #3]
 8001e7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e7c:	d103      	bne.n	8001e86 <drv_button_check_event+0xf6>
    {
        *button_state = CLICK_LEFT_BUTTON;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e006      	b.n	8001e94 <drv_button_check_event+0x104>
    }

    else if (drv_button.button_event_button_4 == HOLD_EVENT)
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <drv_button_check_event+0x180>)
 8001e88:	78db      	ldrb	r3, [r3, #3]
 8001e8a:	2ba1      	cmp	r3, #161	; 0xa1
 8001e8c:	d102      	bne.n	8001e94 <drv_button_check_event+0x104>
    {
        *button_state = HOLD_LEFT_BUTTON;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	220a      	movs	r2, #10
 8001e92:	701a      	strb	r2, [r3, #0]
    }

    if (drv_button.button_event_button_5 == CLICK_EVENT)  // Select
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <drv_button_check_event+0x180>)
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	2ba0      	cmp	r3, #160	; 0xa0
 8001e9a:	d103      	bne.n	8001ea4 <drv_button_check_event+0x114>
    {
        *button_state = CLICK_SELECT_BUTTON;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e006      	b.n	8001eb2 <drv_button_check_event+0x122>
    }

    else if (drv_button.button_event_button_5 == HOLD_EVENT)
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <drv_button_check_event+0x180>)
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	2ba1      	cmp	r3, #161	; 0xa1
 8001eaa:	d102      	bne.n	8001eb2 <drv_button_check_event+0x122>
    {
        *button_state = HOLD_SELECT_BUTTON;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	220b      	movs	r2, #11
 8001eb0:	701a      	strb	r2, [r3, #0]
    }

    if (drv_button.button_event_button_6 == CLICK_EVENT)  // Cancel
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <drv_button_check_event+0x180>)
 8001eb4:	795b      	ldrb	r3, [r3, #5]
 8001eb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001eb8:	d103      	bne.n	8001ec2 <drv_button_check_event+0x132>
    {
        *button_state = CLICK_CANCEL_BUTTON;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e006      	b.n	8001ed0 <drv_button_check_event+0x140>
    }

    else if (drv_button.button_event_button_6 == HOLD_EVENT)
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <drv_button_check_event+0x180>)
 8001ec4:	795b      	ldrb	r3, [r3, #5]
 8001ec6:	2ba1      	cmp	r3, #161	; 0xa1
 8001ec8:	d102      	bne.n	8001ed0 <drv_button_check_event+0x140>
    {
        *button_state = HOLD_CANCEL_BUTTON;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	220c      	movs	r2, #12
 8001ece:	701a      	strb	r2, [r3, #0]
    }

    if (drv_button.button_event_button_6 == INVALID_EVENT && drv_button.button_event_button_5 == INVALID_EVENT
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <drv_button_check_event+0x180>)
 8001ed2:	795b      	ldrb	r3, [r3, #5]
 8001ed4:	2ba2      	cmp	r3, #162	; 0xa2
 8001ed6:	d116      	bne.n	8001f06 <drv_button_check_event+0x176>
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <drv_button_check_event+0x180>)
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	2ba2      	cmp	r3, #162	; 0xa2
 8001ede:	d112      	bne.n	8001f06 <drv_button_check_event+0x176>
        && drv_button.button_event_button_4 == INVALID_EVENT && drv_button.button_event_button_3 == INVALID_EVENT
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <drv_button_check_event+0x180>)
 8001ee2:	78db      	ldrb	r3, [r3, #3]
 8001ee4:	2ba2      	cmp	r3, #162	; 0xa2
 8001ee6:	d10e      	bne.n	8001f06 <drv_button_check_event+0x176>
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <drv_button_check_event+0x180>)
 8001eea:	789b      	ldrb	r3, [r3, #2]
 8001eec:	2ba2      	cmp	r3, #162	; 0xa2
 8001eee:	d10a      	bne.n	8001f06 <drv_button_check_event+0x176>
        && drv_button.button_event_button_2 == INVALID_EVENT && drv_button.button_event_button_1 == INVALID_EVENT)
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <drv_button_check_event+0x180>)
 8001ef2:	785b      	ldrb	r3, [r3, #1]
 8001ef4:	2ba2      	cmp	r3, #162	; 0xa2
 8001ef6:	d106      	bne.n	8001f06 <drv_button_check_event+0x176>
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <drv_button_check_event+0x180>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2ba2      	cmp	r3, #162	; 0xa2
 8001efe:	d102      	bne.n	8001f06 <drv_button_check_event+0x176>
    {
        *button_state = NO_EVENT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	220d      	movs	r2, #13
 8001f04:	701a      	strb	r2, [r3, #0]
    }
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200035fc 	.word	0x200035fc
 8001f14:	20003594 	.word	0x20003594
 8001f18:	200035a4 	.word	0x200035a4
 8001f1c:	200035b4 	.word	0x200035b4
 8001f20:	200035c4 	.word	0x200035c4
 8001f24:	200035d4 	.word	0x200035d4
 8001f28:	200035e4 	.word	0x200035e4

08001f2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BUTTON_1_Pin)
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f3c:	d102      	bne.n	8001f44 <HAL_GPIO_EXTI_Callback+0x18>
        drv_button.button_1_interrupt = true;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	719a      	strb	r2, [r3, #6]

    if (GPIO_Pin == BUTTON_2_Pin)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d102      	bne.n	8001f50 <HAL_GPIO_EXTI_Callback+0x24>
        drv_button.button_2_interrupt = true;
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	731a      	strb	r2, [r3, #12]

    if (GPIO_Pin == BUTTON_3_Pin)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d102      	bne.n	8001f5c <HAL_GPIO_EXTI_Callback+0x30>
        drv_button.button_3_interrupt = true;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	751a      	strb	r2, [r3, #20]

    if (GPIO_Pin == BUTTON_4_Pin)
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d102      	bne.n	8001f6a <HAL_GPIO_EXTI_Callback+0x3e>
        drv_button.button_4_interrupt = true;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	771a      	strb	r2, [r3, #28]

    if (GPIO_Pin == BUTTON_5_Pin)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d103      	bne.n	8001f7a <HAL_GPIO_EXTI_Callback+0x4e>
        drv_button.button_5_interrupt = true;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (GPIO_Pin == BUTTON_6_Pin)
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d103      	bne.n	8001f88 <HAL_GPIO_EXTI_Callback+0x5c>
        drv_button.button_6_interrupt = true;
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	200035fc 	.word	0x200035fc

08001f98 <drv_buzzer_init>:
 */
static void drv_buzzer_notone();

/* Function definitions ----------------------------------------------- */
void drv_buzzer_init()
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    bsp_tim_set_autoreload(&htim4, BUZZER_AUTORELOAD - 1);
 8001f9c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001fa0:	4806      	ldr	r0, [pc, #24]	; (8001fbc <drv_buzzer_init+0x24>)
 8001fa2:	f7ff fd8f 	bl	8001ac4 <bsp_tim_set_autoreload>
    bsp_tim_set_prescale(&htim4, BUZZER_PRESCALE - 1);
 8001fa6:	2163      	movs	r1, #99	; 0x63
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <drv_buzzer_init+0x24>)
 8001faa:	f7ff fd7c 	bl	8001aa6 <bsp_tim_set_prescale>
    bsp_tim4_start_tim_it();
 8001fae:	f7ff fce5 	bl	800197c <bsp_tim4_start_tim_it>
    bsp_tim4_pwm_start();
 8001fb2:	f7ff fcf3 	bl	800199c <bsp_tim4_pwm_start>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20003bb8 	.word	0x20003bb8

08001fc0 <drv_buzzer_volume>:
{
    bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, (buzzer_volume * BUZZER_AUTORELOAD) / 10);
}

void drv_buzzer_volume(uint16_t volume)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
    volume = (volume >= 10) ? 10 : volume;
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b0a      	cmp	r3, #10
 8001fce:	bf28      	it	cs
 8001fd0:	230a      	movcs	r3, #10
 8001fd2:	80fb      	strh	r3, [r7, #6]
    // convert volume range(0,10) into couter period (range(0,BUZZER_AUTORELOAD)) in counter register
    buzzer_volume = volume;
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <drv_buzzer_volume+0x28>)
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20001170 	.word	0x20001170

08001fec <drv_buzzer_music>:
    // convert frequency range(0,10) into couter period (range(0,BUZZER_AUTORELOAD)) in counter register
    buzzer_count_period = BUZZER_AUTORELOAD / frequency;
}

void drv_buzzer_music(uint8_t choose_music)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
    //   	drv_buzzer_off();
    //	buzzer_count_duration = HAL_GetTick();
    //    buzzer_choose_music   = (choose_music >= Super_Mario) ? Super_Mario : choose_music;

    if (buzzer_music_start == false)
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <drv_buzzer_music+0x3c>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00d      	beq.n	8002020 <drv_buzzer_music+0x34>
    {
        buzzer_count_duration = HAL_GetTick();
 8002004:	f008 f9ac 	bl	800a360 <HAL_GetTick>
 8002008:	4603      	mov	r3, r0
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <drv_buzzer_music+0x40>)
 800200c:	6013      	str	r3, [r2, #0]
        buzzer_count_note     = 0;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <drv_buzzer_music+0x44>)
 8002010:	2200      	movs	r2, #0
 8002012:	801a      	strh	r2, [r3, #0]
        buzzer_choose_music   = choose_music;
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <drv_buzzer_music+0x48>)
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	7013      	strb	r3, [r2, #0]
        buzzer_music_start    = true;
 800201a:	4b03      	ldr	r3, [pc, #12]	; (8002028 <drv_buzzer_music+0x3c>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
    }
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20003631 	.word	0x20003631
 800202c:	2000363c 	.word	0x2000363c
 8002030:	2000363a 	.word	0x2000363a
 8002034:	20003638 	.word	0x20003638

08002038 <drv_buzzer_off>:

void drv_buzzer_off()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
    buzzer_blink_start  = false;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <drv_buzzer_off+0x28>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    buzzer_music_start  = false;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <drv_buzzer_off+0x2c>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
    buzzer_choose_music = NO_MUSSIC;
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <drv_buzzer_off+0x30>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    buzzer_count_note   = 0;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <drv_buzzer_off+0x34>)
 8002050:	2200      	movs	r2, #0
 8002052:	801a      	strh	r2, [r3, #0]
    bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, 0);
 8002054:	2100      	movs	r1, #0
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff fcb0 	bl	80019bc <bsp_tim4_pwm_set_compare>
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20003630 	.word	0x20003630
 8002064:	20003631 	.word	0x20003631
 8002068:	20003638 	.word	0x20003638
 800206c:	2000363a 	.word	0x2000363a

08002070 <drv_buzzer_make_tone>:

static void drv_buzzer_make_tone(int frequency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    // convert frequency of each note to counter period
    if (frequency == 0)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d104      	bne.n	8002088 <drv_buzzer_make_tone+0x18>
    {
        // rest note
        bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, 0);
 800207e:	2100      	movs	r1, #0
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fc9b 	bl	80019bc <bsp_tim4_pwm_set_compare>
        autoreload = 1000000 / frequency;
        bsp_tim_set_autoreload(&htim4, autoreload);
        // keep making sound at volume which setted at drv_buzzer_volume function
        bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, (buzzer_volume * autoreload) / 10);
    }
}
 8002086:	e015      	b.n	80020b4 <drv_buzzer_make_tone+0x44>
        autoreload = 1000000 / frequency;
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <drv_buzzer_make_tone+0x4c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002090:	60fb      	str	r3, [r7, #12]
        bsp_tim_set_autoreload(&htim4, autoreload);
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	480a      	ldr	r0, [pc, #40]	; (80020c0 <drv_buzzer_make_tone+0x50>)
 8002096:	f7ff fd15 	bl	8001ac4 <bsp_tim_set_autoreload>
        bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, (buzzer_volume * autoreload) / 10);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <drv_buzzer_make_tone+0x54>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <drv_buzzer_make_tone+0x58>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	4619      	mov	r1, r3
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff fc84 	bl	80019bc <bsp_tim4_pwm_set_compare>
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	000f4240 	.word	0x000f4240
 80020c0:	20003bb8 	.word	0x20003bb8
 80020c4:	20001170 	.word	0x20001170
 80020c8:	cccccccd 	.word	0xcccccccd

080020cc <drv_buzzer_notone>:

static void drv_buzzer_notone()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, 0);
 80020d0:	2100      	movs	r1, #0
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fc72 	bl	80019bc <bsp_tim4_pwm_set_compare>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <bsp_tim4_handle>:

void bsp_tim4_handle()
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
    if (buzzer_blink_start == true)
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <bsp_tim4_handle+0x244>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02c      	beq.n	8002142 <bsp_tim4_handle+0x66>
    {
        // set frequency for buzzer based on drv_buzzer_blink (uint16_t frequency) function
        if (buzzer_count == 1)
 80020e8:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <bsp_tim4_handle+0x248>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10e      	bne.n	800210e <bsp_tim4_handle+0x32>
        {
            // buzzer on high
            bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, (buzzer_volume * BUZZER_AUTORELOAD) / 10);
 80020f0:	4b8d      	ldr	r3, [pc, #564]	; (8002328 <bsp_tim4_handle+0x24c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	4a8b      	ldr	r2, [pc, #556]	; (800232c <bsp_tim4_handle+0x250>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	08db      	lsrs	r3, r3, #3
 8002104:	4619      	mov	r1, r3
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff fc58 	bl	80019bc <bsp_tim4_pwm_set_compare>
 800210c:	e012      	b.n	8002134 <bsp_tim4_handle+0x58>
        }
        // time buzzer on high before moving to next cycle
        else if (buzzer_count == 50)
 800210e:	4b85      	ldr	r3, [pc, #532]	; (8002324 <bsp_tim4_handle+0x248>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	2b32      	cmp	r3, #50	; 0x32
 8002114:	d104      	bne.n	8002120 <bsp_tim4_handle+0x44>
        {
            // buzzer on low
            bsp_tim4_pwm_set_compare(BUZZER_CHANNEL, 0);
 8002116:	2100      	movs	r1, #0
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff fc4f 	bl	80019bc <bsp_tim4_pwm_set_compare>
 800211e:	e009      	b.n	8002134 <bsp_tim4_handle+0x58>
        }
        else if (buzzer_count == buzzer_count_period)
 8002120:	4b80      	ldr	r3, [pc, #512]	; (8002324 <bsp_tim4_handle+0x248>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b82      	ldr	r3, [pc, #520]	; (8002330 <bsp_tim4_handle+0x254>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d102      	bne.n	8002134 <bsp_tim4_handle+0x58>
        {
            buzzer_count = 0;
 800212e:	4b7d      	ldr	r3, [pc, #500]	; (8002324 <bsp_tim4_handle+0x248>)
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
        }

        buzzer_count++;
 8002134:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <bsp_tim4_handle+0x248>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b79      	ldr	r3, [pc, #484]	; (8002324 <bsp_tim4_handle+0x248>)
 800213e:	801a      	strh	r2, [r3, #0]
        {
            buzzer_count_note = 0;
            drv_buzzer_off();
        }
    }
}
 8002140:	e1cc      	b.n	80024dc <bsp_tim4_handle+0x400>
    else if (buzzer_choose_music == HAPPY_BIRTHDAY)
 8002142:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <bsp_tim4_handle+0x258>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d165      	bne.n	8002216 <bsp_tim4_handle+0x13a>
        divider = melody1[buzzer_count_note + 1];
 800214a:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <bsp_tim4_handle+0x25c>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	4a7a      	ldr	r2, [pc, #488]	; (800233c <bsp_tim4_handle+0x260>)
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	4a7a      	ldr	r2, [pc, #488]	; (8002340 <bsp_tim4_handle+0x264>)
 8002158:	6013      	str	r3, [r2, #0]
        if (divider > 0)
 800215a:	4b79      	ldr	r3, [pc, #484]	; (8002340 <bsp_tim4_handle+0x264>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	dd08      	ble.n	8002174 <bsp_tim4_handle+0x98>
            noteDuration = (wholenote1) / divider;
 8002162:	4b78      	ldr	r3, [pc, #480]	; (8002344 <bsp_tim4_handle+0x268>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <bsp_tim4_handle+0x264>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fb92 f3f3 	sdiv	r3, r2, r3
 800216e:	4a76      	ldr	r2, [pc, #472]	; (8002348 <bsp_tim4_handle+0x26c>)
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e021      	b.n	80021b8 <bsp_tim4_handle+0xdc>
        else if (divider < 0)
 8002174:	4b72      	ldr	r3, [pc, #456]	; (8002340 <bsp_tim4_handle+0x264>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da1d      	bge.n	80021b8 <bsp_tim4_handle+0xdc>
            noteDuration = (wholenote1) / abs(divider);
 800217c:	4b71      	ldr	r3, [pc, #452]	; (8002344 <bsp_tim4_handle+0x268>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <bsp_tim4_handle+0x264>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	bfb8      	it	lt
 8002188:	425b      	neglt	r3, r3
 800218a:	fb92 f3f3 	sdiv	r3, r2, r3
 800218e:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <bsp_tim4_handle+0x26c>)
 8002190:	6013      	str	r3, [r2, #0]
            noteDuration *= 1.5;  // increases the duration in half for dotted notes
 8002192:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <bsp_tim4_handle+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9dc 	bl	8000554 <__aeabi_i2d>
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <bsp_tim4_handle+0x270>)
 80021a2:	f7fe fa41 	bl	8000628 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fcd5 	bl	8000b5c <__aeabi_d2iz>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a64      	ldr	r2, [pc, #400]	; (8002348 <bsp_tim4_handle+0x26c>)
 80021b6:	6013      	str	r3, [r2, #0]
        drv_buzzer_make_tone(melody1[buzzer_count_note]);
 80021b8:	4b5f      	ldr	r3, [pc, #380]	; (8002338 <bsp_tim4_handle+0x25c>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b5f      	ldr	r3, [pc, #380]	; (800233c <bsp_tim4_handle+0x260>)
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff53 	bl	8002070 <drv_buzzer_make_tone>
        if (HAL_GetTick() - buzzer_count_duration >= noteDuration)
 80021ca:	f008 f8c9 	bl	800a360 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b5f      	ldr	r3, [pc, #380]	; (8002350 <bsp_tim4_handle+0x274>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <bsp_tim4_handle+0x26c>)
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	4293      	cmp	r3, r2
 80021dc:	d30c      	bcc.n	80021f8 <bsp_tim4_handle+0x11c>
            drv_buzzer_notone();
 80021de:	f7ff ff75 	bl	80020cc <drv_buzzer_notone>
            buzzer_count_note += 2;
 80021e2:	4b55      	ldr	r3, [pc, #340]	; (8002338 <bsp_tim4_handle+0x25c>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	3302      	adds	r3, #2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <bsp_tim4_handle+0x25c>)
 80021ec:	801a      	strh	r2, [r3, #0]
            buzzer_count_duration = HAL_GetTick();
 80021ee:	f008 f8b7 	bl	800a360 <HAL_GetTick>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a56      	ldr	r2, [pc, #344]	; (8002350 <bsp_tim4_handle+0x274>)
 80021f6:	6013      	str	r3, [r2, #0]
        if (buzzer_count_note >= notes1 * 2)
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <bsp_tim4_handle+0x25c>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b55      	ldr	r3, [pc, #340]	; (8002354 <bsp_tim4_handle+0x278>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	429a      	cmp	r2, r3
 8002206:	f2c0 8169 	blt.w	80024dc <bsp_tim4_handle+0x400>
            buzzer_count_note = 0;
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <bsp_tim4_handle+0x25c>)
 800220c:	2200      	movs	r2, #0
 800220e:	801a      	strh	r2, [r3, #0]
            drv_buzzer_off();
 8002210:	f7ff ff12 	bl	8002038 <drv_buzzer_off>
}
 8002214:	e162      	b.n	80024dc <bsp_tim4_handle+0x400>
    else if (buzzer_choose_music == NOKIA_TUNE)
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <bsp_tim4_handle+0x258>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d165      	bne.n	80022ea <bsp_tim4_handle+0x20e>
        divider = melody2[buzzer_count_note + 1];
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <bsp_tim4_handle+0x25c>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <bsp_tim4_handle+0x27c>)
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	4a45      	ldr	r2, [pc, #276]	; (8002340 <bsp_tim4_handle+0x264>)
 800222c:	6013      	str	r3, [r2, #0]
        if (divider > 0)
 800222e:	4b44      	ldr	r3, [pc, #272]	; (8002340 <bsp_tim4_handle+0x264>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	dd08      	ble.n	8002248 <bsp_tim4_handle+0x16c>
            noteDuration = (wholenote2) / divider;
 8002236:	4b49      	ldr	r3, [pc, #292]	; (800235c <bsp_tim4_handle+0x280>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <bsp_tim4_handle+0x264>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002242:	4a41      	ldr	r2, [pc, #260]	; (8002348 <bsp_tim4_handle+0x26c>)
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e021      	b.n	800228c <bsp_tim4_handle+0x1b0>
        else if (divider < 0)
 8002248:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <bsp_tim4_handle+0x264>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da1d      	bge.n	800228c <bsp_tim4_handle+0x1b0>
            noteDuration = (wholenote2) / abs(divider);
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <bsp_tim4_handle+0x280>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <bsp_tim4_handle+0x264>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	bfb8      	it	lt
 800225c:	425b      	neglt	r3, r3
 800225e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002262:	4a39      	ldr	r2, [pc, #228]	; (8002348 <bsp_tim4_handle+0x26c>)
 8002264:	6013      	str	r3, [r2, #0]
            noteDuration *= 1.5;  // increases the duration in half for dotted notes
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <bsp_tim4_handle+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f972 	bl	8000554 <__aeabi_i2d>
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <bsp_tim4_handle+0x270>)
 8002276:	f7fe f9d7 	bl	8000628 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f7fe fc6b 	bl	8000b5c <__aeabi_d2iz>
 8002286:	4603      	mov	r3, r0
 8002288:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <bsp_tim4_handle+0x26c>)
 800228a:	6013      	str	r3, [r2, #0]
        drv_buzzer_make_tone(melody2[buzzer_count_note]);
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <bsp_tim4_handle+0x25c>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <bsp_tim4_handle+0x27c>)
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fee9 	bl	8002070 <drv_buzzer_make_tone>
        if (HAL_GetTick() - buzzer_count_duration >= noteDuration)
 800229e:	f008 f85f 	bl	800a360 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <bsp_tim4_handle+0x274>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	4a27      	ldr	r2, [pc, #156]	; (8002348 <bsp_tim4_handle+0x26c>)
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d30c      	bcc.n	80022cc <bsp_tim4_handle+0x1f0>
            drv_buzzer_notone();
 80022b2:	f7ff ff0b 	bl	80020cc <drv_buzzer_notone>
            buzzer_count_note += 2;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <bsp_tim4_handle+0x25c>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	3302      	adds	r3, #2
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <bsp_tim4_handle+0x25c>)
 80022c0:	801a      	strh	r2, [r3, #0]
            buzzer_count_duration = HAL_GetTick();
 80022c2:	f008 f84d 	bl	800a360 <HAL_GetTick>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4a21      	ldr	r2, [pc, #132]	; (8002350 <bsp_tim4_handle+0x274>)
 80022ca:	6013      	str	r3, [r2, #0]
        if (buzzer_count_note >= notes2 * 2)
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <bsp_tim4_handle+0x25c>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <bsp_tim4_handle+0x284>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	429a      	cmp	r2, r3
 80022da:	f2c0 80ff 	blt.w	80024dc <bsp_tim4_handle+0x400>
            buzzer_count_note = 0;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <bsp_tim4_handle+0x25c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	801a      	strh	r2, [r3, #0]
            drv_buzzer_off();
 80022e4:	f7ff fea8 	bl	8002038 <drv_buzzer_off>
}
 80022e8:	e0f8      	b.n	80024dc <bsp_tim4_handle+0x400>
    else if (buzzer_choose_music == Merry_CHRISTMAS)
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <bsp_tim4_handle+0x258>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	f040 808c 	bne.w	800240c <bsp_tim4_handle+0x330>
        divider = melody3[buzzer_count_note + 1];
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <bsp_tim4_handle+0x25c>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <bsp_tim4_handle+0x288>)
 80022fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002300:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <bsp_tim4_handle+0x264>)
 8002302:	6013      	str	r3, [r2, #0]
        if (divider > 0)
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <bsp_tim4_handle+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	dd2f      	ble.n	800236c <bsp_tim4_handle+0x290>
            noteDuration = (wholenote3) / divider;
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <bsp_tim4_handle+0x28c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <bsp_tim4_handle+0x264>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fb92 f3f3 	sdiv	r3, r2, r3
 8002318:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <bsp_tim4_handle+0x26c>)
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e048      	b.n	80023b0 <bsp_tim4_handle+0x2d4>
 800231e:	bf00      	nop
 8002320:	20003630 	.word	0x20003630
 8002324:	20003632 	.word	0x20003632
 8002328:	20001170 	.word	0x20001170
 800232c:	cccccccd 	.word	0xcccccccd
 8002330:	20003634 	.word	0x20003634
 8002334:	20003638 	.word	0x20003638
 8002338:	2000363a 	.word	0x2000363a
 800233c:	20000000 	.word	0x20000000
 8002340:	20003640 	.word	0x20003640
 8002344:	20001160 	.word	0x20001160
 8002348:	20003644 	.word	0x20003644
 800234c:	3ff80000 	.word	0x3ff80000
 8002350:	2000363c 	.word	0x2000363c
 8002354:	20001150 	.word	0x20001150
 8002358:	200000c8 	.word	0x200000c8
 800235c:	20001164 	.word	0x20001164
 8002360:	20001154 	.word	0x20001154
 8002364:	20000130 	.word	0x20000130
 8002368:	20001168 	.word	0x20001168
        else if (divider < 0)
 800236c:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <bsp_tim4_handle+0x404>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da1d      	bge.n	80023b0 <bsp_tim4_handle+0x2d4>
            noteDuration = (wholenote3) / abs(divider);
 8002374:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <bsp_tim4_handle+0x408>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <bsp_tim4_handle+0x404>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	bfb8      	it	lt
 8002380:	425b      	neglt	r3, r3
 8002382:	fb92 f3f3 	sdiv	r3, r2, r3
 8002386:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <bsp_tim4_handle+0x40c>)
 8002388:	6013      	str	r3, [r2, #0]
            noteDuration *= 1.5;  // increases the duration in half for dotted notes
 800238a:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <bsp_tim4_handle+0x40c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8e0 	bl	8000554 <__aeabi_i2d>
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	4b54      	ldr	r3, [pc, #336]	; (80024ec <bsp_tim4_handle+0x410>)
 800239a:	f7fe f945 	bl	8000628 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fbd9 	bl	8000b5c <__aeabi_d2iz>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a4e      	ldr	r2, [pc, #312]	; (80024e8 <bsp_tim4_handle+0x40c>)
 80023ae:	6013      	str	r3, [r2, #0]
        drv_buzzer_make_tone(melody3[buzzer_count_note]);
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <bsp_tim4_handle+0x414>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <bsp_tim4_handle+0x418>)
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fe57 	bl	8002070 <drv_buzzer_make_tone>
        if (HAL_GetTick() - buzzer_count_duration >= noteDuration)
 80023c2:	f007 ffcd 	bl	800a360 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <bsp_tim4_handle+0x41c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	4a46      	ldr	r2, [pc, #280]	; (80024e8 <bsp_tim4_handle+0x40c>)
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d30c      	bcc.n	80023f0 <bsp_tim4_handle+0x314>
            drv_buzzer_notone();
 80023d6:	f7ff fe79 	bl	80020cc <drv_buzzer_notone>
            buzzer_count_note += 2;
 80023da:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <bsp_tim4_handle+0x414>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	3302      	adds	r3, #2
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <bsp_tim4_handle+0x414>)
 80023e4:	801a      	strh	r2, [r3, #0]
            buzzer_count_duration = HAL_GetTick();
 80023e6:	f007 ffbb 	bl	800a360 <HAL_GetTick>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a42      	ldr	r2, [pc, #264]	; (80024f8 <bsp_tim4_handle+0x41c>)
 80023ee:	6013      	str	r3, [r2, #0]
        if (buzzer_count_note >= notes3 * 2)
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <bsp_tim4_handle+0x414>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <bsp_tim4_handle+0x420>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	429a      	cmp	r2, r3
 80023fe:	db6d      	blt.n	80024dc <bsp_tim4_handle+0x400>
            buzzer_count_note = 0;
 8002400:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <bsp_tim4_handle+0x414>)
 8002402:	2200      	movs	r2, #0
 8002404:	801a      	strh	r2, [r3, #0]
            drv_buzzer_off();
 8002406:	f7ff fe17 	bl	8002038 <drv_buzzer_off>
}
 800240a:	e067      	b.n	80024dc <bsp_tim4_handle+0x400>
    else if (buzzer_choose_music == Super_Mario)
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <bsp_tim4_handle+0x424>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d163      	bne.n	80024dc <bsp_tim4_handle+0x400>
        divider = melody4[buzzer_count_note + 1];
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <bsp_tim4_handle+0x414>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	4a3a      	ldr	r2, [pc, #232]	; (8002504 <bsp_tim4_handle+0x428>)
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <bsp_tim4_handle+0x404>)
 8002422:	6013      	str	r3, [r2, #0]
        if (divider > 0)
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <bsp_tim4_handle+0x404>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	dd08      	ble.n	800243e <bsp_tim4_handle+0x362>
            noteDuration = (wholenote4) / divider;
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <bsp_tim4_handle+0x42c>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <bsp_tim4_handle+0x404>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fb92 f3f3 	sdiv	r3, r2, r3
 8002438:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <bsp_tim4_handle+0x40c>)
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e021      	b.n	8002482 <bsp_tim4_handle+0x3a6>
        else if (divider < 0)
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <bsp_tim4_handle+0x404>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	da1d      	bge.n	8002482 <bsp_tim4_handle+0x3a6>
            noteDuration = (wholenote4) / abs(divider);
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <bsp_tim4_handle+0x42c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <bsp_tim4_handle+0x404>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	bfb8      	it	lt
 8002452:	425b      	neglt	r3, r3
 8002454:	fb92 f3f3 	sdiv	r3, r2, r3
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <bsp_tim4_handle+0x40c>)
 800245a:	6013      	str	r3, [r2, #0]
            noteDuration *= 1.5;  // increases the duration in half for dotted notes
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <bsp_tim4_handle+0x40c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe f877 	bl	8000554 <__aeabi_i2d>
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <bsp_tim4_handle+0x410>)
 800246c:	f7fe f8dc 	bl	8000628 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb70 	bl	8000b5c <__aeabi_d2iz>
 800247c:	4603      	mov	r3, r0
 800247e:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <bsp_tim4_handle+0x40c>)
 8002480:	6013      	str	r3, [r2, #0]
        drv_buzzer_make_tone(melody4[buzzer_count_note]);
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <bsp_tim4_handle+0x414>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <bsp_tim4_handle+0x428>)
 800248a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fdee 	bl	8002070 <drv_buzzer_make_tone>
        if (HAL_GetTick() - buzzer_count_duration >= noteDuration)
 8002494:	f007 ff64 	bl	800a360 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <bsp_tim4_handle+0x41c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <bsp_tim4_handle+0x40c>)
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d30c      	bcc.n	80024c2 <bsp_tim4_handle+0x3e6>
            drv_buzzer_notone();
 80024a8:	f7ff fe10 	bl	80020cc <drv_buzzer_notone>
            buzzer_count_note += 2;
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <bsp_tim4_handle+0x414>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	3302      	adds	r3, #2
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <bsp_tim4_handle+0x414>)
 80024b6:	801a      	strh	r2, [r3, #0]
            buzzer_count_duration = HAL_GetTick();
 80024b8:	f007 ff52 	bl	800a360 <HAL_GetTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <bsp_tim4_handle+0x41c>)
 80024c0:	6013      	str	r3, [r2, #0]
        if (buzzer_count_note >= notes4 * 2)
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <bsp_tim4_handle+0x414>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <bsp_tim4_handle+0x430>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	429a      	cmp	r2, r3
 80024d0:	db04      	blt.n	80024dc <bsp_tim4_handle+0x400>
            buzzer_count_note = 0;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <bsp_tim4_handle+0x414>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	801a      	strh	r2, [r3, #0]
            drv_buzzer_off();
 80024d8:	f7ff fdae 	bl	8002038 <drv_buzzer_off>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20003640 	.word	0x20003640
 80024e4:	20001168 	.word	0x20001168
 80024e8:	20003644 	.word	0x20003644
 80024ec:	3ff80000 	.word	0x3ff80000
 80024f0:	2000363a 	.word	0x2000363a
 80024f4:	20000130 	.word	0x20000130
 80024f8:	2000363c 	.word	0x2000363c
 80024fc:	20001158 	.word	0x20001158
 8002500:	20003638 	.word	0x20003638
 8002504:	20000748 	.word	0x20000748
 8002508:	2000116c 	.word	0x2000116c
 800250c:	2000115c 	.word	0x2000115c

08002510 <cjmcu75_init>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void cjmcu75_init(cjmcu75_t *cjmcu75)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    cjmcu75->device_address      = CJMCU75_ADDRESS_8BIT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2290      	movs	r2, #144	; 0x90
 800251c:	701a      	strb	r2, [r3, #0]
    cjmcu75->i2c_is_device_ready = bsp_i2c1_is_device_ready;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <cjmcu75_init+0x2c>)
 8002522:	605a      	str	r2, [r3, #4]
    cjmcu75->i2c_read_at         = bsp_i2c1_read_mem;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a06      	ldr	r2, [pc, #24]	; (8002540 <cjmcu75_init+0x30>)
 8002528:	609a      	str	r2, [r3, #8]
    cjmcu75->i2c_write_at        = bsp_i2c1_write_mem;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a05      	ldr	r2, [pc, #20]	; (8002544 <cjmcu75_init+0x34>)
 800252e:	60da      	str	r2, [r3, #12]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	0800160d 	.word	0x0800160d
 8002540:	08001699 	.word	0x08001699
 8002544:	0800163d 	.word	0x0800163d

08002548 <cjmcu75_get_temp>:
{
    return cjmcu75->i2c_is_device_ready(CJMCU75_ADDRESS_8BIT);
}

int8_t cjmcu75_get_temp(cjmcu75_t *cjmcu75)
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    uint8_t temp_reg[2];
    float   temp;

    cjmcu75->i2c_read_at(cjmcu75->device_address, CJMCU75_TEMP_REG, temp_reg, 2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689c      	ldr	r4, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7818      	ldrb	r0, [r3, #0]
 8002558:	f107 0208 	add.w	r2, r7, #8
 800255c:	2302      	movs	r3, #2
 800255e:	2100      	movs	r1, #0
 8002560:	47a0      	blx	r4

    uint16_t temp_reg_full = ((temp_reg[0] << 8) & 0xFF00) | (temp_reg[1] & 0x00FF);
 8002562:	7a3b      	ldrb	r3, [r7, #8]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	b21a      	sxth	r2, r3
 8002568:	7a7b      	ldrb	r3, [r7, #9]
 800256a:	b21b      	sxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b21b      	sxth	r3, r3
 8002570:	817b      	strh	r3, [r7, #10]

    // Check if the MSB bit is 1 (negative value)
    if (temp_reg_full & 0x8000)
 8002572:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002576:	2b00      	cmp	r3, #0
 8002578:	da2e      	bge.n	80025d8 <cjmcu75_get_temp+0x90>
    {
        temp_reg_full |= 0xF000;  // Sign extension
 800257a:	897b      	ldrh	r3, [r7, #10]
 800257c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002580:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002584:	817b      	strh	r3, [r7, #10]
        temp = (float) (temp_reg_full >> 8) - ((temp_reg_full >> 7) & 0x0001) * 0.5;
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	b29b      	uxth	r3, r3
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002594:	ee17 0a90 	vmov	r0, s15
 8002598:	f7fd ffee 	bl	8000578 <__aeabi_f2d>
 800259c:	4604      	mov	r4, r0
 800259e:	460d      	mov	r5, r1
 80025a0:	897b      	ldrh	r3, [r7, #10]
 80025a2:	09db      	lsrs	r3, r3, #7
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffd2 	bl	8000554 <__aeabi_i2d>
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <cjmcu75_get_temp+0xf8>)
 80025b6:	f7fe f837 	bl	8000628 <__aeabi_dmul>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	f7fd fe79 	bl	80002b8 <__aeabi_dsub>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe faed 	bl	8000bac <__aeabi_d2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e027      	b.n	8002628 <cjmcu75_get_temp+0xe0>
    }
    else
    {
        temp = (float) (temp_reg_full >> 8) + ((temp_reg_full >> 7) & 0x0001) * 0.5;
 80025d8:	897b      	ldrh	r3, [r7, #10]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b29b      	uxth	r3, r3
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e6:	ee17 0a90 	vmov	r0, s15
 80025ea:	f7fd ffc5 	bl	8000578 <__aeabi_f2d>
 80025ee:	4604      	mov	r4, r0
 80025f0:	460d      	mov	r5, r1
 80025f2:	897b      	ldrh	r3, [r7, #10]
 80025f4:	09db      	lsrs	r3, r3, #7
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ffa9 	bl	8000554 <__aeabi_i2d>
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <cjmcu75_get_temp+0xf8>)
 8002608:	f7fe f80e 	bl	8000628 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4620      	mov	r0, r4
 8002612:	4629      	mov	r1, r5
 8002614:	f7fd fe52 	bl	80002bc <__adddf3>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe fac4 	bl	8000bac <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
 8002626:	60fb      	str	r3, [r7, #12]
    }

    return (int8_t) temp;  // Return integer value
 8002628:	edd7 7a03 	vldr	s15, [r7, #12]
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	edc7 7a00 	vstr	s15, [r7]
 8002634:	783b      	ldrb	r3, [r7, #0]
 8002636:	b25b      	sxtb	r3, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bdb0      	pop	{r4, r5, r7, pc}
 8002640:	3fe00000 	.word	0x3fe00000

08002644 <str_to_bcd>:

    return str_buffer;
}

static uint8_t str_to_bcd(char *buffer)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    uint8_t byte_data;

    byte_data = ((buffer[0] - '0') << 4) | (buffer[1] - '0');
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	3b30      	subs	r3, #48	; 0x30
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	b25a      	sxtb	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3301      	adds	r3, #1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	3b30      	subs	r3, #48	; 0x30
 800265e:	b2db      	uxtb	r3, r3
 8002660:	b25b      	sxtb	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	b25b      	sxtb	r3, r3
 8002666:	73fb      	strb	r3, [r7, #15]

    return byte_data;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <bcd_to_byte>:

static uint8_t bcd_to_byte(uint8_t bcd)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
    uint8_t byte;

    byte = ((bcd >> 4) & 0x0F) * 10 + (bcd & 0x0F);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	4413      	add	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4413      	add	r3, r2
 800269a:	73fb      	strb	r3, [r7, #15]

    return byte;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <byte_to_bcd>:

static uint8_t byte_to_bcd(uint8_t byte)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
    uint8_t bcd;

    bcd = ((byte / 10) << 4 & 0x0F) | (byte % 10 & 0x0F);
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <byte_to_bcd+0x34>)
 80026ba:	fba3 1302 	umull	r1, r3, r3, r2
 80026be:	08d9      	lsrs	r1, r3, #3
 80026c0:	460b      	mov	r3, r1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	73fb      	strb	r3, [r7, #15]

    return bcd;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	cccccccd 	.word	0xcccccccd

080026e4 <calculate_day_of_week>:

uint8_t calculate_day_of_week(uint8_t day, uint8_t month, uint8_t year)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
 80026ee:	460b      	mov	r3, r1
 80026f0:	71bb      	strb	r3, [r7, #6]
 80026f2:	4613      	mov	r3, r2
 80026f4:	717b      	strb	r3, [r7, #5]
    if (month < 3)
 80026f6:	79bb      	ldrb	r3, [r7, #6]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d805      	bhi.n	8002708 <calculate_day_of_week+0x24>
    {
        month += 12;
 80026fc:	79bb      	ldrb	r3, [r7, #6]
 80026fe:	330c      	adds	r3, #12
 8002700:	71bb      	strb	r3, [r7, #6]
        year--;
 8002702:	797b      	ldrb	r3, [r7, #5]
 8002704:	3b01      	subs	r3, #1
 8002706:	717b      	strb	r3, [r7, #5]
    }

    uint16_t century         = year / 100;
 8002708:	797b      	ldrb	r3, [r7, #5]
 800270a:	4a22      	ldr	r2, [pc, #136]	; (8002794 <calculate_day_of_week+0xb0>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	b2db      	uxtb	r3, r3
 8002714:	81fb      	strh	r3, [r7, #14]
    uint16_t year_of_century = year % 100;
 8002716:	797b      	ldrb	r3, [r7, #5]
 8002718:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <calculate_day_of_week+0xb0>)
 800271a:	fba2 1203 	umull	r1, r2, r2, r3
 800271e:	0952      	lsrs	r2, r2, #5
 8002720:	2164      	movs	r1, #100	; 0x64
 8002722:	fb01 f202 	mul.w	r2, r1, r2
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	b2db      	uxtb	r3, r3
 800272a:	81bb      	strh	r3, [r7, #12]

    /* Zeller's Congruence */
    uint16_t day_of_week =
      (day + ((13 * (month + 1)) / 5) + year_of_century + (year_of_century / 4) + (century / 4) - (2 * century)) % 7;
 800272c:	79f9      	ldrb	r1, [r7, #7]
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <calculate_day_of_week+0xb4>)
 800273e:	fb82 0203 	smull	r0, r2, r2, r3
 8002742:	1052      	asrs	r2, r2, #1
 8002744:	17db      	asrs	r3, r3, #31
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	18ca      	adds	r2, r1, r3
 800274a:	89bb      	ldrh	r3, [r7, #12]
 800274c:	4413      	add	r3, r2
 800274e:	89ba      	ldrh	r2, [r7, #12]
 8002750:	0892      	lsrs	r2, r2, #2
 8002752:	b292      	uxth	r2, r2
 8002754:	4413      	add	r3, r2
 8002756:	89fa      	ldrh	r2, [r7, #14]
 8002758:	0892      	lsrs	r2, r2, #2
 800275a:	b292      	uxth	r2, r2
 800275c:	441a      	add	r2, r3
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	1ad2      	subs	r2, r2, r3
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <calculate_day_of_week+0xb8>)
 8002766:	fb83 1302 	smull	r1, r3, r3, r2
 800276a:	4413      	add	r3, r2
 800276c:	1099      	asrs	r1, r3, #2
 800276e:	17d3      	asrs	r3, r2, #31
 8002770:	1ac9      	subs	r1, r1, r3
 8002772:	460b      	mov	r3, r1
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a5b      	subs	r3, r3, r1
 8002778:	1ad1      	subs	r1, r2, r3
    uint16_t day_of_week =
 800277a:	460b      	mov	r3, r1
 800277c:	817b      	strh	r3, [r7, #10]
    if (day_of_week < 0)
    {
        day_of_week += 7;
    }

    return day_of_week + 1;
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	b2db      	uxtb	r3, r3
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	51eb851f 	.word	0x51eb851f
 8002798:	66666667 	.word	0x66666667
 800279c:	92492493 	.word	0x92492493

080027a0 <ds1307_set_day_of_month>:

bool ds1307_set_day_of_month(ds1307_t *ds1307, char *buffer)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    uint8_t data = str_to_bcd(buffer) & DS1307_MASK_DAY_OF_MONTH;
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	f7ff ff4a 	bl	8002644 <str_to_bcd>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	73fb      	strb	r3, [r7, #15]

    ds1307->i2c_write_at(ds1307->device_address, DS1307_REGISTER_DAY_OF_MONTH, &data, 1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691c      	ldr	r4, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	79d8      	ldrb	r0, [r3, #7]
 80027c2:	f107 020f 	add.w	r2, r7, #15
 80027c6:	2301      	movs	r3, #1
 80027c8:	2104      	movs	r1, #4
 80027ca:	47a0      	blx	r4

    return true;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}

080027d6 <ds1307_set_month>:

    return true;
}

bool ds1307_set_month(ds1307_t *ds1307, char *buffer)
{
 80027d6:	b590      	push	{r4, r7, lr}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
    uint8_t data = str_to_bcd(buffer) & DS1307_MASK_MONTH;
 80027e0:	6838      	ldr	r0, [r7, #0]
 80027e2:	f7ff ff2f 	bl	8002644 <str_to_bcd>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	73fb      	strb	r3, [r7, #15]

    ds1307->i2c_write_at(ds1307->device_address, DS1307_REGISTER_MONTH, &data, 1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691c      	ldr	r4, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	79d8      	ldrb	r0, [r3, #7]
 80027f8:	f107 020f 	add.w	r2, r7, #15
 80027fc:	2301      	movs	r3, #1
 80027fe:	2105      	movs	r1, #5
 8002800:	47a0      	blx	r4

    return true;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}

0800280c <ds1307_set_year>:

bool ds1307_set_year(ds1307_t *ds1307, char *buffer)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
    uint8_t data = str_to_bcd(buffer) & DS1307_MASK_YEAR;
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f7ff ff14 	bl	8002644 <str_to_bcd>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]

    ds1307->i2c_write_at(ds1307->device_address, DS1307_REGISTER_YEAR, &data, 1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691c      	ldr	r4, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	79d8      	ldrb	r0, [r3, #7]
 8002828:	f107 020f 	add.w	r2, r7, #15
 800282c:	2301      	movs	r3, #1
 800282e:	2106      	movs	r1, #6
 8002830:	47a0      	blx	r4

    return true;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}

0800283c <ds1307_set_sec>:

bool ds1307_set_sec(ds1307_t *ds1307, char *buffer)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
    /* Check if sec is invalid */
    if (buffer[0] > '5' || (buffer[0] <= '5' && buffer[1] > '9'))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b35      	cmp	r3, #53	; 0x35
 800284c:	d808      	bhi.n	8002860 <ds1307_set_sec+0x24>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b35      	cmp	r3, #53	; 0x35
 8002854:	d806      	bhi.n	8002864 <ds1307_set_sec+0x28>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b39      	cmp	r3, #57	; 0x39
 800285e:	d901      	bls.n	8002864 <ds1307_set_sec+0x28>
        return false;
 8002860:	2300      	movs	r3, #0
 8002862:	e011      	b.n	8002888 <ds1307_set_sec+0x4c>

    uint8_t data = str_to_bcd(buffer) & DS1307_MASK_SECOND;
 8002864:	6838      	ldr	r0, [r7, #0]
 8002866:	f7ff feed 	bl	8002644 <str_to_bcd>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002870:	b2db      	uxtb	r3, r3
 8002872:	73fb      	strb	r3, [r7, #15]

    ds1307->i2c_write_at(ds1307->device_address, DS1307_REGISTER_SECOND, &data, 1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691c      	ldr	r4, [r3, #16]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	79d8      	ldrb	r0, [r3, #7]
 800287c:	f107 020f 	add.w	r2, r7, #15
 8002880:	2301      	movs	r3, #1
 8002882:	2100      	movs	r1, #0
 8002884:	47a0      	blx	r4

    return true;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	bd90      	pop	{r4, r7, pc}

08002890 <ds1307_set_min>:

bool ds1307_set_min(ds1307_t *ds1307, char *buffer)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
    /* Check if min is invalid */
    if (buffer[0] > '5' || (buffer[0] <= '5' && buffer[1] > '9'))
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b35      	cmp	r3, #53	; 0x35
 80028a0:	d808      	bhi.n	80028b4 <ds1307_set_min+0x24>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b35      	cmp	r3, #53	; 0x35
 80028a8:	d806      	bhi.n	80028b8 <ds1307_set_min+0x28>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b39      	cmp	r3, #57	; 0x39
 80028b2:	d901      	bls.n	80028b8 <ds1307_set_min+0x28>
        return false;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e011      	b.n	80028dc <ds1307_set_min+0x4c>

    uint8_t data = str_to_bcd(buffer) & DS1307_MASK_MINUTE;
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	f7ff fec3 	bl	8002644 <str_to_bcd>
 80028be:	4603      	mov	r3, r0
 80028c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	73fb      	strb	r3, [r7, #15]

    ds1307->i2c_write_at(ds1307->device_address, DS1307_REGISTER_MINUTE, &data, 1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691c      	ldr	r4, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	79d8      	ldrb	r0, [r3, #7]
 80028d0:	f107 020f 	add.w	r2, r7, #15
 80028d4:	2301      	movs	r3, #1
 80028d6:	2101      	movs	r1, #1
 80028d8:	47a0      	blx	r4

    return true;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <ds1307_set_hour_24h>:

bool ds1307_set_hour_24h(ds1307_t *ds1307, char *buffer)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
    /* Check if hour is invalid */
    if (buffer[0] > '2' || (buffer[0] == '2' && buffer[1] > '3'))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b32      	cmp	r3, #50	; 0x32
 80028f4:	d808      	bhi.n	8002908 <ds1307_set_hour_24h+0x24>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b32      	cmp	r3, #50	; 0x32
 80028fc:	d106      	bne.n	800290c <ds1307_set_hour_24h+0x28>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b33      	cmp	r3, #51	; 0x33
 8002906:	d901      	bls.n	800290c <ds1307_set_hour_24h+0x28>
        return false;
 8002908:	2300      	movs	r3, #0
 800290a:	e011      	b.n	8002930 <ds1307_set_hour_24h+0x4c>

    uint8_t data = str_to_bcd(buffer) & DS1307_MASK_HOUR;
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	f7ff fe99 	bl	8002644 <str_to_bcd>
 8002912:	4603      	mov	r3, r0
 8002914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002918:	b2db      	uxtb	r3, r3
 800291a:	73fb      	strb	r3, [r7, #15]

    ds1307->i2c_write_at(ds1307->device_address, DS1307_REGISTER_HOUR, &data, 1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691c      	ldr	r4, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	79d8      	ldrb	r0, [r3, #7]
 8002924:	f107 020f 	add.w	r2, r7, #15
 8002928:	2301      	movs	r3, #1
 800292a:	2102      	movs	r1, #2
 800292c:	47a0      	blx	r4

    return true;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}

08002938 <ds1307_get_time>:

    return true;
}

rtc_t *ds1307_get_time(ds1307_t *ds1307)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    rtc_reg_t rtc_reg;

    ds1307->i2c_read_at(ds1307->device_address, DS1307_REGISTER_SECOND, (uint8_t *) &(rtc_reg.second_reg),
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68dc      	ldr	r4, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	79d8      	ldrb	r0, [r3, #7]
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	1d9a      	adds	r2, r3, #6
 800294e:	2301      	movs	r3, #1
 8002950:	2100      	movs	r1, #0
 8002952:	47a0      	blx	r4
                        sizeof(rtc_reg.second_reg));

    ds1307->i2c_read_at(ds1307->device_address, DS1307_REGISTER_MINUTE, (uint8_t *) &(rtc_reg.minute_reg),
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68dc      	ldr	r4, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	79d8      	ldrb	r0, [r3, #7]
 800295c:	f107 0308 	add.w	r3, r7, #8
 8002960:	1d5a      	adds	r2, r3, #5
 8002962:	2301      	movs	r3, #1
 8002964:	2101      	movs	r1, #1
 8002966:	47a0      	blx	r4
                        sizeof(rtc_reg.minute_reg));

    ds1307->i2c_read_at(ds1307->device_address, DS1307_REGISTER_HOUR, (uint8_t *) &(rtc_reg.hour_reg), sizeof(rtc_reg.hour_reg));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68dc      	ldr	r4, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	79d8      	ldrb	r0, [r3, #7]
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	1d1a      	adds	r2, r3, #4
 8002976:	2301      	movs	r3, #1
 8002978:	2102      	movs	r1, #2
 800297a:	47a0      	blx	r4

    ds1307->i2c_read_at(ds1307->device_address, DS1307_REGISTER_DAY_OF_WEEK, (uint8_t *) &(rtc_reg.day_of_week_reg),
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68dc      	ldr	r4, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	79d8      	ldrb	r0, [r3, #7]
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	1cda      	adds	r2, r3, #3
 800298a:	2301      	movs	r3, #1
 800298c:	2103      	movs	r1, #3
 800298e:	47a0      	blx	r4
                        sizeof(rtc_reg.day_of_week_reg));

    ds1307->i2c_read_at(ds1307->device_address, DS1307_REGISTER_DAY_OF_MONTH, (uint8_t *) &(rtc_reg.day_of_month_reg),
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68dc      	ldr	r4, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	79d8      	ldrb	r0, [r3, #7]
 8002998:	f107 0308 	add.w	r3, r7, #8
 800299c:	1c9a      	adds	r2, r3, #2
 800299e:	2301      	movs	r3, #1
 80029a0:	2104      	movs	r1, #4
 80029a2:	47a0      	blx	r4
                        sizeof(rtc_reg.day_of_month_reg));

    ds1307->i2c_read_at(ds1307->device_address, DS1307_REGISTER_MONTH, (uint8_t *) &(rtc_reg.month_reg),
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68dc      	ldr	r4, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	79d8      	ldrb	r0, [r3, #7]
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	2301      	movs	r3, #1
 80029b4:	2105      	movs	r1, #5
 80029b6:	47a0      	blx	r4
                        sizeof(rtc_reg.month_reg));

    ds1307->i2c_read_at(ds1307->device_address, DS1307_REGISTER_YEAR, (uint8_t *) &(rtc_reg.year_reg), sizeof(rtc_reg.year_reg));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68dc      	ldr	r4, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	79d8      	ldrb	r0, [r3, #7]
 80029c0:	f107 0208 	add.w	r2, r7, #8
 80029c4:	2301      	movs	r3, #1
 80029c6:	2106      	movs	r1, #6
 80029c8:	47a0      	blx	r4

    /* Only keep bits have correct information */
    ds1307->rtc.second       = bcd_to_byte(rtc_reg.second_reg & DS1307_MASK_SECOND);
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe4f 	bl	8002676 <bcd_to_byte>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	719a      	strb	r2, [r3, #6]
    ds1307->rtc.minute       = bcd_to_byte(rtc_reg.minute_reg & DS1307_MASK_MINUTE);
 80029e0:	7b7b      	ldrb	r3, [r7, #13]
 80029e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fe44 	bl	8002676 <bcd_to_byte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	715a      	strb	r2, [r3, #5]
    ds1307->rtc.hour         = bcd_to_byte(rtc_reg.hour_reg & DS1307_MASK_HOUR);
 80029f6:	7b3b      	ldrb	r3, [r7, #12]
 80029f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fe39 	bl	8002676 <bcd_to_byte>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	711a      	strb	r2, [r3, #4]
    ds1307->rtc.day_of_week  = bcd_to_byte(rtc_reg.day_of_week_reg & DS1307_MASK_DAY_OF_WEEK);
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe2e 	bl	8002676 <bcd_to_byte>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	70da      	strb	r2, [r3, #3]
    ds1307->rtc.day_of_month = bcd_to_byte(rtc_reg.day_of_month_reg & DS1307_MASK_DAY_OF_MONTH);
 8002a22:	7abb      	ldrb	r3, [r7, #10]
 8002a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fe23 	bl	8002676 <bcd_to_byte>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	709a      	strb	r2, [r3, #2]
    ds1307->rtc.month        = bcd_to_byte(rtc_reg.month_reg & DS1307_MASK_MONTH);
 8002a38:	7a7b      	ldrb	r3, [r7, #9]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe18 	bl	8002676 <bcd_to_byte>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	705a      	strb	r2, [r3, #1]
    ds1307->rtc.year         = bcd_to_byte(rtc_reg.year_reg & DS1307_MASK_YEAR);
 8002a4e:	7a3b      	ldrb	r3, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe10 	bl	8002676 <bcd_to_byte>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	701a      	strb	r2, [r3, #0]

    // Return ds1307->rtc
    return &ds1307->rtc;
 8002a5e:	687b      	ldr	r3, [r7, #4]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}

08002a68 <ds1307_set_time>:

bool ds1307_set_time(ds1307_t *ds1307, char *buffer)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
    /* YYYY-MM-DD HH:MM:SS */
    /* Set year, month, day*/
    ds1307_set_year(ds1307, &buffer[2]);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3302      	adds	r3, #2
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fec7 	bl	800280c <ds1307_set_year>
    ds1307_set_month(ds1307, &buffer[5]);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	3305      	adds	r3, #5
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fea6 	bl	80027d6 <ds1307_set_month>
    ds1307_set_day_of_month(ds1307, &buffer[8]);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fe85 	bl	80027a0 <ds1307_set_day_of_month>

    ds1307_get_time(ds1307);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff4e 	bl	8002938 <ds1307_get_time>

    /* Calculate day of week */
    uint16_t year = (*(buffer) - '0') * 1000 + (*(buffer + 1) - '0') * 100 + (*(buffer + 2) - '0') * 10 + (*(buffer + 3) - '0');
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	3b30      	subs	r3, #48	; 0x30
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	0152      	lsls	r2, r2, #5
 8002aa8:	1ad2      	subs	r2, r2, r3
 8002aaa:	0092      	lsls	r2, r2, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3b30      	subs	r3, #48	; 0x30
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	0089      	lsls	r1, r1, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	0088      	lsls	r0, r1, #2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4603      	mov	r3, r0
 8002aca:	440b      	add	r3, r1
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	3b30      	subs	r3, #48	; 0x30
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	4619      	mov	r1, r3
 8002ae0:	0089      	lsls	r1, r1, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	3303      	adds	r3, #3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b30      	subs	r3, #48	; 0x30
 8002afa:	81fb      	strh	r3, [r7, #14]
    uint8_t  day_of_week = calculate_day_of_week(ds1307->rtc.day_of_month, ds1307->rtc.month, year);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7898      	ldrb	r0, [r3, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	89fa      	ldrh	r2, [r7, #14]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7ff fdeb 	bl	80026e4 <calculate_day_of_week>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	737b      	strb	r3, [r7, #13]
    uint8_t  data        = byte_to_bcd(day_of_week) & DS1307_MASK_DAY_OF_WEEK;
 8002b12:	7b7b      	ldrb	r3, [r7, #13]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fdc9 	bl	80026ac <byte_to_bcd>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	733b      	strb	r3, [r7, #12]
    ds1307->i2c_write_at(ds1307->device_address, DS1307_REGISTER_DAY_OF_WEEK, &data, 1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691c      	ldr	r4, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	79d8      	ldrb	r0, [r3, #7]
 8002b2c:	f107 020c 	add.w	r2, r7, #12
 8002b30:	2301      	movs	r3, #1
 8002b32:	2103      	movs	r1, #3
 8002b34:	47a0      	blx	r4

    ds1307_set_hour_24h(ds1307, &buffer[11]);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	330b      	adds	r3, #11
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff fed1 	bl	80028e4 <ds1307_set_hour_24h>
    ds1307_set_min(ds1307, &buffer[14]);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	330e      	adds	r3, #14
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fea1 	bl	8002890 <ds1307_set_min>
    ds1307_set_sec(ds1307, &buffer[17]);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	3311      	adds	r3, #17
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fe71 	bl	800283c <ds1307_set_sec>
    return true;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <ds1307_init>:

void ds1307_init(ds1307_t *ds1307)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    ds1307->device_address      = DS1307_ADDRESS_8BIT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	22d0      	movs	r2, #208	; 0xd0
 8002b70:	71da      	strb	r2, [r3, #7]
    ds1307->i2c_is_device_ready = bsp_i2c1_is_device_ready;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <ds1307_init+0x2c>)
 8002b76:	609a      	str	r2, [r3, #8]
    ds1307->i2c_read_at         = bsp_i2c1_read_mem;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <ds1307_init+0x30>)
 8002b7c:	60da      	str	r2, [r3, #12]
    ds1307->i2c_write_at        = bsp_i2c1_write_mem;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <ds1307_init+0x34>)
 8002b82:	611a      	str	r2, [r3, #16]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	0800160d 	.word	0x0800160d
 8002b94:	08001699 	.word	0x08001699
 8002b98:	0800163d 	.word	0x0800163d

08002b9c <ds1307_convert_to_epoch_time>:

/* Default mode 24h */
void ds1307_convert_to_epoch_time(rtc_t rtc, uint32_t *epoch_time)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08e      	sub	sp, #56	; 0x38
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002baa:	607a      	str	r2, [r7, #4]
    struct tm time_date;
    memset((void *) &time_date, 0, sizeof(time_date));
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2224      	movs	r2, #36	; 0x24
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f00e f9f1 	bl	8010f9c <memset>

    time_date.tm_min  = rtc.minute;
 8002bba:	7b7b      	ldrb	r3, [r7, #13]
 8002bbc:	61bb      	str	r3, [r7, #24]
    time_date.tm_sec  = rtc.second;
 8002bbe:	7bbb      	ldrb	r3, [r7, #14]
 8002bc0:	617b      	str	r3, [r7, #20]
    time_date.tm_hour = rtc.hour;
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	61fb      	str	r3, [r7, #28]
    time_date.tm_mday = rtc.day_of_month;
 8002bc6:	7abb      	ldrb	r3, [r7, #10]
 8002bc8:	623b      	str	r3, [r7, #32]
    time_date.tm_mon  = rtc.month - 1;
 8002bca:	7a7b      	ldrb	r3, [r7, #9]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    time_date.tm_year = (2000 + rtc.year) - 1900;
 8002bd0:	7a3b      	ldrb	r3, [r7, #8]
 8002bd2:	3364      	adds	r3, #100	; 0x64
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    *epoch_time       = mktime(&time_date);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00e fabe 	bl	801115c <mktime>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	3738      	adds	r7, #56	; 0x38
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <ds1307_convert_to_date_time>:

void ds1307_convert_to_date_time(rtc_t *rtc, uint32_t epoch_time)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
    struct tm *_time;
    time_t     epoch_time_c = epoch_time;
 8002bfa:	6839      	ldr	r1, [r7, #0]
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	460a      	mov	r2, r1
 8002c00:	4603      	mov	r3, r0
 8002c02:	e9c7 2302 	strd	r2, r3, [r7, #8]
    _time                   = localtime(&epoch_time_c);
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f00e f896 	bl	8010d3c <localtime>
 8002c10:	6178      	str	r0, [r7, #20]
    _time->tm_year += 1900;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	615a      	str	r2, [r3, #20]

    rtc->year         = _time->tm_year % 100;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <ds1307_convert_to_date_time+0x94>)
 8002c24:	fb82 1203 	smull	r1, r2, r2, r3
 8002c28:	1151      	asrs	r1, r2, #5
 8002c2a:	17da      	asrs	r2, r3, #31
 8002c2c:	1a8a      	subs	r2, r1, r2
 8002c2e:	2164      	movs	r1, #100	; 0x64
 8002c30:	fb01 f202 	mul.w	r2, r1, r2
 8002c34:	1a9a      	subs	r2, r3, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	701a      	strb	r2, [r3, #0]
    rtc->month        = _time->tm_mon + 1;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	705a      	strb	r2, [r3, #1]
    rtc->day_of_month = _time->tm_mday;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	709a      	strb	r2, [r3, #2]
    rtc->hour         = _time->tm_hour;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	711a      	strb	r2, [r3, #4]
    rtc->minute       = _time->tm_min;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	715a      	strb	r2, [r3, #5]
    rtc->second       = _time->tm_sec;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	719a      	strb	r2, [r3, #6]
    rtc->day_of_week  = _time->tm_wday;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	70da      	strb	r2, [r3, #3]
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	51eb851f 	.word	0x51eb851f

08002c88 <drv_led_init>:
static bool     flag_to_blink    = false;
static bool     flag_to_fifo     = false;
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void drv_led_init()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	bsp_tim_set_prescale(&htim3, LED_PRESCALE);
 8002c8c:	2163      	movs	r1, #99	; 0x63
 8002c8e:	4807      	ldr	r0, [pc, #28]	; (8002cac <drv_led_init+0x24>)
 8002c90:	f7fe ff09 	bl	8001aa6 <bsp_tim_set_prescale>
	bsp_tim_set_autoreload(&htim3, LED_AUTORELOAD);
 8002c94:	f240 31e7 	movw	r1, #999	; 0x3e7
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <drv_led_init+0x24>)
 8002c9a:	f7fe ff13 	bl	8001ac4 <bsp_tim_set_autoreload>
    bsp_tim3_start_tim_it();
 8002c9e:	f7fe fe15 	bl	80018cc <bsp_tim3_start_tim_it>
    bsp_tim3_pwm_start();
 8002ca2:	f7fe fe23 	bl	80018ec <bsp_tim3_pwm_start>
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20003b70 	.word	0x20003b70

08002cb0 <drv_led_off>:

void drv_led_off()
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
    uint16_t buffer_color[3] = { 0, 0, 0 };
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	803b      	strh	r3, [r7, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	807b      	strh	r3, [r7, #2]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	80bb      	strh	r3, [r7, #4]
    drv_led_set_color(buffer_color);
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f80f 	bl	8002ce8 <drv_led_set_color>
    flag_to_blink = false;
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <drv_led_off+0x30>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
    flag_to_fifo = false ;
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <drv_led_off+0x34>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20003657 	.word	0x20003657
 8002ce4:	20003658 	.word	0x20003658

08002ce8 <drv_led_set_color>:

void drv_led_set_color(uint16_t *buffer_color)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    // counter period = 1000-1
    // convert value of buffer_color to the correct ratio of counter period
    uint16_t pwm_ch1 = (buffer_color[0] * 1000) / 255;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <drv_led_set_color+0x8c>)
 8002d00:	fb82 1203 	smull	r1, r2, r2, r3
 8002d04:	441a      	add	r2, r3
 8002d06:	11d2      	asrs	r2, r2, #7
 8002d08:	17db      	asrs	r3, r3, #31
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	81fb      	strh	r3, [r7, #14]
    uint16_t pwm_ch2 = (buffer_color[1] * 1000) / 255;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3302      	adds	r3, #2
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <drv_led_set_color+0x8c>)
 8002d20:	fb82 1203 	smull	r1, r2, r2, r3
 8002d24:	441a      	add	r2, r3
 8002d26:	11d2      	asrs	r2, r2, #7
 8002d28:	17db      	asrs	r3, r3, #31
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	81bb      	strh	r3, [r7, #12]
    uint16_t pwm_ch3 = (buffer_color[2] * 1000) / 255;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <drv_led_set_color+0x8c>)
 8002d40:	fb82 1203 	smull	r1, r2, r2, r3
 8002d44:	441a      	add	r2, r3
 8002d46:	11d2      	asrs	r2, r2, #7
 8002d48:	17db      	asrs	r3, r3, #31
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	817b      	strh	r3, [r7, #10]

    bsp_tim3_pwm_set_compare(RED_CHANNEL, pwm_ch1);
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
 8002d50:	4619      	mov	r1, r3
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fde8 	bl	8001928 <bsp_tim3_pwm_set_compare>
    bsp_tim3_pwm_set_compare(GREEN_CHANNEL, pwm_ch2);
 8002d58:	89bb      	ldrh	r3, [r7, #12]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	2004      	movs	r0, #4
 8002d5e:	f7fe fde3 	bl	8001928 <bsp_tim3_pwm_set_compare>
    bsp_tim3_pwm_set_compare(BLUE_CHANNEL, pwm_ch3);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	4619      	mov	r1, r3
 8002d66:	2008      	movs	r0, #8
 8002d68:	f7fe fdde 	bl	8001928 <bsp_tim3_pwm_set_compare>
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	80808081 	.word	0x80808081

08002d78 <drv_led_blink_color>:

void drv_led_blink_color(uint16_t *buffer_color)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
    flag_to_blink = true;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <drv_led_blink_color+0x20>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
    memcpy(color_blink, buffer_color, sizeof(color_blink));
 8002d86:	2206      	movs	r2, #6
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4804      	ldr	r0, [pc, #16]	; (8002d9c <drv_led_blink_color+0x24>)
 8002d8c:	f00e f8f8 	bl	8010f80 <memcpy>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20003657 	.word	0x20003657
 8002d9c:	20003648 	.word	0x20003648

08002da0 <drv_led_fade_in_fade_out>:

void drv_led_fade_in_fade_out()
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
    flag_to_fifo = true;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <drv_led_fade_in_fade_out+0x14>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	20003658 	.word	0x20003658

08002db8 <bsp_tim3_handle>:

void bsp_tim3_handle()
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
    // blink led rgb
    if ((color_blink[0] != 0 || color_blink[1] != 0 || color_blink[2] != 0) && flag_to_blink == true)
 8002dbe:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <bsp_tim3_handle+0x19c>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <bsp_tim3_handle+0x1e>
 8002dc6:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <bsp_tim3_handle+0x19c>)
 8002dc8:	885b      	ldrh	r3, [r3, #2]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <bsp_tim3_handle+0x1e>
 8002dce:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <bsp_tim3_handle+0x19c>)
 8002dd0:	889b      	ldrh	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d029      	beq.n	8002e2a <bsp_tim3_handle+0x72>
 8002dd6:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <bsp_tim3_handle+0x1a0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d025      	beq.n	8002e2a <bsp_tim3_handle+0x72>
    {
        count_blink++;
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <bsp_tim3_handle+0x1a4>)
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <bsp_tim3_handle+0x1a4>)
 8002de8:	801a      	strh	r2, [r3, #0]
        if (count_blink == 1000 - 1)
 8002dea:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <bsp_tim3_handle+0x1a4>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d106      	bne.n	8002e04 <bsp_tim3_handle+0x4c>
        {
            drv_led_set_color(color_blink);
 8002df6:	4857      	ldr	r0, [pc, #348]	; (8002f54 <bsp_tim3_handle+0x19c>)
 8002df8:	f7ff ff76 	bl	8002ce8 <drv_led_set_color>
            count_blink = 0;
 8002dfc:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <bsp_tim3_handle+0x1a4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	801a      	strh	r2, [r3, #0]
        if (count_blink == 1000 - 1)
 8002e02:	e0a2      	b.n	8002f4a <bsp_tim3_handle+0x192>
        }
        else if (count_blink == 500 - 1)
 8002e04:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <bsp_tim3_handle+0x1a4>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	f040 809c 	bne.w	8002f4a <bsp_tim3_handle+0x192>
        {
            uint16_t buffer_color[3] = { 0, 0, 0 };
 8002e12:	2300      	movs	r3, #0
 8002e14:	813b      	strh	r3, [r7, #8]
 8002e16:	2300      	movs	r3, #0
 8002e18:	817b      	strh	r3, [r7, #10]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	81bb      	strh	r3, [r7, #12]
            drv_led_set_color(buffer_color);
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff60 	bl	8002ce8 <drv_led_set_color>
        if (count_blink == 1000 - 1)
 8002e28:	e08f      	b.n	8002f4a <bsp_tim3_handle+0x192>
        }
    }
    // enable fade in fade out mode for led rgb
    else if (flag_to_fifo == true)
 8002e2a:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <bsp_tim3_handle+0x1a8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 808c 	beq.w	8002f4c <bsp_tim3_handle+0x194>
    {
        count_fifo++;
 8002e34:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <bsp_tim3_handle+0x1ac>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <bsp_tim3_handle+0x1ac>)
 8002e3e:	801a      	strh	r2, [r3, #0]

        // delay 9 ms for each level of pwm
        if (count_fifo == 9)
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <bsp_tim3_handle+0x1ac>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b09      	cmp	r3, #9
 8002e46:	f040 8081 	bne.w	8002f4c <bsp_tim3_handle+0x194>
        {
            uint16_t color_pwm_ch[3];
            color_pwm_ch[0] = count_fifo_pwm * color_table[count_fifo_color][0] / 1000;
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <bsp_tim3_handle+0x1b4>)
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	4a46      	ldr	r2, [pc, #280]	; (8002f70 <bsp_tim3_handle+0x1b8>)
 8002e58:	460b      	mov	r3, r1
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	440b      	add	r3, r1
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	4a43      	ldr	r2, [pc, #268]	; (8002f74 <bsp_tim3_handle+0x1bc>)
 8002e68:	fb82 1203 	smull	r1, r2, r2, r3
 8002e6c:	1192      	asrs	r2, r2, #6
 8002e6e:	17db      	asrs	r3, r3, #31
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	803b      	strh	r3, [r7, #0]
            color_pwm_ch[1] = count_fifo_pwm * color_table[count_fifo_color][1] / 1000;
 8002e76:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <bsp_tim3_handle+0x1b4>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	4a3b      	ldr	r2, [pc, #236]	; (8002f70 <bsp_tim3_handle+0x1b8>)
 8002e84:	460b      	mov	r3, r1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	440b      	add	r3, r1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	fb00 f303 	mul.w	r3, r0, r3
 8002e94:	4a37      	ldr	r2, [pc, #220]	; (8002f74 <bsp_tim3_handle+0x1bc>)
 8002e96:	fb82 1203 	smull	r1, r2, r2, r3
 8002e9a:	1192      	asrs	r2, r2, #6
 8002e9c:	17db      	asrs	r3, r3, #31
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	807b      	strh	r3, [r7, #2]
            color_pwm_ch[2] = count_fifo_pwm * color_table[count_fifo_color][2] / 1000;
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <bsp_tim3_handle+0x1b4>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <bsp_tim3_handle+0x1b8>)
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	440b      	add	r3, r1
 8002eb8:	4413      	add	r3, r2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	fb00 f303 	mul.w	r3, r0, r3
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <bsp_tim3_handle+0x1bc>)
 8002ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec8:	1192      	asrs	r2, r2, #6
 8002eca:	17db      	asrs	r3, r3, #31
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	80bb      	strh	r3, [r7, #4]

            drv_led_set_color(color_pwm_ch);
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff07 	bl	8002ce8 <drv_led_set_color>

            // fade in mode
            if (fade_in_fade_out == false)
 8002eda:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <bsp_tim3_handle+0x1c0>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f083 0301 	eor.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00f      	beq.n	8002f08 <bsp_tim3_handle+0x150>
            {
                count_fifo_pwm += 2;
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	3302      	adds	r3, #2
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002ef2:	801a      	strh	r2, [r3, #0]

                if (count_fifo_pwm >= 999)
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d920      	bls.n	8002f42 <bsp_tim3_handle+0x18a>
                {
                    fade_in_fade_out = true;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <bsp_tim3_handle+0x1c0>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e01c      	b.n	8002f42 <bsp_tim3_handle+0x18a>
                }
            }
            // fade out mode
            else if (fade_in_fade_out == true)
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <bsp_tim3_handle+0x1c0>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d018      	beq.n	8002f42 <bsp_tim3_handle+0x18a>
            {
                count_fifo_pwm -= 2;
 8002f10:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	3b02      	subs	r3, #2
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002f1a:	801a      	strh	r2, [r3, #0]

                if (count_fifo_pwm == 0)
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <bsp_tim3_handle+0x1b0>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <bsp_tim3_handle+0x18a>
                {
                	// back to fade in but next color
                    fade_in_fade_out = false;
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <bsp_tim3_handle+0x1c0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
                    // check whether it reach last color in table color
                    count_fifo_color = (count_fifo_color == NUMBER_COLOR_FIFO -1 ) ? 0 : count_fifo_color + 1;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <bsp_tim3_handle+0x1b4>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d004      	beq.n	8002f3c <bsp_tim3_handle+0x184>
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <bsp_tim3_handle+0x1b4>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	e000      	b.n	8002f3e <bsp_tim3_handle+0x186>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <bsp_tim3_handle+0x1b4>)
 8002f40:	8013      	strh	r3, [r2, #0]
                }
            }

            // reset delay time
            count_fifo = 0;
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <bsp_tim3_handle+0x1ac>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002f48:	e000      	b.n	8002f4c <bsp_tim3_handle+0x194>
        if (count_blink == 1000 - 1)
 8002f4a:	bf00      	nop
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20003648 	.word	0x20003648
 8002f58:	20003657 	.word	0x20003657
 8002f5c:	2000364e 	.word	0x2000364e
 8002f60:	20003658 	.word	0x20003658
 8002f64:	20003650 	.word	0x20003650
 8002f68:	20003654 	.word	0x20003654
 8002f6c:	20003652 	.word	0x20003652
 8002f70:	20001174 	.word	0x20001174
 8002f74:	10624dd3 	.word	0x10624dd3
 8002f78:	20003656 	.word	0x20003656

08002f7c <drv_ssd1306_write_command>:
                                                   drv_ssd1306_color_t color);

/* Function definitions ----------------------------------------------- */

static drv_ssd1306_err_t drv_ssd1306_write_command(drv_ssd1306_config_t *drv_ssd1306, uint8_t data_write)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
    DRV_SSD1306_CHECK_ERROR(
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68dc      	ldr	r4, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7818      	ldrb	r0, [r3, #0]
 8002f90:	1cfa      	adds	r2, r7, #3
 8002f92:	2301      	movs	r3, #1
 8002f94:	2100      	movs	r1, #0
 8002f96:	47a0      	blx	r4
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <drv_ssd1306_write_command+0x2c>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <drv_ssd1306_write_command+0x2e>
      (drv_ssd1306->i2c_write_at(drv_ssd1306->device_address, DRV_SSD1306_REG_COMMAND, &data_write, 1) == true),
      DRV_SSD1306_ERROR);
    return DRV_SSD1306_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}

08002fb2 <drv_ssd1306_is_ready>:
      (drv_ssd1306->i2c_write_at(drv_ssd1306->device_address, DRV_SSD1306_REG_DATA, &data_write, 1) == true), DRV_SSD1306_ERROR);
    return DRV_SSD1306_OK;
}

static drv_ssd1306_err_t drv_ssd1306_is_ready(drv_ssd1306_config_t *drv_ssd1306)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
    DRV_SSD1306_CHECK_PARA(drv_ssd1306 != NULL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <drv_ssd1306_is_ready+0x12>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e00e      	b.n	8002fe2 <drv_ssd1306_is_ready+0x30>
    DRV_SSD1306_CHECK_ERROR((drv_ssd1306->i2c_is_device_ready(drv_ssd1306->device_address) == true), DRV_SSD1306_ERROR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <drv_ssd1306_is_ready+0x2e>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <drv_ssd1306_is_ready+0x30>
    return DRV_SSD1306_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <drv_ssd1306_fill>:

drv_ssd1306_color_t drv_ssd1306_fill(drv_ssd1306_color_t color)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(drv_ssd1306_buffer, (color == DRV_SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(drv_ssd1306_buffer));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <drv_ssd1306_fill+0x14>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <drv_ssd1306_fill+0x16>
 8003000:	23ff      	movs	r3, #255	; 0xff
 8003002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003006:	4619      	mov	r1, r3
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <drv_ssd1306_fill+0x2c>)
 800300a:	f00d ffc7 	bl	8010f9c <memset>
    return DRV_SSD1306_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20003664 	.word	0x20003664

0800301c <drv_ssd1306_fill_theme_color>:

drv_ssd1306_color_t drv_ssd1306_fill_theme_color(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
    uint8_t theme = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	71fb      	strb	r3, [r7, #7]
    system_data_get_theme_color(&theme);
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fa59 	bl	80064e0 <system_data_get_theme_color>
    drv_ssd1306_fill(theme);
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ffdb 	bl	8002fec <drv_ssd1306_fill>
    return DRV_SSD1306_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <drv_ssd1306_update_screen>:
uint8_t drv_ssd1306_update_status = 0;
uint8_t drv_ssd1306_update_end    = 0;
uint8_t drv_ssd1306_i2c_command   = 0;

drv_ssd1306_err_t drv_ssd1306_update_screen(drv_ssd1306_config_t *drv_ssd1306)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
    if (drv_ssd1306_update_status == 0)
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <drv_ssd1306_update_screen+0x5c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11c      	bne.n	800308a <drv_ssd1306_update_screen+0x4a>
    {
        drv_ssd1306_update_status = DRV_SSD1306_HEIGHT;
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <drv_ssd1306_update_screen+0x5c>)
 8003052:	2240      	movs	r2, #64	; 0x40
 8003054:	701a      	strb	r2, [r3, #0]
        drv_ssd1306_update_end    = DRV_SSD1306_HEIGHT + (DRV_SSD1306_HEIGHT / 2);
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <drv_ssd1306_update_screen+0x60>)
 8003058:	2260      	movs	r2, #96	; 0x60
 800305a:	701a      	strb	r2, [r3, #0]
        drv_ssd1306_i2c_command   = 0xB0;
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <drv_ssd1306_update_screen+0x64>)
 800305e:	22b0      	movs	r2, #176	; 0xb0
 8003060:	701a      	strb	r2, [r3, #0]
        /* Write multi data */
        DRV_SSD1306_CHECK_ERROR(
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68dc      	ldr	r4, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7818      	ldrb	r0, [r3, #0]
 800306a:	2301      	movs	r3, #1
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <drv_ssd1306_update_screen+0x64>)
 800306e:	2100      	movs	r1, #0
 8003070:	47a0      	blx	r4
 8003072:	4603      	mov	r3, r0
 8003074:	f083 0301 	eor.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <drv_ssd1306_update_screen+0x42>
 800307e:	2301      	movs	r3, #1
 8003080:	e007      	b.n	8003092 <drv_ssd1306_update_screen+0x52>
          (drv_ssd1306->i2c_write_at(drv_ssd1306->device_address, DRV_SSD1306_REG_COMMAND, &drv_ssd1306_i2c_command, 1)) == true,
          DRV_SSD1306_ERROR);
        drv_ssd1306_send_data(drv_ssd1306);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f810 	bl	80030a8 <drv_ssd1306_send_data>
 8003088:	e002      	b.n	8003090 <drv_ssd1306_update_screen+0x50>
    }
    else
    {
        drv_ssd1306_send_data(drv_ssd1306);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f80c 	bl	80030a8 <drv_ssd1306_send_data>
    }
    return DRV_SSD1306_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	bf00      	nop
 800309c:	20003a64 	.word	0x20003a64
 80030a0:	20003a65 	.word	0x20003a65
 80030a4:	20003a66 	.word	0x20003a66

080030a8 <drv_ssd1306_send_data>:
#error Select mode for drv ssd1306 mode DMA or not DMA I2C !
#endif

#if DRV_SSD1306_I2C_DMA == 1
static drv_ssd1306_err_t drv_ssd1306_send_data(drv_ssd1306_config_t *drv_ssd1306)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    uint32_t phase = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
start:;
    if (drv_ssd1306_update_status)
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05c      	beq.n	8003176 <drv_ssd1306_send_data+0xce>
    {
        if (drv_ssd1306_update_status < drv_ssd1306_update_end)
 80030bc:	4b30      	ldr	r3, [pc, #192]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <drv_ssd1306_send_data+0xdc>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d251      	bcs.n	800316c <drv_ssd1306_send_data+0xc4>
        {
            drv_ssd1306_update_status++;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 80030d2:	701a      	strb	r2, [r3, #0]
            phase = drv_ssd1306_update_status & 3;
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	60fb      	str	r3, [r7, #12]
            if (phase == 3)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d117      	bne.n	8003114 <drv_ssd1306_send_data+0x6c>
            {
                /* Write multi data */
                DRV_SSD1306_CHECK_ERROR(
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68dc      	ldr	r4, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7818      	ldrb	r0, [r3, #0]
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	01db      	lsls	r3, r3, #7
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <drv_ssd1306_send_data+0xe0>)
 80030fc:	441a      	add	r2, r3
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	2140      	movs	r1, #64	; 0x40
 8003102:	47a0      	blx	r4
 8003104:	4603      	mov	r3, r0
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0d1      	beq.n	80030b4 <drv_ssd1306_send_data+0xc>
 8003110:	2301      	movs	r3, #1
 8003112:	e031      	b.n	8003178 <drv_ssd1306_send_data+0xd0>
                  DRV_SSD1306_ERROR);
                goto start;
            }
            else
            {
                if (phase == 0)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <drv_ssd1306_send_data+0x8a>
                    drv_ssd1306_i2c_command = 0xB0 + ((drv_ssd1306_update_status >> 2) & (DRV_SSD1306_HEIGHT / 8 - 1));
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3b50      	subs	r3, #80	; 0x50
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <drv_ssd1306_send_data+0xe4>)
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e00c      	b.n	800314c <drv_ssd1306_send_data+0xa4>
                else if (phase == 1)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d103      	bne.n	8003140 <drv_ssd1306_send_data+0x98>
                    drv_ssd1306_i2c_command = 0x00;
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <drv_ssd1306_send_data+0xe4>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e005      	b.n	800314c <drv_ssd1306_send_data+0xa4>
                else if (phase == 2)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d102      	bne.n	800314c <drv_ssd1306_send_data+0xa4>
                    drv_ssd1306_i2c_command = 0x10;
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <drv_ssd1306_send_data+0xe4>)
 8003148:	2210      	movs	r2, #16
 800314a:	701a      	strb	r2, [r3, #0]
                /* Write multi data */
                DRV_SSD1306_CHECK_ERROR(
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68dc      	ldr	r4, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7818      	ldrb	r0, [r3, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	4a0d      	ldr	r2, [pc, #52]	; (800318c <drv_ssd1306_send_data+0xe4>)
 8003158:	2100      	movs	r1, #0
 800315a:	47a0      	blx	r4
 800315c:	4603      	mov	r3, r0
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0a5      	beq.n	80030b4 <drv_ssd1306_send_data+0xc>
 8003168:	2301      	movs	r3, #1
 800316a:	e005      	b.n	8003178 <drv_ssd1306_send_data+0xd0>
                goto start;
            }
        }
        else
        {
            drv_ssd1306_update_status = 0;
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <drv_ssd1306_send_data+0xd8>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
            return DRV_SSD1306_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <drv_ssd1306_send_data+0xd0>
        }
    }
    return DRV_SSD1306_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	bd90      	pop	{r4, r7, pc}
 8003180:	20003a64 	.word	0x20003a64
 8003184:	20003a65 	.word	0x20003a65
 8003188:	20003664 	.word	0x20003664
 800318c:	20003a66 	.word	0x20003a66

08003190 <drv_ssd1306_init>:
#endif

drv_ssd1306_err_t drv_ssd1306_init(drv_ssd1306_config_t *drv_ssd1306)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    /* Init I2C */
    DRV_SSD1306_CHECK_PARA(drv_ssd1306 != NULL && drv_ssd1306->i2c_is_device_ready != NULL && drv_ssd1306->i2c_read_at != NULL
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <drv_ssd1306_init+0x26>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <drv_ssd1306_init+0x26>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <drv_ssd1306_init+0x26>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <drv_ssd1306_init+0x2a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e08b      	b.n	80032d2 <drv_ssd1306_init+0x142>
                           && drv_ssd1306->i2c_write_at != NULL)

    DRV_SSD1306_CHECK_ERROR((drv_ssd1306_is_ready(drv_ssd1306) == DRV_SSD1306_OK), DRV_SSD1306_ERROR);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff fef9 	bl	8002fb2 <drv_ssd1306_is_ready>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <drv_ssd1306_init+0x3a>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e083      	b.n	80032d2 <drv_ssd1306_init+0x142>

    /* Init LCD */
    drv_ssd1306_write_command(drv_ssd1306, 0xAE); /* display off */
 80031ca:	21ae      	movs	r1, #174	; 0xae
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff fed5 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x20); /* Set Memory Addressing Mode */
 80031d2:	2120      	movs	r1, #32
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fed1 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x10); /* 00,Horizontal Addressing Mode;
 80031da:	2110      	movs	r1, #16
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fecd 	bl	8002f7c <drv_ssd1306_write_command>
                                                  01,Vertical Addressing Mode;
                                                  10,Page Addressing Mode (RESET);
                                                  11,Invalid */
    drv_ssd1306_write_command(drv_ssd1306, 0xB0); /* Set Page Start Address for Page Addressing Mode,0-7 */
 80031e2:	21b0      	movs	r1, #176	; 0xb0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fec9 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xC8); /* Set COM Output Scan Direction */
 80031ea:	21c8      	movs	r1, #200	; 0xc8
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fec5 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x00); /*---set low column address */
 80031f2:	2100      	movs	r1, #0
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fec1 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x10); /*---set high column address */
 80031fa:	2110      	movs	r1, #16
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff febd 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x40); /*--set start line address */
 8003202:	2140      	movs	r1, #64	; 0x40
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff feb9 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x81); /*--set contrast control register */
 800320a:	2181      	movs	r1, #129	; 0x81
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff feb5 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xFF);
 8003212:	21ff      	movs	r1, #255	; 0xff
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff feb1 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xA1); /*--set segment re-map 0 to 127*/
 800321a:	21a1      	movs	r1, #161	; 0xa1
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fead 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xA6); /*--set normal display*/
 8003222:	21a6      	movs	r1, #166	; 0xa6
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fea9 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xA8); /*--set multiplex ratio(1 to 64)*/
 800322a:	21a8      	movs	r1, #168	; 0xa8
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fea5 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x3F); /**/
 8003232:	213f      	movs	r1, #63	; 0x3f
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fea1 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xA4); /* 0xa4,Output follows RAM content;0xa5,Output ignores RAM content*/
 800323a:	21a4      	movs	r1, #164	; 0xa4
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fe9d 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xD3); /*-set display offset*/
 8003242:	21d3      	movs	r1, #211	; 0xd3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fe99 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x00); /*-not offset*/
 800324a:	2100      	movs	r1, #0
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fe95 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xD5); /*--set display clock divide ratio/oscillator frequency*/
 8003252:	21d5      	movs	r1, #213	; 0xd5
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fe91 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xF0); /*--set divide ratio*/
 800325a:	21f0      	movs	r1, #240	; 0xf0
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fe8d 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xD9); /*--set pre-charge period*/
 8003262:	21d9      	movs	r1, #217	; 0xd9
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fe89 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x22); /**/
 800326a:	2122      	movs	r1, #34	; 0x22
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff fe85 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xDA); /*--set com pins hardware configuration*/
 8003272:	21da      	movs	r1, #218	; 0xda
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fe81 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x12);
 800327a:	2112      	movs	r1, #18
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fe7d 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xDB); /*--set vcomh */
 8003282:	21db      	movs	r1, #219	; 0xdb
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff fe79 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x20); /* 0x20,0.77xVcc */
 800328a:	2120      	movs	r1, #32
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff fe75 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x8D); /*--set DC-DC enable */
 8003292:	218d      	movs	r1, #141	; 0x8d
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fe71 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0x14); /* */
 800329a:	2114      	movs	r1, #20
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fe6d 	bl	8002f7c <drv_ssd1306_write_command>
    drv_ssd1306_write_command(drv_ssd1306, 0xAF); /*--turn on drv_ssd1306 panel */
 80032a2:	21af      	movs	r1, #175	; 0xaf
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fe69 	bl	8002f7c <drv_ssd1306_write_command>

    drv_ssd1306_write_command(drv_ssd1306, DRV_SSD1306_DEACTIVATE_SCROLL);
 80032aa:	212e      	movs	r1, #46	; 0x2e
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fe65 	bl	8002f7c <drv_ssd1306_write_command>

    /* Clear screen */
    drv_ssd1306_fill(DRV_SSD1306_COLOR_BLACK);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7ff fe9a 	bl	8002fec <drv_ssd1306_fill>

    /* Update screen */
    drv_ssd1306_update_screen(drv_ssd1306);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fec1 	bl	8003040 <drv_ssd1306_update_screen>

    /* Set default values */
    drv_ssd1306_pos.current_x = 0;
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <drv_ssd1306_init+0x14c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	801a      	strh	r2, [r3, #0]
    drv_ssd1306_pos.current_y = 0;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <drv_ssd1306_init+0x14c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    drv_ssd1306_pos.initialized = 1;
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <drv_ssd1306_init+0x14c>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	715a      	strb	r2, [r3, #5]

    /* Return OK */
    return DRV_SSD1306_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	2000365c 	.word	0x2000365c

080032e0 <drv_ssd1306_invert_display>:

drv_ssd1306_err_t drv_ssd1306_invert_display(drv_ssd1306_config_t *drv_ssd1306, uint8_t invert)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
    drv_ssd1306_pos.inverted = invert;
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <drv_ssd1306_invert_display+0x20>)
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	7113      	strb	r3, [r2, #4]
    return DRV_SSD1306_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	2000365c 	.word	0x2000365c

08003304 <drv_ssd1306_draw_bitmap>:

drv_ssd1306_color_t
drv_ssd1306_draw_bitmap(int16_t x, int16_t y, const unsigned char *bitmap, int16_t w, int16_t h, uint16_t color)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60ba      	str	r2, [r7, #8]
 800330c:	461a      	mov	r2, r3
 800330e:	4603      	mov	r3, r0
 8003310:	81fb      	strh	r3, [r7, #14]
 8003312:	460b      	mov	r3, r1
 8003314:	81bb      	strh	r3, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	80fb      	strh	r3, [r7, #6]
    int16_t byteWidth = (w + 7) / 8;  // Bitmap scanline pad = whole byte
 800331a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800331e:	3307      	adds	r3, #7
 8003320:	2b00      	cmp	r3, #0
 8003322:	da00      	bge.n	8003326 <drv_ssd1306_draw_bitmap+0x22>
 8003324:	3307      	adds	r3, #7
 8003326:	10db      	asrs	r3, r3, #3
 8003328:	823b      	strh	r3, [r7, #16]
    uint8_t byte      = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]

    for (int16_t j = 0; j < h; j++, y++)
 800332e:	2300      	movs	r3, #0
 8003330:	82bb      	strh	r3, [r7, #20]
 8003332:	e044      	b.n	80033be <drv_ssd1306_draw_bitmap+0xba>
    {
        for (int16_t i = 0; i < w; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	827b      	strh	r3, [r7, #18]
 8003338:	e02f      	b.n	800339a <drv_ssd1306_draw_bitmap+0x96>
        {
            if (i & 7)
 800333a:	8a7b      	ldrh	r3, [r7, #18]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <drv_ssd1306_draw_bitmap+0x48>
            {
                byte <<= 1;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
 800334a:	e012      	b.n	8003372 <drv_ssd1306_draw_bitmap+0x6e>
            }
            else
            {
                byte = (*(const unsigned char *) (&bitmap[j * byteWidth + i / 8]));
 800334c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003350:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003354:	fb03 f202 	mul.w	r2, r3, r2
 8003358:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800335c:	2b00      	cmp	r3, #0
 800335e:	da00      	bge.n	8003362 <drv_ssd1306_draw_bitmap+0x5e>
 8003360:	3307      	adds	r3, #7
 8003362:	10db      	asrs	r3, r3, #3
 8003364:	b21b      	sxth	r3, r3
 8003366:	4413      	add	r3, r2
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	75fb      	strb	r3, [r7, #23]
            }
            if (byte & 0x80)
 8003372:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	da09      	bge.n	800338e <drv_ssd1306_draw_bitmap+0x8a>
                drv_ssd1306_draw_pixel(x + i, y, color);
 800337a:	89fa      	ldrh	r2, [r7, #14]
 800337c:	8a7b      	ldrh	r3, [r7, #18]
 800337e:	4413      	add	r3, r2
 8003380:	b29b      	uxth	r3, r3
 8003382:	89b9      	ldrh	r1, [r7, #12]
 8003384:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f823 	bl	80033d4 <drv_ssd1306_draw_pixel>
        for (int16_t i = 0; i < w; i++)
 800338e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003392:	b29b      	uxth	r3, r3
 8003394:	3301      	adds	r3, #1
 8003396:	b29b      	uxth	r3, r3
 8003398:	827b      	strh	r3, [r7, #18]
 800339a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800339e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	dbc9      	blt.n	800333a <drv_ssd1306_draw_bitmap+0x36>
    for (int16_t j = 0; j < h; j++, y++)
 80033a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	82bb      	strh	r3, [r7, #20]
 80033b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	81bb      	strh	r3, [r7, #12]
 80033be:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80033c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	dbb4      	blt.n	8003334 <drv_ssd1306_draw_bitmap+0x30>
        }
    }
    return DRV_SSD1306_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <drv_ssd1306_draw_pixel>:

drv_ssd1306_err_t drv_ssd1306_draw_pixel(uint16_t x, uint16_t y, drv_ssd1306_color_t color)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	80fb      	strh	r3, [r7, #6]
 80033de:	460b      	mov	r3, r1
 80033e0:	80bb      	strh	r3, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	70fb      	strb	r3, [r7, #3]
    if (x >= DRV_SSD1306_WIDTH || y >= DRV_SSD1306_HEIGHT)
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b7f      	cmp	r3, #127	; 0x7f
 80033ea:	d802      	bhi.n	80033f2 <drv_ssd1306_draw_pixel+0x1e>
 80033ec:	88bb      	ldrh	r3, [r7, #4]
 80033ee:	2b3f      	cmp	r3, #63	; 0x3f
 80033f0:	d901      	bls.n	80033f6 <drv_ssd1306_draw_pixel+0x22>
    {
        /* Error */
        return DRV_SSD1306_ERROR_PARAMETER;
 80033f2:	2302      	movs	r3, #2
 80033f4:	e045      	b.n	8003482 <drv_ssd1306_draw_pixel+0xae>
    }
    /* Check if pixels are inverted */
    if (drv_ssd1306_pos.inverted)
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <drv_ssd1306_draw_pixel+0xbc>)
 80033f8:	791b      	ldrb	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <drv_ssd1306_draw_pixel+0x38>
    {
        color = (drv_ssd1306_color_t) !color;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	70fb      	strb	r3, [r7, #3]
    }
    /* Set color */
    if (color == DRV_SSD1306_COLOR_WHITE)
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d11a      	bne.n	8003448 <drv_ssd1306_draw_pixel+0x74>
    {
        drv_ssd1306_buffer[x + (y / 8) * DRV_SSD1306_WIDTH] |= 1 << (y % 8);
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	88bb      	ldrh	r3, [r7, #4]
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	b298      	uxth	r0, r3
 800341a:	4603      	mov	r3, r0
 800341c:	01db      	lsls	r3, r3, #7
 800341e:	4413      	add	r3, r2
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <drv_ssd1306_draw_pixel+0xc0>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	b25a      	sxtb	r2, r3
 8003426:	88bb      	ldrh	r3, [r7, #4]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	b25b      	sxtb	r3, r3
 8003434:	4313      	orrs	r3, r2
 8003436:	b259      	sxtb	r1, r3
 8003438:	88fa      	ldrh	r2, [r7, #6]
 800343a:	4603      	mov	r3, r0
 800343c:	01db      	lsls	r3, r3, #7
 800343e:	4413      	add	r3, r2
 8003440:	b2c9      	uxtb	r1, r1
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <drv_ssd1306_draw_pixel+0xc0>)
 8003444:	54d1      	strb	r1, [r2, r3]
 8003446:	e01b      	b.n	8003480 <drv_ssd1306_draw_pixel+0xac>
    }
    else
    {
        drv_ssd1306_buffer[x + (y / 8) * DRV_SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	88bb      	ldrh	r3, [r7, #4]
 800344c:	08db      	lsrs	r3, r3, #3
 800344e:	b298      	uxth	r0, r3
 8003450:	4603      	mov	r3, r0
 8003452:	01db      	lsls	r3, r3, #7
 8003454:	4413      	add	r3, r2
 8003456:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <drv_ssd1306_draw_pixel+0xc0>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	b25a      	sxtb	r2, r3
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	b25b      	sxtb	r3, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	b25b      	sxtb	r3, r3
 800346e:	4013      	ands	r3, r2
 8003470:	b259      	sxtb	r1, r3
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	4603      	mov	r3, r0
 8003476:	01db      	lsls	r3, r3, #7
 8003478:	4413      	add	r3, r2
 800347a:	b2c9      	uxtb	r1, r1
 800347c:	4a05      	ldr	r2, [pc, #20]	; (8003494 <drv_ssd1306_draw_pixel+0xc0>)
 800347e:	54d1      	strb	r1, [r2, r3]
    }
    return DRV_SSD1306_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	2000365c 	.word	0x2000365c
 8003494:	20003664 	.word	0x20003664

08003498 <drv_ssd1306_goto_xy>:

drv_ssd1306_err_t drv_ssd1306_goto_xy(uint16_t x, uint16_t y)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	460a      	mov	r2, r1
 80034a2:	80fb      	strh	r3, [r7, #6]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80bb      	strh	r3, [r7, #4]
    /* Set write pointers */
    if (x > DRV_SSD1306_WIDTH || y > DRV_SSD1306_HEIGHT)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d802      	bhi.n	80034b4 <drv_ssd1306_goto_xy+0x1c>
 80034ae:	88bb      	ldrh	r3, [r7, #4]
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d901      	bls.n	80034b8 <drv_ssd1306_goto_xy+0x20>
        return DRV_SSD1306_ERROR_PARAMETER;
 80034b4:	2302      	movs	r3, #2
 80034b6:	e006      	b.n	80034c6 <drv_ssd1306_goto_xy+0x2e>
    drv_ssd1306_pos.current_x = x;
 80034b8:	4a06      	ldr	r2, [pc, #24]	; (80034d4 <drv_ssd1306_goto_xy+0x3c>)
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	8013      	strh	r3, [r2, #0]
    drv_ssd1306_pos.current_y = y;
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <drv_ssd1306_goto_xy+0x3c>)
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	8053      	strh	r3, [r2, #2]
    return DRV_SSD1306_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	2000365c 	.word	0x2000365c

080034d8 <drv_ssd1306_send_font_custom>:

drv_ssd1306_err_t drv_ssd1306_send_font_custom(int x, int y, unsigned char *char_custom, int w, int h)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
    int bytes     = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    int indexbyte = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
    int step      = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]

    for (int j = 0; j < w; j++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e036      	b.n	8003566 <drv_ssd1306_send_font_custom+0x8e>
    {
        step = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < h; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e027      	b.n	8003552 <drv_ssd1306_send_font_custom+0x7a>
        {
            if (step & 7)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <drv_ssd1306_send_font_custom+0x3c>
            {
                bytes >>= 1;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	105b      	asrs	r3, r3, #1
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	e007      	b.n	8003524 <drv_ssd1306_send_font_custom+0x4c>
            }
            else
            {
                bytes = char_custom[indexbyte];
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
                indexbyte++;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	3301      	adds	r3, #1
 8003522:	623b      	str	r3, [r7, #32]
            }
            step++;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	3301      	adds	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
            if (bytes & 0x01)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <drv_ssd1306_send_font_custom+0x74>
            {
                drv_ssd1306_draw_pixel(x, y + i, 1);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	b298      	uxth	r0, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	b29a      	uxth	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4413      	add	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	2201      	movs	r2, #1
 8003546:	4619      	mov	r1, r3
 8003548:	f7ff ff44 	bl	80033d4 <drv_ssd1306_draw_pixel>
        for (int i = 0; i < h; i++)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	429a      	cmp	r2, r3
 8003558:	dbd3      	blt.n	8003502 <drv_ssd1306_send_font_custom+0x2a>
            }
        }
        x++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3301      	adds	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
    for (int j = 0; j < w; j++)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	3301      	adds	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	dbc4      	blt.n	80034f8 <drv_ssd1306_send_font_custom+0x20>
    }
    return DRV_SSD1306_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3728      	adds	r7, #40	; 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <drv_ssd1306_putc>:

drv_ssd1306_err_t drv_ssd1306_putc(uint8_t __char, font_def_t *font, drv_ssd1306_color_t color)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af02      	add	r7, sp, #8
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
 8003584:	4613      	mov	r3, r2
 8003586:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;
    /* Check available space in LCD */
    if (DRV_SSD1306_WIDTH <= (drv_ssd1306_pos.current_x + font->font_width)
 8003588:	4b60      	ldr	r3, [pc, #384]	; (800370c <drv_ssd1306_putc+0x194>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	4413      	add	r3, r2
 8003594:	2b7f      	cmp	r3, #127	; 0x7f
 8003596:	dc07      	bgt.n	80035a8 <drv_ssd1306_putc+0x30>
        || DRV_SSD1306_HEIGHT <= (drv_ssd1306_pos.current_y + font->font_height))
 8003598:	4b5c      	ldr	r3, [pc, #368]	; (800370c <drv_ssd1306_putc+0x194>)
 800359a:	885b      	ldrh	r3, [r3, #2]
 800359c:	461a      	mov	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	4413      	add	r3, r2
 80035a4:	2b3f      	cmp	r3, #63	; 0x3f
 80035a6:	dd01      	ble.n	80035ac <drv_ssd1306_putc+0x34>
    {
        /* Error */
        return DRV_SSD1306_ERROR_PARAMETER;
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0aa      	b.n	8003702 <drv_ssd1306_putc+0x18a>
    }
    if ((font->font_height == 25 && font->font_width == 15) || (font->font_height == 19 && font->font_width == 10))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	785b      	ldrb	r3, [r3, #1]
 80035b0:	2b19      	cmp	r3, #25
 80035b2:	d103      	bne.n	80035bc <drv_ssd1306_putc+0x44>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d007      	beq.n	80035cc <drv_ssd1306_putc+0x54>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	785b      	ldrb	r3, [r3, #1]
 80035c0:	2b13      	cmp	r3, #19
 80035c2:	d13f      	bne.n	8003644 <drv_ssd1306_putc+0xcc>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b0a      	cmp	r3, #10
 80035ca:	d13b      	bne.n	8003644 <drv_ssd1306_putc+0xcc>
    {
        uint16_t padding = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	81fb      	strh	r3, [r7, #14]
        if ((font->font_height == 19 && font->font_width == 10))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b13      	cmp	r3, #19
 80035d6:	d106      	bne.n	80035e6 <drv_ssd1306_putc+0x6e>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b0a      	cmp	r3, #10
 80035de:	d102      	bne.n	80035e6 <drv_ssd1306_putc+0x6e>
        {
            padding = 15;
 80035e0:	230f      	movs	r3, #15
 80035e2:	81fb      	strh	r3, [r7, #14]
 80035e4:	e009      	b.n	80035fa <drv_ssd1306_putc+0x82>
        }
        else if (font->font_height == 25 && font->font_width == 15)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	2b19      	cmp	r3, #25
 80035ec:	d105      	bne.n	80035fa <drv_ssd1306_putc+0x82>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d101      	bne.n	80035fa <drv_ssd1306_putc+0x82>
        {
            padding = 30;
 80035f6:	231e      	movs	r3, #30
 80035f8:	81fb      	strh	r3, [r7, #14]
        }
        drv_ssd1306_send_font_custom(drv_ssd1306_pos.current_x, drv_ssd1306_pos.current_y,
 80035fa:	4b44      	ldr	r3, [pc, #272]	; (800370c <drv_ssd1306_putc+0x194>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	4b42      	ldr	r3, [pc, #264]	; (800370c <drv_ssd1306_putc+0x194>)
 8003602:	885b      	ldrh	r3, [r3, #2]
 8003604:	461c      	mov	r4, r3
                                     (uint8_t *) &font->data[(__char - 32) * padding], font->font_width, font->font_height);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	3b20      	subs	r3, #32
 800360e:	89f9      	ldrh	r1, [r7, #14]
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	441a      	add	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
        drv_ssd1306_send_font_custom(drv_ssd1306_pos.current_x, drv_ssd1306_pos.current_y,
 800361c:	4619      	mov	r1, r3
                                     (uint8_t *) &font->data[(__char - 32) * padding], font->font_width, font->font_height);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	785b      	ldrb	r3, [r3, #1]
        drv_ssd1306_send_font_custom(drv_ssd1306_pos.current_x, drv_ssd1306_pos.current_y,
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	460b      	mov	r3, r1
 8003626:	4621      	mov	r1, r4
 8003628:	f7ff ff56 	bl	80034d8 <drv_ssd1306_send_font_custom>
        /* Increase pointer */
        drv_ssd1306_pos.current_x += font->font_width + 3;
 800362c:	4b37      	ldr	r3, [pc, #220]	; (800370c <drv_ssd1306_putc+0x194>)
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	4413      	add	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	3303      	adds	r3, #3
 800363c:	b29a      	uxth	r2, r3
 800363e:	4b33      	ldr	r3, [pc, #204]	; (800370c <drv_ssd1306_putc+0x194>)
 8003640:	801a      	strh	r2, [r3, #0]
        goto end;
 8003642:	e05d      	b.n	8003700 <drv_ssd1306_putc+0x188>
    }
    /* Go through font */
    for (i = 0; i < font->font_height; i++)
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e04b      	b.n	80036e2 <drv_ssd1306_putc+0x16a>
    {
        b = font->data[(__char - 32) * font->font_height + i];
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	3b20      	subs	r3, #32
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	7849      	ldrb	r1, [r1, #1]
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4619      	mov	r1, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	440b      	add	r3, r1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	60bb      	str	r3, [r7, #8]
        for (j = 0; j < font->font_width; j++)
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e030      	b.n	80036d0 <drv_ssd1306_putc+0x158>
        {
            if ((b << j) & 0x8000)
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d010      	beq.n	80036a0 <drv_ssd1306_putc+0x128>
            {
                drv_ssd1306_draw_pixel(drv_ssd1306_pos.current_x + j, (drv_ssd1306_pos.current_y + i),
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <drv_ssd1306_putc+0x194>)
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	b29b      	uxth	r3, r3
 8003686:	4413      	add	r3, r2
 8003688:	b298      	uxth	r0, r3
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <drv_ssd1306_putc+0x194>)
 800368c:	885a      	ldrh	r2, [r3, #2]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4413      	add	r3, r2
 8003694:	b29b      	uxth	r3, r3
 8003696:	79ba      	ldrb	r2, [r7, #6]
 8003698:	4619      	mov	r1, r3
 800369a:	f7ff fe9b 	bl	80033d4 <drv_ssd1306_draw_pixel>
 800369e:	e014      	b.n	80036ca <drv_ssd1306_putc+0x152>
                                       (drv_ssd1306_color_t) color);
            }
            else
            {
                drv_ssd1306_draw_pixel(drv_ssd1306_pos.current_x + j, (drv_ssd1306_pos.current_y + i),
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <drv_ssd1306_putc+0x194>)
 80036a2:	881a      	ldrh	r2, [r3, #0]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	b298      	uxth	r0, r3
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <drv_ssd1306_putc+0x194>)
 80036ae:	885a      	ldrh	r2, [r3, #2]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	b299      	uxth	r1, r3
 80036b8:	79bb      	ldrb	r3, [r7, #6]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	f7ff fe85 	bl	80033d4 <drv_ssd1306_draw_pixel>
        for (j = 0; j < font->font_width; j++)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3301      	adds	r3, #1
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4293      	cmp	r3, r2
 80036da:	d3c8      	bcc.n	800366e <drv_ssd1306_putc+0xf6>
    for (i = 0; i < font->font_height; i++)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3301      	adds	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	461a      	mov	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d3ad      	bcc.n	800364a <drv_ssd1306_putc+0xd2>
                                       (drv_ssd1306_color_t) !color);
            }
        }
    }
    /* Increase pointer */
    drv_ssd1306_pos.current_x += font->font_width;
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <drv_ssd1306_putc+0x194>)
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <drv_ssd1306_putc+0x194>)
 80036fe:	801a      	strh	r2, [r3, #0]
end:;
    return DRV_SSD1306_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}
 800370a:	bf00      	nop
 800370c:	2000365c 	.word	0x2000365c

08003710 <drv_ssd1306_puts>:
    /* Return character written */
    return DRV_SSD1306_OK;
}

drv_ssd1306_err_t drv_ssd1306_puts(uint8_t *str, font_def_t *font, drv_ssd1306_color_t color)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str)
 800371e:	e00e      	b.n	800373e <drv_ssd1306_puts+0x2e>
    {
        /* Write character by character */
        if (drv_ssd1306_putc(*str, font, color) != DRV_SSD1306_OK)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	79fa      	ldrb	r2, [r7, #7]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff25 	bl	8003578 <drv_ssd1306_putc>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <drv_ssd1306_puts+0x28>
        {
            /* Return error */
            return DRV_SSD1306_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <drv_ssd1306_puts+0x38>
        }
        /* Increase string pointer */
        str++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
    while (*str)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ec      	bne.n	8003720 <drv_ssd1306_puts+0x10>
    }
    /* Everything OK, zero should be returned */
    return DRV_SSD1306_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <drv_ssd1306_raw_circle>:

static void drv_ssd1306_raw_circle(int16_t x0, int16_t y0, int16_t r, drv_ssd1306_color_t color)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	80fb      	strh	r3, [r7, #6]
 8003762:	4603      	mov	r3, r0
 8003764:	80bb      	strh	r3, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	807b      	strh	r3, [r7, #2]
 800376a:	4613      	mov	r3, r2
 800376c:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	f1c3 0301 	rsb	r3, r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	82fb      	strh	r3, [r7, #22]
    int16_t ddf_x = 1;
 8003778:	2301      	movs	r3, #1
 800377a:	82bb      	strh	r3, [r7, #20]
    int16_t ddf_y = -2 * r;
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	461a      	mov	r2, r3
 8003780:	03d2      	lsls	r2, r2, #15
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	b29b      	uxth	r3, r3
 8003788:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	81fb      	strh	r3, [r7, #14]

    drv_ssd1306_draw_pixel(x0, y0 + r, color);
 8003792:	88f8      	ldrh	r0, [r7, #6]
 8003794:	88ba      	ldrh	r2, [r7, #4]
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	4413      	add	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	787a      	ldrb	r2, [r7, #1]
 800379e:	4619      	mov	r1, r3
 80037a0:	f7ff fe18 	bl	80033d4 <drv_ssd1306_draw_pixel>
    drv_ssd1306_draw_pixel(x0, y0 - r, color);
 80037a4:	88f8      	ldrh	r0, [r7, #6]
 80037a6:	88ba      	ldrh	r2, [r7, #4]
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	787a      	ldrb	r2, [r7, #1]
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7ff fe0f 	bl	80033d4 <drv_ssd1306_draw_pixel>
    drv_ssd1306_draw_pixel(x0 + r, y0, color);
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	4413      	add	r3, r2
 80037bc:	b29b      	uxth	r3, r3
 80037be:	88b9      	ldrh	r1, [r7, #4]
 80037c0:	787a      	ldrb	r2, [r7, #1]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe06 	bl	80033d4 <drv_ssd1306_draw_pixel>
    drv_ssd1306_draw_pixel(x0 - r, y0, color);
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	88b9      	ldrh	r1, [r7, #4]
 80037d2:	787a      	ldrb	r2, [r7, #1]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fdfd 	bl	80033d4 <drv_ssd1306_draw_pixel>

    while (x < y)
 80037da:	e081      	b.n	80038e0 <drv_ssd1306_raw_circle+0x190>
    {
        if (f >= 0)
 80037dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0e      	blt.n	8003802 <drv_ssd1306_raw_circle+0xb2>
        {
            y--;
 80037e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	81fb      	strh	r3, [r7, #14]
            ddf_y += 2;
 80037f0:	8a7b      	ldrh	r3, [r7, #18]
 80037f2:	3302      	adds	r3, #2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	827b      	strh	r3, [r7, #18]
            f += ddf_y;
 80037f8:	8afa      	ldrh	r2, [r7, #22]
 80037fa:	8a7b      	ldrh	r3, [r7, #18]
 80037fc:	4413      	add	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003802:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003806:	b29b      	uxth	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	823b      	strh	r3, [r7, #16]
        ddf_x += 2;
 800380e:	8abb      	ldrh	r3, [r7, #20]
 8003810:	3302      	adds	r3, #2
 8003812:	b29b      	uxth	r3, r3
 8003814:	82bb      	strh	r3, [r7, #20]
        f += ddf_x;
 8003816:	8afa      	ldrh	r2, [r7, #22]
 8003818:	8abb      	ldrh	r3, [r7, #20]
 800381a:	4413      	add	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	82fb      	strh	r3, [r7, #22]

        drv_ssd1306_draw_pixel(x0 + x, y0 + y, color);
 8003820:	88fa      	ldrh	r2, [r7, #6]
 8003822:	8a3b      	ldrh	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	b298      	uxth	r0, r3
 8003828:	88ba      	ldrh	r2, [r7, #4]
 800382a:	89fb      	ldrh	r3, [r7, #14]
 800382c:	4413      	add	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	787a      	ldrb	r2, [r7, #1]
 8003832:	4619      	mov	r1, r3
 8003834:	f7ff fdce 	bl	80033d4 <drv_ssd1306_draw_pixel>
        drv_ssd1306_draw_pixel(x0 - x, y0 + y, color);
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	8a3b      	ldrh	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	b298      	uxth	r0, r3
 8003840:	88ba      	ldrh	r2, [r7, #4]
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	4413      	add	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	787a      	ldrb	r2, [r7, #1]
 800384a:	4619      	mov	r1, r3
 800384c:	f7ff fdc2 	bl	80033d4 <drv_ssd1306_draw_pixel>
        drv_ssd1306_draw_pixel(x0 + x, y0 - y, color);
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	8a3b      	ldrh	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	b298      	uxth	r0, r3
 8003858:	88ba      	ldrh	r2, [r7, #4]
 800385a:	89fb      	ldrh	r3, [r7, #14]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	b29b      	uxth	r3, r3
 8003860:	787a      	ldrb	r2, [r7, #1]
 8003862:	4619      	mov	r1, r3
 8003864:	f7ff fdb6 	bl	80033d4 <drv_ssd1306_draw_pixel>
        drv_ssd1306_draw_pixel(x0 - x, y0 - y, color);
 8003868:	88fa      	ldrh	r2, [r7, #6]
 800386a:	8a3b      	ldrh	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	b298      	uxth	r0, r3
 8003870:	88ba      	ldrh	r2, [r7, #4]
 8003872:	89fb      	ldrh	r3, [r7, #14]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	b29b      	uxth	r3, r3
 8003878:	787a      	ldrb	r2, [r7, #1]
 800387a:	4619      	mov	r1, r3
 800387c:	f7ff fdaa 	bl	80033d4 <drv_ssd1306_draw_pixel>

        drv_ssd1306_draw_pixel(x0 + y, y0 + x, color);
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	89fb      	ldrh	r3, [r7, #14]
 8003884:	4413      	add	r3, r2
 8003886:	b298      	uxth	r0, r3
 8003888:	88ba      	ldrh	r2, [r7, #4]
 800388a:	8a3b      	ldrh	r3, [r7, #16]
 800388c:	4413      	add	r3, r2
 800388e:	b29b      	uxth	r3, r3
 8003890:	787a      	ldrb	r2, [r7, #1]
 8003892:	4619      	mov	r1, r3
 8003894:	f7ff fd9e 	bl	80033d4 <drv_ssd1306_draw_pixel>
        drv_ssd1306_draw_pixel(x0 - y, y0 + x, color);
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	89fb      	ldrh	r3, [r7, #14]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	b298      	uxth	r0, r3
 80038a0:	88ba      	ldrh	r2, [r7, #4]
 80038a2:	8a3b      	ldrh	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	787a      	ldrb	r2, [r7, #1]
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7ff fd92 	bl	80033d4 <drv_ssd1306_draw_pixel>
        drv_ssd1306_draw_pixel(x0 + y, y0 - x, color);
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	89fb      	ldrh	r3, [r7, #14]
 80038b4:	4413      	add	r3, r2
 80038b6:	b298      	uxth	r0, r3
 80038b8:	88ba      	ldrh	r2, [r7, #4]
 80038ba:	8a3b      	ldrh	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	b29b      	uxth	r3, r3
 80038c0:	787a      	ldrb	r2, [r7, #1]
 80038c2:	4619      	mov	r1, r3
 80038c4:	f7ff fd86 	bl	80033d4 <drv_ssd1306_draw_pixel>
        drv_ssd1306_draw_pixel(x0 - y, y0 - x, color);
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	89fb      	ldrh	r3, [r7, #14]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	b298      	uxth	r0, r3
 80038d0:	88ba      	ldrh	r2, [r7, #4]
 80038d2:	8a3b      	ldrh	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	787a      	ldrb	r2, [r7, #1]
 80038da:	4619      	mov	r1, r3
 80038dc:	f7ff fd7a 	bl	80033d4 <drv_ssd1306_draw_pixel>
    while (x < y)
 80038e0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	f6ff af77 	blt.w	80037dc <drv_ssd1306_raw_circle+0x8c>
    }
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <drv_ssd1306_raw_fill_circle>:

void drv_ssd1306_raw_fill_circle(int16_t x0, int16_t y0, int16_t r, drv_ssd1306_color_t color)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4623      	mov	r3, r4
 8003908:	80fb      	strh	r3, [r7, #6]
 800390a:	4603      	mov	r3, r0
 800390c:	80bb      	strh	r3, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	807b      	strh	r3, [r7, #2]
 8003912:	4613      	mov	r3, r2
 8003914:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	f1c3 0301 	rsb	r3, r3, #1
 800391c:	b29b      	uxth	r3, r3
 800391e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003920:	2301      	movs	r3, #1
 8003922:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	461a      	mov	r2, r3
 8003928:	03d2      	lsls	r2, r2, #15
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	b29b      	uxth	r3, r3
 8003930:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	81fb      	strh	r3, [r7, #14]

    drv_ssd1306_draw_pixel(x0, y0 + r, color);
 800393a:	88f8      	ldrh	r0, [r7, #6]
 800393c:	88ba      	ldrh	r2, [r7, #4]
 800393e:	887b      	ldrh	r3, [r7, #2]
 8003940:	4413      	add	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	787a      	ldrb	r2, [r7, #1]
 8003946:	4619      	mov	r1, r3
 8003948:	f7ff fd44 	bl	80033d4 <drv_ssd1306_draw_pixel>
    drv_ssd1306_draw_pixel(x0, y0 - r, color);
 800394c:	88f8      	ldrh	r0, [r7, #6]
 800394e:	88ba      	ldrh	r2, [r7, #4]
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	b29b      	uxth	r3, r3
 8003956:	787a      	ldrb	r2, [r7, #1]
 8003958:	4619      	mov	r1, r3
 800395a:	f7ff fd3b 	bl	80033d4 <drv_ssd1306_draw_pixel>
    drv_ssd1306_draw_pixel(x0 + r, y0, color);
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	4413      	add	r3, r2
 8003964:	b29b      	uxth	r3, r3
 8003966:	88b9      	ldrh	r1, [r7, #4]
 8003968:	787a      	ldrb	r2, [r7, #1]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fd32 	bl	80033d4 <drv_ssd1306_draw_pixel>
    drv_ssd1306_draw_pixel(x0 - r, y0, color);
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	887b      	ldrh	r3, [r7, #2]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	88b9      	ldrh	r1, [r7, #4]
 800397a:	787a      	ldrb	r2, [r7, #1]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fd29 	bl	80033d4 <drv_ssd1306_draw_pixel>
    drv_ssd1306_draw_line(x0 - r, y0, x0 + r, y0, color);
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	b298      	uxth	r0, r3
 800398a:	88b9      	ldrh	r1, [r7, #4]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	4413      	add	r3, r2
 8003992:	b29a      	uxth	r2, r3
 8003994:	88bc      	ldrh	r4, [r7, #4]
 8003996:	787b      	ldrb	r3, [r7, #1]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	4623      	mov	r3, r4
 800399c:	f000 f887 	bl	8003aae <drv_ssd1306_draw_line>

    while (x < y)
 80039a0:	e079      	b.n	8003a96 <drv_ssd1306_raw_fill_circle+0x19e>
    {
        if (f >= 0)
 80039a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db0e      	blt.n	80039c8 <drv_ssd1306_raw_fill_circle+0xd0>
        {
            y--;
 80039aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80039b6:	8a7b      	ldrh	r3, [r7, #18]
 80039b8:	3302      	adds	r3, #2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80039be:	8afa      	ldrh	r2, [r7, #22]
 80039c0:	8a7b      	ldrh	r3, [r7, #18]
 80039c2:	4413      	add	r3, r2
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80039c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80039d4:	8abb      	ldrh	r3, [r7, #20]
 80039d6:	3302      	adds	r3, #2
 80039d8:	b29b      	uxth	r3, r3
 80039da:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80039dc:	8afa      	ldrh	r2, [r7, #22]
 80039de:	8abb      	ldrh	r3, [r7, #20]
 80039e0:	4413      	add	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	82fb      	strh	r3, [r7, #22]

        drv_ssd1306_draw_line(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	8a3b      	ldrh	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	b298      	uxth	r0, r3
 80039ee:	88ba      	ldrh	r2, [r7, #4]
 80039f0:	89fb      	ldrh	r3, [r7, #14]
 80039f2:	4413      	add	r3, r2
 80039f4:	b299      	uxth	r1, r3
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	8a3b      	ldrh	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	b29c      	uxth	r4, r3
 80039fe:	88ba      	ldrh	r2, [r7, #4]
 8003a00:	89fb      	ldrh	r3, [r7, #14]
 8003a02:	4413      	add	r3, r2
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	787b      	ldrb	r3, [r7, #1]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	f000 f84e 	bl	8003aae <drv_ssd1306_draw_line>
        drv_ssd1306_draw_line(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	8a3b      	ldrh	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	b298      	uxth	r0, r3
 8003a1a:	88ba      	ldrh	r2, [r7, #4]
 8003a1c:	89fb      	ldrh	r3, [r7, #14]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b299      	uxth	r1, r3
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	8a3b      	ldrh	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29c      	uxth	r4, r3
 8003a2a:	88ba      	ldrh	r2, [r7, #4]
 8003a2c:	89fb      	ldrh	r3, [r7, #14]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	787b      	ldrb	r3, [r7, #1]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	4622      	mov	r2, r4
 8003a3a:	f000 f838 	bl	8003aae <drv_ssd1306_draw_line>

        drv_ssd1306_draw_line(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	89fb      	ldrh	r3, [r7, #14]
 8003a42:	4413      	add	r3, r2
 8003a44:	b298      	uxth	r0, r3
 8003a46:	88ba      	ldrh	r2, [r7, #4]
 8003a48:	8a3b      	ldrh	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b299      	uxth	r1, r3
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	b29c      	uxth	r4, r3
 8003a56:	88ba      	ldrh	r2, [r7, #4]
 8003a58:	8a3b      	ldrh	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	787b      	ldrb	r3, [r7, #1]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	4622      	mov	r2, r4
 8003a66:	f000 f822 	bl	8003aae <drv_ssd1306_draw_line>
        drv_ssd1306_draw_line(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	89fb      	ldrh	r3, [r7, #14]
 8003a6e:	4413      	add	r3, r2
 8003a70:	b298      	uxth	r0, r3
 8003a72:	88ba      	ldrh	r2, [r7, #4]
 8003a74:	8a3b      	ldrh	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	89fb      	ldrh	r3, [r7, #14]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	b29c      	uxth	r4, r3
 8003a82:	88ba      	ldrh	r2, [r7, #4]
 8003a84:	8a3b      	ldrh	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	787b      	ldrb	r3, [r7, #1]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	4622      	mov	r2, r4
 8003a92:	f000 f80c 	bl	8003aae <drv_ssd1306_draw_line>
    while (x < y)
 8003a96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	f6ff af7f 	blt.w	80039a2 <drv_ssd1306_raw_fill_circle+0xaa>
    }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd90      	pop	{r4, r7, pc}

08003aae <drv_ssd1306_draw_line>:

void drv_ssd1306_draw_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, drv_ssd1306_color_t color)
{
 8003aae:	b590      	push	{r4, r7, lr}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	4608      	mov	r0, r1
 8003ab8:	4611      	mov	r1, r2
 8003aba:	461a      	mov	r2, r3
 8003abc:	4623      	mov	r3, r4
 8003abe:	80fb      	strh	r3, [r7, #6]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	80bb      	strh	r3, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	803b      	strh	r3, [r7, #0]
    int16_t dx, dy, sx, sy, err, e2, i, tmp;

    /* Check for overflow */
    if (x0 >= DRV_SSD1306_WIDTH)
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	2b7f      	cmp	r3, #127	; 0x7f
 8003ad0:	d901      	bls.n	8003ad6 <drv_ssd1306_draw_line+0x28>
    {
        x0 = DRV_SSD1306_WIDTH - 1;
 8003ad2:	237f      	movs	r3, #127	; 0x7f
 8003ad4:	80fb      	strh	r3, [r7, #6]
    }
    if (x1 >= DRV_SSD1306_WIDTH)
 8003ad6:	887b      	ldrh	r3, [r7, #2]
 8003ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8003ada:	d901      	bls.n	8003ae0 <drv_ssd1306_draw_line+0x32>
    {
        x1 = DRV_SSD1306_WIDTH - 1;
 8003adc:	237f      	movs	r3, #127	; 0x7f
 8003ade:	807b      	strh	r3, [r7, #2]
    }
    if (y0 >= DRV_SSD1306_HEIGHT)
 8003ae0:	88bb      	ldrh	r3, [r7, #4]
 8003ae2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ae4:	d901      	bls.n	8003aea <drv_ssd1306_draw_line+0x3c>
    {
        y0 = DRV_SSD1306_HEIGHT - 1;
 8003ae6:	233f      	movs	r3, #63	; 0x3f
 8003ae8:	80bb      	strh	r3, [r7, #4]
    }
    if (y1 >= DRV_SSD1306_HEIGHT)
 8003aea:	883b      	ldrh	r3, [r7, #0]
 8003aec:	2b3f      	cmp	r3, #63	; 0x3f
 8003aee:	d901      	bls.n	8003af4 <drv_ssd1306_draw_line+0x46>
    {
        y1 = DRV_SSD1306_HEIGHT - 1;
 8003af0:	233f      	movs	r3, #63	; 0x3f
 8003af2:	803b      	strh	r3, [r7, #0]
    }

    dx  = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8003af4:	88fa      	ldrh	r2, [r7, #6]
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d205      	bcs.n	8003b08 <drv_ssd1306_draw_line+0x5a>
 8003afc:	887a      	ldrh	r2, [r7, #2]
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	b21b      	sxth	r3, r3
 8003b06:	e004      	b.n	8003b12 <drv_ssd1306_draw_line+0x64>
 8003b08:	88fa      	ldrh	r2, [r7, #6]
 8003b0a:	887b      	ldrh	r3, [r7, #2]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	b21b      	sxth	r3, r3
 8003b12:	827b      	strh	r3, [r7, #18]
    dy  = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8003b14:	88ba      	ldrh	r2, [r7, #4]
 8003b16:	883b      	ldrh	r3, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d205      	bcs.n	8003b28 <drv_ssd1306_draw_line+0x7a>
 8003b1c:	883a      	ldrh	r2, [r7, #0]
 8003b1e:	88bb      	ldrh	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	b21b      	sxth	r3, r3
 8003b26:	e004      	b.n	8003b32 <drv_ssd1306_draw_line+0x84>
 8003b28:	88ba      	ldrh	r2, [r7, #4]
 8003b2a:	883b      	ldrh	r3, [r7, #0]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	823b      	strh	r3, [r7, #16]
    sx  = (x0 < x1) ? 1 : -1;
 8003b34:	88fa      	ldrh	r2, [r7, #6]
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d201      	bcs.n	8003b40 <drv_ssd1306_draw_line+0x92>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e001      	b.n	8003b44 <drv_ssd1306_draw_line+0x96>
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	81fb      	strh	r3, [r7, #14]
    sy  = (y0 < y1) ? 1 : -1;
 8003b46:	88ba      	ldrh	r2, [r7, #4]
 8003b48:	883b      	ldrh	r3, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d201      	bcs.n	8003b52 <drv_ssd1306_draw_line+0xa4>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e001      	b.n	8003b56 <drv_ssd1306_draw_line+0xa8>
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	81bb      	strh	r3, [r7, #12]
    err = ((dx > dy) ? dx : -dy) / 2;
 8003b58:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003b5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	dd06      	ble.n	8003b72 <drv_ssd1306_draw_line+0xc4>
 8003b64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b68:	0fda      	lsrs	r2, r3, #31
 8003b6a:	4413      	add	r3, r2
 8003b6c:	105b      	asrs	r3, r3, #1
 8003b6e:	b21b      	sxth	r3, r3
 8003b70:	e006      	b.n	8003b80 <drv_ssd1306_draw_line+0xd2>
 8003b72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b76:	0fda      	lsrs	r2, r3, #31
 8003b78:	4413      	add	r3, r2
 8003b7a:	105b      	asrs	r3, r3, #1
 8003b7c:	425b      	negs	r3, r3
 8003b7e:	b21b      	sxth	r3, r3
 8003b80:	82fb      	strh	r3, [r7, #22]

    if (dx == 0)
 8003b82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d129      	bne.n	8003bde <drv_ssd1306_draw_line+0x130>
    {
        if (y1 < y0)
 8003b8a:	883a      	ldrh	r2, [r7, #0]
 8003b8c:	88bb      	ldrh	r3, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d205      	bcs.n	8003b9e <drv_ssd1306_draw_line+0xf0>
        {
            tmp = y1;
 8003b92:	883b      	ldrh	r3, [r7, #0]
 8003b94:	813b      	strh	r3, [r7, #8]
            y1  = y0;
 8003b96:	88bb      	ldrh	r3, [r7, #4]
 8003b98:	803b      	strh	r3, [r7, #0]
            y0  = tmp;
 8003b9a:	893b      	ldrh	r3, [r7, #8]
 8003b9c:	80bb      	strh	r3, [r7, #4]
        }

        if (x1 < x0)
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d205      	bcs.n	8003bb2 <drv_ssd1306_draw_line+0x104>
        {
            tmp = x1;
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	813b      	strh	r3, [r7, #8]
            x1  = x0;
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	807b      	strh	r3, [r7, #2]
            x0  = tmp;
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	80fb      	strh	r3, [r7, #6]
        }

        /* Vertical line */
        for (i = y0; i <= y1; i++)
 8003bb2:	88bb      	ldrh	r3, [r7, #4]
 8003bb4:	82bb      	strh	r3, [r7, #20]
 8003bb6:	e00c      	b.n	8003bd2 <drv_ssd1306_draw_line+0x124>
        {
            drv_ssd1306_draw_pixel(x0, i, color);
 8003bb8:	8ab9      	ldrh	r1, [r7, #20]
 8003bba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fc07 	bl	80033d4 <drv_ssd1306_draw_pixel>
        for (i = y0; i <= y1; i++)
 8003bc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	82bb      	strh	r3, [r7, #20]
 8003bd2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003bd6:	883b      	ldrh	r3, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	dded      	ble.n	8003bb8 <drv_ssd1306_draw_line+0x10a>
        }

        /* Return from function */
        return;
 8003bdc:	e05f      	b.n	8003c9e <drv_ssd1306_draw_line+0x1f0>
    }

    if (dy == 0)
 8003bde:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d129      	bne.n	8003c3a <drv_ssd1306_draw_line+0x18c>
    {
        if (y1 < y0)
 8003be6:	883a      	ldrh	r2, [r7, #0]
 8003be8:	88bb      	ldrh	r3, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d205      	bcs.n	8003bfa <drv_ssd1306_draw_line+0x14c>
        {
            tmp = y1;
 8003bee:	883b      	ldrh	r3, [r7, #0]
 8003bf0:	813b      	strh	r3, [r7, #8]
            y1  = y0;
 8003bf2:	88bb      	ldrh	r3, [r7, #4]
 8003bf4:	803b      	strh	r3, [r7, #0]
            y0  = tmp;
 8003bf6:	893b      	ldrh	r3, [r7, #8]
 8003bf8:	80bb      	strh	r3, [r7, #4]
        }

        if (x1 < x0)
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d205      	bcs.n	8003c0e <drv_ssd1306_draw_line+0x160>
        {
            tmp = x1;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	813b      	strh	r3, [r7, #8]
            x1  = x0;
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	807b      	strh	r3, [r7, #2]
            x0  = tmp;
 8003c0a:	893b      	ldrh	r3, [r7, #8]
 8003c0c:	80fb      	strh	r3, [r7, #6]
        }

        /* Horizontal line */
        for (i = x0; i <= x1; i++)
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	82bb      	strh	r3, [r7, #20]
 8003c12:	e00c      	b.n	8003c2e <drv_ssd1306_draw_line+0x180>
        {
            drv_ssd1306_draw_pixel(i, y0, color);
 8003c14:	8abb      	ldrh	r3, [r7, #20]
 8003c16:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003c1a:	88b9      	ldrh	r1, [r7, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fbd9 	bl	80033d4 <drv_ssd1306_draw_pixel>
        for (i = x0; i <= x1; i++)
 8003c22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	82bb      	strh	r3, [r7, #20]
 8003c2e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dded      	ble.n	8003c14 <drv_ssd1306_draw_line+0x166>
        }

        /* Return from function */
        return;
 8003c38:	e031      	b.n	8003c9e <drv_ssd1306_draw_line+0x1f0>
    }

    while (1)
    {
        drv_ssd1306_draw_pixel(x0, y0, color);
 8003c3a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003c3e:	88b9      	ldrh	r1, [r7, #4]
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fbc6 	bl	80033d4 <drv_ssd1306_draw_pixel>
        if (x0 == x1 && y0 == y1)
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	887b      	ldrh	r3, [r7, #2]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d103      	bne.n	8003c58 <drv_ssd1306_draw_line+0x1aa>
 8003c50:	88ba      	ldrh	r2, [r7, #4]
 8003c52:	883b      	ldrh	r3, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d021      	beq.n	8003c9c <drv_ssd1306_draw_line+0x1ee>
        {
            break;
        }
        e2 = err;
 8003c58:	8afb      	ldrh	r3, [r7, #22]
 8003c5a:	817b      	strh	r3, [r7, #10]
        if (e2 > -dx)
 8003c5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c64:	425b      	negs	r3, r3
 8003c66:	429a      	cmp	r2, r3
 8003c68:	dd08      	ble.n	8003c7c <drv_ssd1306_draw_line+0x1ce>
        {
            err -= dy;
 8003c6a:	8afa      	ldrh	r2, [r7, #22]
 8003c6c:	8a3b      	ldrh	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8003c74:	89fa      	ldrh	r2, [r7, #14]
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	4413      	add	r3, r2
 8003c7a:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 < dy)
 8003c7c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	dad8      	bge.n	8003c3a <drv_ssd1306_draw_line+0x18c>
        {
            err += dx;
 8003c88:	8afa      	ldrh	r2, [r7, #22]
 8003c8a:	8a7b      	ldrh	r3, [r7, #18]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8003c92:	89ba      	ldrh	r2, [r7, #12]
 8003c94:	88bb      	ldrh	r3, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	80bb      	strh	r3, [r7, #4]
        drv_ssd1306_draw_pixel(x0, y0, color);
 8003c9a:	e7ce      	b.n	8003c3a <drv_ssd1306_draw_line+0x18c>
            break;
 8003c9c:	bf00      	nop
        }
    }
}
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd90      	pop	{r4, r7, pc}

08003ca4 <drv_ssd1306_draw_rectangle>:

void drv_ssd1306_draw_rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, drv_ssd1306_color_t color)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	80fb      	strh	r3, [r7, #6]
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	80bb      	strh	r3, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	807b      	strh	r3, [r7, #2]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	803b      	strh	r3, [r7, #0]
    /* Check input parameters */
    if (x >= DRV_SSD1306_WIDTH || y >= DRV_SSD1306_HEIGHT)
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc6:	d853      	bhi.n	8003d70 <drv_ssd1306_draw_rectangle+0xcc>
 8003cc8:	88bb      	ldrh	r3, [r7, #4]
 8003cca:	2b3f      	cmp	r3, #63	; 0x3f
 8003ccc:	d850      	bhi.n	8003d70 <drv_ssd1306_draw_rectangle+0xcc>
    {
        /* Return error */
        return;
    }
    /* Check width and height */
    if ((x + w) >= DRV_SSD1306_WIDTH)
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cd6:	dd03      	ble.n	8003ce0 <drv_ssd1306_draw_rectangle+0x3c>
    {
        w = DRV_SSD1306_WIDTH - x;
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003cde:	807b      	strh	r3, [r7, #2]
    }
    if ((y + h) >= DRV_SSD1306_HEIGHT)
 8003ce0:	88ba      	ldrh	r2, [r7, #4]
 8003ce2:	883b      	ldrh	r3, [r7, #0]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	2b3f      	cmp	r3, #63	; 0x3f
 8003ce8:	dd03      	ble.n	8003cf2 <drv_ssd1306_draw_rectangle+0x4e>
    {
        h = DRV_SSD1306_HEIGHT - y;
 8003cea:	88bb      	ldrh	r3, [r7, #4]
 8003cec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003cf0:	803b      	strh	r3, [r7, #0]
    }
    /* Draw 4 lines */
    drv_ssd1306_draw_line(x, y, x + w, y, color);         /* Top line */
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	88bc      	ldrh	r4, [r7, #4]
 8003cfc:	88b9      	ldrh	r1, [r7, #4]
 8003cfe:	88f8      	ldrh	r0, [r7, #6]
 8003d00:	7e3b      	ldrb	r3, [r7, #24]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	4623      	mov	r3, r4
 8003d06:	f7ff fed2 	bl	8003aae <drv_ssd1306_draw_line>
    drv_ssd1306_draw_line(x, y + h, x + w, y + h, color); /* Bottom line */
 8003d0a:	88ba      	ldrh	r2, [r7, #4]
 8003d0c:	883b      	ldrh	r3, [r7, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	b299      	uxth	r1, r3
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	4413      	add	r3, r2
 8003d18:	b29c      	uxth	r4, r3
 8003d1a:	88ba      	ldrh	r2, [r7, #4]
 8003d1c:	883b      	ldrh	r3, [r7, #0]
 8003d1e:	4413      	add	r3, r2
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	88f8      	ldrh	r0, [r7, #6]
 8003d24:	7e3b      	ldrb	r3, [r7, #24]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	f7ff febf 	bl	8003aae <drv_ssd1306_draw_line>
    drv_ssd1306_draw_line(x, y, x, y + h, color);         /* Left line */
 8003d30:	88ba      	ldrh	r2, [r7, #4]
 8003d32:	883b      	ldrh	r3, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	b29c      	uxth	r4, r3
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	88b9      	ldrh	r1, [r7, #4]
 8003d3c:	88f8      	ldrh	r0, [r7, #6]
 8003d3e:	7e3b      	ldrb	r3, [r7, #24]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4623      	mov	r3, r4
 8003d44:	f7ff feb3 	bl	8003aae <drv_ssd1306_draw_line>
    drv_ssd1306_draw_line(x + w, y, x + w, y + h, color); /* Right line */
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b298      	uxth	r0, r3
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	887b      	ldrh	r3, [r7, #2]
 8003d54:	4413      	add	r3, r2
 8003d56:	b29c      	uxth	r4, r3
 8003d58:	88ba      	ldrh	r2, [r7, #4]
 8003d5a:	883b      	ldrh	r3, [r7, #0]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	88b9      	ldrh	r1, [r7, #4]
 8003d62:	7e3b      	ldrb	r3, [r7, #24]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	4622      	mov	r2, r4
 8003d6a:	f7ff fea0 	bl	8003aae <drv_ssd1306_draw_line>
 8003d6e:	e000      	b.n	8003d72 <drv_ssd1306_draw_rectangle+0xce>
        return;
 8003d70:	bf00      	nop
}
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <drv_ssd1306_draw_hand_thin>:
    drv_ssd1306_write_command(drv_ssd1306, 0xAE);
}

// draw thin hand = second hand
void drv_ssd1306_draw_hand_thin(float hand_angle, float hand_lenght_long, float hand_legth_short)
{
 8003d78:	b5b0      	push	{r4, r5, r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d82:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d86:	ed87 1a01 	vstr	s2, [r7, #4]
    float ypos;
    float xpos2;
    float ypos2;

    // calculate starting and ending position of the second hand
    xpos  = round(CENTER_X + sin(degToRad(hand_angle)) * hand_lenght_long);        // calculate x pos based on angle and radius
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7fc fbf4 	bl	8000578 <__aeabi_f2d>
 8003d90:	a3a9      	add	r3, pc, #676	; (adr r3, 8004038 <drv_ssd1306_draw_hand_thin+0x2c0>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fc47 	bl	8000628 <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	4ba6      	ldr	r3, [pc, #664]	; (8004040 <drv_ssd1306_draw_hand_thin+0x2c8>)
 8003da8:	f7fc fd68 	bl	800087c <__aeabi_ddiv>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	ec43 2b17 	vmov	d7, r2, r3
 8003db4:	eeb0 0a47 	vmov.f32	s0, s14
 8003db8:	eef0 0a67 	vmov.f32	s1, s15
 8003dbc:	f00f fe68 	bl	8013a90 <sin>
 8003dc0:	ec55 4b10 	vmov	r4, r5, d0
 8003dc4:	68b8      	ldr	r0, [r7, #8]
 8003dc6:	f7fc fbd7 	bl	8000578 <__aeabi_f2d>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7fc fc29 	bl	8000628 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	4b98      	ldr	r3, [pc, #608]	; (8004044 <drv_ssd1306_draw_hand_thin+0x2cc>)
 8003de4:	f7fc fa6a 	bl	80002bc <__adddf3>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	ec43 2b17 	vmov	d7, r2, r3
 8003df0:	eeb0 0a47 	vmov.f32	s0, s14
 8003df4:	eef0 0a67 	vmov.f32	s1, s15
 8003df8:	f00f fe02 	bl	8013a00 <round>
 8003dfc:	ec53 2b10 	vmov	r2, r3, d0
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	f7fc fed2 	bl	8000bac <__aeabi_d2f>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	61fb      	str	r3, [r7, #28]
    ypos  = round(CENTER_Y - cos(degToRad(hand_angle)) * hand_lenght_long);        // calculate y pos based on angle and radius
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7fc fbb3 	bl	8000578 <__aeabi_f2d>
 8003e12:	a389      	add	r3, pc, #548	; (adr r3, 8004038 <drv_ssd1306_draw_hand_thin+0x2c0>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc fc06 	bl	8000628 <__aeabi_dmul>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	4b85      	ldr	r3, [pc, #532]	; (8004040 <drv_ssd1306_draw_hand_thin+0x2c8>)
 8003e2a:	f7fc fd27 	bl	800087c <__aeabi_ddiv>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	ec43 2b17 	vmov	d7, r2, r3
 8003e36:	eeb0 0a47 	vmov.f32	s0, s14
 8003e3a:	eef0 0a67 	vmov.f32	s1, s15
 8003e3e:	f00f fd8b 	bl	8013958 <cos>
 8003e42:	ec55 4b10 	vmov	r4, r5, d0
 8003e46:	68b8      	ldr	r0, [r7, #8]
 8003e48:	f7fc fb96 	bl	8000578 <__aeabi_f2d>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc fbe8 	bl	8000628 <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	4978      	ldr	r1, [pc, #480]	; (8004044 <drv_ssd1306_draw_hand_thin+0x2cc>)
 8003e62:	f7fc fa29 	bl	80002b8 <__aeabi_dsub>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	ec43 2b17 	vmov	d7, r2, r3
 8003e6e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e72:	eef0 0a67 	vmov.f32	s1, s15
 8003e76:	f00f fdc3 	bl	8013a00 <round>
 8003e7a:	ec53 2b10 	vmov	r2, r3, d0
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fe93 	bl	8000bac <__aeabi_d2f>
 8003e86:	4603      	mov	r3, r0
 8003e88:	61bb      	str	r3, [r7, #24]
    xpos2 = round(CENTER_X + sin(degToRad(hand_angle + 180)) * hand_legth_short);  // calculate x pos based on angle and radius
 8003e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e8e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004048 <drv_ssd1306_draw_hand_thin+0x2d0>
 8003e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e96:	ee17 0a90 	vmov	r0, s15
 8003e9a:	f7fc fb6d 	bl	8000578 <__aeabi_f2d>
 8003e9e:	a366      	add	r3, pc, #408	; (adr r3, 8004038 <drv_ssd1306_draw_hand_thin+0x2c0>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc fbc0 	bl	8000628 <__aeabi_dmul>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	4b62      	ldr	r3, [pc, #392]	; (8004040 <drv_ssd1306_draw_hand_thin+0x2c8>)
 8003eb6:	f7fc fce1 	bl	800087c <__aeabi_ddiv>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	ec43 2b17 	vmov	d7, r2, r3
 8003ec2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ec6:	eef0 0a67 	vmov.f32	s1, s15
 8003eca:	f00f fde1 	bl	8013a90 <sin>
 8003ece:	ec55 4b10 	vmov	r4, r5, d0
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc fb50 	bl	8000578 <__aeabi_f2d>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc fba2 	bl	8000628 <__aeabi_dmul>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	4b54      	ldr	r3, [pc, #336]	; (8004044 <drv_ssd1306_draw_hand_thin+0x2cc>)
 8003ef2:	f7fc f9e3 	bl	80002bc <__adddf3>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	ec43 2b17 	vmov	d7, r2, r3
 8003efe:	eeb0 0a47 	vmov.f32	s0, s14
 8003f02:	eef0 0a67 	vmov.f32	s1, s15
 8003f06:	f00f fd7b 	bl	8013a00 <round>
 8003f0a:	ec53 2b10 	vmov	r2, r3, d0
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	f7fc fe4b 	bl	8000bac <__aeabi_d2f>
 8003f16:	4603      	mov	r3, r0
 8003f18:	617b      	str	r3, [r7, #20]
    ypos2 = round(CENTER_Y - cos(degToRad(hand_angle + 180)) * hand_legth_short);  // calculate y pos based on angle and radius
 8003f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f1e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004048 <drv_ssd1306_draw_hand_thin+0x2d0>
 8003f22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f26:	ee17 0a90 	vmov	r0, s15
 8003f2a:	f7fc fb25 	bl	8000578 <__aeabi_f2d>
 8003f2e:	a342      	add	r3, pc, #264	; (adr r3, 8004038 <drv_ssd1306_draw_hand_thin+0x2c0>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f7fc fb78 	bl	8000628 <__aeabi_dmul>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <drv_ssd1306_draw_hand_thin+0x2c8>)
 8003f46:	f7fc fc99 	bl	800087c <__aeabi_ddiv>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	ec43 2b17 	vmov	d7, r2, r3
 8003f52:	eeb0 0a47 	vmov.f32	s0, s14
 8003f56:	eef0 0a67 	vmov.f32	s1, s15
 8003f5a:	f00f fcfd 	bl	8013958 <cos>
 8003f5e:	ec55 4b10 	vmov	r4, r5, d0
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fb08 	bl	8000578 <__aeabi_f2d>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	4629      	mov	r1, r5
 8003f70:	f7fc fb5a 	bl	8000628 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	4931      	ldr	r1, [pc, #196]	; (8004044 <drv_ssd1306_draw_hand_thin+0x2cc>)
 8003f7e:	f7fc f99b 	bl	80002b8 <__aeabi_dsub>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	ec43 2b17 	vmov	d7, r2, r3
 8003f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f8e:	eef0 0a67 	vmov.f32	s1, s15
 8003f92:	f00f fd35 	bl	8013a00 <round>
 8003f96:	ec53 2b10 	vmov	r2, r3, d0
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f7fc fe05 	bl	8000bac <__aeabi_d2f>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	613b      	str	r3, [r7, #16]

    drv_ssd1306_draw_line(xpos, ypos, xpos2, ypos2, 1);  // draw the main line
 8003fa6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fae:	ee17 3a90 	vmov	r3, s15
 8003fb2:	b298      	uxth	r0, r3
 8003fb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fbc:	ee17 3a90 	vmov	r3, s15
 8003fc0:	b299      	uxth	r1, r3
 8003fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fca:	ee17 3a90 	vmov	r3, s15
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd8:	ee17 3a90 	vmov	r3, s15
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2401      	movs	r4, #1
 8003fe0:	9400      	str	r4, [sp, #0]
 8003fe2:	f7ff fd64 	bl	8003aae <drv_ssd1306_draw_line>
    drv_ssd1306_raw_fill_circle(xpos2, ypos2, 3, 0);
 8003fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fee:	ee17 3a90 	vmov	r3, s15
 8003ff2:	b218      	sxth	r0, r3
 8003ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ffc:	ee17 3a90 	vmov	r3, s15
 8004000:	b219      	sxth	r1, r3
 8004002:	2300      	movs	r3, #0
 8004004:	2203      	movs	r2, #3
 8004006:	f7ff fc77 	bl	80038f8 <drv_ssd1306_raw_fill_circle>
    drv_ssd1306_raw_circle(xpos2, ypos2, 3, 1);  // draw small outline white circle
 800400a:	edd7 7a05 	vldr	s15, [r7, #20]
 800400e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004012:	ee17 3a90 	vmov	r3, s15
 8004016:	b218      	sxth	r0, r3
 8004018:	edd7 7a04 	vldr	s15, [r7, #16]
 800401c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004020:	ee17 3a90 	vmov	r3, s15
 8004024:	b219      	sxth	r1, r3
 8004026:	2301      	movs	r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	f7ff fb91 	bl	8003750 <drv_ssd1306_raw_circle>
}
 800402e:	bf00      	nop
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bdb0      	pop	{r4, r5, r7, pc}
 8004036:	bf00      	nop
 8004038:	54442d18 	.word	0x54442d18
 800403c:	400921fb 	.word	0x400921fb
 8004040:	40668000 	.word	0x40668000
 8004044:	40400000 	.word	0x40400000
 8004048:	43340000 	.word	0x43340000
 800404c:	00000000 	.word	0x00000000

08004050 <drv_ds1306_clock_style_simple>:
        }
    }
}

drv_ssd1306_err_t drv_ds1306_clock_style_simple(drv_ssd1306_config_t *drv_ssd1306, rtc_t rtc)
{
 8004050:	b5b0      	push	{r4, r5, r7, lr}
 8004052:	b090      	sub	sp, #64	; 0x40
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	e883 0006 	stmia.w	r3, {r1, r2}
    float ypos;
    float xpos2;
    float ypos2;
    char  string[10];

    drv_ssd1306_fill_theme_color();                     // set the drawing color to white
 800405e:	f7fe ffdd 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_raw_circle(CENTER_X, CENTER_Y, 31, 1);  // draw fullscreen circle
 8004062:	2301      	movs	r3, #1
 8004064:	221f      	movs	r2, #31
 8004066:	2120      	movs	r1, #32
 8004068:	2020      	movs	r0, #32
 800406a:	f7ff fb71 	bl	8003750 <drv_ssd1306_raw_circle>

    // draw 60 dots (pixels) around the circle, one for every minute/second
    for (int i = 0; i < 60; i++)
 800406e:	2300      	movs	r3, #0
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	e096      	b.n	80041a2 <drv_ds1306_clock_style_simple+0x152>
    {                                                        // draw 60 pixels around the circle
        xpos = round(CENTER_X + sin(degToRad(i * 6)) * 29);  // calculate x pos based on angle and radius
 8004074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fa68 	bl	8000554 <__aeabi_i2d>
 8004084:	a34a      	add	r3, pc, #296	; (adr r3, 80041b0 <drv_ds1306_clock_style_simple+0x160>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f7fc facd 	bl	8000628 <__aeabi_dmul>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <drv_ds1306_clock_style_simple+0x168>)
 800409c:	f7fc fbee 	bl	800087c <__aeabi_ddiv>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	ec43 2b17 	vmov	d7, r2, r3
 80040a8:	eeb0 0a47 	vmov.f32	s0, s14
 80040ac:	eef0 0a67 	vmov.f32	s1, s15
 80040b0:	f00f fcee 	bl	8013a90 <sin>
 80040b4:	ec51 0b10 	vmov	r0, r1, d0
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <drv_ds1306_clock_style_simple+0x16c>)
 80040be:	f7fc fab3 	bl	8000628 <__aeabi_dmul>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	4b3c      	ldr	r3, [pc, #240]	; (80041c0 <drv_ds1306_clock_style_simple+0x170>)
 80040d0:	f7fc f8f4 	bl	80002bc <__adddf3>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	ec43 2b17 	vmov	d7, r2, r3
 80040dc:	eeb0 0a47 	vmov.f32	s0, s14
 80040e0:	eef0 0a67 	vmov.f32	s1, s15
 80040e4:	f00f fc8c 	bl	8013a00 <round>
 80040e8:	ec53 2b10 	vmov	r2, r3, d0
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	f7fc fd5c 	bl	8000bac <__aeabi_d2f>
 80040f4:	4603      	mov	r3, r0
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ypos = round(CENTER_Y - cos(degToRad(i * 6)) * 29);  // calculate y pos based on angle and radius
 80040f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fa26 	bl	8000554 <__aeabi_i2d>
 8004108:	a329      	add	r3, pc, #164	; (adr r3, 80041b0 <drv_ds1306_clock_style_simple+0x160>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fa8b 	bl	8000628 <__aeabi_dmul>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <drv_ds1306_clock_style_simple+0x168>)
 8004120:	f7fc fbac 	bl	800087c <__aeabi_ddiv>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	ec43 2b17 	vmov	d7, r2, r3
 800412c:	eeb0 0a47 	vmov.f32	s0, s14
 8004130:	eef0 0a67 	vmov.f32	s1, s15
 8004134:	f00f fc10 	bl	8013958 <cos>
 8004138:	ec51 0b10 	vmov	r0, r1, d0
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <drv_ds1306_clock_style_simple+0x16c>)
 8004142:	f7fc fa71 	bl	8000628 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	491c      	ldr	r1, [pc, #112]	; (80041c0 <drv_ds1306_clock_style_simple+0x170>)
 8004150:	f7fc f8b2 	bl	80002b8 <__aeabi_dsub>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	ec43 2b17 	vmov	d7, r2, r3
 800415c:	eeb0 0a47 	vmov.f32	s0, s14
 8004160:	eef0 0a67 	vmov.f32	s1, s15
 8004164:	f00f fc4c 	bl	8013a00 <round>
 8004168:	ec53 2b10 	vmov	r2, r3, d0
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	f7fc fd1c 	bl	8000bac <__aeabi_d2f>
 8004174:	4603      	mov	r3, r0
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
        drv_ssd1306_draw_pixel(xpos, ypos, 1);               // draw white pixel on position xpos and ypos
 8004178:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800417c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004180:	ee17 3a90 	vmov	r3, s15
 8004184:	b29b      	uxth	r3, r3
 8004186:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800418a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418e:	ee17 2a90 	vmov	r2, s15
 8004192:	b291      	uxth	r1, r2
 8004194:	2201      	movs	r2, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff f91c 	bl	80033d4 <drv_ssd1306_draw_pixel>
    for (int i = 0; i < 60; i++)
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	3301      	adds	r3, #1
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
 80041a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a4:	2b3b      	cmp	r3, #59	; 0x3b
 80041a6:	f77f af65 	ble.w	8004074 <drv_ds1306_clock_style_simple+0x24>
    }

    // drawing big tickmarks
    for (int i = 0; i < 12; i++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	e13d      	b.n	800442c <drv_ds1306_clock_style_simple+0x3dc>
 80041b0:	54442d18 	.word	0x54442d18
 80041b4:	400921fb 	.word	0x400921fb
 80041b8:	40668000 	.word	0x40668000
 80041bc:	403d0000 	.word	0x403d0000
 80041c0:	40400000 	.word	0x40400000
    {
        if ((i % 3) != 0)
 80041c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c6:	4be2      	ldr	r3, [pc, #904]	; (8004550 <drv_ds1306_clock_style_simple+0x500>)
 80041c8:	fb83 3201 	smull	r3, r2, r3, r1
 80041cc:	17cb      	asrs	r3, r1, #31
 80041ce:	1ad2      	subs	r2, r2, r3
 80041d0:	4613      	mov	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	1aca      	subs	r2, r1, r3
 80041d8:	2a00      	cmp	r2, #0
 80041da:	f000 8124 	beq.w	8004426 <drv_ds1306_clock_style_simple+0x3d6>
        {  // only draw tickmarks for some numbers, leave empty space for 12, 3, 6, and 9
            xpos  = round(CENTER_X + sin(degToRad(i * 30)) * 25);  // calculate x pos based on angle and radius
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc f9b3 	bl	8000554 <__aeabi_i2d>
 80041ee:	a3d6      	add	r3, pc, #856	; (adr r3, 8004548 <drv_ds1306_clock_style_simple+0x4f8>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fc fa18 	bl	8000628 <__aeabi_dmul>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	4bd3      	ldr	r3, [pc, #844]	; (8004554 <drv_ds1306_clock_style_simple+0x504>)
 8004206:	f7fc fb39 	bl	800087c <__aeabi_ddiv>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	ec43 2b17 	vmov	d7, r2, r3
 8004212:	eeb0 0a47 	vmov.f32	s0, s14
 8004216:	eef0 0a67 	vmov.f32	s1, s15
 800421a:	f00f fc39 	bl	8013a90 <sin>
 800421e:	ec51 0b10 	vmov	r0, r1, d0
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	4bcc      	ldr	r3, [pc, #816]	; (8004558 <drv_ds1306_clock_style_simple+0x508>)
 8004228:	f7fc f9fe 	bl	8000628 <__aeabi_dmul>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	4bc8      	ldr	r3, [pc, #800]	; (800455c <drv_ds1306_clock_style_simple+0x50c>)
 800423a:	f7fc f83f 	bl	80002bc <__adddf3>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	ec43 2b17 	vmov	d7, r2, r3
 8004246:	eeb0 0a47 	vmov.f32	s0, s14
 800424a:	eef0 0a67 	vmov.f32	s1, s15
 800424e:	f00f fbd7 	bl	8013a00 <round>
 8004252:	ec53 2b10 	vmov	r2, r3, d0
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	f7fc fca7 	bl	8000bac <__aeabi_d2f>
 800425e:	4603      	mov	r3, r0
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
            ypos  = round(CENTER_Y - cos(degToRad(i * 30)) * 25);  // calculate y pos based on angle and radius
 8004262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f971 	bl	8000554 <__aeabi_i2d>
 8004272:	a3b5      	add	r3, pc, #724	; (adr r3, 8004548 <drv_ds1306_clock_style_simple+0x4f8>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fc f9d6 	bl	8000628 <__aeabi_dmul>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	4bb2      	ldr	r3, [pc, #712]	; (8004554 <drv_ds1306_clock_style_simple+0x504>)
 800428a:	f7fc faf7 	bl	800087c <__aeabi_ddiv>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	ec43 2b17 	vmov	d7, r2, r3
 8004296:	eeb0 0a47 	vmov.f32	s0, s14
 800429a:	eef0 0a67 	vmov.f32	s1, s15
 800429e:	f00f fb5b 	bl	8013958 <cos>
 80042a2:	ec51 0b10 	vmov	r0, r1, d0
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	4bab      	ldr	r3, [pc, #684]	; (8004558 <drv_ds1306_clock_style_simple+0x508>)
 80042ac:	f7fc f9bc 	bl	8000628 <__aeabi_dmul>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	49a8      	ldr	r1, [pc, #672]	; (800455c <drv_ds1306_clock_style_simple+0x50c>)
 80042ba:	f7fb fffd 	bl	80002b8 <__aeabi_dsub>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	ec43 2b17 	vmov	d7, r2, r3
 80042c6:	eeb0 0a47 	vmov.f32	s0, s14
 80042ca:	eef0 0a67 	vmov.f32	s1, s15
 80042ce:	f00f fb97 	bl	8013a00 <round>
 80042d2:	ec53 2b10 	vmov	r2, r3, d0
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fc fc67 	bl	8000bac <__aeabi_d2f>
 80042de:	4603      	mov	r3, r0
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
            xpos2 = round(CENTER_X + sin(degToRad(i * 30)) * 20);  // calculate x pos based on angle and radius
 80042e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc f931 	bl	8000554 <__aeabi_i2d>
 80042f2:	a395      	add	r3, pc, #596	; (adr r3, 8004548 <drv_ds1306_clock_style_simple+0x4f8>)
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f7fc f996 	bl	8000628 <__aeabi_dmul>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	4b92      	ldr	r3, [pc, #584]	; (8004554 <drv_ds1306_clock_style_simple+0x504>)
 800430a:	f7fc fab7 	bl	800087c <__aeabi_ddiv>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	ec43 2b17 	vmov	d7, r2, r3
 8004316:	eeb0 0a47 	vmov.f32	s0, s14
 800431a:	eef0 0a67 	vmov.f32	s1, s15
 800431e:	f00f fbb7 	bl	8013a90 <sin>
 8004322:	ec51 0b10 	vmov	r0, r1, d0
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	4b8d      	ldr	r3, [pc, #564]	; (8004560 <drv_ds1306_clock_style_simple+0x510>)
 800432c:	f7fc f97c 	bl	8000628 <__aeabi_dmul>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	4b87      	ldr	r3, [pc, #540]	; (800455c <drv_ds1306_clock_style_simple+0x50c>)
 800433e:	f7fb ffbd 	bl	80002bc <__adddf3>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	ec43 2b17 	vmov	d7, r2, r3
 800434a:	eeb0 0a47 	vmov.f32	s0, s14
 800434e:	eef0 0a67 	vmov.f32	s1, s15
 8004352:	f00f fb55 	bl	8013a00 <round>
 8004356:	ec53 2b10 	vmov	r2, r3, d0
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	f7fc fc25 	bl	8000bac <__aeabi_d2f>
 8004362:	4603      	mov	r3, r0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
            ypos2 = round(CENTER_Y - cos(degToRad(i * 30)) * 20);  // calculate y pos based on angle and radius
 8004366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc f8ef 	bl	8000554 <__aeabi_i2d>
 8004376:	a374      	add	r3, pc, #464	; (adr r3, 8004548 <drv_ds1306_clock_style_simple+0x4f8>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fc f954 	bl	8000628 <__aeabi_dmul>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	4b71      	ldr	r3, [pc, #452]	; (8004554 <drv_ds1306_clock_style_simple+0x504>)
 800438e:	f7fc fa75 	bl	800087c <__aeabi_ddiv>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	ec43 2b17 	vmov	d7, r2, r3
 800439a:	eeb0 0a47 	vmov.f32	s0, s14
 800439e:	eef0 0a67 	vmov.f32	s1, s15
 80043a2:	f00f fad9 	bl	8013958 <cos>
 80043a6:	ec51 0b10 	vmov	r0, r1, d0
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <drv_ds1306_clock_style_simple+0x510>)
 80043b0:	f7fc f93a 	bl	8000628 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	4967      	ldr	r1, [pc, #412]	; (800455c <drv_ds1306_clock_style_simple+0x50c>)
 80043be:	f7fb ff7b 	bl	80002b8 <__aeabi_dsub>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	ec43 2b17 	vmov	d7, r2, r3
 80043ca:	eeb0 0a47 	vmov.f32	s0, s14
 80043ce:	eef0 0a67 	vmov.f32	s1, s15
 80043d2:	f00f fb15 	bl	8013a00 <round>
 80043d6:	ec53 2b10 	vmov	r2, r3, d0
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	f7fc fbe5 	bl	8000bac <__aeabi_d2f>
 80043e2:	4603      	mov	r3, r0
 80043e4:	623b      	str	r3, [r7, #32]
            drv_ssd1306_draw_line(xpos, ypos, xpos2, ypos2, 1);    // draw a line for a tickmark
 80043e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80043ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ee:	ee17 3a90 	vmov	r3, s15
 80043f2:	b298      	uxth	r0, r3
 80043f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80043f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fc:	ee17 3a90 	vmov	r3, s15
 8004400:	b299      	uxth	r1, r3
 8004402:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440a:	ee17 3a90 	vmov	r3, s15
 800440e:	b29a      	uxth	r2, r3
 8004410:	edd7 7a08 	vldr	s15, [r7, #32]
 8004414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004418:	ee17 3a90 	vmov	r3, s15
 800441c:	b29b      	uxth	r3, r3
 800441e:	2401      	movs	r4, #1
 8004420:	9400      	str	r4, [sp, #0]
 8004422:	f7ff fb44 	bl	8003aae <drv_ssd1306_draw_line>
    for (int i = 0; i < 12; i++)
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	3301      	adds	r3, #1
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	2b0b      	cmp	r3, #11
 8004430:	f77f aec8 	ble.w	80041c4 <drv_ds1306_clock_style_simple+0x174>
        }
    }

    // draw labels 12, 3, 6 and 9, positions are hardcoded
    drv_ssd1306_goto_xy(58 - CENTER_X, 5);
 8004434:	2105      	movs	r1, #5
 8004436:	201a      	movs	r0, #26
 8004438:	f7ff f82e 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "12", &font_7x10, 1);
 800443c:	2201      	movs	r2, #1
 800443e:	4949      	ldr	r1, [pc, #292]	; (8004564 <drv_ds1306_clock_style_simple+0x514>)
 8004440:	4849      	ldr	r0, [pc, #292]	; (8004568 <drv_ds1306_clock_style_simple+0x518>)
 8004442:	f7ff f965 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(86 - CENTER_X, 28);
 8004446:	211c      	movs	r1, #28
 8004448:	2036      	movs	r0, #54	; 0x36
 800444a:	f7ff f825 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "3", &font_7x10, 1);
 800444e:	2201      	movs	r2, #1
 8004450:	4944      	ldr	r1, [pc, #272]	; (8004564 <drv_ds1306_clock_style_simple+0x514>)
 8004452:	4846      	ldr	r0, [pc, #280]	; (800456c <drv_ds1306_clock_style_simple+0x51c>)
 8004454:	f7ff f95c 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(61 - CENTER_X, 51);
 8004458:	2133      	movs	r1, #51	; 0x33
 800445a:	201d      	movs	r0, #29
 800445c:	f7ff f81c 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "6", &font_7x10, 1);
 8004460:	2201      	movs	r2, #1
 8004462:	4940      	ldr	r1, [pc, #256]	; (8004564 <drv_ds1306_clock_style_simple+0x514>)
 8004464:	4842      	ldr	r0, [pc, #264]	; (8004570 <drv_ds1306_clock_style_simple+0x520>)
 8004466:	f7ff f953 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(36 - CENTER_X, 28);
 800446a:	211c      	movs	r1, #28
 800446c:	2004      	movs	r0, #4
 800446e:	f7ff f813 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "9", &font_7x10, 1);
 8004472:	2201      	movs	r2, #1
 8004474:	493b      	ldr	r1, [pc, #236]	; (8004564 <drv_ds1306_clock_style_simple+0x514>)
 8004476:	483f      	ldr	r0, [pc, #252]	; (8004574 <drv_ds1306_clock_style_simple+0x524>)
 8004478:	f7ff f94a 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_draw_hand_thin(rtc.second * 6, 27, 10);
 800447c:	7abb      	ldrb	r3, [r7, #10]
 800447e:	461a      	mov	r2, r3
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004490:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8004494:	eef3 0a0b 	vmov.f32	s1, #59	; 0x41d80000  27.0
 8004498:	eeb0 0a67 	vmov.f32	s0, s15
 800449c:	f7ff fc6c 	bl	8003d78 <drv_ssd1306_draw_hand_thin>
    drv_ssd1306_draw_hand_thin(rtc.minute * 6, 17, 0);
 80044a0:	7a7b      	ldrb	r3, [r7, #9]
 80044a2:	461a      	mov	r2, r3
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b4:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8004578 <drv_ds1306_clock_style_simple+0x528>
 80044b8:	eef3 0a01 	vmov.f32	s1, #49	; 0x41880000  17.0
 80044bc:	eeb0 0a67 	vmov.f32	s0, s15
 80044c0:	f7ff fc5a 	bl	8003d78 <drv_ssd1306_draw_hand_thin>
    drv_ssd1306_draw_hand_thin(rtc.hour * 30 + (rtc.minute * 1.0 / 2), 14, 0);
 80044c4:	7a3b      	ldrb	r3, [r7, #8]
 80044c6:	461a      	mov	r2, r3
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc f83f 	bl	8000554 <__aeabi_i2d>
 80044d6:	4604      	mov	r4, r0
 80044d8:	460d      	mov	r5, r1
 80044da:	7a7b      	ldrb	r3, [r7, #9]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc f839 	bl	8000554 <__aeabi_i2d>
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044ea:	f7fc f9c7 	bl	800087c <__aeabi_ddiv>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4620      	mov	r0, r4
 80044f4:	4629      	mov	r1, r5
 80044f6:	f7fb fee1 	bl	80002bc <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f7fc fb53 	bl	8000bac <__aeabi_d2f>
 8004506:	4603      	mov	r3, r0
 8004508:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8004578 <drv_ds1306_clock_style_simple+0x528>
 800450c:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 8004510:	ee00 3a10 	vmov	s0, r3
 8004514:	f7ff fc30 	bl	8003d78 <drv_ssd1306_draw_hand_thin>

    drv_ssd1306_goto_xy(65, 0);
 8004518:	2100      	movs	r1, #0
 800451a:	2041      	movs	r0, #65	; 0x41
 800451c:	f7fe ffbc 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "%s", weekday[rtc.day_of_week - 1]);
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	3b01      	subs	r3, #1
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <drv_ds1306_clock_style_simple+0x52c>)
 8004526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4914      	ldr	r1, [pc, #80]	; (8004580 <drv_ds1306_clock_style_simple+0x530>)
 8004530:	4618      	mov	r0, r3
 8004532:	f00d f909 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_11x18, 1);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	2201      	movs	r2, #1
 800453c:	4911      	ldr	r1, [pc, #68]	; (8004584 <drv_ds1306_clock_style_simple+0x534>)
 800453e:	4618      	mov	r0, r3
 8004540:	e022      	b.n	8004588 <drv_ds1306_clock_style_simple+0x538>
 8004542:	bf00      	nop
 8004544:	f3af 8000 	nop.w
 8004548:	54442d18 	.word	0x54442d18
 800454c:	400921fb 	.word	0x400921fb
 8004550:	55555556 	.word	0x55555556
 8004554:	40668000 	.word	0x40668000
 8004558:	40390000 	.word	0x40390000
 800455c:	40400000 	.word	0x40400000
 8004560:	40340000 	.word	0x40340000
 8004564:	200011e8 	.word	0x200011e8
 8004568:	08014b8c 	.word	0x08014b8c
 800456c:	08014b90 	.word	0x08014b90
 8004570:	08014b94 	.word	0x08014b94
 8004574:	08014b98 	.word	0x08014b98
 8004578:	00000000 	.word	0x00000000
 800457c:	200011bc 	.word	0x200011bc
 8004580:	08014b9c 	.word	0x08014b9c
 8004584:	200011f0 	.word	0x200011f0
 8004588:	f7ff f8c2 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(70, 20);
 800458c:	2114      	movs	r1, #20
 800458e:	2046      	movs	r0, #70	; 0x46
 8004590:	f7fe ff82 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "%02d", rtc.day_of_month);
 8004594:	79bb      	ldrb	r3, [r7, #6]
 8004596:	461a      	mov	r2, r3
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	492f      	ldr	r1, [pc, #188]	; (800465c <drv_ds1306_clock_style_simple+0x60c>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f00d f8d2 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_11x18, 1);
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	2201      	movs	r2, #1
 80045aa:	492d      	ldr	r1, [pc, #180]	; (8004660 <drv_ds1306_clock_style_simple+0x610>)
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff f8af 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(92, 20);
 80045b2:	2114      	movs	r1, #20
 80045b4:	205c      	movs	r0, #92	; 0x5c
 80045b6:	f7fe ff6f 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "%s", months[rtc.month - 1]);
 80045ba:	797b      	ldrb	r3, [r7, #5]
 80045bc:	3b01      	subs	r3, #1
 80045be:	4a29      	ldr	r2, [pc, #164]	; (8004664 <drv_ds1306_clock_style_simple+0x614>)
 80045c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	4927      	ldr	r1, [pc, #156]	; (8004668 <drv_ds1306_clock_style_simple+0x618>)
 80045ca:	4618      	mov	r0, r3
 80045cc:	f00d f8bc 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_11x18, 1);
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	2201      	movs	r2, #1
 80045d6:	4922      	ldr	r1, [pc, #136]	; (8004660 <drv_ds1306_clock_style_simple+0x610>)
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff f899 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(70, 40);
 80045de:	2128      	movs	r1, #40	; 0x28
 80045e0:	2046      	movs	r0, #70	; 0x46
 80045e2:	f7fe ff59 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "20%02d", rtc.year);
 80045e6:	793b      	ldrb	r3, [r7, #4]
 80045e8:	461a      	mov	r2, r3
 80045ea:	f107 0314 	add.w	r3, r7, #20
 80045ee:	491f      	ldr	r1, [pc, #124]	; (800466c <drv_ds1306_clock_style_simple+0x61c>)
 80045f0:	4618      	mov	r0, r3
 80045f2:	f00d f8a9 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_11x18, 1);
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	2201      	movs	r2, #1
 80045fc:	4918      	ldr	r1, [pc, #96]	; (8004660 <drv_ds1306_clock_style_simple+0x610>)
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff f886 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_draw_bitmap(97, 0, icon_alarm, 16, 16, 1);
 8004604:	2301      	movs	r3, #1
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	2310      	movs	r3, #16
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2310      	movs	r3, #16
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <drv_ds1306_clock_style_simple+0x620>)
 8004610:	2100      	movs	r1, #0
 8004612:	2061      	movs	r0, #97	; 0x61
 8004614:	f7fe fe76 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_goto_xy(113, 5);
 8004618:	2105      	movs	r1, #5
 800461a:	2071      	movs	r0, #113	; 0x71
 800461c:	f7fe ff3c 	bl	8003498 <drv_ssd1306_goto_xy>
    uint8_t value = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	74fb      	strb	r3, [r7, #19]
    system_time_number_reminder(&value);
 8004624:	f107 0313 	add.w	r3, r7, #19
 8004628:	4618      	mov	r0, r3
 800462a:	f005 fb7d 	bl	8009d28 <system_time_number_reminder>
    char number_reminder[2];
    sprintf(number_reminder, "%d", value);
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	461a      	mov	r2, r3
 8004632:	f107 0310 	add.w	r3, r7, #16
 8004636:	490f      	ldr	r1, [pc, #60]	; (8004674 <drv_ds1306_clock_style_simple+0x624>)
 8004638:	4618      	mov	r0, r3
 800463a:	f00d f885 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) number_reminder, &font_7x10, 1);
 800463e:	f107 0310 	add.w	r3, r7, #16
 8004642:	2201      	movs	r2, #1
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <drv_ds1306_clock_style_simple+0x628>)
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f862 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_update_screen(drv_ssd1306);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7fe fcf7 	bl	8003040 <drv_ssd1306_update_screen>
    return DRV_SSD1306_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3738      	adds	r7, #56	; 0x38
 8004658:	46bd      	mov	sp, r7
 800465a:	bdb0      	pop	{r4, r5, r7, pc}
 800465c:	08014ba0 	.word	0x08014ba0
 8004660:	200011f0 	.word	0x200011f0
 8004664:	2000118c 	.word	0x2000118c
 8004668:	08014b9c 	.word	0x08014b9c
 800466c:	08014ba8 	.word	0x08014ba8
 8004670:	08018d34 	.word	0x08018d34
 8004674:	08014bb0 	.word	0x08014bb0
 8004678:	200011e8 	.word	0x200011e8

0800467c <drv_ds1306_clock_style_digital>:

drv_ssd1306_err_t drv_ds1306_clock_style_digital(drv_ssd1306_config_t *drv_ssd1306, rtc_t rtc, int8_t temp)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b08d      	sub	sp, #52	; 0x34
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	1d38      	adds	r0, r7, #4
 8004686:	e880 0006 	stmia.w	r0, {r1, r2}
 800468a:	70fb      	strb	r3, [r7, #3]
    char    string[20];
    uint8_t value = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	74fb      	strb	r3, [r7, #19]

    drv_ssd1306_fill_theme_color();
 8004690:	f7fe fcc4 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_goto_xy(20, 20);
 8004694:	2114      	movs	r1, #20
 8004696:	2014      	movs	r0, #20
 8004698:	f7fe fefe 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "%02d:%02d:%02d", rtc.hour, rtc.minute, rtc.second);
 800469c:	7a3b      	ldrb	r3, [r7, #8]
 800469e:	461a      	mov	r2, r3
 80046a0:	7a7b      	ldrb	r3, [r7, #9]
 80046a2:	4619      	mov	r1, r3
 80046a4:	7abb      	ldrb	r3, [r7, #10]
 80046a6:	f107 0014 	add.w	r0, r7, #20
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	460b      	mov	r3, r1
 80046ae:	4933      	ldr	r1, [pc, #204]	; (800477c <drv_ds1306_clock_style_digital+0x100>)
 80046b0:	f00d f84a 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_11x18, 1);
 80046b4:	f107 0314 	add.w	r3, r7, #20
 80046b8:	2201      	movs	r2, #1
 80046ba:	4931      	ldr	r1, [pc, #196]	; (8004780 <drv_ds1306_clock_style_digital+0x104>)
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff f827 	bl	8003710 <drv_ssd1306_puts>
    sprintf(string, (char *) "%s %d %s 20%02d", weekday[rtc.day_of_week - 1], rtc.day_of_month, months[rtc.month - 1], rtc.year);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	4a2f      	ldr	r2, [pc, #188]	; (8004784 <drv_ds1306_clock_style_digital+0x108>)
 80046c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046cc:	79bb      	ldrb	r3, [r7, #6]
 80046ce:	461c      	mov	r4, r3
 80046d0:	797b      	ldrb	r3, [r7, #5]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	492c      	ldr	r1, [pc, #176]	; (8004788 <drv_ds1306_clock_style_digital+0x10c>)
 80046d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046da:	7939      	ldrb	r1, [r7, #4]
 80046dc:	f107 0014 	add.w	r0, r7, #20
 80046e0:	9101      	str	r1, [sp, #4]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	4623      	mov	r3, r4
 80046e6:	4929      	ldr	r1, [pc, #164]	; (800478c <drv_ds1306_clock_style_digital+0x110>)
 80046e8:	f00d f82e 	bl	8011748 <siprintf>
    drv_ssd1306_goto_xy(10, 53);
 80046ec:	2135      	movs	r1, #53	; 0x35
 80046ee:	200a      	movs	r0, #10
 80046f0:	f7fe fed2 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) string, &font_7x10, 1);
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	2201      	movs	r2, #1
 80046fa:	4925      	ldr	r1, [pc, #148]	; (8004790 <drv_ds1306_clock_style_digital+0x114>)
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff f807 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(2, 2);
 8004702:	2102      	movs	r1, #2
 8004704:	2002      	movs	r0, #2
 8004706:	f7fe fec7 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "%d`C", temp);
 800470a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800470e:	f107 0314 	add.w	r3, r7, #20
 8004712:	4920      	ldr	r1, [pc, #128]	; (8004794 <drv_ds1306_clock_style_digital+0x118>)
 8004714:	4618      	mov	r0, r3
 8004716:	f00d f817 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_7x10, 1);
 800471a:	f107 0314 	add.w	r3, r7, #20
 800471e:	2201      	movs	r2, #1
 8004720:	491b      	ldr	r1, [pc, #108]	; (8004790 <drv_ds1306_clock_style_digital+0x114>)
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fff4 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_draw_bitmap(97, 0, icon_alarm, 16, 16, 1);
 8004728:	2301      	movs	r3, #1
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	2310      	movs	r3, #16
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2310      	movs	r3, #16
 8004732:	4a19      	ldr	r2, [pc, #100]	; (8004798 <drv_ds1306_clock_style_digital+0x11c>)
 8004734:	2100      	movs	r1, #0
 8004736:	2061      	movs	r0, #97	; 0x61
 8004738:	f7fe fde4 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_goto_xy(113, 5);
 800473c:	2105      	movs	r1, #5
 800473e:	2071      	movs	r0, #113	; 0x71
 8004740:	f7fe feaa 	bl	8003498 <drv_ssd1306_goto_xy>
    system_time_number_reminder(&value);
 8004744:	f107 0313 	add.w	r3, r7, #19
 8004748:	4618      	mov	r0, r3
 800474a:	f005 faed 	bl	8009d28 <system_time_number_reminder>
    sprintf(string, "%d", value);
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	461a      	mov	r2, r3
 8004752:	f107 0314 	add.w	r3, r7, #20
 8004756:	4911      	ldr	r1, [pc, #68]	; (800479c <drv_ds1306_clock_style_digital+0x120>)
 8004758:	4618      	mov	r0, r3
 800475a:	f00c fff5 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_7x10, 1);
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	2201      	movs	r2, #1
 8004764:	490a      	ldr	r1, [pc, #40]	; (8004790 <drv_ds1306_clock_style_digital+0x114>)
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe ffd2 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_update_screen(drv_ssd1306);
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7fe fc67 	bl	8003040 <drv_ssd1306_update_screen>
    return DRV_SSD1306_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	372c      	adds	r7, #44	; 0x2c
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}
 800477c:	08014bb4 	.word	0x08014bb4
 8004780:	200011f0 	.word	0x200011f0
 8004784:	200011bc 	.word	0x200011bc
 8004788:	2000118c 	.word	0x2000118c
 800478c:	08014bc4 	.word	0x08014bc4
 8004790:	200011e8 	.word	0x200011e8
 8004794:	08014bd4 	.word	0x08014bd4
 8004798:	08018d34 	.word	0x08018d34
 800479c:	08014bb0 	.word	0x08014bb0

080047a0 <drv_uart_init>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

drv_uart_error_t drv_uart_init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	bsp_uart_init();
 80047a4:	f7fd f9ac 	bl	8001b00 <bsp_uart_init>
    return DRV_UART_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <drv_uart_printf>:

drv_uart_error_t drv_uart_printf(uint8_t *string)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
    bsp_uart_printf(&huart2, string);
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4804      	ldr	r0, [pc, #16]	; (80047cc <drv_uart_printf+0x1c>)
 80047bc:	f7fd f9ae 	bl	8001b1c <bsp_uart_printf>
    return DRV_UART_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20003c90 	.word	0x20003c90

080047d0 <drv_uart_receive>:

drv_uart_error_t drv_uart_receive(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
    bsp_uart_receive_to_idle_dma(&huart2, rx_buffer_user, RX_BUFFER_SIZE);
 80047d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <drv_uart_receive+0x18>)
 80047da:	4804      	ldr	r0, [pc, #16]	; (80047ec <drv_uart_receive+0x1c>)
 80047dc:	f7fd f9b2 	bl	8001b44 <bsp_uart_receive_to_idle_dma>
}
 80047e0:	bf00      	nop
 80047e2:	4618      	mov	r0, r3
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20001e14 	.word	0x20001e14
 80047ec:	20003c90 	.word	0x20003c90

080047f0 <drv_uart_num_unread_cb_data>:

uint32_t drv_uart_num_unread_cb_data(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
	return cb_data_count(&cb);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <drv_uart_num_unread_cb_data+0x10>)
 80047f6:	f001 f861 	bl	80058bc <cb_data_count>
 80047fa:	4603      	mov	r3, r0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	2000162c 	.word	0x2000162c

08004804 <drv_uart_read_cb_data>:

drv_uart_error_t drv_uart_read_cb_data(uint8_t *handle_data, uint32_t nbytes)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
	cb_read(&cb, handle_data, nbytes);
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4804      	ldr	r0, [pc, #16]	; (8004824 <drv_uart_read_cb_data+0x20>)
 8004814:	f000 ff8c 	bl	8005730 <cb_read>

	return DRV_UART_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	2000162c 	.word	0x2000162c

08004828 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800482c:	f005 fd32 	bl	800a294 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004830:	f000 f81a 	bl	8004868 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004834:	f000 fa96 	bl	8004d64 <MX_GPIO_Init>
    MX_DMA_Init();
 8004838:	f000 fa64 	bl	8004d04 <MX_DMA_Init>
    MX_USART2_UART_Init();
 800483c:	f000 fa38 	bl	8004cb0 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8004840:	f000 f87a 	bl	8004938 <MX_I2C1_Init>
    MX_I2C3_Init();
 8004844:	f000 f8a6 	bl	8004994 <MX_I2C3_Init>
    MX_TIM3_Init();
 8004848:	f000 f8d2 	bl	80049f0 <MX_TIM3_Init>
    MX_TIM9_Init();
 800484c:	f000 f9d2 	bl	8004bf4 <MX_TIM9_Init>
    MX_TIM4_Init();
 8004850:	f000 f95a 	bl	8004b08 <MX_TIM4_Init>
    MX_TIM11_Init();
 8004854:	f000 fa08 	bl	8004c68 <MX_TIM11_Init>
    /* USER CODE BEGIN 2 */
    system_manager_init();
 8004858:	f004 fddc 	bl	8009414 <system_manager_init>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        system_manager_run(&button_state);
 800485c:	4801      	ldr	r0, [pc, #4]	; (8004864 <main+0x3c>)
 800485e:	f004 fdf1 	bl	8009444 <system_manager_run>
 8004862:	e7fb      	b.n	800485c <main+0x34>
 8004864:	20003d94 	.word	0x20003d94

08004868 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b094      	sub	sp, #80	; 0x50
 800486c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800486e:	f107 0320 	add.w	r3, r7, #32
 8004872:	2230      	movs	r2, #48	; 0x30
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f00c fb90 	bl	8010f9c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800487c:	f107 030c 	add.w	r3, r7, #12
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <SystemClock_Config+0xc8>)
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <SystemClock_Config+0xc8>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	6413      	str	r3, [r2, #64]	; 0x40
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <SystemClock_Config+0xc8>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a8:	2300      	movs	r3, #0
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	4b21      	ldr	r3, [pc, #132]	; (8004934 <SystemClock_Config+0xcc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a20      	ldr	r2, [pc, #128]	; (8004934 <SystemClock_Config+0xcc>)
 80048b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <SystemClock_Config+0xcc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 80048c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 80048ce:	2302      	movs	r3, #2
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80048d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM       = 4;
 80048d8:	2304      	movs	r3, #4
 80048da:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN       = 100;
 80048dc:	2364      	movs	r3, #100	; 0x64
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 80048e0:	2302      	movs	r3, #2
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ       = 4;
 80048e4:	2304      	movs	r3, #4
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048e8:	f107 0320 	add.w	r3, r7, #32
 80048ec:	4618      	mov	r0, r3
 80048ee:	f009 fb6b 	bl	800dfc8 <HAL_RCC_OscConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <SystemClock_Config+0x94>
    {
        Error_Handler();
 80048f8:	f000 facc 	bl	8004e94 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048fc:	230f      	movs	r3, #15
 80048fe:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8004900:	2302      	movs	r3, #2
 8004902:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800490c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	2103      	movs	r1, #3
 8004918:	4618      	mov	r0, r3
 800491a:	f009 fdcd 	bl	800e4b8 <HAL_RCC_ClockConfig>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <SystemClock_Config+0xc0>
    {
        Error_Handler();
 8004924:	f000 fab6 	bl	8004e94 <Error_Handler>
    }
}
 8004928:	bf00      	nop
 800492a:	3750      	adds	r7, #80	; 0x50
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000

08004938 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance             = I2C1;
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <MX_I2C1_Init+0x50>)
 800493e:	4a13      	ldr	r2, [pc, #76]	; (800498c <MX_I2C1_Init+0x54>)
 8004940:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed      = 400000;
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <MX_I2C1_Init+0x50>)
 8004944:	4a12      	ldr	r2, [pc, #72]	; (8004990 <MX_I2C1_Init+0x58>)
 8004946:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8004948:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <MX_I2C1_Init+0x50>)
 800494a:	2200      	movs	r2, #0
 800494c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1     = 0;
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <MX_I2C1_Init+0x50>)
 8004950:	2200      	movs	r2, #0
 8004952:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <MX_I2C1_Init+0x50>)
 8004956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800495a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <MX_I2C1_Init+0x50>)
 800495e:	2200      	movs	r2, #0
 8004960:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2     = 0;
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <MX_I2C1_Init+0x50>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004968:	4b07      	ldr	r3, [pc, #28]	; (8004988 <MX_I2C1_Init+0x50>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <MX_I2C1_Init+0x50>)
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004974:	4804      	ldr	r0, [pc, #16]	; (8004988 <MX_I2C1_Init+0x50>)
 8004976:	f006 fc05 	bl	800b184 <HAL_I2C_Init>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8004980:	f000 fa88 	bl	8004e94 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8004984:	bf00      	nop
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20003a68 	.word	0x20003a68
 800498c:	40005400 	.word	0x40005400
 8004990:	00061a80 	.word	0x00061a80

08004994 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance             = I2C3;
 8004998:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <MX_I2C3_Init+0x50>)
 800499a:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <MX_I2C3_Init+0x54>)
 800499c:	601a      	str	r2, [r3, #0]
    hi2c3.Init.ClockSpeed      = 400000;
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049a0:	4a12      	ldr	r2, [pc, #72]	; (80049ec <MX_I2C3_Init+0x58>)
 80049a2:	605a      	str	r2, [r3, #4]
    hi2c3.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
    hi2c3.Init.OwnAddress1     = 0;
 80049aa:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	60da      	str	r2, [r3, #12]
    hi2c3.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049b6:	611a      	str	r2, [r3, #16]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2     = 0;
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80049d0:	4804      	ldr	r0, [pc, #16]	; (80049e4 <MX_I2C3_Init+0x50>)
 80049d2:	f006 fbd7 	bl	800b184 <HAL_I2C_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_I2C3_Init+0x4c>
    {
        Error_Handler();
 80049dc:	f000 fa5a 	bl	8004e94 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */
}
 80049e0:	bf00      	nop
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20003abc 	.word	0x20003abc
 80049e8:	40005c00 	.word	0x40005c00
 80049ec:	00061a80 	.word	0x00061a80

080049f0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	; 0x38
 80049f4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = { 0 };
 80049f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig      = { 0 };
 8004a04:	f107 0320 	add.w	r3, r7, #32
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef      sConfigOC          = { 0 };
 8004a0e:	1d3b      	adds	r3, r7, #4
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	611a      	str	r2, [r3, #16]
 8004a1c:	615a      	str	r2, [r3, #20]
 8004a1e:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance               = TIM3;
 8004a20:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a22:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <MX_TIM3_Init+0x114>)
 8004a24:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler         = 0;
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004a2c:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
    htim3.Init.Period            = 65535;
 8004a32:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a38:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8004a3a:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a40:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a46:	482e      	ldr	r0, [pc, #184]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a48:	f009 ff56 	bl	800e8f8 <HAL_TIM_Base_Init>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <MX_TIM3_Init+0x66>
    {
        Error_Handler();
 8004a52:	f000 fa1f 	bl	8004e94 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a60:	4619      	mov	r1, r3
 8004a62:	4827      	ldr	r0, [pc, #156]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a64:	f00a face 	bl	800f004 <HAL_TIM_ConfigClockSource>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_TIM3_Init+0x82>
    {
        Error_Handler();
 8004a6e:	f000 fa11 	bl	8004e94 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a72:	4823      	ldr	r0, [pc, #140]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a74:	f009 fff2 	bl	800ea5c <HAL_TIM_PWM_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM3_Init+0x92>
    {
        Error_Handler();
 8004a7e:	f000 fa09 	bl	8004e94 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a8a:	f107 0320 	add.w	r3, r7, #32
 8004a8e:	4619      	mov	r1, r3
 8004a90:	481b      	ldr	r0, [pc, #108]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004a92:	f00a fe73 	bl	800f77c <HAL_TIMEx_MasterConfigSynchronization>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_TIM3_Init+0xb0>
    {
        Error_Handler();
 8004a9c:	f000 f9fa 	bl	8004e94 <Error_Handler>
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 8004aa0:	2360      	movs	r3, #96	; 0x60
 8004aa2:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse      = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ab0:	1d3b      	adds	r3, r7, #4
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4812      	ldr	r0, [pc, #72]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004ab8:	f00a f9e2 	bl	800ee80 <HAL_TIM_PWM_ConfigChannel>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <MX_TIM3_Init+0xd6>
    {
        Error_Handler();
 8004ac2:	f000 f9e7 	bl	8004e94 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ac6:	1d3b      	adds	r3, r7, #4
 8004ac8:	2204      	movs	r2, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	480c      	ldr	r0, [pc, #48]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004ace:	f00a f9d7 	bl	800ee80 <HAL_TIM_PWM_ConfigChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <MX_TIM3_Init+0xec>
    {
        Error_Handler();
 8004ad8:	f000 f9dc 	bl	8004e94 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	2208      	movs	r2, #8
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4807      	ldr	r0, [pc, #28]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004ae4:	f00a f9cc 	bl	800ee80 <HAL_TIM_PWM_ConfigChannel>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM3_Init+0x102>
    {
        Error_Handler();
 8004aee:	f000 f9d1 	bl	8004e94 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8004af2:	4803      	ldr	r0, [pc, #12]	; (8004b00 <MX_TIM3_Init+0x110>)
 8004af4:	f000 fb5a 	bl	80051ac <HAL_TIM_MspPostInit>
}
 8004af8:	bf00      	nop
 8004afa:	3738      	adds	r7, #56	; 0x38
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20003b70 	.word	0x20003b70
 8004b04:	40000400 	.word	0x40000400

08004b08 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08e      	sub	sp, #56	; 0x38
 8004b0c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef  sClockSourceConfig = { 0 };
 8004b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig      = { 0 };
 8004b1c:	f107 0320 	add.w	r3, r7, #32
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef      sConfigOC          = { 0 };
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	611a      	str	r2, [r3, #16]
 8004b34:	615a      	str	r2, [r3, #20]
 8004b36:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance               = TIM4;
 8004b38:	4b2c      	ldr	r3, [pc, #176]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b3a:	4a2d      	ldr	r2, [pc, #180]	; (8004bf0 <MX_TIM4_Init+0xe8>)
 8004b3c:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler         = 0;
 8004b3e:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004b44:	4b29      	ldr	r3, [pc, #164]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
    htim4.Init.Period            = 65535;
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b50:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004b5e:	4823      	ldr	r0, [pc, #140]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b60:	f009 feca 	bl	800e8f8 <HAL_TIM_Base_Init>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <MX_TIM4_Init+0x66>
    {
        Error_Handler();
 8004b6a:	f000 f993 	bl	8004e94 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b78:	4619      	mov	r1, r3
 8004b7a:	481c      	ldr	r0, [pc, #112]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b7c:	f00a fa42 	bl	800f004 <HAL_TIM_ConfigClockSource>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <MX_TIM4_Init+0x82>
    {
        Error_Handler();
 8004b86:	f000 f985 	bl	8004e94 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004b8a:	4818      	ldr	r0, [pc, #96]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004b8c:	f009 ff66 	bl	800ea5c <HAL_TIM_PWM_Init>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_TIM4_Init+0x92>
    {
        Error_Handler();
 8004b96:	f000 f97d 	bl	8004e94 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ba2:	f107 0320 	add.w	r3, r7, #32
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4810      	ldr	r0, [pc, #64]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004baa:	f00a fde7 	bl	800f77c <HAL_TIMEx_MasterConfigSynchronization>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_TIM4_Init+0xb0>
    {
        Error_Handler();
 8004bb4:	f000 f96e 	bl	8004e94 <Error_Handler>
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 8004bb8:	2360      	movs	r3, #96	; 0x60
 8004bba:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse      = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4807      	ldr	r0, [pc, #28]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004bd0:	f00a f956 	bl	800ee80 <HAL_TIM_PWM_ConfigChannel>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <MX_TIM4_Init+0xd6>
    {
        Error_Handler();
 8004bda:	f000 f95b 	bl	8004e94 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 8004bde:	4803      	ldr	r0, [pc, #12]	; (8004bec <MX_TIM4_Init+0xe4>)
 8004be0:	f000 fae4 	bl	80051ac <HAL_TIM_MspPostInit>
}
 8004be4:	bf00      	nop
 8004be6:	3738      	adds	r7, #56	; 0x38
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20003bb8 	.word	0x20003bb8
 8004bf0:	40000800 	.word	0x40000800

08004bf4 <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM9_Init 0 */

    /* USER CODE END TIM9_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN TIM9_Init 1 */

    /* USER CODE END TIM9_Init 1 */
    htim9.Instance               = TIM9;
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c08:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <MX_TIM9_Init+0x70>)
 8004c0a:	601a      	str	r2, [r3, #0]
    htim9.Init.Prescaler         = 0;
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
    htim9.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	609a      	str	r2, [r3, #8]
    htim9.Init.Period            = 65535;
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c1e:	60da      	str	r2, [r3, #12]
    htim9.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]
    htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c26:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004c2c:	480c      	ldr	r0, [pc, #48]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c2e:	f009 fe63 	bl	800e8f8 <HAL_TIM_Base_Init>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <MX_TIM9_Init+0x48>
    {
        Error_Handler();
 8004c38:	f000 f92c 	bl	8004e94 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c40:	603b      	str	r3, [r7, #0]
    if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004c42:	463b      	mov	r3, r7
 8004c44:	4619      	mov	r1, r3
 8004c46:	4806      	ldr	r0, [pc, #24]	; (8004c60 <MX_TIM9_Init+0x6c>)
 8004c48:	f00a f9dc 	bl	800f004 <HAL_TIM_ConfigClockSource>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <MX_TIM9_Init+0x62>
    {
        Error_Handler();
 8004c52:	f000 f91f 	bl	8004e94 <Error_Handler>
    }
    /* USER CODE BEGIN TIM9_Init 2 */

    /* USER CODE END TIM9_Init 2 */
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20003c00 	.word	0x20003c00
 8004c64:	40014000 	.word	0x40014000

08004c68 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
    /* USER CODE END TIM11_Init 0 */

    /* USER CODE BEGIN TIM11_Init 1 */

    /* USER CODE END TIM11_Init 1 */
    htim11.Instance               = TIM11;
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <MX_TIM11_Init+0x40>)
 8004c6e:	4a0f      	ldr	r2, [pc, #60]	; (8004cac <MX_TIM11_Init+0x44>)
 8004c70:	601a      	str	r2, [r3, #0]
    htim11.Init.Prescaler         = 10000 - 1;
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <MX_TIM11_Init+0x40>)
 8004c74:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c78:	605a      	str	r2, [r3, #4]
    htim11.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <MX_TIM11_Init+0x40>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
    htim11.Init.Period            = 10000 - 1;
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <MX_TIM11_Init+0x40>)
 8004c82:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c86:	60da      	str	r2, [r3, #12]
    htim11.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <MX_TIM11_Init+0x40>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	611a      	str	r2, [r3, #16]
    htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <MX_TIM11_Init+0x40>)
 8004c90:	2280      	movs	r2, #128	; 0x80
 8004c92:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004c94:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <MX_TIM11_Init+0x40>)
 8004c96:	f009 fe2f 	bl	800e8f8 <HAL_TIM_Base_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_TIM11_Init+0x3c>
    {
        Error_Handler();
 8004ca0:	f000 f8f8 	bl	8004e94 <Error_Handler>
    }
    /* USER CODE BEGIN TIM11_Init 2 */

    /* USER CODE END TIM11_Init 2 */
}
 8004ca4:	bf00      	nop
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20003c48 	.word	0x20003c48
 8004cac:	40014800 	.word	0x40014800

08004cb0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance          = USART2;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <MX_USART2_UART_Init+0x50>)
 8004cb8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate     = 115200;
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cc0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits     = UART_STOPBITS_1;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity       = UART_PARITY_NONE;
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode         = UART_MODE_TX_RX;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cd6:	220c      	movs	r2, #12
 8004cd8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004cda:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ce6:	4805      	ldr	r0, [pc, #20]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004ce8:	f00a fdca 	bl	800f880 <HAL_UART_Init>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8004cf2:	f000 f8cf 	bl	8004e94 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20003c90 	.word	0x20003c90
 8004d00:	40004400 	.word	0x40004400

08004d04 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <MX_DMA_Init+0x5c>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <MX_DMA_Init+0x5c>)
 8004d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <MX_DMA_Init+0x5c>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	200f      	movs	r0, #15
 8004d2c:	f005 fc23 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004d30:	200f      	movs	r0, #15
 8004d32:	f005 fc3c 	bl	800a5ae <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	2100      	movs	r1, #0
 8004d3a:	2010      	movs	r0, #16
 8004d3c:	f005 fc1b 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004d40:	2010      	movs	r0, #16
 8004d42:	f005 fc34 	bl	800a5ae <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2100      	movs	r1, #0
 8004d4a:	2011      	movs	r0, #17
 8004d4c:	f005 fc13 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004d50:	2011      	movs	r0, #17
 8004d52:	f005 fc2c 	bl	800a5ae <HAL_NVIC_EnableIRQ>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800

08004d64 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	; 0x28
 8004d68:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004d6a:	f107 0314 	add.w	r3, r7, #20
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	4a40      	ldr	r2, [pc, #256]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d88:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	4a39      	ldr	r2, [pc, #228]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004da0:	f043 0304 	orr.w	r3, r3, #4
 8004da4:	6313      	str	r3, [r2, #48]	; 0x30
 8004da6:	4b37      	ldr	r3, [pc, #220]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	4b33      	ldr	r3, [pc, #204]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	4a32      	ldr	r2, [pc, #200]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc2:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004dd8:	f043 0302 	orr.w	r3, r3, #2
 8004ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dde:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <MX_GPIO_Init+0x120>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pins : BUTTON_3_Pin BUTTON_6_Pin BUTTON_4_Pin BUTTON_5_Pin */
    GPIO_InitStruct.Pin  = BUTTON_3_Pin | BUTTON_6_Pin | BUTTON_4_Pin | BUTTON_5_Pin;
 8004dea:	f241 430c 	movw	r3, #5132	; 0x140c
 8004dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004df0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4821      	ldr	r0, [pc, #132]	; (8004e88 <MX_GPIO_Init+0x124>)
 8004e02:	f006 f80b 	bl	800ae1c <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON_1_Pin */
    GPIO_InitStruct.Pin  = BUTTON_1_Pin;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8004e16:	f107 0314 	add.w	r3, r7, #20
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	481b      	ldr	r0, [pc, #108]	; (8004e8c <MX_GPIO_Init+0x128>)
 8004e1e:	f005 fffd 	bl	800ae1c <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON_2_Pin */
    GPIO_InitStruct.Pin  = BUTTON_2_Pin;
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	4619      	mov	r1, r3
 8004e36:	4816      	ldr	r0, [pc, #88]	; (8004e90 <MX_GPIO_Init+0x12c>)
 8004e38:	f005 fff0 	bl	800ae1c <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2100      	movs	r1, #0
 8004e40:	2008      	movs	r0, #8
 8004e42:	f005 fb98 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004e46:	2008      	movs	r0, #8
 8004e48:	f005 fbb1 	bl	800a5ae <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2100      	movs	r1, #0
 8004e50:	2009      	movs	r0, #9
 8004e52:	f005 fb90 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004e56:	2009      	movs	r0, #9
 8004e58:	f005 fba9 	bl	800a5ae <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2100      	movs	r1, #0
 8004e60:	2017      	movs	r0, #23
 8004e62:	f005 fb88 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004e66:	2017      	movs	r0, #23
 8004e68:	f005 fba1 	bl	800a5ae <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	210e      	movs	r1, #14
 8004e70:	2028      	movs	r0, #40	; 0x28
 8004e72:	f005 fb80 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e76:	2028      	movs	r0, #40	; 0x28
 8004e78:	f005 fb99 	bl	800a5ae <HAL_NVIC_EnableIRQ>
}
 8004e7c:	bf00      	nop
 8004e7e:	3728      	adds	r7, #40	; 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40020800 	.word	0x40020800
 8004e8c:	40020000 	.word	0x40020000
 8004e90:	40020400 	.word	0x40020400

08004e94 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e98:	b672      	cpsid	i
}
 8004e9a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8004e9c:	e7fe      	b.n	8004e9c <Error_Handler+0x8>
	...

08004ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_MspInit+0x4c>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <HAL_MspInit+0x4c>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <HAL_MspInit+0x4c>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_MspInit+0x4c>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	4a08      	ldr	r2, [pc, #32]	; (8004eec <HAL_MspInit+0x4c>)
 8004ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_MspInit+0x4c>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08c      	sub	sp, #48	; 0x30
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef8:	f107 031c 	add.w	r3, r7, #28
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a5e      	ldr	r2, [pc, #376]	; (8005088 <HAL_I2C_MspInit+0x198>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12d      	bne.n	8004f6e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	4b5d      	ldr	r3, [pc, #372]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	4a5c      	ldr	r2, [pc, #368]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f1c:	f043 0302 	orr.w	r3, r3, #2
 8004f20:	6313      	str	r3, [r2, #48]	; 0x30
 8004f22:	4b5a      	ldr	r3, [pc, #360]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f34:	2312      	movs	r3, #18
 8004f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f40:	2304      	movs	r3, #4
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4851      	ldr	r0, [pc, #324]	; (8005090 <HAL_I2C_MspInit+0x1a0>)
 8004f4c:	f005 ff66 	bl	800ae1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	4b4d      	ldr	r3, [pc, #308]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	4a4c      	ldr	r2, [pc, #304]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f60:	4b4a      	ldr	r3, [pc, #296]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004f6c:	e087      	b.n	800507e <HAL_I2C_MspInit+0x18e>
  else if(hi2c->Instance==I2C3)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a48      	ldr	r2, [pc, #288]	; (8005094 <HAL_I2C_MspInit+0x1a4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	f040 8082 	bne.w	800507e <HAL_I2C_MspInit+0x18e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	4b43      	ldr	r3, [pc, #268]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a42      	ldr	r2, [pc, #264]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4b3c      	ldr	r3, [pc, #240]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a3b      	ldr	r2, [pc, #236]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fb8:	2312      	movs	r3, #18
 8004fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fc8:	f107 031c 	add.w	r3, r7, #28
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4832      	ldr	r0, [pc, #200]	; (8005098 <HAL_I2C_MspInit+0x1a8>)
 8004fd0:	f005 ff24 	bl	800ae1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fda:	2312      	movs	r3, #18
 8004fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fea:	f107 031c 	add.w	r3, r7, #28
 8004fee:	4619      	mov	r1, r3
 8004ff0:	482a      	ldr	r0, [pc, #168]	; (800509c <HAL_I2C_MspInit+0x1ac>)
 8004ff2:	f005 ff13 	bl	800ae1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	4a23      	ldr	r2, [pc, #140]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8005000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005004:	6413      	str	r3, [r2, #64]	; 0x40
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <HAL_I2C_MspInit+0x19c>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8005012:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <HAL_I2C_MspInit+0x1b4>)
 8005016:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 800501a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800501e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005020:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005028:	2200      	movs	r2, #0
 800502a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800502c:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 800502e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005032:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005034:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005036:	2200      	movs	r2, #0
 8005038:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 800503c:	2200      	movs	r2, #0
 800503e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005046:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005048:	2200      	movs	r2, #0
 800504a:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800504c:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 800504e:	2200      	movs	r2, #0
 8005050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8005052:	4813      	ldr	r0, [pc, #76]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005054:	f005 fac6 	bl	800a5e4 <HAL_DMA_Init>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_I2C_MspInit+0x172>
      Error_Handler();
 800505e:	f7ff ff19 	bl	8004e94 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 8005066:	635a      	str	r2, [r3, #52]	; 0x34
 8005068:	4a0d      	ldr	r2, [pc, #52]	; (80050a0 <HAL_I2C_MspInit+0x1b0>)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 14, 0);
 800506e:	2200      	movs	r2, #0
 8005070:	210e      	movs	r1, #14
 8005072:	2048      	movs	r0, #72	; 0x48
 8005074:	f005 fa7f 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005078:	2048      	movs	r0, #72	; 0x48
 800507a:	f005 fa98 	bl	800a5ae <HAL_NVIC_EnableIRQ>
}
 800507e:	bf00      	nop
 8005080:	3730      	adds	r7, #48	; 0x30
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40005400 	.word	0x40005400
 800508c:	40023800 	.word	0x40023800
 8005090:	40020400 	.word	0x40020400
 8005094:	40005c00 	.word	0x40005c00
 8005098:	40020800 	.word	0x40020800
 800509c:	40020000 	.word	0x40020000
 80050a0:	20003b10 	.word	0x20003b10
 80050a4:	40026070 	.word	0x40026070

080050a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a38      	ldr	r2, [pc, #224]	; (8005198 <HAL_TIM_Base_MspInit+0xf0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d116      	bne.n	80050e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	4b37      	ldr	r3, [pc, #220]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	4a36      	ldr	r2, [pc, #216]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ca:	4b34      	ldr	r3, [pc, #208]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2100      	movs	r1, #0
 80050da:	201d      	movs	r0, #29
 80050dc:	f005 fa4b 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80050e0:	201d      	movs	r0, #29
 80050e2:	f005 fa64 	bl	800a5ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80050e6:	e052      	b.n	800518e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <HAL_TIM_Base_MspInit+0xf8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d116      	bne.n	8005120 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	4b29      	ldr	r3, [pc, #164]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	4a28      	ldr	r2, [pc, #160]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	6413      	str	r3, [r2, #64]	; 0x40
 8005102:	4b26      	ldr	r3, [pc, #152]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800510e:	2200      	movs	r2, #0
 8005110:	2100      	movs	r1, #0
 8005112:	201e      	movs	r0, #30
 8005114:	f005 fa2f 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005118:	201e      	movs	r0, #30
 800511a:	f005 fa48 	bl	800a5ae <HAL_NVIC_EnableIRQ>
}
 800511e:	e036      	b.n	800518e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_TIM_Base_MspInit+0xfc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d116      	bne.n	8005158 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	4a1a      	ldr	r2, [pc, #104]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005138:	6453      	str	r3, [r2, #68]	; 0x44
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8005146:	2200      	movs	r2, #0
 8005148:	2101      	movs	r1, #1
 800514a:	2018      	movs	r0, #24
 800514c:	f005 fa13 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005150:	2018      	movs	r0, #24
 8005152:	f005 fa2c 	bl	800a5ae <HAL_NVIC_EnableIRQ>
}
 8005156:	e01a      	b.n	800518e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_TIM_Base_MspInit+0x100>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d115      	bne.n	800518e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 800516c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005170:	6453      	str	r3, [r2, #68]	; 0x44
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_TIM_Base_MspInit+0xf4>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800517e:	2200      	movs	r2, #0
 8005180:	210f      	movs	r1, #15
 8005182:	201a      	movs	r0, #26
 8005184:	f005 f9f7 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005188:	201a      	movs	r0, #26
 800518a:	f005 fa10 	bl	800a5ae <HAL_NVIC_EnableIRQ>
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40000400 	.word	0x40000400
 800519c:	40023800 	.word	0x40023800
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014800 	.word	0x40014800

080051ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a24      	ldr	r2, [pc, #144]	; (800525c <HAL_TIM_MspPostInit+0xb0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d11f      	bne.n	800520e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	4b23      	ldr	r3, [pc, #140]	; (8005260 <HAL_TIM_MspPostInit+0xb4>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	4a22      	ldr	r2, [pc, #136]	; (8005260 <HAL_TIM_MspPostInit+0xb4>)
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	6313      	str	r3, [r2, #48]	; 0x30
 80051de:	4b20      	ldr	r3, [pc, #128]	; (8005260 <HAL_TIM_MspPostInit+0xb4>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = R_Pin|G_Pin|B_Pin;
 80051ea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80051ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f0:	2302      	movs	r3, #2
 80051f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051f4:	2302      	movs	r3, #2
 80051f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f8:	2300      	movs	r3, #0
 80051fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051fc:	2302      	movs	r3, #2
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	4619      	mov	r1, r3
 8005206:	4817      	ldr	r0, [pc, #92]	; (8005264 <HAL_TIM_MspPostInit+0xb8>)
 8005208:	f005 fe08 	bl	800ae1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800520c:	e022      	b.n	8005254 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <HAL_TIM_MspPostInit+0xbc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d11d      	bne.n	8005254 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <HAL_TIM_MspPostInit+0xb4>)
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	4a0f      	ldr	r2, [pc, #60]	; (8005260 <HAL_TIM_MspPostInit+0xb4>)
 8005222:	f043 0302 	orr.w	r3, r3, #2
 8005226:	6313      	str	r3, [r2, #48]	; 0x30
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <HAL_TIM_MspPostInit+0xb4>)
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005234:	2340      	movs	r3, #64	; 0x40
 8005236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005238:	2302      	movs	r3, #2
 800523a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005240:	2300      	movs	r3, #0
 8005242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005244:	2302      	movs	r3, #2
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	4619      	mov	r1, r3
 800524e:	4807      	ldr	r0, [pc, #28]	; (800526c <HAL_TIM_MspPostInit+0xc0>)
 8005250:	f005 fde4 	bl	800ae1c <HAL_GPIO_Init>
}
 8005254:	bf00      	nop
 8005256:	3728      	adds	r7, #40	; 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40000400 	.word	0x40000400
 8005260:	40023800 	.word	0x40023800
 8005264:	40020800 	.word	0x40020800
 8005268:	40000800 	.word	0x40000800
 800526c:	40020400 	.word	0x40020400

08005270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a4c      	ldr	r2, [pc, #304]	; (80053c0 <HAL_UART_MspInit+0x150>)
 800528e:	4293      	cmp	r3, r2
 8005290:	f040 8092 	bne.w	80053b8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_UART_MspInit+0x154>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	4a49      	ldr	r2, [pc, #292]	; (80053c4 <HAL_UART_MspInit+0x154>)
 800529e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a2:	6413      	str	r3, [r2, #64]	; 0x40
 80052a4:	4b47      	ldr	r3, [pc, #284]	; (80053c4 <HAL_UART_MspInit+0x154>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <HAL_UART_MspInit+0x154>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4a42      	ldr	r2, [pc, #264]	; (80053c4 <HAL_UART_MspInit+0x154>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6313      	str	r3, [r2, #48]	; 0x30
 80052c0:	4b40      	ldr	r3, [pc, #256]	; (80053c4 <HAL_UART_MspInit+0x154>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80052cc:	230c      	movs	r3, #12
 80052ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d0:	2302      	movs	r3, #2
 80052d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052dc:	2307      	movs	r3, #7
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e0:	f107 0314 	add.w	r3, r7, #20
 80052e4:	4619      	mov	r1, r3
 80052e6:	4838      	ldr	r0, [pc, #224]	; (80053c8 <HAL_UART_MspInit+0x158>)
 80052e8:	f005 fd98 	bl	800ae1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80052ec:	4b37      	ldr	r3, [pc, #220]	; (80053cc <HAL_UART_MspInit+0x15c>)
 80052ee:	4a38      	ldr	r2, [pc, #224]	; (80053d0 <HAL_UART_MspInit+0x160>)
 80052f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_UART_MspInit+0x15c>)
 80052f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052fa:	4b34      	ldr	r3, [pc, #208]	; (80053cc <HAL_UART_MspInit+0x15c>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005300:	4b32      	ldr	r3, [pc, #200]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005302:	2200      	movs	r2, #0
 8005304:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005306:	4b31      	ldr	r3, [pc, #196]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800530c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800530e:	4b2f      	ldr	r3, [pc, #188]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005310:	2200      	movs	r2, #0
 8005312:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005314:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800531a:	4b2c      	ldr	r3, [pc, #176]	; (80053cc <HAL_UART_MspInit+0x15c>)
 800531c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005320:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005322:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005324:	2200      	movs	r2, #0
 8005326:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005328:	4b28      	ldr	r3, [pc, #160]	; (80053cc <HAL_UART_MspInit+0x15c>)
 800532a:	2200      	movs	r2, #0
 800532c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800532e:	4827      	ldr	r0, [pc, #156]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005330:	f005 f958 	bl	800a5e4 <HAL_DMA_Init>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800533a:	f7ff fdab 	bl	8004e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a22      	ldr	r2, [pc, #136]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <HAL_UART_MspInit+0x15c>)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800534a:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <HAL_UART_MspInit+0x164>)
 800534c:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_UART_MspInit+0x168>)
 800534e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005350:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <HAL_UART_MspInit+0x164>)
 8005352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005356:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <HAL_UART_MspInit+0x164>)
 800535a:	2240      	movs	r2, #64	; 0x40
 800535c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_UART_MspInit+0x164>)
 8005360:	2200      	movs	r2, #0
 8005362:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_UART_MspInit+0x164>)
 8005366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800536a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800536c:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <HAL_UART_MspInit+0x164>)
 800536e:	2200      	movs	r2, #0
 8005370:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005372:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <HAL_UART_MspInit+0x164>)
 8005374:	2200      	movs	r2, #0
 8005376:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8005378:	4b16      	ldr	r3, [pc, #88]	; (80053d4 <HAL_UART_MspInit+0x164>)
 800537a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_UART_MspInit+0x164>)
 8005382:	2200      	movs	r2, #0
 8005384:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <HAL_UART_MspInit+0x164>)
 8005388:	2200      	movs	r2, #0
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800538c:	4811      	ldr	r0, [pc, #68]	; (80053d4 <HAL_UART_MspInit+0x164>)
 800538e:	f005 f929 	bl	800a5e4 <HAL_DMA_Init>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8005398:	f7ff fd7c 	bl	8004e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <HAL_UART_MspInit+0x164>)
 80053a0:	635a      	str	r2, [r3, #52]	; 0x34
 80053a2:	4a0c      	ldr	r2, [pc, #48]	; (80053d4 <HAL_UART_MspInit+0x164>)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80053a8:	2200      	movs	r2, #0
 80053aa:	2100      	movs	r1, #0
 80053ac:	2026      	movs	r0, #38	; 0x26
 80053ae:	f005 f8e2 	bl	800a576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80053b2:	2026      	movs	r0, #38	; 0x26
 80053b4:	f005 f8fb 	bl	800a5ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80053b8:	bf00      	nop
 80053ba:	3728      	adds	r7, #40	; 0x28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40004400 	.word	0x40004400
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40020000 	.word	0x40020000
 80053cc:	20003cd4 	.word	0x20003cd4
 80053d0:	40026088 	.word	0x40026088
 80053d4:	20003d34 	.word	0x20003d34
 80053d8:	400260a0 	.word	0x400260a0

080053dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053e0:	e7fe      	b.n	80053e0 <NMI_Handler+0x4>

080053e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053e2:	b480      	push	{r7}
 80053e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053e6:	e7fe      	b.n	80053e6 <HardFault_Handler+0x4>

080053e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053ec:	e7fe      	b.n	80053ec <MemManage_Handler+0x4>

080053ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053f2:	e7fe      	b.n	80053f2 <BusFault_Handler+0x4>

080053f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053f8:	e7fe      	b.n	80053f8 <UsageFault_Handler+0x4>

080053fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053fa:	b480      	push	{r7}
 80053fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005416:	b480      	push	{r7}
 8005418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005428:	f004 ff86 	bl	800a338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800542c:	bf00      	nop
 800542e:	bd80      	pop	{r7, pc}

08005430 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 8005434:	2004      	movs	r0, #4
 8005436:	f005 fe8d 	bl	800b154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}

0800543e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_6_Pin);
 8005442:	2008      	movs	r0, #8
 8005444:	f005 fe86 	bl	800b154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005448:	bf00      	nop
 800544a:	bd80      	pop	{r7, pc}

0800544c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8005450:	4802      	ldr	r0, [pc, #8]	; (800545c <DMA1_Stream4_IRQHandler+0x10>)
 8005452:	f005 fa5f 	bl	800a914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20003b10 	.word	0x20003b10

08005460 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005464:	4802      	ldr	r0, [pc, #8]	; (8005470 <DMA1_Stream5_IRQHandler+0x10>)
 8005466:	f005 fa55 	bl	800a914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20003cd4 	.word	0x20003cd4

08005474 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005478:	4802      	ldr	r0, [pc, #8]	; (8005484 <DMA1_Stream6_IRQHandler+0x10>)
 800547a:	f005 fa4b 	bl	800a914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20003d34 	.word	0x20003d34

08005488 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 800548c:	2080      	movs	r0, #128	; 0x80
 800548e:	f005 fe61 	bl	800b154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800549e:	f009 fbe7 	bl	800ec70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20003c00 	.word	0x20003c00

080054ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80054b0:	4802      	ldr	r0, [pc, #8]	; (80054bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80054b2:	f009 fbdd 	bl	800ec70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20003c48 	.word	0x20003c48

080054c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80054c4:	4802      	ldr	r0, [pc, #8]	; (80054d0 <TIM3_IRQHandler+0x10>)
 80054c6:	f009 fbd3 	bl	800ec70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20003b70 	.word	0x20003b70

080054d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80054d8:	4802      	ldr	r0, [pc, #8]	; (80054e4 <TIM4_IRQHandler+0x10>)
 80054da:	f009 fbc9 	bl	800ec70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20003bb8 	.word	0x20003bb8

080054e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <USART2_IRQHandler+0x10>)
 80054ee:	f00a fb0b 	bl	800fb08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20003c90 	.word	0x20003c90

080054fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 8005500:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005504:	f005 fe26 	bl	800b154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_5_Pin);
 8005508:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800550c:	f005 fe22 	bl	800b154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8005510:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005514:	f005 fe1e 	bl	800b154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005518:	bf00      	nop
 800551a:	bd80      	pop	{r7, pc}

0800551c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <I2C3_EV_IRQHandler+0x10>)
 8005522:	f006 fd25 	bl	800bf70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20003abc 	.word	0x20003abc

08005530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
	return 1;
 8005534:	2301      	movs	r3, #1
}
 8005536:	4618      	mov	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <_kill>:

int _kill(int pid, int sig)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800554a:	f00b fbcd 	bl	8010ce8 <__errno>
 800554e:	4603      	mov	r3, r0
 8005550:	2216      	movs	r2, #22
 8005552:	601a      	str	r2, [r3, #0]
	return -1;
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_exit>:

void _exit (int status)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005568:	f04f 31ff 	mov.w	r1, #4294967295
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ffe7 	bl	8005540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005572:	e7fe      	b.n	8005572 <_exit+0x12>

08005574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e00a      	b.n	800559c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005586:	f3af 8000 	nop.w
 800558a:	4601      	mov	r1, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	60ba      	str	r2, [r7, #8]
 8005592:	b2ca      	uxtb	r2, r1
 8005594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	3301      	adds	r3, #1
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	dbf0      	blt.n	8005586 <_read+0x12>
	}

return len;
 80055a4:	687b      	ldr	r3, [r7, #4]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e009      	b.n	80055d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	60ba      	str	r2, [r7, #8]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3301      	adds	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	dbf1      	blt.n	80055c0 <_write+0x12>
	}
	return len;
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <_close>:

int _close(int file)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
	return -1;
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800560e:	605a      	str	r2, [r3, #4]
	return 0;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <_isatty>:

int _isatty(int file)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
	return 1;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
	return 0;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005658:	4a14      	ldr	r2, [pc, #80]	; (80056ac <_sbrk+0x5c>)
 800565a:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <_sbrk+0x60>)
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <_sbrk+0x64>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <_sbrk+0x64>)
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <_sbrk+0x68>)
 8005670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <_sbrk+0x64>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d207      	bcs.n	8005690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005680:	f00b fb32 	bl	8010ce8 <__errno>
 8005684:	4603      	mov	r3, r0
 8005686:	220c      	movs	r2, #12
 8005688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	e009      	b.n	80056a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <_sbrk+0x64>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <_sbrk+0x64>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	4a05      	ldr	r2, [pc, #20]	; (80056b4 <_sbrk+0x64>)
 80056a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20020000 	.word	0x20020000
 80056b0:	00000400 	.word	0x00000400
 80056b4:	20003d9c 	.word	0x20003d9c
 80056b8:	200050c0 	.word	0x200050c0

080056bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <SystemInit+0x20>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <SystemInit+0x20>)
 80056c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	e000ed00 	.word	0xe000ed00

080056e0 <cb_init>:
#include "cbuffer.h"

void cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  // Limit max size of cbuffer
  cb->size     = (cb->size > CB_MAX_SIZE) ? CB_MAX_SIZE : size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f4:	d801      	bhi.n	80056fa <cb_init+0x1a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	e001      	b.n	80056fe <cb_init+0x1e>
 80056fa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	6053      	str	r3, [r2, #4]
  cb->reader   = -1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	60da      	str	r2, [r3, #12]
  cb->writer   = -1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f04f 32ff 	mov.w	r2, #4294967295
 8005710:	609a      	str	r2, [r3, #8]
  cb->data     = (uint8_t *) buf;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	601a      	str	r2, [r3, #0]
  cb->overflow = 0;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
  cb->active   = true;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	751a      	strb	r2, [r3, #20]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <cb_read>:
  free(cb->data);
  cb->active = false;
}

uint32_t cb_read(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t index_read;
  for (index_read = 1; index_read <= nbytes; index_read++)
 800573c:	2301      	movs	r3, #1
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e05e      	b.n	8005800 <cb_read+0xd0>
  {
    // Check read full
    if ((cb->reader + 1) % cb->size == cb->writer)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	6852      	ldr	r2, [r2, #4]
 800574c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005750:	fb01 f202 	mul.w	r2, r1, r2
 8005754:	1a9a      	subs	r2, r3, r2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	d123      	bne.n	80057a6 <cb_read+0x76>
    {
      // Increase reader
      cb->reader = (cb->reader + 1) % cb->size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6852      	ldr	r2, [r2, #4]
 8005768:	fbb3 f1f2 	udiv	r1, r3, r2
 800576c:	fb01 f202 	mul.w	r2, r1, r2
 8005770:	1a9a      	subs	r2, r3, r2
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	60da      	str	r2, [r3, #12]
      // Assign data from cbuffer to read buffer
      *(uint8_t *) (buf + (index_read - 1)) = *(cb->data + cb->reader);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	441a      	add	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	3b01      	subs	r3, #1
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	440b      	add	r3, r1
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	701a      	strb	r2, [r3, #0]
      // Assign data to overflow (2 is read all data)
      cb->overflow = 2;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2202      	movs	r2, #2
 8005790:	611a      	str	r2, [r3, #16]
      // Reset reader and writer
      cb->reader = -1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f04f 32ff 	mov.w	r2, #4294967295
 8005798:	60da      	str	r2, [r3, #12]
      cb->writer = -1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f04f 32ff 	mov.w	r2, #4294967295
 80057a0:	609a      	str	r2, [r3, #8]
      return index_read;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	e030      	b.n	8005808 <cb_read+0xd8>
    }
    else if (cb->writer == -1)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d104      	bne.n	80057ba <cb_read+0x8a>
    // Check if there is no data but user want to read
    {
      // Assign data to overflow (2 is read all data)
      cb->overflow = 2;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2202      	movs	r2, #2
 80057b4:	611a      	str	r2, [r3, #16]
      return 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e026      	b.n	8005808 <cb_read+0xd8>
    }
    else
    {
      // Assign data to overflow (0 is not writer and read full)
      cb->overflow = 0;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	611a      	str	r2, [r3, #16]
      // Increase reader
      cb->reader = (cb->reader + 1) % cb->size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	6852      	ldr	r2, [r2, #4]
 80057ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80057ce:	fb01 f202 	mul.w	r2, r1, r2
 80057d2:	1a9a      	subs	r2, r3, r2
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	60da      	str	r2, [r3, #12]
      // Assign data from cbuffer to read buffer
      *(uint8_t *) (buf + (index_read - 1)) = *(cb->data + cb->reader);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	441a      	add	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	440b      	add	r3, r1
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	701a      	strb	r2, [r3, #0]
    }
    // Check if read enough required data
    if (index_read == nbytes)
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d101      	bne.n	80057fa <cb_read+0xca>
      return nbytes;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	e006      	b.n	8005808 <cb_read+0xd8>
  for (index_read = 1; index_read <= nbytes; index_read++)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3301      	adds	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d99c      	bls.n	8005742 <cb_read+0x12>
  }
}
 8005808:	4618      	mov	r0, r3
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <cb_write>:

uint32_t cb_write(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint8_t index_write;
  for (index_write = 1; index_write <= nbytes; index_write++)
 8005820:	2301      	movs	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
 8005824:	e040      	b.n	80058a8 <cb_write+0x94>
  {
    // Check overflow data when writing
    if ((cb->writer + 1) % cb->size == cb->reader)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	3301      	adds	r3, #1
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	6852      	ldr	r2, [r2, #4]
 8005830:	fbb3 f1f2 	udiv	r1, r3, r2
 8005834:	fb01 f202 	mul.w	r2, r1, r2
 8005838:	1a9a      	subs	r2, r3, r2
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	429a      	cmp	r2, r3
 8005840:	d105      	bne.n	800584e <cb_write+0x3a>
    {
      // Assign data to overflow (1 is can not writer more data)
      cb->overflow = 1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	611a      	str	r2, [r3, #16]
      return (index_write - 1);
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	3b01      	subs	r3, #1
 800584c:	e030      	b.n	80058b0 <cb_write+0x9c>
    }
    else
    {
      // Assign data to overflow (0 is not writer and read full)
      cb->overflow = 0;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	611a      	str	r2, [r3, #16]
      // Increase writer
      cb->writer = (cb->writer + 1) % cb->size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	3301      	adds	r3, #1
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	6852      	ldr	r2, [r2, #4]
 800585e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005862:	fb01 f202 	mul.w	r2, r1, r2
 8005866:	1a9a      	subs	r2, r3, r2
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	609a      	str	r2, [r3, #8]
      // Assign data from writer buffer to cbuffer
      *(cb->data + cb->writer) = *(uint8_t *) (buf + (index_write - 1));
 800586c:	7dfb      	ldrb	r3, [r7, #23]
 800586e:	3b01      	subs	r3, #1
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6819      	ldr	r1, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	440b      	add	r3, r1
 800587e:	7812      	ldrb	r2, [r2, #0]
 8005880:	701a      	strb	r2, [r3, #0]
    }

    // Check if write enough required data
    if (index_write == nbytes)
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	d101      	bne.n	800588e <cb_write+0x7a>
      return nbytes;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	e010      	b.n	80058b0 <cb_write+0x9c>

    // Check if amount data is equal than size of cbuffer
    if (index_write == cb->size)
 800588e:	7dfa      	ldrb	r2, [r7, #23]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d104      	bne.n	80058a2 <cb_write+0x8e>
    {
      // Assign data to overflow (1 is can not writer more data)
      cb->overflow = 1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	611a      	str	r2, [r3, #16]
      return index_write;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	e006      	b.n	80058b0 <cb_write+0x9c>
  for (index_write = 1; index_write <= nbytes; index_write++)
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	3301      	adds	r3, #1
 80058a6:	75fb      	strb	r3, [r7, #23]
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d2ba      	bcs.n	8005826 <cb_write+0x12>
    }
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <cb_data_count>:

uint32_t cb_data_count(cbuffer_t *cb)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint8_t num_empty_bytes_current;
  // Check if reader is reading and not read all data
  if (cb->reader != -1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d021      	beq.n	8005912 <cb_data_count+0x56>
  {
    if (cb->reader > cb->writer)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d90c      	bls.n	80058f4 <cb_data_count+0x38>
    {
      num_empty_bytes_current = cb->size - (cb->reader - cb->writer);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	b2d9      	uxtb	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	1acb      	subs	r3, r1, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	4413      	add	r3, r2
 80058f2:	73fb      	strb	r3, [r7, #15]
    }
    if (cb->reader < cb->writer)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d214      	bcs.n	800592a <cb_data_count+0x6e>
    {
      num_empty_bytes_current = cb->writer - cb->reader;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e00b      	b.n	800592a <cb_data_count+0x6e>
    }
  }
  else
  {
    // Check if read all data
    if (cb->overflow == 2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d102      	bne.n	8005920 <cb_data_count+0x64>
      num_empty_bytes_current = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
 800591e:	e004      	b.n	800592a <cb_data_count+0x6e>
    // Check if this is the first time read when cbuffer init
    else
      num_empty_bytes_current = cb->writer + 1;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	3301      	adds	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
  }
  return num_empty_bytes_current;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <mdv_snake_food_random>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

void mdv_snake_food_random(snake_game_t *snake_game)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
    uint8_t x_food = (rand() % (snake_game->x_grid - 1));
 8005940:	f00b feb4 	bl	80116ac <rand>
 8005944:	4602      	mov	r2, r0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	789b      	ldrb	r3, [r3, #2]
 800594a:	3b01      	subs	r3, #1
 800594c:	fb92 f1f3 	sdiv	r1, r2, r3
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	73fb      	strb	r3, [r7, #15]
    uint8_t y_food = (rand() % (snake_game->y_grid - 1));
 8005958:	f00b fea8 	bl	80116ac <rand>
 800595c:	4602      	mov	r2, r0
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	78db      	ldrb	r3, [r3, #3]
 8005962:	3b01      	subs	r3, #1
 8005964:	fb92 f1f3 	sdiv	r1, r2, r3
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	73bb      	strb	r3, [r7, #14]

    while (snake_game->snake_grid_map[x_food][y_food] != NO_OBJECT)
 8005970:	e017      	b.n	80059a2 <mdv_snake_food_random+0x6a>
    {
        x_food = (rand() % (snake_game->x_grid - 1));
 8005972:	f00b fe9b 	bl	80116ac <rand>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	789b      	ldrb	r3, [r3, #2]
 800597c:	3b01      	subs	r3, #1
 800597e:	fb92 f1f3 	sdiv	r1, r2, r3
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	73fb      	strb	r3, [r7, #15]
        y_food = (rand() % (snake_game->y_grid - 1));
 800598a:	f00b fe8f 	bl	80116ac <rand>
 800598e:	4602      	mov	r2, r0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	78db      	ldrb	r3, [r3, #3]
 8005994:	3b01      	subs	r3, #1
 8005996:	fb92 f1f3 	sdiv	r1, r2, r3
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	73bb      	strb	r3, [r7, #14]
    while (snake_game->snake_grid_map[x_food][y_food] != NO_OBJECT)
 80059a2:	7bfa      	ldrb	r2, [r7, #15]
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	0112      	lsls	r2, r2, #4
 80059aa:	440a      	add	r2, r1
 80059ac:	4413      	add	r3, r2
 80059ae:	3304      	adds	r3, #4
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1dd      	bne.n	8005972 <mdv_snake_food_random+0x3a>
    }

    snake_game->snake_grid_map[x_food][y_food] = FOOD;
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	0112      	lsls	r2, r2, #4
 80059be:	440a      	add	r2, r1
 80059c0:	4413      	add	r3, r2
 80059c2:	3304      	adds	r3, #4
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <mdv_snake_move>:

void mdv_snake_move(snake_game_t *snake_game)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    // delete all current position of snake
    for (int i = snake_game->snake_length - 1; i >= 0; i--)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059de:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 80059e2:	3b01      	subs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	e017      	b.n	8005a18 <mdv_snake_move+0x48>
    {
        snake_game->snake_grid_map[snake_game->snake_position[0][i]][snake_game->snake_position[1][i]] = NO_OBJECT;
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	0103      	lsls	r3, r0, #4
 8005a08:	4413      	add	r3, r2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
    for (int i = snake_game->snake_length - 1; i >= 0; i--)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dae4      	bge.n	80059e8 <mdv_snake_move+0x18>
    }

    // save a current position of head snake
    snake_game->snake_old_pos[0] = snake_game->snake_position[0][snake_game->snake_length - 1];
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3a:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
    snake_game->snake_old_pos[1] = snake_game->snake_position[1][snake_game->snake_length - 1];
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a44:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f893 39d4 	ldrb.w	r3, [r3, #2516]	; 0x9d4
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5a:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6

    // move head snake to new position
    snake_game->snake_position[0][snake_game->snake_length - 1] += snake_game->snake_step[0];
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a64:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f893 1204 	ldrb.w	r1, [r3, #516]	; 0x204
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a78:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a84:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	440a      	add	r2, r1
 8005a8c:	b2d1      	uxtb	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	460a      	mov	r2, r1
 8005a94:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    snake_game->snake_position[1][snake_game->snake_length - 1] += snake_game->snake_step[1];
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9e:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f893 19d4 	ldrb.w	r1, [r3, #2516]	; 0x9d4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	440a      	add	r2, r1
 8005ac6:	b2d1      	uxtb	r1, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	4413      	add	r3, r2
 8005acc:	460a      	mov	r2, r1
 8005ace:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4

    snake_game->snake_position[0][snake_game->snake_length - 1] %= (snake_game->x_grid);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad8:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005adc:	3b01      	subs	r3, #1
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	7892      	ldrb	r2, [r2, #2]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8005af0:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	; 0x1a4
 8005af4:	3901      	subs	r1, #1
 8005af6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005afa:	fb00 f202 	mul.w	r2, r0, r2
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	440b      	add	r3, r1
 8005b06:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    snake_game->snake_position[1][snake_game->snake_length - 1] %= (snake_game->y_grid);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b10:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005b14:	3b01      	subs	r3, #1
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f893 39d4 	ldrb.w	r3, [r3, #2516]	; 0x9d4
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	78d2      	ldrb	r2, [r2, #3]
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8005b28:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	; 0x1a4
 8005b2c:	3901      	subs	r1, #1
 8005b2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b32:	fb00 f202 	mul.w	r2, r0, r2
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4

    // update new position of head snake
    snake_game->snake_pos_head[0] = snake_game->snake_position[0][snake_game->snake_length - 1];
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b48:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4413      	add	r3, r2
 8005b52:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5e:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
    snake_game->snake_pos_head[1] = snake_game->snake_position[1][snake_game->snake_length - 1];
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b68:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	f893 39d4 	ldrb.w	r3, [r3, #2516]	; 0x9d4
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7e:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba

    // move the rest part of snake to new position
    for (int i = snake_game->snake_length - 2; i >= 0; i--)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b88:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005b8c:	3b02      	subs	r3, #2
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	e054      	b.n	8005c3c <mdv_snake_move+0x26c>
    {
        uint8_t nx = snake_game->snake_position[0][i] % (snake_game->x_grid);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	7892      	ldrb	r2, [r2, #2]
 8005ba2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ba6:	fb01 f202 	mul.w	r2, r1, r2
 8005baa:	1a9b      	subs	r3, r3, r2
 8005bac:	72fb      	strb	r3, [r7, #11]
        uint8_t ny = snake_game->snake_position[1][i] % (snake_game->y_grid);
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	78d2      	ldrb	r2, [r2, #3]
 8005bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bc2:	fb01 f202 	mul.w	r2, r1, r2
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	72bb      	strb	r3, [r7, #10]

        snake_game->snake_position[0][i] = snake_game->snake_old_pos[0] % (snake_game->x_grid);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd0:	f8b3 31b4 	ldrh.w	r3, [r3, #436]	; 0x1b4
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	7892      	ldrb	r2, [r2, #2]
 8005bd8:	fb93 f1f2 	sdiv	r1, r3, r2
 8005bdc:	fb01 f202 	mul.w	r2, r1, r2
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	b2d9      	uxtb	r1, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bee:	460a      	mov	r2, r1
 8005bf0:	701a      	strb	r2, [r3, #0]
        snake_game->snake_position[1][i] = snake_game->snake_old_pos[1] % (snake_game->y_grid);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf8:	f8b3 31b6 	ldrh.w	r3, [r3, #438]	; 0x1b6
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	78d2      	ldrb	r2, [r2, #3]
 8005c00:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c04:	fb01 f202 	mul.w	r2, r1, r2
 8005c08:	1a9b      	subs	r3, r3, r2
 8005c0a:	b2d9      	uxtb	r1, r3
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8005c16:	460a      	mov	r2, r1
 8005c18:	701a      	strb	r2, [r3, #0]

        snake_game->snake_old_pos[0] = nx;
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c24:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
        snake_game->snake_old_pos[1] = ny;
 8005c28:	7abb      	ldrb	r3, [r7, #10]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c32:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
    for (int i = snake_game->snake_length - 2; i >= 0; i--)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	daa7      	bge.n	8005b92 <mdv_snake_move+0x1c2>
    }

    // add new postion of snake to grip map
    for (int i = snake_game->snake_length - 1; i >= 0; i--)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c48:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e017      	b.n	8005c82 <mdv_snake_move+0x2b2>
    {
        snake_game->snake_grid_map[snake_game->snake_position[0][i]][snake_game->snake_position[1][i]] = SNAKE;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	0103      	lsls	r3, r0, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	440b      	add	r3, r1
 8005c76:	3304      	adds	r3, #4
 8005c78:	2202      	movs	r2, #2
 8005c7a:	701a      	strb	r2, [r3, #0]
    for (int i = snake_game->snake_length - 1; i >= 0; i--)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dae4      	bge.n	8005c52 <mdv_snake_move+0x282>
    }
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <mdv_snake_check_gameover>:

bool mdv_snake_check_gameover(snake_game_t *snake_game)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
    if (snake_game->mode_game == CLASSIC)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d127      	bne.n	8005cf6 <mdv_snake_check_gameover+0x60>
    {
        // check limit of bound
        if (snake_game->snake_pos_head[0] >= snake_game->x_grid - 1 || snake_game->snake_pos_head[0] < 1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cac:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	789b      	ldrb	r3, [r3, #2]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	da06      	bge.n	8005cca <mdv_snake_check_gameover+0x34>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc2:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <mdv_snake_check_gameover+0x38>
        {
            return true;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e084      	b.n	8005dd8 <mdv_snake_check_gameover+0x142>
        }
        if (snake_game->snake_pos_head[1] >= snake_game->y_grid - 1 || snake_game->snake_pos_head[1] < 1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd4:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	78db      	ldrb	r3, [r3, #3]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	da06      	bge.n	8005cf2 <mdv_snake_check_gameover+0x5c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <mdv_snake_check_gameover+0x60>
        {
            return true;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e070      	b.n	8005dd8 <mdv_snake_check_gameover+0x142>
        }
    }

    if (snake_game->mode_game == MODERN)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d149      	bne.n	8005d92 <mdv_snake_check_gameover+0xfc>
    {
        // check limit of bound
        if (snake_game->snake_pos_head[0] >= snake_game->x_grid - 1 || snake_game->snake_pos_head[0] < 1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d04:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005d08:	461a      	mov	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	789b      	ldrb	r3, [r3, #2]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	429a      	cmp	r2, r3
 8005d12:	da06      	bge.n	8005d22 <mdv_snake_check_gameover+0x8c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1a:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <mdv_snake_check_gameover+0x90>
        {
            return true;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e058      	b.n	8005dd8 <mdv_snake_check_gameover+0x142>
        }
        if (snake_game->snake_pos_head[1] >= snake_game->y_grid - 1 || snake_game->snake_pos_head[1] < 1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2c:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005d30:	461a      	mov	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	78db      	ldrb	r3, [r3, #3]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	da06      	bge.n	8005d4a <mdv_snake_check_gameover+0xb4>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d42:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <mdv_snake_check_gameover+0xb8>
        {
            return true;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e044      	b.n	8005dd8 <mdv_snake_check_gameover+0x142>
        }
        // check if it crashed into obstacle
        if (snake_game->snake_grid_map[snake_game->snake_pos_head[0] + snake_game->snake_step[0]]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d54:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d60:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005d64:	441a      	add	r2, r3
                                      [snake_game->snake_pos_head[1] + snake_game->snake_step[1]]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005d70:	4619      	mov	r1, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d78:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005d7c:	440b      	add	r3, r1
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	0112      	lsls	r2, r2, #4
 8005d82:	440a      	add	r2, r1
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	781b      	ldrb	r3, [r3, #0]
        if (snake_game->snake_grid_map[snake_game->snake_pos_head[0] + snake_game->snake_step[0]]
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d101      	bne.n	8005d92 <mdv_snake_check_gameover+0xfc>
            == WALL)
        {
            return true;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <mdv_snake_check_gameover+0x142>
        }
    }

    // check whether snake touch itself
    if (snake_game->snake_grid_map[snake_game->snake_pos_head[0] + snake_game->snake_step[0]]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d98:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005da8:	441a      	add	r2, r3
                                  [snake_game->snake_pos_head[1] + snake_game->snake_step[1]]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db0:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005db4:	4619      	mov	r1, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005dc0:	440b      	add	r3, r1
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	0112      	lsls	r2, r2, #4
 8005dc6:	440a      	add	r2, r1
 8005dc8:	4413      	add	r3, r2
 8005dca:	3304      	adds	r3, #4
 8005dcc:	781b      	ldrb	r3, [r3, #0]
    if (snake_game->snake_grid_map[snake_game->snake_pos_head[0] + snake_game->snake_step[0]]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d101      	bne.n	8005dd6 <mdv_snake_check_gameover+0x140>
        == SNAKE)
    {
        return true;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <mdv_snake_check_gameover+0x142>
    }

    return false;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <mdv_snake_check_food>:

void mdv_snake_check_food(snake_game_t *snake_game)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
    if (snake_game->snake_grid_map[snake_game->snake_pos_head[0] + snake_game->snake_step[0]]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df2:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005e02:	441a      	add	r2, r3
                                  [snake_game->snake_pos_head[1] + snake_game->snake_step[1]]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0a:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005e0e:	4619      	mov	r1, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e16:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005e1a:	440b      	add	r3, r1
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	0112      	lsls	r2, r2, #4
 8005e20:	440a      	add	r2, r1
 8005e22:	4413      	add	r3, r2
 8005e24:	3304      	adds	r3, #4
 8005e26:	781b      	ldrb	r3, [r3, #0]
    if (snake_game->snake_grid_map[snake_game->snake_pos_head[0] + snake_game->snake_step[0]]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d14c      	bne.n	8005ec6 <mdv_snake_check_food+0xe2>
        == FOOD)
    {
        snake_game->snake_score++;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e32:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	; 0x1b0
 8005e36:	3301      	adds	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e40:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
        snake_game->snake_length++;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4a:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e58:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

        snake_game->snake_position[0][snake_game->snake_length - 1] = snake_game->snake_pos_head[0] + snake_game->snake_step[0];
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e62:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
 8005e66:	b2d9      	uxtb	r1, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7a:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	440a      	add	r2, r1
 8005e82:	b2d1      	uxtb	r1, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	460a      	mov	r2, r1
 8005e8a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
        snake_game->snake_position[1][snake_game->snake_length - 1] = snake_game->snake_pos_head[1] + snake_game->snake_step[1];
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e94:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
 8005e98:	b2d9      	uxtb	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eac:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	440a      	add	r2, r1
 8005eb4:	b2d1      	uxtb	r1, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4413      	add	r3, r2
 8005eba:	460a      	mov	r2, r1
 8005ebc:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4

        mdv_snake_food_random(snake_game);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff fd39 	bl	8005938 <mdv_snake_food_random>
    }
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <mdv_snake_check_button>:

void mdv_snake_check_button(snake_game_t *snake_game, uint8_t button)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
    // up
    if (button == 2 && snake_game->snake_step[1] == 0)
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d115      	bne.n	8005f0c <mdv_snake_check_button+0x3e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10e      	bne.n	8005f0c <mdv_snake_check_button+0x3e>
    {
        snake_game->snake_step[0] = 0;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
        snake_game->snake_step[1] = -1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f02:	461a      	mov	r2, r3
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
    }
    // down
    if (button == 3 && snake_game->snake_step[1] == 0)
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d114      	bne.n	8005f3c <mdv_snake_check_button+0x6e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <mdv_snake_check_button+0x6e>
    {
        snake_game->snake_step[0] = 0;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f26:	461a      	mov	r2, r3
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
        snake_game->snake_step[1] = 1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f34:	461a      	mov	r2, r3
 8005f36:	2301      	movs	r3, #1
 8005f38:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
    }
    // left
    if (button == 4 && snake_game->snake_step[0] == 0)
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d115      	bne.n	8005f6e <mdv_snake_check_button+0xa0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f48:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10e      	bne.n	8005f6e <mdv_snake_check_button+0xa0>
    {
        snake_game->snake_step[0] = -1;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f56:	461a      	mov	r2, r3
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5c:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
        snake_game->snake_step[1] = 0;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f66:	461a      	mov	r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
    }
    // right
    if (button == 1 && snake_game->snake_step[0] == 0)
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d114      	bne.n	8005f9e <mdv_snake_check_button+0xd0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <mdv_snake_check_button+0xd0>
    {
        snake_game->snake_step[0] = 1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
        snake_game->snake_step[1] = 0;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f96:	461a      	mov	r2, r3
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
    }
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <mdv_snake_clear_map>:

void mdv_snake_clear_map(snake_game_t *snake_game)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < snake_game->x_grid; i++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e017      	b.n	8005fe8 <mdv_snake_clear_map+0x3e>
    {
        for (int j = 0; j < snake_game->y_grid; j++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	e00b      	b.n	8005fd6 <mdv_snake_clear_map+0x2c>
        {
            snake_game->snake_grid_map[i][j] = 0;
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	441a      	add	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < snake_game->y_grid; j++)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	78db      	ldrb	r3, [r3, #3]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	dbed      	blt.n	8005fbe <mdv_snake_clear_map+0x14>
    for (int i = 0; i < snake_game->x_grid; i++)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	789b      	ldrb	r3, [r3, #2]
 8005fec:	461a      	mov	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	dbe1      	blt.n	8005fb8 <mdv_snake_clear_map+0xe>
        }
    }
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <mdv_snake_map_mode>:

void mdv_snake_map_mode(snake_game_t *snake_game)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08c      	sub	sp, #48	; 0x30
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
    // reset map
    mdv_snake_clear_map(snake_game);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ffcc 	bl	8005faa <mdv_snake_clear_map>

    // reset point
    snake_game->snake_score = 0;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006018:	2200      	movs	r2, #0
 800601a:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0

    // reset direction
    snake_game->snake_step[0] = 1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006024:	461a      	mov	r2, r3
 8006026:	2301      	movs	r3, #1
 8006028:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
    snake_game->snake_step[1] = 0;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006032:	461a      	mov	r2, r3
 8006034:	2300      	movs	r3, #0
 8006036:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac

    // reset position of snake
    for (int i = 0; i < snake_game->snake_length; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603e:	e010      	b.n	8006062 <mdv_snake_map_mode+0x5e>
    {
        snake_game->snake_position[0][i] = 0;
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	4413      	add	r3, r2
 8006046:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
        snake_game->snake_position[1][i] = 0;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	4413      	add	r3, r2
 8006054:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake_game->snake_length; i++)
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	3301      	adds	r3, #1
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006068:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 800606c:	461a      	mov	r2, r3
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	4293      	cmp	r3, r2
 8006072:	dbe5      	blt.n	8006040 <mdv_snake_map_mode+0x3c>
    }
    snake_game->snake_length = 2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607a:	2202      	movs	r2, #2
 800607c:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

    if (snake_game->mode_game == CLASSIC)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d15c      	bne.n	8006142 <mdv_snake_map_mode+0x13e>
    {
        // place new posittion for snake
        snake_game->snake_grid_map[1][1] = SNAKE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	755a      	strb	r2, [r3, #21]
        snake_game->snake_grid_map[2][1] = SNAKE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        snake_game->snake_position[0][0] = 1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
        snake_game->snake_position[1][0] = 1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
        snake_game->snake_position[0][1] = 2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
        snake_game->snake_position[1][1] = 1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5

        snake_game->snake_pos_head[0] = snake_game->snake_position[0][1];
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c4:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        snake_game->snake_pos_head[1] = snake_game->snake_position[1][1];
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 39d5 	ldrb.w	r3, [r3, #2517]	; 0x9d5
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d6:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba

        // Make retangle bound wall
        for (int i = 0; i < snake_game->x_grid; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060de:	e029      	b.n	8006134 <mdv_snake_map_mode+0x130>
        {
            for (int j = 0; j < snake_game->y_grid; j++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
 80060e4:	e01d      	b.n	8006122 <mdv_snake_map_mode+0x11e>
            {
                if ((i == 0) || (j == snake_game->y_grid - 1) || (j == 0) || (i == snake_game->x_grid - 1))
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00e      	beq.n	800610a <mdv_snake_map_mode+0x106>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	78db      	ldrb	r3, [r3, #3]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d008      	beq.n	800610a <mdv_snake_map_mode+0x106>
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <mdv_snake_map_mode+0x106>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	789b      	ldrb	r3, [r3, #2]
 8006102:	3b01      	subs	r3, #1
 8006104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006106:	429a      	cmp	r2, r3
 8006108:	d108      	bne.n	800611c <mdv_snake_map_mode+0x118>
                {
                    snake_game->snake_grid_map[i][j] = WALL;
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	441a      	add	r2, r3
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	4413      	add	r3, r2
 8006116:	3304      	adds	r3, #4
 8006118:	2203      	movs	r2, #3
 800611a:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < snake_game->y_grid; j++)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	3301      	adds	r3, #1
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	78db      	ldrb	r3, [r3, #3]
 8006126:	461a      	mov	r2, r3
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	4293      	cmp	r3, r2
 800612c:	dbdb      	blt.n	80060e6 <mdv_snake_map_mode+0xe2>
        for (int i = 0; i < snake_game->x_grid; i++)
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	3301      	adds	r3, #1
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	789b      	ldrb	r3, [r3, #2]
 8006138:	461a      	mov	r2, r3
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	4293      	cmp	r3, r2
 800613e:	dbcf      	blt.n	80060e0 <mdv_snake_map_mode+0xdc>
        snake_game->snake_position[1][1] = 0;

        snake_game->snake_pos_head[0] = snake_game->snake_position[0][1];
        snake_game->snake_pos_head[1] = snake_game->snake_position[1][1];
    }
}
 8006140:	e126      	b.n	8006390 <mdv_snake_map_mode+0x38c>
    else if (snake_game->mode_game == MODERN)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	f040 80f6 	bne.w	8006338 <mdv_snake_map_mode+0x334>
        snake_game->snake_grid_map[1][1] = SNAKE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	755a      	strb	r2, [r3, #21]
        snake_game->snake_grid_map[2][1] = SNAKE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        snake_game->snake_position[0][0] = 1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
        snake_game->snake_position[1][0] = 1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
        snake_game->snake_position[0][1] = 2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
        snake_game->snake_position[1][1] = 1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
        snake_game->snake_pos_head[0] = snake_game->snake_position[0][1];
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006180:	b29a      	uxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006188:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        snake_game->snake_pos_head[1] = snake_game->snake_position[1][1];
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 39d5 	ldrb.w	r3, [r3, #2517]	; 0x9d5
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619a:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
        for (int i = 0; i < snake_game->x_grid; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	e029      	b.n	80061f8 <mdv_snake_map_mode+0x1f4>
            for (int j = 0; j < snake_game->y_grid; j++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	e01d      	b.n	80061e6 <mdv_snake_map_mode+0x1e2>
                if ((i == 0) || (j == snake_game->y_grid - 1) || (j == 0) || (i == snake_game->x_grid - 1))
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00e      	beq.n	80061ce <mdv_snake_map_mode+0x1ca>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	78db      	ldrb	r3, [r3, #3]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d008      	beq.n	80061ce <mdv_snake_map_mode+0x1ca>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <mdv_snake_map_mode+0x1ca>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	789b      	ldrb	r3, [r3, #2]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	6a3a      	ldr	r2, [r7, #32]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d108      	bne.n	80061e0 <mdv_snake_map_mode+0x1dc>
                    snake_game->snake_grid_map[i][j] = WALL;
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	441a      	add	r2, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	3304      	adds	r3, #4
 80061dc:	2203      	movs	r2, #3
 80061de:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < snake_game->y_grid; j++)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	78db      	ldrb	r3, [r3, #3]
 80061ea:	461a      	mov	r2, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4293      	cmp	r3, r2
 80061f0:	dbdb      	blt.n	80061aa <mdv_snake_map_mode+0x1a6>
        for (int i = 0; i < snake_game->x_grid; i++)
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	3301      	adds	r3, #1
 80061f6:	623b      	str	r3, [r7, #32]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	789b      	ldrb	r3, [r3, #2]
 80061fc:	461a      	mov	r2, r3
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	4293      	cmp	r3, r2
 8006202:	dbcf      	blt.n	80061a4 <mdv_snake_map_mode+0x1a0>
        for (int number = 0; number < (rand() % 3 + 2); number++)
 8006204:	2300      	movs	r3, #0
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	e084      	b.n	8006314 <mdv_snake_map_mode+0x310>
            uint8_t x_obstacle = rand() % (snake_game->x_grid - 3) + 2;
 800620a:	f00b fa4f 	bl	80116ac <rand>
 800620e:	4602      	mov	r2, r0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	789b      	ldrb	r3, [r3, #2]
 8006214:	3b03      	subs	r3, #3
 8006216:	fb92 f1f3 	sdiv	r1, r2, r3
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	b2db      	uxtb	r3, r3
 8006222:	3302      	adds	r3, #2
 8006224:	75fb      	strb	r3, [r7, #23]
            uint8_t y_obstacle = rand() % (snake_game->y_grid - 3) + 2;
 8006226:	f00b fa41 	bl	80116ac <rand>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	78db      	ldrb	r3, [r3, #3]
 8006230:	3b03      	subs	r3, #3
 8006232:	fb92 f1f3 	sdiv	r1, r2, r3
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	b2db      	uxtb	r3, r3
 800623e:	3302      	adds	r3, #2
 8006240:	75bb      	strb	r3, [r7, #22]
            while (snake_game->snake_grid_map[x_obstacle][y_obstacle] != NO_OBJECT)
 8006242:	e01b      	b.n	800627c <mdv_snake_map_mode+0x278>
                x_obstacle = rand() % (snake_game->x_grid - 3) + 2;
 8006244:	f00b fa32 	bl	80116ac <rand>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	789b      	ldrb	r3, [r3, #2]
 800624e:	3b03      	subs	r3, #3
 8006250:	fb92 f1f3 	sdiv	r1, r2, r3
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	b2db      	uxtb	r3, r3
 800625c:	3302      	adds	r3, #2
 800625e:	75fb      	strb	r3, [r7, #23]
                y_obstacle = rand() % (snake_game->y_grid - 3) + 2;
 8006260:	f00b fa24 	bl	80116ac <rand>
 8006264:	4602      	mov	r2, r0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	78db      	ldrb	r3, [r3, #3]
 800626a:	3b03      	subs	r3, #3
 800626c:	fb92 f1f3 	sdiv	r1, r2, r3
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	3302      	adds	r3, #2
 800627a:	75bb      	strb	r3, [r7, #22]
            while (snake_game->snake_grid_map[x_obstacle][y_obstacle] != NO_OBJECT)
 800627c:	7dfa      	ldrb	r2, [r7, #23]
 800627e:	7dbb      	ldrb	r3, [r7, #22]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	0112      	lsls	r2, r2, #4
 8006284:	440a      	add	r2, r1
 8006286:	4413      	add	r3, r2
 8006288:	3304      	adds	r3, #4
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1d9      	bne.n	8006244 <mdv_snake_map_mode+0x240>
            uint8_t width_ob  = (rand() % 3 + 2);
 8006290:	f00b fa0c 	bl	80116ac <rand>
 8006294:	4602      	mov	r2, r0
 8006296:	4b40      	ldr	r3, [pc, #256]	; (8006398 <mdv_snake_map_mode+0x394>)
 8006298:	fb83 3102 	smull	r3, r1, r3, r2
 800629c:	17d3      	asrs	r3, r2, #31
 800629e:	1ac9      	subs	r1, r1, r3
 80062a0:	460b      	mov	r3, r1
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	440b      	add	r3, r1
 80062a6:	1ad1      	subs	r1, r2, r3
 80062a8:	b2cb      	uxtb	r3, r1
 80062aa:	3302      	adds	r3, #2
 80062ac:	72fb      	strb	r3, [r7, #11]
            uint8_t heigth_ob = (rand() % 3 + 2);
 80062ae:	f00b f9fd 	bl	80116ac <rand>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b38      	ldr	r3, [pc, #224]	; (8006398 <mdv_snake_map_mode+0x394>)
 80062b6:	fb83 3102 	smull	r3, r1, r3, r2
 80062ba:	17d3      	asrs	r3, r2, #31
 80062bc:	1ac9      	subs	r1, r1, r3
 80062be:	460b      	mov	r3, r1
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	440b      	add	r3, r1
 80062c4:	1ad1      	subs	r1, r2, r3
 80062c6:	b2cb      	uxtb	r3, r1
 80062c8:	3302      	adds	r3, #2
 80062ca:	72bb      	strb	r3, [r7, #10]
            for (int width = 0; width < width_ob; width++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	e019      	b.n	8006306 <mdv_snake_map_mode+0x302>
                for (int heigth = 0; heigth < heigth_ob; heigth++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e00f      	b.n	80062f8 <mdv_snake_map_mode+0x2f4>
                    snake_game->snake_grid_map[x_obstacle + width][y_obstacle + heigth] = WALL;
 80062d8:	7dfa      	ldrb	r2, [r7, #23]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	441a      	add	r2, r3
 80062de:	7db9      	ldrb	r1, [r7, #22]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	440b      	add	r3, r1
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	0112      	lsls	r2, r2, #4
 80062e8:	440a      	add	r2, r1
 80062ea:	4413      	add	r3, r2
 80062ec:	3304      	adds	r3, #4
 80062ee:	2203      	movs	r2, #3
 80062f0:	701a      	strb	r2, [r3, #0]
                for (int heigth = 0; heigth < heigth_ob; heigth++)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	7abb      	ldrb	r3, [r7, #10]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	dbeb      	blt.n	80062d8 <mdv_snake_map_mode+0x2d4>
            for (int width = 0; width < width_ob; width++)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3301      	adds	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	429a      	cmp	r2, r3
 800630c:	dbe1      	blt.n	80062d2 <mdv_snake_map_mode+0x2ce>
        for (int number = 0; number < (rand() % 3 + 2); number++)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	3301      	adds	r3, #1
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	f00b f9ca 	bl	80116ac <rand>
 8006318:	4601      	mov	r1, r0
 800631a:	4b1f      	ldr	r3, [pc, #124]	; (8006398 <mdv_snake_map_mode+0x394>)
 800631c:	fb83 3201 	smull	r3, r2, r3, r1
 8006320:	17cb      	asrs	r3, r1, #31
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	1aca      	subs	r2, r1, r3
 800632c:	1c53      	adds	r3, r2, #1
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	f77f af6a 	ble.w	800620a <mdv_snake_map_mode+0x206>
}
 8006336:	e02b      	b.n	8006390 <mdv_snake_map_mode+0x38c>
    else if (snake_game->mode_game == INFINITY)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d127      	bne.n	8006390 <mdv_snake_map_mode+0x38c>
        snake_game->snake_grid_map[0][0] = SNAKE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	711a      	strb	r2, [r3, #4]
        snake_game->snake_grid_map[1][0] = SNAKE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	751a      	strb	r2, [r3, #20]
        snake_game->snake_position[0][0] = 0;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
        snake_game->snake_position[1][0] = 0;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
        snake_game->snake_position[0][1] = 1;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
        snake_game->snake_position[1][1] = 0;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
        snake_game->snake_pos_head[0] = snake_game->snake_position[0][1];
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637a:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        snake_game->snake_pos_head[1] = snake_game->snake_position[1][1];
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 39d5 	ldrb.w	r3, [r3, #2517]	; 0x9d5
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800638c:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
}
 8006390:	bf00      	nop
 8006392:	3730      	adds	r7, #48	; 0x30
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	55555556 	.word	0x55555556

0800639c <mdv_snake_win>:

bool mdv_snake_win(snake_game_t *snake_game)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
    if (snake_game->snake_score == MAX_SCORE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063aa:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	; 0x1b0
 80063ae:	2b64      	cmp	r3, #100	; 0x64
 80063b0:	d101      	bne.n	80063b6 <mdv_snake_win+0x1a>
    {
        return true;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <mdv_snake_win+0x1c>
    }
    return false;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <mdv_snake_grid_init>:

void mdv_snake_grid_init(snake_game_t *snake_game)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
    // set up for random feature
    srand(HAL_GetTick() + 70);
 80063cc:	f003 ffc8 	bl	800a360 <HAL_GetTick>
 80063d0:	4603      	mov	r3, r0
 80063d2:	3346      	adds	r3, #70	; 0x46
 80063d4:	4618      	mov	r0, r3
 80063d6:	f00b f93b 	bl	8011650 <srand>

    // size of grid map
    snake_game->x_grid = DRV_SSD1306_WIDTH / SNAKE_SIZE_WIDTH;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	709a      	strb	r2, [r3, #2]
    snake_game->y_grid = DRV_SSD1306_HEIGHT / SNAKE_SIZE_WIDTH;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2210      	movs	r2, #16
 80063e4:	70da      	strb	r2, [r3, #3]

    // clear map bit before setting
    mdv_snake_clear_map(snake_game);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fddf 	bl	8005faa <mdv_snake_clear_map>

    // default mode game : classic
    snake_game->mode_game = INFINITY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	701a      	strb	r2, [r3, #0]

    // default speed game : eassy
    snake_game->speed_game = EASSY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2206      	movs	r2, #6
 80063f6:	705a      	strb	r2, [r3, #1]

    snake_game->snake_grid_map[0][0] = SNAKE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	711a      	strb	r2, [r3, #4]
    snake_game->snake_grid_map[1][0] = SNAKE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	751a      	strb	r2, [r3, #20]

    snake_game->snake_position[0][0] = 0;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    snake_game->snake_position[1][0] = 0;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
    snake_game->snake_position[0][1] = 1;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
    snake_game->snake_position[1][1] = 0;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5

    snake_game->snake_length = 2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642a:	2202      	movs	r2, #2
 800642c:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

    snake_game->snake_step[0] = 1;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006436:	461a      	mov	r2, r3
 8006438:	2301      	movs	r3, #1
 800643a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
    snake_game->snake_step[1] = 0;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006444:	461a      	mov	r2, r3
 8006446:	2300      	movs	r3, #0
 8006448:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac

    snake_game->snake_score = 0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006452:	2200      	movs	r2, #0
 8006454:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <system_data_init>:
static system_data_error_t system_data_save_flash(void);

/* Function definitions ----------------------------------------------- */

system_data_error_t system_data_init(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
    return bsp_flash_read(SYSTEM_DATA_ADDRESS_SAVE, (uint32_t *) &data_flash, sizeof(data_flash) / 4) ? SYSTEM_DATA_OK
 8006464:	2208      	movs	r2, #8
 8006466:	4906      	ldr	r1, [pc, #24]	; (8006480 <system_data_init+0x20>)
 8006468:	4806      	ldr	r0, [pc, #24]	; (8006484 <system_data_init+0x24>)
 800646a:	f7fb f88d 	bl	8001588 <bsp_flash_read>
 800646e:	4603      	mov	r3, r0
                                                                                                      : SYSTEM_DATA_ERROR;
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
}
 800647a:	4618      	mov	r0, r3
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20003da0 	.word	0x20003da0
 8006484:	08060000 	.word	0x08060000

08006488 <system_data_save_flash>:

static system_data_error_t system_data_save_flash(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
    bsp_flash_erase(SYSTEM_DATA_ADDRESS_SAVE);
 800648c:	4807      	ldr	r0, [pc, #28]	; (80064ac <system_data_save_flash+0x24>)
 800648e:	f7fa ff87 	bl	80013a0 <bsp_flash_erase>
    return bsp_flash_write(SYSTEM_DATA_ADDRESS_SAVE, (uint32_t *) &data_flash, sizeof(data_flash) / 4) ? SYSTEM_DATA_OK
 8006492:	2208      	movs	r2, #8
 8006494:	4906      	ldr	r1, [pc, #24]	; (80064b0 <system_data_save_flash+0x28>)
 8006496:	4805      	ldr	r0, [pc, #20]	; (80064ac <system_data_save_flash+0x24>)
 8006498:	f7fa fffe 	bl	8001498 <bsp_flash_write>
 800649c:	4603      	mov	r3, r0
                                                                                                       : SYSTEM_DATA_ERROR;
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf14      	ite	ne
 80064a2:	2301      	movne	r3, #1
 80064a4:	2300      	moveq	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	08060000 	.word	0x08060000
 80064b0:	20003da0 	.word	0x20003da0

080064b4 <system_data_get_reminder>:

system_data_error_t system_data_get_reminder(system_time_reminder_t *data_reminder)
{
 80064b4:	b4b0      	push	{r4, r5, r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    *data_reminder = data_flash.data_reminder;
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <system_data_get_reminder+0x28>)
 80064c0:	4615      	mov	r5, r2
 80064c2:	1d1c      	adds	r4, r3, #4
 80064c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80064cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    return SYSTEM_DATA_OK;
 80064d0:	2301      	movs	r3, #1
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bcb0      	pop	{r4, r5, r7}
 80064da:	4770      	bx	lr
 80064dc:	20003da0 	.word	0x20003da0

080064e0 <system_data_get_theme_color>:

system_data_error_t system_data_get_theme_color(uint8_t *theme_color)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
    *theme_color = data_flash.theme_color ? 1 : 0;
 80064e8:	4b08      	ldr	r3, [pc, #32]	; (800650c <system_data_get_theme_color+0x2c>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	701a      	strb	r2, [r3, #0]
    return SYSTEM_DATA_OK;
 80064fc:	2301      	movs	r3, #1
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	20003da0 	.word	0x20003da0

08006510 <system_data_get_type_clock>:

system_data_error_t system_data_get_type_clock(uint8_t *type_clock)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
    *type_clock = data_flash.type_clock ? 1 : 0;
 8006518:	4b08      	ldr	r3, [pc, #32]	; (800653c <system_data_get_type_clock+0x2c>)
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	701a      	strb	r2, [r3, #0]
    return SYSTEM_DATA_OK;
 800652c:	2301      	movs	r3, #1
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20003da0 	.word	0x20003da0

08006540 <system_data_get_high_score>:

system_data_error_t system_data_get_high_score(uint16_t *high_score)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
    *high_score = data_flash.high_score;
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <system_data_get_high_score+0x20>)
 800654a:	885a      	ldrh	r2, [r3, #2]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	801a      	strh	r2, [r3, #0]
    return SYSTEM_DATA_OK;
 8006550:	2301      	movs	r3, #1
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20003da0 	.word	0x20003da0

08006564 <system_data_set_reminder>:

system_data_error_t system_data_set_reminder(system_time_reminder_t data_reminder)
{
 8006564:	b084      	sub	sp, #16
 8006566:	b5b0      	push	{r4, r5, r7, lr}
 8006568:	af00      	add	r7, sp, #0
 800656a:	f107 0410 	add.w	r4, r7, #16
 800656e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    data_flash.data_reminder = data_reminder;
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <system_data_set_reminder+0x34>)
 8006574:	1d1c      	adds	r4, r3, #4
 8006576:	f107 0510 	add.w	r5, r7, #16
 800657a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800657c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    system_data_save_flash();
 8006586:	f7ff ff7f 	bl	8006488 <system_data_save_flash>
    return SYSTEM_DATA_OK;
 800658a:	2301      	movs	r3, #1
}
 800658c:	4618      	mov	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006594:	b004      	add	sp, #16
 8006596:	4770      	bx	lr
 8006598:	20003da0 	.word	0x20003da0

0800659c <system_data_set_theme_color>:

system_data_error_t system_data_set_theme_color(uint8_t theme_color)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
    data_flash.theme_color = theme_color;
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <system_data_set_theme_color+0x20>)
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	7013      	strb	r3, [r2, #0]
    system_data_save_flash();
 80065ac:	f7ff ff6c 	bl	8006488 <system_data_save_flash>
    return SYSTEM_DATA_OK;
 80065b0:	2301      	movs	r3, #1
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20003da0 	.word	0x20003da0

080065c0 <system_data_set_type_clock>:

system_data_error_t system_data_set_type_clock(uint8_t type_color)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	71fb      	strb	r3, [r7, #7]
    data_flash.type_clock = type_color;
 80065ca:	4a05      	ldr	r2, [pc, #20]	; (80065e0 <system_data_set_type_clock+0x20>)
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	7053      	strb	r3, [r2, #1]
    system_data_save_flash();
 80065d0:	f7ff ff5a 	bl	8006488 <system_data_save_flash>
    return SYSTEM_DATA_OK;
 80065d4:	2301      	movs	r3, #1
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20003da0 	.word	0x20003da0

080065e4 <system_data_set_high_score>:

system_data_error_t system_data_set_high_score(uint16_t high_score)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	80fb      	strh	r3, [r7, #6]
    data_flash.high_score = high_score;
 80065ee:	4a05      	ldr	r2, [pc, #20]	; (8006604 <system_data_set_high_score+0x20>)
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	8053      	strh	r3, [r2, #2]
    system_data_save_flash();
 80065f4:	f7ff ff48 	bl	8006488 <system_data_save_flash>
    return SYSTEM_DATA_OK;
 80065f8:	2301      	movs	r3, #1
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20003da0 	.word	0x20003da0

08006608 <system_diagnostic_screen>:
{
    return SYSTEM_DIAGNOSTIC_OK;
}

system_diagnostic_error_t system_diagnostic_screen(button_name_t *button_state)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
    drv_ssd1306_fill_theme_color();
 8006610:	f7fc fd04 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_goto_xy(35, 45);
 8006614:	212d      	movs	r1, #45	; 0x2d
 8006616:	2023      	movs	r0, #35	; 0x23
 8006618:	f7fc ff3e 	bl	8003498 <drv_ssd1306_goto_xy>

    if (system_display_is_screen_ready() == true)
 800661c:	f002 fa1c 	bl	8008a58 <system_display_is_screen_ready>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <system_diagnostic_screen+0x2a>
    {
        drv_ssd1306_puts((uint8_t *) "CONNECTED", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8006626:	2201      	movs	r2, #1
 8006628:	4908      	ldr	r1, [pc, #32]	; (800664c <system_diagnostic_screen+0x44>)
 800662a:	4809      	ldr	r0, [pc, #36]	; (8006650 <system_diagnostic_screen+0x48>)
 800662c:	f7fd f870 	bl	8003710 <drv_ssd1306_puts>
 8006630:	e004      	b.n	800663c <system_diagnostic_screen+0x34>
    }
    else
    {
        drv_ssd1306_puts((uint8_t *) "DISCONNECTED", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8006632:	2201      	movs	r2, #1
 8006634:	4905      	ldr	r1, [pc, #20]	; (800664c <system_diagnostic_screen+0x44>)
 8006636:	4807      	ldr	r0, [pc, #28]	; (8006654 <system_diagnostic_screen+0x4c>)
 8006638:	f7fd f86a 	bl	8003710 <drv_ssd1306_puts>
    }

    system_display_update();
 800663c:	f002 fb58 	bl	8008cf0 <system_display_update>
    return SYSTEM_DIAGNOSTIC_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200011e8 	.word	0x200011e8
 8006650:	08014bdc 	.word	0x08014bdc
 8006654:	08014be8 	.word	0x08014be8

08006658 <system_diagnostic_realtime>:

system_diagnostic_error_t system_diagnostic_realtime(button_name_t *button_state)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
    drv_ssd1306_fill_theme_color();
 8006660:	f7fc fcdc 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_goto_xy(35, 45);
 8006664:	212d      	movs	r1, #45	; 0x2d
 8006666:	2023      	movs	r0, #35	; 0x23
 8006668:	f7fc ff16 	bl	8003498 <drv_ssd1306_goto_xy>

    if (system_time_is_realtime_ready() == true)
 800666c:	f003 fdcc 	bl	800a208 <system_time_is_realtime_ready>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <system_diagnostic_realtime+0x2a>
    {
        drv_ssd1306_puts((uint8_t *) "CONNECTED", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8006676:	2201      	movs	r2, #1
 8006678:	4908      	ldr	r1, [pc, #32]	; (800669c <system_diagnostic_realtime+0x44>)
 800667a:	4809      	ldr	r0, [pc, #36]	; (80066a0 <system_diagnostic_realtime+0x48>)
 800667c:	f7fd f848 	bl	8003710 <drv_ssd1306_puts>
 8006680:	e004      	b.n	800668c <system_diagnostic_realtime+0x34>
    }
    else
    {
        drv_ssd1306_puts((uint8_t *) "DISCONNECTED", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8006682:	2201      	movs	r2, #1
 8006684:	4905      	ldr	r1, [pc, #20]	; (800669c <system_diagnostic_realtime+0x44>)
 8006686:	4807      	ldr	r0, [pc, #28]	; (80066a4 <system_diagnostic_realtime+0x4c>)
 8006688:	f7fd f842 	bl	8003710 <drv_ssd1306_puts>
    }

    system_display_update();
 800668c:	f002 fb30 	bl	8008cf0 <system_display_update>
    return SYSTEM_DIAGNOSTIC_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	200011e8 	.word	0x200011e8
 80066a0:	08014bdc 	.word	0x08014bdc
 80066a4:	08014be8 	.word	0x08014be8

080066a8 <system_diagnostic_temp_sensor>:

system_diagnostic_error_t system_diagnostic_temp_sensor(button_name_t *button_state)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
    drv_ssd1306_fill_theme_color();
 80066b0:	f7fc fcb4 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_goto_xy(35, 45);
 80066b4:	212d      	movs	r1, #45	; 0x2d
 80066b6:	2023      	movs	r0, #35	; 0x23
 80066b8:	f7fc feee 	bl	8003498 <drv_ssd1306_goto_xy>

    if (system_time_is_temp_sensor_ready() == true)
 80066bc:	f003 fdb2 	bl	800a224 <system_time_is_temp_sensor_ready>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <system_diagnostic_temp_sensor+0x2a>
    {
        drv_ssd1306_puts((uint8_t *) "CONNECTED", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80066c6:	2201      	movs	r2, #1
 80066c8:	4908      	ldr	r1, [pc, #32]	; (80066ec <system_diagnostic_temp_sensor+0x44>)
 80066ca:	4809      	ldr	r0, [pc, #36]	; (80066f0 <system_diagnostic_temp_sensor+0x48>)
 80066cc:	f7fd f820 	bl	8003710 <drv_ssd1306_puts>
 80066d0:	e004      	b.n	80066dc <system_diagnostic_temp_sensor+0x34>
    }
    else
    {
        drv_ssd1306_puts((uint8_t *) "DISCONNECTED", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80066d2:	2201      	movs	r2, #1
 80066d4:	4905      	ldr	r1, [pc, #20]	; (80066ec <system_diagnostic_temp_sensor+0x44>)
 80066d6:	4807      	ldr	r0, [pc, #28]	; (80066f4 <system_diagnostic_temp_sensor+0x4c>)
 80066d8:	f7fd f81a 	bl	8003710 <drv_ssd1306_puts>
    }

    system_display_update();
 80066dc:	f002 fb08 	bl	8008cf0 <system_display_update>
    return SYSTEM_DIAGNOSTIC_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200011e8 	.word	0x200011e8
 80066f0:	08014bdc 	.word	0x08014bdc
 80066f4:	08014be8 	.word	0x08014be8

080066f8 <system_diagnostic_button>:

system_diagnostic_error_t system_diagnostic_button(button_name_t *button_state)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	6078      	str	r0, [r7, #4]
    drv_ssd1306_fill_theme_color();
 8006700:	f7fc fc8c 	bl	800301c <drv_ssd1306_fill_theme_color>

    /* Draw button map */
    drv_ssd1306_draw_bitmap(0, 0, icon_button_theme, 128, 64, 1);
 8006704:	2301      	movs	r3, #1
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	4a53      	ldr	r2, [pc, #332]	; (800685c <system_diagnostic_button+0x164>)
 8006710:	2100      	movs	r1, #0
 8006712:	2000      	movs	r0, #0
 8006714:	f7fc fdf6 	bl	8003304 <drv_ssd1306_draw_bitmap>

    /* Display oke with button have click */
    switch (*button_state)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	2b0b      	cmp	r3, #11
 8006720:	f200 8094 	bhi.w	800684c <system_diagnostic_button+0x154>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <system_diagnostic_button+0x34>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006799 	.word	0x08006799
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006771 	.word	0x08006771
 8006738:	08006785 	.word	0x08006785
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067ad 	.word	0x080067ad
 8006744:	08006811 	.word	0x08006811
 8006748:	080067d5 	.word	0x080067d5
 800674c:	080067e9 	.word	0x080067e9
 8006750:	080067fd 	.word	0x080067fd
 8006754:	08006839 	.word	0x08006839
 8006758:	08006825 	.word	0x08006825
    {
    case CLICK_UP_BUTTON:
        drv_ssd1306_goto_xy(90, 15);
 800675c:	210f      	movs	r1, #15
 800675e:	205a      	movs	r0, #90	; 0x5a
 8006760:	f7fc fe9a 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"C", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8006764:	2201      	movs	r2, #1
 8006766:	493e      	ldr	r1, [pc, #248]	; (8006860 <system_diagnostic_button+0x168>)
 8006768:	483e      	ldr	r0, [pc, #248]	; (8006864 <system_diagnostic_button+0x16c>)
 800676a:	f7fc ffd1 	bl	8003710 <drv_ssd1306_puts>
    	break;
 800676e:	e06e      	b.n	800684e <system_diagnostic_button+0x156>

    case CLICK_DOWN_BUTTON:
        drv_ssd1306_goto_xy(90, 42);
 8006770:	212a      	movs	r1, #42	; 0x2a
 8006772:	205a      	movs	r0, #90	; 0x5a
 8006774:	f7fc fe90 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"C", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8006778:	2201      	movs	r2, #1
 800677a:	4939      	ldr	r1, [pc, #228]	; (8006860 <system_diagnostic_button+0x168>)
 800677c:	4839      	ldr	r0, [pc, #228]	; (8006864 <system_diagnostic_button+0x16c>)
 800677e:	f7fc ffc7 	bl	8003710 <drv_ssd1306_puts>
    	break;
 8006782:	e064      	b.n	800684e <system_diagnostic_button+0x156>

    case CLICK_LEFT_BUTTON:
        drv_ssd1306_goto_xy(70, 29);
 8006784:	211d      	movs	r1, #29
 8006786:	2046      	movs	r0, #70	; 0x46
 8006788:	f7fc fe86 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"C", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 800678c:	2201      	movs	r2, #1
 800678e:	4934      	ldr	r1, [pc, #208]	; (8006860 <system_diagnostic_button+0x168>)
 8006790:	4834      	ldr	r0, [pc, #208]	; (8006864 <system_diagnostic_button+0x16c>)
 8006792:	f7fc ffbd 	bl	8003710 <drv_ssd1306_puts>
    	break;
 8006796:	e05a      	b.n	800684e <system_diagnostic_button+0x156>

    case CLICK_RIGHT_BUTTON:
        drv_ssd1306_goto_xy(110, 29);
 8006798:	211d      	movs	r1, #29
 800679a:	206e      	movs	r0, #110	; 0x6e
 800679c:	f7fc fe7c 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"C", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 80067a0:	2201      	movs	r2, #1
 80067a2:	492f      	ldr	r1, [pc, #188]	; (8006860 <system_diagnostic_button+0x168>)
 80067a4:	482f      	ldr	r0, [pc, #188]	; (8006864 <system_diagnostic_button+0x16c>)
 80067a6:	f7fc ffb3 	bl	8003710 <drv_ssd1306_puts>
    	break;
 80067aa:	e050      	b.n	800684e <system_diagnostic_button+0x156>
    case CLICK_CANCEL_BUTTON:
        drv_ssd1306_goto_xy(23, 40);
 80067ac:	2128      	movs	r1, #40	; 0x28
 80067ae:	2017      	movs	r0, #23
 80067b0:	f7fc fe72 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"C", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 80067b4:	2201      	movs	r2, #1
 80067b6:	492a      	ldr	r1, [pc, #168]	; (8006860 <system_diagnostic_button+0x168>)
 80067b8:	482a      	ldr	r0, [pc, #168]	; (8006864 <system_diagnostic_button+0x16c>)
 80067ba:	f7fc ffa9 	bl	8003710 <drv_ssd1306_puts>
    	break;
 80067be:	e046      	b.n	800684e <system_diagnostic_button+0x156>

    case CLICK_SELECT_BUTTON:
        drv_ssd1306_goto_xy(23, 15);
 80067c0:	210f      	movs	r1, #15
 80067c2:	2017      	movs	r0, #23
 80067c4:	f7fc fe68 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"C", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 80067c8:	2201      	movs	r2, #1
 80067ca:	4925      	ldr	r1, [pc, #148]	; (8006860 <system_diagnostic_button+0x168>)
 80067cc:	4825      	ldr	r0, [pc, #148]	; (8006864 <system_diagnostic_button+0x16c>)
 80067ce:	f7fc ff9f 	bl	8003710 <drv_ssd1306_puts>
    	break;
 80067d2:	e03c      	b.n	800684e <system_diagnostic_button+0x156>

    case HOLD_UP_BUTTON:
        drv_ssd1306_goto_xy(90, 15);
 80067d4:	210f      	movs	r1, #15
 80067d6:	205a      	movs	r0, #90	; 0x5a
 80067d8:	f7fc fe5e 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"H", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 80067dc:	2201      	movs	r2, #1
 80067de:	4920      	ldr	r1, [pc, #128]	; (8006860 <system_diagnostic_button+0x168>)
 80067e0:	4821      	ldr	r0, [pc, #132]	; (8006868 <system_diagnostic_button+0x170>)
 80067e2:	f7fc ff95 	bl	8003710 <drv_ssd1306_puts>
    	break;
 80067e6:	e032      	b.n	800684e <system_diagnostic_button+0x156>

    case HOLD_DOWN_BUTTON:
        drv_ssd1306_goto_xy(90, 42);
 80067e8:	212a      	movs	r1, #42	; 0x2a
 80067ea:	205a      	movs	r0, #90	; 0x5a
 80067ec:	f7fc fe54 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"H", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 80067f0:	2201      	movs	r2, #1
 80067f2:	491b      	ldr	r1, [pc, #108]	; (8006860 <system_diagnostic_button+0x168>)
 80067f4:	481c      	ldr	r0, [pc, #112]	; (8006868 <system_diagnostic_button+0x170>)
 80067f6:	f7fc ff8b 	bl	8003710 <drv_ssd1306_puts>
    	break;
 80067fa:	e028      	b.n	800684e <system_diagnostic_button+0x156>

    case HOLD_LEFT_BUTTON:
        drv_ssd1306_goto_xy(70, 29);
 80067fc:	211d      	movs	r1, #29
 80067fe:	2046      	movs	r0, #70	; 0x46
 8006800:	f7fc fe4a 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"H", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8006804:	2201      	movs	r2, #1
 8006806:	4916      	ldr	r1, [pc, #88]	; (8006860 <system_diagnostic_button+0x168>)
 8006808:	4817      	ldr	r0, [pc, #92]	; (8006868 <system_diagnostic_button+0x170>)
 800680a:	f7fc ff81 	bl	8003710 <drv_ssd1306_puts>
    	break;
 800680e:	e01e      	b.n	800684e <system_diagnostic_button+0x156>

    case HOLD_RIGHT_BUTTON:
        drv_ssd1306_goto_xy(110, 29);
 8006810:	211d      	movs	r1, #29
 8006812:	206e      	movs	r0, #110	; 0x6e
 8006814:	f7fc fe40 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"H", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8006818:	2201      	movs	r2, #1
 800681a:	4911      	ldr	r1, [pc, #68]	; (8006860 <system_diagnostic_button+0x168>)
 800681c:	4812      	ldr	r0, [pc, #72]	; (8006868 <system_diagnostic_button+0x170>)
 800681e:	f7fc ff77 	bl	8003710 <drv_ssd1306_puts>
    	break;
 8006822:	e014      	b.n	800684e <system_diagnostic_button+0x156>
    case HOLD_CANCEL_BUTTON:
        drv_ssd1306_goto_xy(23, 40);
 8006824:	2128      	movs	r1, #40	; 0x28
 8006826:	2017      	movs	r0, #23
 8006828:	f7fc fe36 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"H", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 800682c:	2201      	movs	r2, #1
 800682e:	490c      	ldr	r1, [pc, #48]	; (8006860 <system_diagnostic_button+0x168>)
 8006830:	480d      	ldr	r0, [pc, #52]	; (8006868 <system_diagnostic_button+0x170>)
 8006832:	f7fc ff6d 	bl	8003710 <drv_ssd1306_puts>
    	break;
 8006836:	e00a      	b.n	800684e <system_diagnostic_button+0x156>

    case HOLD_SELECT_BUTTON:
        drv_ssd1306_goto_xy(23, 15);
 8006838:	210f      	movs	r1, #15
 800683a:	2017      	movs	r0, #23
 800683c:	f7fc fe2c 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *)"H", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8006840:	2201      	movs	r2, #1
 8006842:	4907      	ldr	r1, [pc, #28]	; (8006860 <system_diagnostic_button+0x168>)
 8006844:	4808      	ldr	r0, [pc, #32]	; (8006868 <system_diagnostic_button+0x170>)
 8006846:	f7fc ff63 	bl	8003710 <drv_ssd1306_puts>
    	break;
 800684a:	e000      	b.n	800684e <system_diagnostic_button+0x156>

    default:

    	break;
 800684c:	bf00      	nop
    }

    system_display_update();
 800684e:	f002 fa4f 	bl	8008cf0 <system_display_update>
    return SYSTEM_DIAGNOSTIC_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	08023f40 	.word	0x08023f40
 8006860:	200011e0 	.word	0x200011e0
 8006864:	08014bf8 	.word	0x08014bf8
 8006868:	08014bfc 	.word	0x08014bfc

0800686c <system_diagnostic_led_rgb>:

system_diagnostic_error_t system_diagnostic_led_rgb(button_name_t *button_state)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    drv_ssd1306_fill_theme_color();
 8006874:	f7fc fbd2 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_led_fade_in_fade_out();
 8006878:	f7fc fa92 	bl	8002da0 <drv_led_fade_in_fade_out>

    drv_ssd1306_goto_xy(0, 10);
 800687c:	210a      	movs	r1, #10
 800687e:	2000      	movs	r0, #0
 8006880:	f7fc fe0a 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Do you see anything?", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8006884:	2201      	movs	r2, #1
 8006886:	4917      	ldr	r1, [pc, #92]	; (80068e4 <system_diagnostic_led_rgb+0x78>)
 8006888:	4817      	ldr	r0, [pc, #92]	; (80068e8 <system_diagnostic_led_rgb+0x7c>)
 800688a:	f7fc ff41 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 20);
 800688e:	2114      	movs	r1, #20
 8006890:	2000      	movs	r0, #0
 8006892:	f7fc fe01 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "If it is,check power ", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8006896:	2201      	movs	r2, #1
 8006898:	4912      	ldr	r1, [pc, #72]	; (80068e4 <system_diagnostic_led_rgb+0x78>)
 800689a:	4814      	ldr	r0, [pc, #80]	; (80068ec <system_diagnostic_led_rgb+0x80>)
 800689c:	f7fc ff38 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 30);
 80068a0:	211e      	movs	r1, #30
 80068a2:	2000      	movs	r0, #0
 80068a4:	f7fc fdf8 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "and check wire connect", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 80068a8:	2201      	movs	r2, #1
 80068aa:	490e      	ldr	r1, [pc, #56]	; (80068e4 <system_diagnostic_led_rgb+0x78>)
 80068ac:	4810      	ldr	r0, [pc, #64]	; (80068f0 <system_diagnostic_led_rgb+0x84>)
 80068ae:	f7fc ff2f 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 40);
 80068b2:	2128      	movs	r1, #40	; 0x28
 80068b4:	2000      	movs	r0, #0
 80068b6:	f7fc fdef 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Remember:Not our bug", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 80068ba:	2201      	movs	r2, #1
 80068bc:	4909      	ldr	r1, [pc, #36]	; (80068e4 <system_diagnostic_led_rgb+0x78>)
 80068be:	480d      	ldr	r0, [pc, #52]	; (80068f4 <system_diagnostic_led_rgb+0x88>)
 80068c0:	f7fc ff26 	bl	8003710 <drv_ssd1306_puts>

    if (*button_state == CLICK_CANCEL_BUTTON)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d103      	bne.n	80068d4 <system_diagnostic_led_rgb+0x68>
    {
    	drv_led_off();
 80068cc:	f7fc f9f0 	bl	8002cb0 <drv_led_off>
        return SYSTEM_DIAGNOSTIC_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e002      	b.n	80068da <system_diagnostic_led_rgb+0x6e>
    }

    system_display_update();
 80068d4:	f002 fa0c 	bl	8008cf0 <system_display_update>
    return SYSTEM_DIAGNOSTIC_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200011e0 	.word	0x200011e0
 80068e8:	08014c00 	.word	0x08014c00
 80068ec:	08014c18 	.word	0x08014c18
 80068f0:	08014c30 	.word	0x08014c30
 80068f4:	08014c48 	.word	0x08014c48

080068f8 <system_diagnostic_buzzer>:

system_diagnostic_error_t system_diagnostic_buzzer(button_name_t *button_state)
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b089      	sub	sp, #36	; 0x24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]

    drv_buzzer_music(Super_Mario);
 8006900:	2004      	movs	r0, #4
 8006902:	f7fb fb73 	bl	8001fec <drv_buzzer_music>

    /* Display name song */
    if ( count_time == 2)
 8006906:	4b48      	ldr	r3, [pc, #288]	; (8006a28 <system_diagnostic_buzzer+0x130>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d139      	bne.n	8006982 <system_diagnostic_buzzer+0x8a>
    {
		uint16_t x_axis = 0 ;
 800690e:	2300      	movs	r3, #0
 8006910:	83bb      	strh	r3, [r7, #28]
		for (uint16_t i = 0; i < strlen(name_mussic); i++)
 8006912:	2300      	movs	r3, #0
 8006914:	83fb      	strh	r3, [r7, #30]
 8006916:	e01e      	b.n	8006956 <system_diagnostic_buzzer+0x5e>
		{
			x_axis = (i*7 + count_x_axis) % 128 ;
 8006918:	8bfa      	ldrh	r2, [r7, #30]
 800691a:	4613      	mov	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	4a42      	ldr	r2, [pc, #264]	; (8006a2c <system_diagnostic_buzzer+0x134>)
 8006922:	8812      	ldrh	r2, [r2, #0]
 8006924:	4413      	add	r3, r2
 8006926:	425a      	negs	r2, r3
 8006928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006930:	bf58      	it	pl
 8006932:	4253      	negpl	r3, r2
 8006934:	83bb      	strh	r3, [r7, #28]
			drv_ssd1306_goto_xy(x_axis, 1);
 8006936:	8bbb      	ldrh	r3, [r7, #28]
 8006938:	2101      	movs	r1, #1
 800693a:	4618      	mov	r0, r3
 800693c:	f7fc fdac 	bl	8003498 <drv_ssd1306_goto_xy>
			drv_ssd1306_puts( &name_mussic[i], &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8006940:	8bfb      	ldrh	r3, [r7, #30]
 8006942:	4a3b      	ldr	r2, [pc, #236]	; (8006a30 <system_diagnostic_buzzer+0x138>)
 8006944:	4413      	add	r3, r2
 8006946:	2201      	movs	r2, #1
 8006948:	493a      	ldr	r1, [pc, #232]	; (8006a34 <system_diagnostic_buzzer+0x13c>)
 800694a:	4618      	mov	r0, r3
 800694c:	f7fc fee0 	bl	8003710 <drv_ssd1306_puts>
		for (uint16_t i = 0; i < strlen(name_mussic); i++)
 8006950:	8bfb      	ldrh	r3, [r7, #30]
 8006952:	3301      	adds	r3, #1
 8006954:	83fb      	strh	r3, [r7, #30]
 8006956:	8bfc      	ldrh	r4, [r7, #30]
 8006958:	4835      	ldr	r0, [pc, #212]	; (8006a30 <system_diagnostic_buzzer+0x138>)
 800695a:	f7f9 fc41 	bl	80001e0 <strlen>
 800695e:	4603      	mov	r3, r0
 8006960:	429c      	cmp	r4, r3
 8006962:	d3d9      	bcc.n	8006918 <system_diagnostic_buzzer+0x20>

		}
		count_time = 0 ;
 8006964:	4b30      	ldr	r3, [pc, #192]	; (8006a28 <system_diagnostic_buzzer+0x130>)
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
		count_x_axis = (count_x_axis > 128) ? 0 : count_x_axis + 1 ;
 800696a:	4b30      	ldr	r3, [pc, #192]	; (8006a2c <system_diagnostic_buzzer+0x134>)
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d804      	bhi.n	800697c <system_diagnostic_buzzer+0x84>
 8006972:	4b2e      	ldr	r3, [pc, #184]	; (8006a2c <system_diagnostic_buzzer+0x134>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	e000      	b.n	800697e <system_diagnostic_buzzer+0x86>
 800697c:	2300      	movs	r3, #0
 800697e:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <system_diagnostic_buzzer+0x134>)
 8006980:	8013      	strh	r3, [r2, #0]

    }

    /* Display volume value */
	drv_ssd1306_goto_xy(10, 20);
 8006982:	2114      	movs	r1, #20
 8006984:	200a      	movs	r0, #10
 8006986:	f7fc fd87 	bl	8003498 <drv_ssd1306_goto_xy>
	uint8_t volume_string[20];
	sprintf(volume_string ,"Volume : %02u", volume);
 800698a:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <system_diagnostic_buzzer+0x140>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f107 0308 	add.w	r3, r7, #8
 8006994:	4929      	ldr	r1, [pc, #164]	; (8006a3c <system_diagnostic_buzzer+0x144>)
 8006996:	4618      	mov	r0, r3
 8006998:	f00a fed6 	bl	8011748 <siprintf>
	drv_ssd1306_puts( volume_string, &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	2201      	movs	r2, #1
 80069a2:	4924      	ldr	r1, [pc, #144]	; (8006a34 <system_diagnostic_buzzer+0x13c>)
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fc feb3 	bl	8003710 <drv_ssd1306_puts>
    drv_buzzer_volume(volume);
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <system_diagnostic_buzzer+0x140>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fb fb05 	bl	8001fc0 <drv_buzzer_volume>

    system_display_update();
 80069b6:	f002 f99b 	bl	8008cf0 <system_display_update>
    count_time++ ;
 80069ba:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <system_diagnostic_buzzer+0x130>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	3301      	adds	r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <system_diagnostic_buzzer+0x130>)
 80069c4:	701a      	strb	r2, [r3, #0]
    bsp_delay(1);
 80069c6:	2001      	movs	r0, #1
 80069c8:	f7fb f88e 	bl	8001ae8 <bsp_delay>

    if (*button_state == CLICK_CANCEL_BUTTON)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b06      	cmp	r3, #6
 80069d2:	d103      	bne.n	80069dc <system_diagnostic_buzzer+0xe4>
    {
        drv_buzzer_off();
 80069d4:	f7fb fb30 	bl	8002038 <drv_buzzer_off>
        return SYSTEM_DIAGNOSTIC_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e020      	b.n	8006a1e <system_diagnostic_buzzer+0x126>
    }

    if (*button_state == CLICK_UP_BUTTON)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d109      	bne.n	80069f8 <system_diagnostic_buzzer+0x100>
    {
    	volume = (volume >= 10) ? 10 : volume + 1 ;
 80069e4:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <system_diagnostic_buzzer+0x140>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b09      	cmp	r3, #9
 80069ea:	bf28      	it	cs
 80069ec:	2309      	movcs	r3, #9
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	3301      	adds	r3, #1
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <system_diagnostic_buzzer+0x140>)
 80069f6:	701a      	strb	r2, [r3, #0]
    	//drv_ssd1306_fill_theme_color();
    }

    if (*button_state == CLICK_DOWN_BUTTON)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d10b      	bne.n	8006a18 <system_diagnostic_buzzer+0x120>
    {
    	volume = (volume <= 0) ? 0 : volume - 1 ;
 8006a00:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <system_diagnostic_buzzer+0x140>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <system_diagnostic_buzzer+0x11a>
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <system_diagnostic_buzzer+0x140>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	e000      	b.n	8006a14 <system_diagnostic_buzzer+0x11c>
 8006a12:	2300      	movs	r3, #0
 8006a14:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <system_diagnostic_buzzer+0x140>)
 8006a16:	7013      	strb	r3, [r2, #0]
    	//drv_ssd1306_fill_theme_color();
    }

    system_display_update();
 8006a18:	f002 f96a 	bl	8008cf0 <system_display_update>
    return SYSTEM_DIAGNOSTIC_ERROR;
 8006a1c:	2301      	movs	r3, #1
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3724      	adds	r7, #36	; 0x24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd90      	pop	{r4, r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20003dc0 	.word	0x20003dc0
 8006a2c:	20003dc2 	.word	0x20003dc2
 8006a30:	200014dc 	.word	0x200014dc
 8006a34:	200011e8 	.word	0x200011e8
 8006a38:	200014d8 	.word	0x200014d8
 8006a3c:	08014c60 	.word	0x08014c60

08006a40 <system_diagnostic_handle>:


system_diagnostic_error_t system_diagnostic_handle(button_name_t *button_state, uint8_t *object_select)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
    if (*object_select == SYSTEM_DIAGNOSTIC_SCREEN)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <system_diagnostic_handle+0x1a>
        system_diagnostic_screen(button_state);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fdd8 	bl	8006608 <system_diagnostic_screen>
 8006a58:	e026      	b.n	8006aa8 <system_diagnostic_handle+0x68>

    else if (*object_select == SYSTEM_DIAGNOSTIC_REALTIME)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d103      	bne.n	8006a6a <system_diagnostic_handle+0x2a>
        system_diagnostic_realtime(button_state);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff fdf8 	bl	8006658 <system_diagnostic_realtime>
 8006a68:	e01e      	b.n	8006aa8 <system_diagnostic_handle+0x68>

    else if (*object_select == SYSTEM_DIAGNOSTIC_TEMP)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d103      	bne.n	8006a7a <system_diagnostic_handle+0x3a>
        system_diagnostic_temp_sensor(button_state);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fe18 	bl	80066a8 <system_diagnostic_temp_sensor>
 8006a78:	e016      	b.n	8006aa8 <system_diagnostic_handle+0x68>

    else if (*object_select == SYSTEM_DIAGNOSTIC_BUTTON)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d103      	bne.n	8006a8a <system_diagnostic_handle+0x4a>
        system_diagnostic_button(button_state);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fe38 	bl	80066f8 <system_diagnostic_button>
 8006a88:	e00e      	b.n	8006aa8 <system_diagnostic_handle+0x68>

    else if (*object_select == SYSTEM_DIAGNOSTIC_LED)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d103      	bne.n	8006a9a <system_diagnostic_handle+0x5a>
        system_diagnostic_led_rgb(button_state);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff feea 	bl	800686c <system_diagnostic_led_rgb>
 8006a98:	e006      	b.n	8006aa8 <system_diagnostic_handle+0x68>

    else if (*object_select == SYSTEM_DIAGNOSTIC_BUZZER)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d102      	bne.n	8006aa8 <system_diagnostic_handle+0x68>
        system_diagnostic_buzzer(button_state);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff ff28 	bl	80068f8 <system_diagnostic_buzzer>

    return SYSTEM_DIAGNOSTIC_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <system_display_init>:
/* Private function prototypes ---------------------------------------- */
static system_display_error_t system_display_alarm_reminder(void);
/* Function definitions ----------------------------------------------- */

system_display_error_t system_display_init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
    cjmcu75_init(&cjmcu75);
 8006ab8:	4812      	ldr	r0, [pc, #72]	; (8006b04 <system_display_init+0x50>)
 8006aba:	f7fb fd29 	bl	8002510 <cjmcu75_init>
    drv_ssd1306.device_address      = 0x78;
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <system_display_init+0x54>)
 8006ac0:	2278      	movs	r2, #120	; 0x78
 8006ac2:	701a      	strb	r2, [r3, #0]
    drv_ssd1306.i2c_is_device_ready = bsp_i2c3_is_device_ready;
 8006ac4:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <system_display_init+0x54>)
 8006ac6:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <system_display_init+0x58>)
 8006ac8:	605a      	str	r2, [r3, #4]
    drv_ssd1306.i2c_read_at         = bsp_i2c3_read_mem;
 8006aca:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <system_display_init+0x54>)
 8006acc:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <system_display_init+0x5c>)
 8006ace:	609a      	str	r2, [r3, #8]
    drv_ssd1306.i2c_write_at        = bsp_i2c3_write_mem_dma;
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <system_display_init+0x54>)
 8006ad2:	4a10      	ldr	r2, [pc, #64]	; (8006b14 <system_display_init+0x60>)
 8006ad4:	60da      	str	r2, [r3, #12]
    SYSTEM_DISPLAY_CHECK_ERROR(drv_ssd1306_init(&drv_ssd1306) == DRV_SSD1306_OK, SYSTEM_DISPLAY_ERROR);
 8006ad6:	480c      	ldr	r0, [pc, #48]	; (8006b08 <system_display_init+0x54>)
 8006ad8:	f7fc fb5a 	bl	8003190 <drv_ssd1306_init>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <system_display_init+0x32>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e00c      	b.n	8006b00 <system_display_init+0x4c>
    system_data_get_theme_color(&theme_color);
 8006ae6:	480c      	ldr	r0, [pc, #48]	; (8006b18 <system_display_init+0x64>)
 8006ae8:	f7ff fcfa 	bl	80064e0 <system_data_get_theme_color>
    drv_ssd1306_invert_display(&drv_ssd1306, theme_color);
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <system_display_init+0x64>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4619      	mov	r1, r3
 8006af2:	4805      	ldr	r0, [pc, #20]	; (8006b08 <system_display_init+0x54>)
 8006af4:	f7fc fbf4 	bl	80032e0 <drv_ssd1306_invert_display>
    system_time_alarm_set_callback(system_display_alarm_reminder);
 8006af8:	4808      	ldr	r0, [pc, #32]	; (8006b1c <system_display_init+0x68>)
 8006afa:	f002 fffb 	bl	8009af4 <system_time_alarm_set_callback>
    return SYSTEM_DISPLAY_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20003dc4 	.word	0x20003dc4
 8006b08:	20003dd8 	.word	0x20003dd8
 8006b0c:	080016f5 	.word	0x080016f5
 8006b10:	08001745 	.word	0x08001745
 8006b14:	080017a1 	.word	0x080017a1
 8006b18:	20003dd4 	.word	0x20003dd4
 8006b1c:	08006b21 	.word	0x08006b21

08006b20 <system_display_alarm_reminder>:

static system_display_error_t system_display_alarm_reminder(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08c      	sub	sp, #48	; 0x30
 8006b24:	af02      	add	r7, sp, #8
    char  string_time[10];
    rtc_t rtc;
    system_time_get_date_time(&rtc);
 8006b26:	f107 0314 	add.w	r3, r7, #20
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f003 f966 	bl	8009dfc <system_time_get_date_time>

    uint8_t  toggle         = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t color_red[3]   = { 100, 0, 0 };
 8006b36:	2364      	movs	r3, #100	; 0x64
 8006b38:	81bb      	strh	r3, [r7, #12]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	81fb      	strh	r3, [r7, #14]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	823b      	strh	r3, [r7, #16]
    uint16_t color_black[3] = { 0, 0, 0 };
 8006b42:	2300      	movs	r3, #0
 8006b44:	80bb      	strh	r3, [r7, #4]
 8006b46:	2300      	movs	r3, #0
 8006b48:	80fb      	strh	r3, [r7, #6]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	813b      	strh	r3, [r7, #8]

    /* Clean screen */
    drv_ssd1306_update_screen(&drv_ssd1306);
 8006b4e:	483e      	ldr	r0, [pc, #248]	; (8006c48 <system_display_alarm_reminder+0x128>)
 8006b50:	f7fc fa76 	bl	8003040 <drv_ssd1306_update_screen>
    /* Off buzzer */
    drv_buzzer_off();
 8006b54:	f7fb fa70 	bl	8002038 <drv_buzzer_off>
    /* Off led rgb */
    drv_led_off();
 8006b58:	f7fc f8aa 	bl	8002cb0 <drv_led_off>
    /* Turn alarm */
    drv_buzzer_music(NOKIA_TUNE);
 8006b5c:	2002      	movs	r0, #2
 8006b5e:	f7fb fa45 	bl	8001fec <drv_buzzer_music>

    while (1)
    {
        /* I2C ready */
        if (bsp_i2c3_is_busy() == true)
 8006b62:	f7fa fddf 	bl	8001724 <bsp_i2c3_is_busy>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0fa      	beq.n	8006b62 <system_display_alarm_reminder+0x42>
        {
            /* Screen alarm */
            static uint8_t dem = 0;
            drv_ssd1306_fill_theme_color();
 8006b6c:	f7fc fa56 	bl	800301c <drv_ssd1306_fill_theme_color>
            drv_ssd1306_draw_bitmap(0, 0, gif_alarm_reminder[dem++], 128, 64, 1);
 8006b70:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <system_display_alarm_reminder+0x12c>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	b2d1      	uxtb	r1, r2
 8006b78:	4a34      	ldr	r2, [pc, #208]	; (8006c4c <system_display_alarm_reminder+0x12c>)
 8006b7a:	7011      	strb	r1, [r2, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <system_display_alarm_reminder+0x130>)
 8006b80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b84:	2301      	movs	r3, #1
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	2340      	movs	r3, #64	; 0x40
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	2100      	movs	r1, #0
 8006b90:	2000      	movs	r0, #0
 8006b92:	f7fc fbb7 	bl	8003304 <drv_ssd1306_draw_bitmap>
            drv_ssd1306_draw_rectangle(0, 0, 128, 64, 1);
 8006b96:	2301      	movs	r3, #1
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2340      	movs	r3, #64	; 0x40
 8006b9c:	2280      	movs	r2, #128	; 0x80
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f7fd f87f 	bl	8003ca4 <drv_ssd1306_draw_rectangle>
            drv_ssd1306_goto_xy(12, 42);
 8006ba6:	212a      	movs	r1, #42	; 0x2a
 8006ba8:	200c      	movs	r0, #12
 8006baa:	f7fc fc75 	bl	8003498 <drv_ssd1306_goto_xy>
            sprintf(string_time, "%02d:%02d:%02d", rtc.hour, rtc.minute, rtc.second);
 8006bae:	7e3b      	ldrb	r3, [r7, #24]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	7e7b      	ldrb	r3, [r7, #25]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	7ebb      	ldrb	r3, [r7, #26]
 8006bb8:	f107 001c 	add.w	r0, r7, #28
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4924      	ldr	r1, [pc, #144]	; (8006c54 <system_display_alarm_reminder+0x134>)
 8006bc2:	f00a fdc1 	bl	8011748 <siprintf>
            drv_ssd1306_puts((uint8_t *) string_time, &font_10x19, 1);
 8006bc6:	f107 031c 	add.w	r3, r7, #28
 8006bca:	2201      	movs	r2, #1
 8006bcc:	4922      	ldr	r1, [pc, #136]	; (8006c58 <system_display_alarm_reminder+0x138>)
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fc fd9e 	bl	8003710 <drv_ssd1306_puts>
            drv_ssd1306_update_screen(&drv_ssd1306);
 8006bd4:	481c      	ldr	r0, [pc, #112]	; (8006c48 <system_display_alarm_reminder+0x128>)
 8006bd6:	f7fc fa33 	bl	8003040 <drv_ssd1306_update_screen>
            if (dem == 43)
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <system_display_alarm_reminder+0x12c>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b2b      	cmp	r3, #43	; 0x2b
 8006be0:	d11c      	bne.n	8006c1c <system_display_alarm_reminder+0xfc>
            {
                if (toggle)
 8006be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <system_display_alarm_reminder+0xd6>
                    drv_led_set_color(color_red);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fc f87a 	bl	8002ce8 <drv_led_set_color>
 8006bf4:	e003      	b.n	8006bfe <system_display_alarm_reminder+0xde>
                else
                    drv_led_set_color(color_black);
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fc f875 	bl	8002ce8 <drv_led_set_color>
                toggle = !toggle;
 8006bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bf0c      	ite	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	2300      	movne	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                drv_buzzer_music(NOKIA_TUNE);
 8006c10:	2002      	movs	r0, #2
 8006c12:	f7fb f9eb 	bl	8001fec <drv_buzzer_music>
                dem    = 0;
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <system_display_alarm_reminder+0x12c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
            }

            /* Exit alarm */
            if (bsp_gpio_read_pin(GPIOC, GPIO_PIN_12) == false)
 8006c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c20:	480e      	ldr	r0, [pc, #56]	; (8006c5c <system_display_alarm_reminder+0x13c>)
 8006c22:	f7fa fcdd 	bl	80015e0 <bsp_gpio_read_pin>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f083 0301 	eor.w	r3, r3, #1
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d097      	beq.n	8006b62 <system_display_alarm_reminder+0x42>
            {
            	drv_led_off();
 8006c32:	f7fc f83d 	bl	8002cb0 <drv_led_off>
                drv_buzzer_off();
 8006c36:	f7fb f9ff 	bl	8002038 <drv_buzzer_off>
                break;
 8006c3a:	bf00      	nop
            }
        }
    }
    return SYSTEM_DISPLAY_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3728      	adds	r7, #40	; 0x28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20003dd8 	.word	0x20003dd8
 8006c4c:	20003de8 	.word	0x20003de8
 8006c50:	2000142c 	.word	0x2000142c
 8006c54:	08014ca0 	.word	0x08014ca0
 8006c58:	20001200 	.word	0x20001200
 8006c5c:	40020800 	.word	0x40020800

08006c60 <system_display_update_theme_color>:
    }
    return SYSTEM_DISPLAY_OK;
}

system_display_error_t system_display_update_theme_color(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
    system_data_get_theme_color(&theme_color);
 8006c64:	4805      	ldr	r0, [pc, #20]	; (8006c7c <system_display_update_theme_color+0x1c>)
 8006c66:	f7ff fc3b 	bl	80064e0 <system_data_get_theme_color>
    drv_ssd1306_invert_display(&drv_ssd1306, theme_color);
 8006c6a:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <system_display_update_theme_color+0x1c>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4803      	ldr	r0, [pc, #12]	; (8006c80 <system_display_update_theme_color+0x20>)
 8006c72:	f7fc fb35 	bl	80032e0 <drv_ssd1306_invert_display>
    return SYSTEM_DISPLAY_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20003dd4 	.word	0x20003dd4
 8006c80:	20003dd8 	.word	0x20003dd8

08006c84 <system_display_screen_save>:

system_display_error_t system_display_screen_save(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af02      	add	r7, sp, #8
    drv_ssd1306_fill_theme_color();
 8006c8a:	f7fc f9c7 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_draw_bitmap(0, 0, icon_screen_save, 128, 64, 1);
 8006c8e:	2301      	movs	r3, #1
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	2380      	movs	r3, #128	; 0x80
 8006c98:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <system_display_screen_save+0x50>)
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f7fc fb31 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_draw_rectangle(0, 0, 128, 64, DRV_SSD1306_COLOR_WHITE);
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	2280      	movs	r2, #128	; 0x80
 8006caa:	2100      	movs	r1, #0
 8006cac:	2000      	movs	r0, #0
 8006cae:	f7fc fff9 	bl	8003ca4 <drv_ssd1306_draw_rectangle>
    drv_ssd1306_goto_xy(48, 50);
 8006cb2:	2132      	movs	r1, #50	; 0x32
 8006cb4:	2030      	movs	r0, #48	; 0x30
 8006cb6:	f7fc fbef 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "SAVE", &font_7x10, 1);
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4906      	ldr	r1, [pc, #24]	; (8006cd8 <system_display_screen_save+0x54>)
 8006cbe:	4807      	ldr	r0, [pc, #28]	; (8006cdc <system_display_screen_save+0x58>)
 8006cc0:	f7fc fd26 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8006cc4:	4806      	ldr	r0, [pc, #24]	; (8006ce0 <system_display_screen_save+0x5c>)
 8006cc6:	f7fc f9bb 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	080239a0 	.word	0x080239a0
 8006cd8:	200011e8 	.word	0x200011e8
 8006cdc:	08014cb0 	.word	0x08014cb0
 8006ce0:	20003dd8 	.word	0x20003dd8

08006ce4 <system_display_time_reminder>:

system_display_error_t system_display_time_reminder(button_name_t button)
{
 8006ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce6:	b095      	sub	sp, #84	; 0x54
 8006ce8:	af04      	add	r7, sp, #16
 8006cea:	4603      	mov	r3, r0
 8006cec:	71fb      	strb	r3, [r7, #7]
    static button_name_t          last_button = 0;
    static uint8_t                read_once   = 0;
    static system_time_reminder_t reminder_data;
    if (!read_once)
 8006cee:	4ba2      	ldr	r3, [pc, #648]	; (8006f78 <system_display_time_reminder+0x294>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d108      	bne.n	8006d08 <system_display_time_reminder+0x24>
    {
        read_once++;
 8006cf6:	4ba0      	ldr	r3, [pc, #640]	; (8006f78 <system_display_time_reminder+0x294>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	4b9e      	ldr	r3, [pc, #632]	; (8006f78 <system_display_time_reminder+0x294>)
 8006d00:	701a      	strb	r2, [r3, #0]
        system_time_get_reminder(&reminder_data);
 8006d02:	489e      	ldr	r0, [pc, #632]	; (8006f7c <system_display_time_reminder+0x298>)
 8006d04:	f003 f804 	bl	8009d10 <system_time_get_reminder>
    }
    rtc_t          rtc;
    char           string_time[30];
    uint8_t        pos_x = 25, pos_y = 6, index_tick = 0;
 8006d08:	2319      	movs	r3, #25
 8006d0a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8006d0e:	2306      	movs	r3, #6
 8006d10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006d14:	2300      	movs	r3, #0
 8006d16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    static uint8_t count         = 0;
    static uint8_t pos_pointer_x = 25, pos_pointer_y = 14;
    static uint8_t start_list = 0, end_list = 3;

    if (button == HOLD_LEFT_BUTTON || button == HOLD_RIGHT_BUTTON || button == HOLD_UP_BUTTON || button == HOLD_DOWN_BUTTON)
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	2b0a      	cmp	r3, #10
 8006d1e:	d008      	beq.n	8006d32 <system_display_time_reminder+0x4e>
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	2b07      	cmp	r3, #7
 8006d24:	d005      	beq.n	8006d32 <system_display_time_reminder+0x4e>
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d002      	beq.n	8006d32 <system_display_time_reminder+0x4e>
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	2b09      	cmp	r3, #9
 8006d30:	d10b      	bne.n	8006d4a <system_display_time_reminder+0x66>
    {
        for (volatile uint32_t i = 0; i < 0xFFFFF; i++) __NOP();
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e003      	b.n	8006d40 <system_display_time_reminder+0x5c>
 8006d38:	bf00      	nop
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a8f      	ldr	r2, [pc, #572]	; (8006f80 <system_display_time_reminder+0x29c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d9f7      	bls.n	8006d38 <system_display_time_reminder+0x54>
        goto start;
 8006d48:	e009      	b.n	8006d5e <system_display_time_reminder+0x7a>
    }

    if (button == last_button)
 8006d4a:	4b8e      	ldr	r3, [pc, #568]	; (8006f84 <system_display_time_reminder+0x2a0>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	79fa      	ldrb	r2, [r7, #7]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d101      	bne.n	8006d58 <system_display_time_reminder+0x74>
        return SYSTEM_DISPLAY_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	e222      	b.n	800719e <system_display_time_reminder+0x4ba>
    last_button = button;
 8006d58:	4a8a      	ldr	r2, [pc, #552]	; (8006f84 <system_display_time_reminder+0x2a0>)
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	7013      	strb	r3, [r2, #0]

start:;

    drv_ssd1306_fill_theme_color();
 8006d5e:	f7fc f95d 	bl	800301c <drv_ssd1306_fill_theme_color>
    for (uint8_t i = start_list; i < end_list; i++)
 8006d62:	4b89      	ldr	r3, [pc, #548]	; (8006f88 <system_display_time_reminder+0x2a4>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006d6a:	e07d      	b.n	8006e68 <system_display_time_reminder+0x184>
    {
        if (reminder_data.number_reminder & (1 << i))
 8006d6c:	4b83      	ldr	r3, [pc, #524]	; (8006f7c <system_display_time_reminder+0x298>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006d76:	fa42 f303 	asr.w	r3, r2, r3
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <system_display_time_reminder+0xcc>
        {
            drv_ssd1306_draw_bitmap(6, 2 + index_tick * 22, icon_tick_on, 16, 16, 1);
 8006d82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	0092      	lsls	r2, r2, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	0052      	lsls	r2, r2, #1
 8006d90:	4413      	add	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3302      	adds	r3, #2
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b219      	sxth	r1, r3
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	2310      	movs	r3, #16
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	2310      	movs	r3, #16
 8006da6:	4a79      	ldr	r2, [pc, #484]	; (8006f8c <system_display_time_reminder+0x2a8>)
 8006da8:	2006      	movs	r0, #6
 8006daa:	f7fc faab 	bl	8003304 <drv_ssd1306_draw_bitmap>
 8006dae:	e015      	b.n	8006ddc <system_display_time_reminder+0xf8>
        }
        else
            drv_ssd1306_draw_bitmap(6, 2 + index_tick * 22, icon_tick_off, 16, 16, 1);
 8006db0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	0092      	lsls	r2, r2, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	0052      	lsls	r2, r2, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	b219      	sxth	r1, r3
 8006dca:	2301      	movs	r3, #1
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	2310      	movs	r3, #16
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	4a6e      	ldr	r2, [pc, #440]	; (8006f90 <system_display_time_reminder+0x2ac>)
 8006dd6:	2006      	movs	r0, #6
 8006dd8:	f7fc fa94 	bl	8003304 <drv_ssd1306_draw_bitmap>
        ds1307_convert_to_date_time(&rtc, reminder_data.rtc_reminder[i]);
 8006ddc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006de0:	4a66      	ldr	r2, [pc, #408]	; (8006f7c <system_display_time_reminder+0x298>)
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fb fefe 	bl	8002bf0 <ds1307_convert_to_date_time>
        sprintf(string_time, "%02d:%02d:%02d %02d-%02d-%02d", rtc.hour, rtc.minute, rtc.second, rtc.day_of_month, rtc.month,
 8006df4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006dfe:	461e      	mov	r6, r3
 8006e00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006e04:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006e08:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
                rtc.year);
 8006e0c:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
        sprintf(string_time, "%02d:%02d:%02d %02d-%02d-%02d", rtc.hour, rtc.minute, rtc.second, rtc.day_of_month, rtc.month,
 8006e10:	4604      	mov	r4, r0
 8006e12:	f107 0010 	add.w	r0, r7, #16
 8006e16:	9403      	str	r4, [sp, #12]
 8006e18:	9102      	str	r1, [sp, #8]
 8006e1a:	9201      	str	r2, [sp, #4]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4633      	mov	r3, r6
 8006e20:	462a      	mov	r2, r5
 8006e22:	495c      	ldr	r1, [pc, #368]	; (8006f94 <system_display_time_reminder+0x2b0>)
 8006e24:	f00a fc90 	bl	8011748 <siprintf>
        drv_ssd1306_goto_xy(pos_x, pos_y);
 8006e28:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006e32:	b292      	uxth	r2, r2
 8006e34:	4611      	mov	r1, r2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fc fb2e 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *) string_time, &font_6x8, 1);
 8006e3c:	f107 0310 	add.w	r3, r7, #16
 8006e40:	2201      	movs	r2, #1
 8006e42:	4955      	ldr	r1, [pc, #340]	; (8006f98 <system_display_time_reminder+0x2b4>)
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fc fc63 	bl	8003710 <drv_ssd1306_puts>
        pos_y += 22;
 8006e4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e4e:	3316      	adds	r3, #22
 8006e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        index_tick++;
 8006e54:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006e58:	3301      	adds	r3, #1
 8006e5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for (uint8_t i = start_list; i < end_list; i++)
 8006e5e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006e62:	3301      	adds	r3, #1
 8006e64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006e68:	4b4c      	ldr	r3, [pc, #304]	; (8006f9c <system_display_time_reminder+0x2b8>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006e70:	429a      	cmp	r2, r3
 8006e72:	f4ff af7b 	bcc.w	8006d6c <system_display_time_reminder+0x88>
    }

    if (button == CLICK_RIGHT_BUTTON || button == HOLD_RIGHT_BUTTON)
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d002      	beq.n	8006e82 <system_display_time_reminder+0x19e>
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	2b07      	cmp	r3, #7
 8006e80:	d136      	bne.n	8006ef0 <system_display_time_reminder+0x20c>
    {
        pos_pointer_x += 18;
 8006e82:	4b47      	ldr	r3, [pc, #284]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	3312      	adds	r3, #18
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006e8c:	701a      	strb	r2, [r3, #0]
        if (pos_pointer_x > 115)
 8006e8e:	4b44      	ldr	r3, [pc, #272]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b73      	cmp	r3, #115	; 0x73
 8006e94:	f240 8170 	bls.w	8007178 <system_display_time_reminder+0x494>
        {
            pos_pointer_x = 25;
 8006e98:	4b41      	ldr	r3, [pc, #260]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006e9a:	2219      	movs	r2, #25
 8006e9c:	701a      	strb	r2, [r3, #0]
            pos_pointer_y += 22;
 8006e9e:	4b41      	ldr	r3, [pc, #260]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	3316      	adds	r3, #22
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	4b3f      	ldr	r3, [pc, #252]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006ea8:	701a      	strb	r2, [r3, #0]
            if (pos_pointer_y > 58)
 8006eaa:	4b3e      	ldr	r3, [pc, #248]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b3a      	cmp	r3, #58	; 0x3a
 8006eb0:	f240 8162 	bls.w	8007178 <system_display_time_reminder+0x494>
            {
                pos_pointer_y = 14;
 8006eb4:	4b3b      	ldr	r3, [pc, #236]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006eb6:	220e      	movs	r2, #14
 8006eb8:	701a      	strb	r2, [r3, #0]
                if (end_list != 6)
 8006eba:	4b38      	ldr	r3, [pc, #224]	; (8006f9c <system_display_time_reminder+0x2b8>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b06      	cmp	r3, #6
 8006ec0:	d00f      	beq.n	8006ee2 <system_display_time_reminder+0x1fe>
                {
                    start_list++;
 8006ec2:	4b31      	ldr	r3, [pc, #196]	; (8006f88 <system_display_time_reminder+0x2a4>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <system_display_time_reminder+0x2a4>)
 8006ecc:	701a      	strb	r2, [r3, #0]
                    end_list++;
 8006ece:	4b33      	ldr	r3, [pc, #204]	; (8006f9c <system_display_time_reminder+0x2b8>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	4b31      	ldr	r3, [pc, #196]	; (8006f9c <system_display_time_reminder+0x2b8>)
 8006ed8:	701a      	strb	r2, [r3, #0]
                    read_once = 0;
 8006eda:	4b27      	ldr	r3, [pc, #156]	; (8006f78 <system_display_time_reminder+0x294>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
        if (pos_pointer_x > 115)
 8006ee0:	e14a      	b.n	8007178 <system_display_time_reminder+0x494>
                }
                else
                {
                    pos_pointer_x = 115;
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006ee4:	2273      	movs	r2, #115	; 0x73
 8006ee6:	701a      	strb	r2, [r3, #0]
                    pos_pointer_y = 58;
 8006ee8:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006eea:	223a      	movs	r2, #58	; 0x3a
 8006eec:	701a      	strb	r2, [r3, #0]
        if (pos_pointer_x > 115)
 8006eee:	e143      	b.n	8007178 <system_display_time_reminder+0x494>
                }
            }
        }
    }
    else if (button == CLICK_LEFT_BUTTON || button == HOLD_LEFT_BUTTON)
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d002      	beq.n	8006efc <system_display_time_reminder+0x218>
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	2b0a      	cmp	r3, #10
 8006efa:	d155      	bne.n	8006fa8 <system_display_time_reminder+0x2c4>
    {
        pos_pointer_x -= 18;
 8006efc:	4b28      	ldr	r3, [pc, #160]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	3b12      	subs	r3, #18
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	4b26      	ldr	r3, [pc, #152]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006f06:	701a      	strb	r2, [r3, #0]
        if (pos_pointer_x < 25)
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b18      	cmp	r3, #24
 8006f0e:	f200 8134 	bhi.w	800717a <system_display_time_reminder+0x496>
        {
            pos_pointer_x = 25;
 8006f12:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006f14:	2219      	movs	r2, #25
 8006f16:	701a      	strb	r2, [r3, #0]
            if (pos_pointer_y == 14)
 8006f18:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b0e      	cmp	r3, #14
 8006f1e:	d120      	bne.n	8006f62 <system_display_time_reminder+0x27e>
            {
                pos_pointer_y = 58;
 8006f20:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006f22:	223a      	movs	r2, #58	; 0x3a
 8006f24:	701a      	strb	r2, [r3, #0]
                if (start_list != 0)
 8006f26:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <system_display_time_reminder+0x2a4>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d012      	beq.n	8006f54 <system_display_time_reminder+0x270>
                {
                    pos_pointer_x = 115;
 8006f2e:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006f30:	2273      	movs	r2, #115	; 0x73
 8006f32:	701a      	strb	r2, [r3, #0]
                    start_list--;
 8006f34:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <system_display_time_reminder+0x2a4>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <system_display_time_reminder+0x2a4>)
 8006f3e:	701a      	strb	r2, [r3, #0]
                    end_list--;
 8006f40:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <system_display_time_reminder+0x2b8>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <system_display_time_reminder+0x2b8>)
 8006f4a:	701a      	strb	r2, [r3, #0]
                    read_once = 0;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <system_display_time_reminder+0x294>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]
        if (pos_pointer_x < 25)
 8006f52:	e112      	b.n	800717a <system_display_time_reminder+0x496>
                }
                else
                {
                    pos_pointer_x = 25;
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006f56:	2219      	movs	r2, #25
 8006f58:	701a      	strb	r2, [r3, #0]
                    pos_pointer_y = 14;
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006f5c:	220e      	movs	r2, #14
 8006f5e:	701a      	strb	r2, [r3, #0]
        if (pos_pointer_x < 25)
 8006f60:	e10b      	b.n	800717a <system_display_time_reminder+0x496>
                }
            }
            else
            {
                pos_pointer_x = 115;
 8006f62:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <system_display_time_reminder+0x2bc>)
 8006f64:	2273      	movs	r2, #115	; 0x73
 8006f66:	701a      	strb	r2, [r3, #0]
                pos_pointer_y -= 22;
 8006f68:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	3b16      	subs	r3, #22
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <system_display_time_reminder+0x2c0>)
 8006f72:	701a      	strb	r2, [r3, #0]
        if (pos_pointer_x < 25)
 8006f74:	e101      	b.n	800717a <system_display_time_reminder+0x496>
 8006f76:	bf00      	nop
 8006f78:	20003de9 	.word	0x20003de9
 8006f7c:	20003dec 	.word	0x20003dec
 8006f80:	000ffffe 	.word	0x000ffffe
 8006f84:	20003e08 	.word	0x20003e08
 8006f88:	20003e09 	.word	0x20003e09
 8006f8c:	08018d74 	.word	0x08018d74
 8006f90:	08018d54 	.word	0x08018d54
 8006f94:	08014cb8 	.word	0x08014cb8
 8006f98:	200011e0 	.word	0x200011e0
 8006f9c:	20001520 	.word	0x20001520
 8006fa0:	20001521 	.word	0x20001521
 8006fa4:	20001522 	.word	0x20001522
            }
        }
    }
    else if (button == CLICK_UP_BUTTON || button == CLICK_DOWN_BUTTON || button == HOLD_UP_BUTTON || button == HOLD_DOWN_BUTTON)
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d008      	beq.n	8006fc0 <system_display_time_reminder+0x2dc>
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d005      	beq.n	8006fc0 <system_display_time_reminder+0x2dc>
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	2b08      	cmp	r3, #8
 8006fb8:	d002      	beq.n	8006fc0 <system_display_time_reminder+0x2dc>
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	2b09      	cmp	r3, #9
 8006fbe:	d163      	bne.n	8007088 <system_display_time_reminder+0x3a4>
    {
        uint8_t index = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        if (pos_pointer_y == 14)
 8006fc6:	4b78      	ldr	r3, [pc, #480]	; (80071a8 <system_display_time_reminder+0x4c4>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b0e      	cmp	r3, #14
 8006fcc:	d103      	bne.n	8006fd6 <system_display_time_reminder+0x2f2>
            index = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8006fd4:	e00e      	b.n	8006ff4 <system_display_time_reminder+0x310>
        else if (pos_pointer_y == 36)
 8006fd6:	4b74      	ldr	r3, [pc, #464]	; (80071a8 <system_display_time_reminder+0x4c4>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b24      	cmp	r3, #36	; 0x24
 8006fdc:	d103      	bne.n	8006fe6 <system_display_time_reminder+0x302>
            index = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8006fe4:	e006      	b.n	8006ff4 <system_display_time_reminder+0x310>
        else if (pos_pointer_y == 58)
 8006fe6:	4b70      	ldr	r3, [pc, #448]	; (80071a8 <system_display_time_reminder+0x4c4>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b3a      	cmp	r3, #58	; 0x3a
 8006fec:	d102      	bne.n	8006ff4 <system_display_time_reminder+0x310>
            index = 2;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ds1307_convert_to_date_time(&rtc, reminder_data.rtc_reminder[start_list + index]);
 8006ff4:	4b6d      	ldr	r3, [pc, #436]	; (80071ac <system_display_time_reminder+0x4c8>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006ffe:	4413      	add	r3, r2
 8007000:	4a6b      	ldr	r2, [pc, #428]	; (80071b0 <system_display_time_reminder+0x4cc>)
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7fb fdee 	bl	8002bf0 <ds1307_convert_to_date_time>
        if (button == CLICK_UP_BUTTON || button == HOLD_UP_BUTTON)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d002      	beq.n	8007020 <system_display_time_reminder+0x33c>
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d110      	bne.n	8007042 <system_display_time_reminder+0x35e>
            system_time_change((pos_pointer_x - 25) / 18, &rtc, 1);
 8007020:	4b64      	ldr	r3, [pc, #400]	; (80071b4 <system_display_time_reminder+0x4d0>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	3b19      	subs	r3, #25
 8007026:	4a64      	ldr	r2, [pc, #400]	; (80071b8 <system_display_time_reminder+0x4d4>)
 8007028:	fb82 1203 	smull	r1, r2, r2, r3
 800702c:	1092      	asrs	r2, r2, #2
 800702e:	17db      	asrs	r3, r3, #31
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007038:	2201      	movs	r2, #1
 800703a:	4618      	mov	r0, r3
 800703c:	f003 f810 	bl	800a060 <system_time_change>
 8007040:	e010      	b.n	8007064 <system_display_time_reminder+0x380>
        else
            system_time_change((pos_pointer_x - 25) / 18, &rtc, -1);
 8007042:	4b5c      	ldr	r3, [pc, #368]	; (80071b4 <system_display_time_reminder+0x4d0>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	3b19      	subs	r3, #25
 8007048:	4a5b      	ldr	r2, [pc, #364]	; (80071b8 <system_display_time_reminder+0x4d4>)
 800704a:	fb82 1203 	smull	r1, r2, r2, r3
 800704e:	1092      	asrs	r2, r2, #2
 8007050:	17db      	asrs	r3, r3, #31
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800705a:	f04f 32ff 	mov.w	r2, #4294967295
 800705e:	4618      	mov	r0, r3
 8007060:	f002 fffe 	bl	800a060 <system_time_change>
        ds1307_convert_to_epoch_time(rtc, &reminder_data.rtc_reminder[start_list + index]);
 8007064:	4b51      	ldr	r3, [pc, #324]	; (80071ac <system_display_time_reminder+0x4c8>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4a4f      	ldr	r2, [pc, #316]	; (80071b0 <system_display_time_reminder+0x4cc>)
 8007074:	4413      	add	r3, r2
 8007076:	3304      	adds	r3, #4
 8007078:	461a      	mov	r2, r3
 800707a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800707e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007082:	f7fb fd8b 	bl	8002b9c <ds1307_convert_to_epoch_time>
    {
 8007086:	e078      	b.n	800717a <system_display_time_reminder+0x496>
    }
    else if (button == CLICK_SELECT_BUTTON)
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	2b05      	cmp	r3, #5
 800708c:	d10f      	bne.n	80070ae <system_display_time_reminder+0x3ca>
    {
        system_display_screen_save();
 800708e:	f7ff fdf9 	bl	8006c84 <system_display_screen_save>
        system_time_save_reminder(reminder_data);
 8007092:	4b47      	ldr	r3, [pc, #284]	; (80071b0 <system_display_time_reminder+0x4cc>)
 8007094:	466c      	mov	r4, sp
 8007096:	f103 0210 	add.w	r2, r3, #16
 800709a:	ca07      	ldmia	r2, {r0, r1, r2}
 800709c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070a2:	f002 fd37 	bl	8009b14 <system_time_save_reminder>
        read_once = 0;
 80070a6:	4b45      	ldr	r3, [pc, #276]	; (80071bc <system_display_time_reminder+0x4d8>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	e065      	b.n	800717a <system_display_time_reminder+0x496>
    }
    else if (button == HOLD_CANCEL_BUTTON && !count)
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d15a      	bne.n	800716a <system_display_time_reminder+0x486>
 80070b4:	4b42      	ldr	r3, [pc, #264]	; (80071c0 <system_display_time_reminder+0x4dc>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d156      	bne.n	800716a <system_display_time_reminder+0x486>
    {
        uint8_t index = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (pos_pointer_y == 14)
 80070c2:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <system_display_time_reminder+0x4c4>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b0e      	cmp	r3, #14
 80070c8:	d103      	bne.n	80070d2 <system_display_time_reminder+0x3ee>
            index = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070d0:	e00e      	b.n	80070f0 <system_display_time_reminder+0x40c>
        else if (pos_pointer_y == 36)
 80070d2:	4b35      	ldr	r3, [pc, #212]	; (80071a8 <system_display_time_reminder+0x4c4>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b24      	cmp	r3, #36	; 0x24
 80070d8:	d103      	bne.n	80070e2 <system_display_time_reminder+0x3fe>
            index = 1;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070e0:	e006      	b.n	80070f0 <system_display_time_reminder+0x40c>
        else if (pos_pointer_y == 58)
 80070e2:	4b31      	ldr	r3, [pc, #196]	; (80071a8 <system_display_time_reminder+0x4c4>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b3a      	cmp	r3, #58	; 0x3a
 80070e8:	d102      	bne.n	80070f0 <system_display_time_reminder+0x40c>
            index = 2;
 80070ea:	2302      	movs	r3, #2
 80070ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (reminder_data.number_reminder & (1 << (start_list + index)))
 80070f0:	4b2f      	ldr	r3, [pc, #188]	; (80071b0 <system_display_time_reminder+0x4cc>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <system_display_time_reminder+0x4c8>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007100:	440b      	add	r3, r1
 8007102:	fa42 f303 	asr.w	r3, r2, r3
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d014      	beq.n	8007138 <system_display_time_reminder+0x454>
            reminder_data.number_reminder &= ~(1 << (start_list + index));
 800710e:	4b28      	ldr	r3, [pc, #160]	; (80071b0 <system_display_time_reminder+0x4cc>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	b25a      	sxtb	r2, r3
 8007114:	4b25      	ldr	r3, [pc, #148]	; (80071ac <system_display_time_reminder+0x4c8>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	4619      	mov	r1, r3
 800711a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800711e:	440b      	add	r3, r1
 8007120:	2101      	movs	r1, #1
 8007122:	fa01 f303 	lsl.w	r3, r1, r3
 8007126:	b25b      	sxtb	r3, r3
 8007128:	43db      	mvns	r3, r3
 800712a:	b25b      	sxtb	r3, r3
 800712c:	4013      	ands	r3, r2
 800712e:	b25b      	sxtb	r3, r3
 8007130:	b2da      	uxtb	r2, r3
 8007132:	4b1f      	ldr	r3, [pc, #124]	; (80071b0 <system_display_time_reminder+0x4cc>)
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e011      	b.n	800715c <system_display_time_reminder+0x478>
        else
            reminder_data.number_reminder |= (1 << (start_list + index));
 8007138:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <system_display_time_reminder+0x4cc>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	b25a      	sxtb	r2, r3
 800713e:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <system_display_time_reminder+0x4c8>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	4619      	mov	r1, r3
 8007144:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007148:	440b      	add	r3, r1
 800714a:	2101      	movs	r1, #1
 800714c:	fa01 f303 	lsl.w	r3, r1, r3
 8007150:	b25b      	sxtb	r3, r3
 8007152:	4313      	orrs	r3, r2
 8007154:	b25b      	sxtb	r3, r3
 8007156:	b2da      	uxtb	r2, r3
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <system_display_time_reminder+0x4cc>)
 800715a:	701a      	strb	r2, [r3, #0]
        count++;
 800715c:	4b18      	ldr	r3, [pc, #96]	; (80071c0 <system_display_time_reminder+0x4dc>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	b2da      	uxtb	r2, r3
 8007164:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <system_display_time_reminder+0x4dc>)
 8007166:	701a      	strb	r2, [r3, #0]
    {
 8007168:	e007      	b.n	800717a <system_display_time_reminder+0x496>
    }
    else if (button == NO_EVENT)
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	2b0d      	cmp	r3, #13
 800716e:	d104      	bne.n	800717a <system_display_time_reminder+0x496>
    {
        count = 0;
 8007170:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <system_display_time_reminder+0x4dc>)
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	e000      	b.n	800717a <system_display_time_reminder+0x496>
        if (pos_pointer_x > 115)
 8007178:	bf00      	nop
    }
    drv_ssd1306_draw_bitmap(pos_pointer_x, pos_pointer_y, icon_select, 12, 2, 1);
 800717a:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <system_display_time_reminder+0x4d0>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b218      	sxth	r0, r3
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <system_display_time_reminder+0x4c4>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b219      	sxth	r1, r3
 8007186:	2301      	movs	r3, #1
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	2302      	movs	r3, #2
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	230c      	movs	r3, #12
 8007190:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <system_display_time_reminder+0x4e0>)
 8007192:	f7fc f8b7 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8007196:	480c      	ldr	r0, [pc, #48]	; (80071c8 <system_display_time_reminder+0x4e4>)
 8007198:	f7fb ff52 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3744      	adds	r7, #68	; 0x44
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20001522 	.word	0x20001522
 80071ac:	20003e09 	.word	0x20003e09
 80071b0:	20003dec 	.word	0x20003dec
 80071b4:	20001521 	.word	0x20001521
 80071b8:	38e38e39 	.word	0x38e38e39
 80071bc:	20003de9 	.word	0x20003de9
 80071c0:	20003e0a 	.word	0x20003e0a
 80071c4:	08018d94 	.word	0x08018d94
 80071c8:	20003dd8 	.word	0x20003dd8

080071cc <system_display_set_time>:

system_display_error_t system_display_set_time(button_name_t button)
{
 80071cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ce:	b091      	sub	sp, #68	; 0x44
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
    char                 string_time[20];
    static button_name_t last_button = 0;
    static uint8_t       pos_x = 15, pos_y = 36, read_once = 0;
    static rtc_t         rtc;

    if (button == HOLD_DOWN_BUTTON || button == HOLD_UP_BUTTON)
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	2b09      	cmp	r3, #9
 80071da:	d002      	beq.n	80071e2 <system_display_set_time+0x16>
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d10b      	bne.n	80071fa <system_display_set_time+0x2e>
    {
        for (volatile uint32_t i = 0; i < 0xFFFFF; i++) __NOP();
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e003      	b.n	80071f0 <system_display_set_time+0x24>
 80071e8:	bf00      	nop
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	3301      	adds	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	4a76      	ldr	r2, [pc, #472]	; (80073cc <system_display_set_time+0x200>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d9f7      	bls.n	80071e8 <system_display_set_time+0x1c>
        goto start;
 80071f8:	e007      	b.n	800720a <system_display_set_time+0x3e>
    }
    if (button == last_button)
 80071fa:	4b75      	ldr	r3, [pc, #468]	; (80073d0 <system_display_set_time+0x204>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	79fa      	ldrb	r2, [r7, #7]
 8007200:	429a      	cmp	r2, r3
 8007202:	d101      	bne.n	8007208 <system_display_set_time+0x3c>
        return SYSTEM_DISPLAY_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e0dc      	b.n	80073c2 <system_display_set_time+0x1f6>

start:;
 8007208:	bf00      	nop
    last_button = button;
 800720a:	4a71      	ldr	r2, [pc, #452]	; (80073d0 <system_display_set_time+0x204>)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	7013      	strb	r3, [r2, #0]

    if (!read_once)
 8007210:	4b70      	ldr	r3, [pc, #448]	; (80073d4 <system_display_set_time+0x208>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d108      	bne.n	800722a <system_display_set_time+0x5e>
    {
        read_once++;
 8007218:	4b6e      	ldr	r3, [pc, #440]	; (80073d4 <system_display_set_time+0x208>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	4b6c      	ldr	r3, [pc, #432]	; (80073d4 <system_display_set_time+0x208>)
 8007222:	701a      	strb	r2, [r3, #0]
        system_time_get_date_time(&rtc);
 8007224:	486c      	ldr	r0, [pc, #432]	; (80073d8 <system_display_set_time+0x20c>)
 8007226:	f002 fde9 	bl	8009dfc <system_time_get_date_time>
    }

    if (button == CLICK_RIGHT_BUTTON)
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d10e      	bne.n	800724e <system_display_set_time+0x82>
    {
        pos_x += 18;
 8007230:	4b6a      	ldr	r3, [pc, #424]	; (80073dc <system_display_set_time+0x210>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	3312      	adds	r3, #18
 8007236:	b2da      	uxtb	r2, r3
 8007238:	4b68      	ldr	r3, [pc, #416]	; (80073dc <system_display_set_time+0x210>)
 800723a:	701a      	strb	r2, [r3, #0]
        if (pos_x > 105)
 800723c:	4b67      	ldr	r3, [pc, #412]	; (80073dc <system_display_set_time+0x210>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b69      	cmp	r3, #105	; 0x69
 8007242:	f240 8083 	bls.w	800734c <system_display_set_time+0x180>
            pos_x = 105;
 8007246:	4b65      	ldr	r3, [pc, #404]	; (80073dc <system_display_set_time+0x210>)
 8007248:	2269      	movs	r2, #105	; 0x69
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e07e      	b.n	800734c <system_display_set_time+0x180>
    }
    else if (button == CLICK_LEFT_BUTTON)
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d10a      	bne.n	800726a <system_display_set_time+0x9e>
    {
        if (pos_x != 15)
 8007254:	4b61      	ldr	r3, [pc, #388]	; (80073dc <system_display_set_time+0x210>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b0f      	cmp	r3, #15
 800725a:	d077      	beq.n	800734c <system_display_set_time+0x180>
            pos_x -= 18;
 800725c:	4b5f      	ldr	r3, [pc, #380]	; (80073dc <system_display_set_time+0x210>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	3b12      	subs	r3, #18
 8007262:	b2da      	uxtb	r2, r3
 8007264:	4b5d      	ldr	r3, [pc, #372]	; (80073dc <system_display_set_time+0x210>)
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	e070      	b.n	800734c <system_display_set_time+0x180>
    }
    else if (button == CLICK_UP_BUTTON || button == HOLD_UP_BUTTON)
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d002      	beq.n	8007276 <system_display_set_time+0xaa>
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	2b08      	cmp	r3, #8
 8007274:	d11d      	bne.n	80072b2 <system_display_set_time+0xe6>
    {
        system_time_change((pos_x - 15) / 18, &rtc, 1);
 8007276:	4b59      	ldr	r3, [pc, #356]	; (80073dc <system_display_set_time+0x210>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	3b0f      	subs	r3, #15
 800727c:	4a58      	ldr	r2, [pc, #352]	; (80073e0 <system_display_set_time+0x214>)
 800727e:	fb82 1203 	smull	r1, r2, r2, r3
 8007282:	1092      	asrs	r2, r2, #2
 8007284:	17db      	asrs	r3, r3, #31
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2201      	movs	r2, #1
 800728c:	4952      	ldr	r1, [pc, #328]	; (80073d8 <system_display_set_time+0x20c>)
 800728e:	4618      	mov	r0, r3
 8007290:	f002 fee6 	bl	800a060 <system_time_change>
        uint32_t epoch_time = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
        ds1307_convert_to_epoch_time(rtc, &epoch_time);
 8007298:	f107 0310 	add.w	r3, r7, #16
 800729c:	494e      	ldr	r1, [pc, #312]	; (80073d8 <system_display_set_time+0x20c>)
 800729e:	461a      	mov	r2, r3
 80072a0:	c903      	ldmia	r1, {r0, r1}
 80072a2:	f7fb fc7b 	bl	8002b9c <ds1307_convert_to_epoch_time>
        ds1307_convert_to_date_time(&rtc, epoch_time);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4619      	mov	r1, r3
 80072aa:	484b      	ldr	r0, [pc, #300]	; (80073d8 <system_display_set_time+0x20c>)
 80072ac:	f7fb fca0 	bl	8002bf0 <ds1307_convert_to_date_time>
    {
 80072b0:	e04c      	b.n	800734c <system_display_set_time+0x180>
    }
    else if (button == CLICK_DOWN_BUTTON || button == HOLD_DOWN_BUTTON)
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d002      	beq.n	80072be <system_display_set_time+0xf2>
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	d11e      	bne.n	80072fc <system_display_set_time+0x130>
    {
        system_time_change((pos_x - 15) / 18, &rtc, -1);
 80072be:	4b47      	ldr	r3, [pc, #284]	; (80073dc <system_display_set_time+0x210>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	3b0f      	subs	r3, #15
 80072c4:	4a46      	ldr	r2, [pc, #280]	; (80073e0 <system_display_set_time+0x214>)
 80072c6:	fb82 1203 	smull	r1, r2, r2, r3
 80072ca:	1092      	asrs	r2, r2, #2
 80072cc:	17db      	asrs	r3, r3, #31
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f04f 32ff 	mov.w	r2, #4294967295
 80072d6:	4940      	ldr	r1, [pc, #256]	; (80073d8 <system_display_set_time+0x20c>)
 80072d8:	4618      	mov	r0, r3
 80072da:	f002 fec1 	bl	800a060 <system_time_change>
        uint32_t epoch_time = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
        ds1307_convert_to_epoch_time(rtc, &epoch_time);
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	493c      	ldr	r1, [pc, #240]	; (80073d8 <system_display_set_time+0x20c>)
 80072e8:	461a      	mov	r2, r3
 80072ea:	c903      	ldmia	r1, {r0, r1}
 80072ec:	f7fb fc56 	bl	8002b9c <ds1307_convert_to_epoch_time>
        ds1307_convert_to_date_time(&rtc, epoch_time);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4619      	mov	r1, r3
 80072f4:	4838      	ldr	r0, [pc, #224]	; (80073d8 <system_display_set_time+0x20c>)
 80072f6:	f7fb fc7b 	bl	8002bf0 <ds1307_convert_to_date_time>
    {
 80072fa:	e027      	b.n	800734c <system_display_set_time+0x180>
    }
    else if (button == CLICK_SELECT_BUTTON)
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	2b05      	cmp	r3, #5
 8007300:	d124      	bne.n	800734c <system_display_set_time+0x180>
    {
        system_time_set_value(rtc.second, rtc.minute, rtc.hour, rtc.day_of_week, rtc.day_of_month, rtc.month, rtc.year);
 8007302:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <system_display_set_time+0x20c>)
 8007304:	7998      	ldrb	r0, [r3, #6]
 8007306:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <system_display_set_time+0x20c>)
 8007308:	795c      	ldrb	r4, [r3, #5]
 800730a:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <system_display_set_time+0x20c>)
 800730c:	791d      	ldrb	r5, [r3, #4]
 800730e:	4b32      	ldr	r3, [pc, #200]	; (80073d8 <system_display_set_time+0x20c>)
 8007310:	78de      	ldrb	r6, [r3, #3]
 8007312:	4b31      	ldr	r3, [pc, #196]	; (80073d8 <system_display_set_time+0x20c>)
 8007314:	789b      	ldrb	r3, [r3, #2]
 8007316:	4a30      	ldr	r2, [pc, #192]	; (80073d8 <system_display_set_time+0x20c>)
 8007318:	7852      	ldrb	r2, [r2, #1]
 800731a:	492f      	ldr	r1, [pc, #188]	; (80073d8 <system_display_set_time+0x20c>)
 800731c:	7809      	ldrb	r1, [r1, #0]
 800731e:	9102      	str	r1, [sp, #8]
 8007320:	9201      	str	r2, [sp, #4]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4633      	mov	r3, r6
 8007326:	462a      	mov	r2, r5
 8007328:	4621      	mov	r1, r4
 800732a:	f002 fd85 	bl	8009e38 <system_time_set_value>
        system_display_screen_save();
 800732e:	f7ff fca9 	bl	8006c84 <system_display_screen_save>
        for (uint32_t i = 0; i < 0xFFFFF; i++)
 8007332:	2300      	movs	r3, #0
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007336:	e003      	b.n	8007340 <system_display_set_time+0x174>
        {
            __NOP();
 8007338:	bf00      	nop
        for (uint32_t i = 0; i < 0xFFFFF; i++)
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	3301      	adds	r3, #1
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	4a22      	ldr	r2, [pc, #136]	; (80073cc <system_display_set_time+0x200>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d9f7      	bls.n	8007338 <system_display_set_time+0x16c>
        }
        return SYSTEM_DISPLAY_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	e03a      	b.n	80073c2 <system_display_set_time+0x1f6>
    }

    drv_ssd1306_fill_theme_color();
 800734c:	f7fb fe66 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_goto_xy(15, 28);
 8007350:	211c      	movs	r1, #28
 8007352:	200f      	movs	r0, #15
 8007354:	f7fc f8a0 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string_time, "%02d:%02d:%02d %02d-%02d-%02d", rtc.hour, rtc.minute, rtc.second, rtc.day_of_month, rtc.month,
 8007358:	4b1f      	ldr	r3, [pc, #124]	; (80073d8 <system_display_set_time+0x20c>)
 800735a:	791b      	ldrb	r3, [r3, #4]
 800735c:	461d      	mov	r5, r3
 800735e:	4b1e      	ldr	r3, [pc, #120]	; (80073d8 <system_display_set_time+0x20c>)
 8007360:	795b      	ldrb	r3, [r3, #5]
 8007362:	461e      	mov	r6, r3
 8007364:	4b1c      	ldr	r3, [pc, #112]	; (80073d8 <system_display_set_time+0x20c>)
 8007366:	799b      	ldrb	r3, [r3, #6]
 8007368:	461a      	mov	r2, r3
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <system_display_set_time+0x20c>)
 800736c:	789b      	ldrb	r3, [r3, #2]
 800736e:	4619      	mov	r1, r3
 8007370:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <system_display_set_time+0x20c>)
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	461c      	mov	r4, r3
            rtc.year);
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <system_display_set_time+0x20c>)
 8007378:	781b      	ldrb	r3, [r3, #0]
    sprintf(string_time, "%02d:%02d:%02d %02d-%02d-%02d", rtc.hour, rtc.minute, rtc.second, rtc.day_of_month, rtc.month,
 800737a:	f107 0018 	add.w	r0, r7, #24
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	9402      	str	r4, [sp, #8]
 8007382:	9101      	str	r1, [sp, #4]
 8007384:	9200      	str	r2, [sp, #0]
 8007386:	4633      	mov	r3, r6
 8007388:	462a      	mov	r2, r5
 800738a:	4916      	ldr	r1, [pc, #88]	; (80073e4 <system_display_set_time+0x218>)
 800738c:	f00a f9dc 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string_time, &font_6x8, 1);
 8007390:	f107 0318 	add.w	r3, r7, #24
 8007394:	2201      	movs	r2, #1
 8007396:	4914      	ldr	r1, [pc, #80]	; (80073e8 <system_display_set_time+0x21c>)
 8007398:	4618      	mov	r0, r3
 800739a:	f7fc f9b9 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_draw_bitmap(pos_x, pos_y, icon_select, 12, 2, 1);
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <system_display_set_time+0x210>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b218      	sxth	r0, r3
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <system_display_set_time+0x220>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	b219      	sxth	r1, r3
 80073aa:	2301      	movs	r3, #1
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	2302      	movs	r3, #2
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	230c      	movs	r3, #12
 80073b4:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <system_display_set_time+0x224>)
 80073b6:	f7fb ffa5 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 80073ba:	480e      	ldr	r0, [pc, #56]	; (80073f4 <system_display_set_time+0x228>)
 80073bc:	f7fb fe40 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3734      	adds	r7, #52	; 0x34
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ca:	bf00      	nop
 80073cc:	000ffffe 	.word	0x000ffffe
 80073d0:	20003e0b 	.word	0x20003e0b
 80073d4:	20003e0c 	.word	0x20003e0c
 80073d8:	20003e10 	.word	0x20003e10
 80073dc:	20001523 	.word	0x20001523
 80073e0:	38e38e39 	.word	0x38e38e39
 80073e4:	08014cb8 	.word	0x08014cb8
 80073e8:	200011e0 	.word	0x200011e0
 80073ec:	20001524 	.word	0x20001524
 80073f0:	08018d94 	.word	0x08018d94
 80073f4:	20003dd8 	.word	0x20003dd8

080073f8 <system_display_snake_game_start>:

system_display_error_t system_display_snake_game_start(uint8_t *button, uint8_t *object_select)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
    if (*button == 3 || *button == 2)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d003      	beq.n	8007412 <system_display_snake_game_start+0x1a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d101      	bne.n	8007416 <system_display_snake_game_start+0x1e>
        drv_ssd1306_fill_theme_color();
 8007412:	f7fb fe03 	bl	800301c <drv_ssd1306_fill_theme_color>

    drv_ssd1306_draw_bitmap(0, 5, icon_snake, 55, 55, DRV_SSD1306_COLOR_WHITE);
 8007416:	2301      	movs	r3, #1
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	2337      	movs	r3, #55	; 0x37
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2337      	movs	r3, #55	; 0x37
 8007420:	4a40      	ldr	r2, [pc, #256]	; (8007524 <system_display_snake_game_start+0x12c>)
 8007422:	2105      	movs	r1, #5
 8007424:	2000      	movs	r0, #0
 8007426:	f7fb ff6d 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_draw_bitmap(50, 3, icon_snake_game_text, 76, 15, DRV_SSD1306_COLOR_WHITE);
 800742a:	2301      	movs	r3, #1
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	230f      	movs	r3, #15
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	234c      	movs	r3, #76	; 0x4c
 8007434:	4a3c      	ldr	r2, [pc, #240]	; (8007528 <system_display_snake_game_start+0x130>)
 8007436:	2103      	movs	r1, #3
 8007438:	2032      	movs	r0, #50	; 0x32
 800743a:	f7fb ff63 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_goto_xy(70, 30);
 800743e:	211e      	movs	r1, #30
 8007440:	2046      	movs	r0, #70	; 0x46
 8007442:	f7fc f829 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "New Game", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007446:	2201      	movs	r2, #1
 8007448:	4938      	ldr	r1, [pc, #224]	; (800752c <system_display_snake_game_start+0x134>)
 800744a:	4839      	ldr	r0, [pc, #228]	; (8007530 <system_display_snake_game_start+0x138>)
 800744c:	f7fc f960 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 40);
 8007450:	2128      	movs	r1, #40	; 0x28
 8007452:	2046      	movs	r0, #70	; 0x46
 8007454:	f7fc f820 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Mode", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007458:	2201      	movs	r2, #1
 800745a:	4934      	ldr	r1, [pc, #208]	; (800752c <system_display_snake_game_start+0x134>)
 800745c:	4835      	ldr	r0, [pc, #212]	; (8007534 <system_display_snake_game_start+0x13c>)
 800745e:	f7fc f957 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 50);
 8007462:	2132      	movs	r1, #50	; 0x32
 8007464:	2046      	movs	r0, #70	; 0x46
 8007466:	f7fc f817 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "About", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800746a:	2201      	movs	r2, #1
 800746c:	492f      	ldr	r1, [pc, #188]	; (800752c <system_display_snake_game_start+0x134>)
 800746e:	4832      	ldr	r0, [pc, #200]	; (8007538 <system_display_snake_game_start+0x140>)
 8007470:	f7fc f94e 	bl	8003710 <drv_ssd1306_puts>

    // Down
    if (*button == 3)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d111      	bne.n	80074a0 <system_display_snake_game_start+0xa8>
    {
        add_space_pixel += 10;
 800747c:	4b2f      	ldr	r3, [pc, #188]	; (800753c <system_display_snake_game_start+0x144>)
 800747e:	f993 3000 	ldrsb.w	r3, [r3]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	330a      	adds	r3, #10
 8007486:	b2db      	uxtb	r3, r3
 8007488:	b25a      	sxtb	r2, r3
 800748a:	4b2c      	ldr	r3, [pc, #176]	; (800753c <system_display_snake_game_start+0x144>)
 800748c:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 20)
 800748e:	4b2b      	ldr	r3, [pc, #172]	; (800753c <system_display_snake_game_start+0x144>)
 8007490:	f993 3000 	ldrsb.w	r3, [r3]
 8007494:	2b13      	cmp	r3, #19
 8007496:	dd18      	ble.n	80074ca <system_display_snake_game_start+0xd2>
            add_space_pixel = 20;
 8007498:	4b28      	ldr	r3, [pc, #160]	; (800753c <system_display_snake_game_start+0x144>)
 800749a:	2214      	movs	r2, #20
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e014      	b.n	80074ca <system_display_snake_game_start+0xd2>
    }
    // Up
    else if (*button == 2)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d110      	bne.n	80074ca <system_display_snake_game_start+0xd2>
    {
        add_space_pixel -= 10;
 80074a8:	4b24      	ldr	r3, [pc, #144]	; (800753c <system_display_snake_game_start+0x144>)
 80074aa:	f993 3000 	ldrsb.w	r3, [r3]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	3b0a      	subs	r3, #10
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	b25a      	sxtb	r2, r3
 80074b6:	4b21      	ldr	r3, [pc, #132]	; (800753c <system_display_snake_game_start+0x144>)
 80074b8:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 80074ba:	4b20      	ldr	r3, [pc, #128]	; (800753c <system_display_snake_game_start+0x144>)
 80074bc:	f993 3000 	ldrsb.w	r3, [r3]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da02      	bge.n	80074ca <system_display_snake_game_start+0xd2>
            add_space_pixel = 0;
 80074c4:	4b1d      	ldr	r3, [pc, #116]	; (800753c <system_display_snake_game_start+0x144>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
    }

    if (*button == 5)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d10f      	bne.n	80074f2 <system_display_snake_game_start+0xfa>
    {
        *object_select  = add_space_pixel / 10;
 80074d2:	4b1a      	ldr	r3, [pc, #104]	; (800753c <system_display_snake_game_start+0x144>)
 80074d4:	f993 3000 	ldrsb.w	r3, [r3]
 80074d8:	4a19      	ldr	r2, [pc, #100]	; (8007540 <system_display_snake_game_start+0x148>)
 80074da:	fb82 1203 	smull	r1, r2, r2, r3
 80074de:	1092      	asrs	r2, r2, #2
 80074e0:	17db      	asrs	r3, r3, #31
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 80074ec:	4b13      	ldr	r3, [pc, #76]	; (800753c <system_display_snake_game_start+0x144>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(60, 30 + add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <system_display_snake_game_start+0x144>)
 80074f4:	f993 3000 	ldrsb.w	r3, [r3]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	331e      	adds	r3, #30
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	b219      	sxth	r1, r3
 8007500:	2301      	movs	r3, #1
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	2307      	movs	r3, #7
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	2307      	movs	r3, #7
 800750a:	4a0e      	ldr	r2, [pc, #56]	; (8007544 <system_display_snake_game_start+0x14c>)
 800750c:	203c      	movs	r0, #60	; 0x3c
 800750e:	f7fb fef9 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8007512:	480d      	ldr	r0, [pc, #52]	; (8007548 <system_display_snake_game_start+0x150>)
 8007514:	f7fb fd94 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20001208 	.word	0x20001208
 8007528:	2000138c 	.word	0x2000138c
 800752c:	200011e8 	.word	0x200011e8
 8007530:	08014cd8 	.word	0x08014cd8
 8007534:	08014ce4 	.word	0x08014ce4
 8007538:	08014cec 	.word	0x08014cec
 800753c:	20003dd5 	.word	0x20003dd5
 8007540:	66666667 	.word	0x66666667
 8007544:	20001424 	.word	0x20001424
 8007548:	20003dd8 	.word	0x20003dd8

0800754c <system_display_snake_game_mode_choose>:

system_display_error_t system_display_snake_game_mode_choose(uint8_t *button, uint8_t *object_select)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af02      	add	r7, sp, #8
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
    if (*button == 3 || *button == 2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d003      	beq.n	8007566 <system_display_snake_game_mode_choose+0x1a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d101      	bne.n	800756a <system_display_snake_game_mode_choose+0x1e>
        drv_ssd1306_fill_theme_color();
 8007566:	f7fb fd59 	bl	800301c <drv_ssd1306_fill_theme_color>

    drv_ssd1306_draw_bitmap(0, 5, icon_snake, 55, 55, DRV_SSD1306_COLOR_WHITE);
 800756a:	2301      	movs	r3, #1
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	2337      	movs	r3, #55	; 0x37
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	2337      	movs	r3, #55	; 0x37
 8007574:	4a3f      	ldr	r2, [pc, #252]	; (8007674 <system_display_snake_game_mode_choose+0x128>)
 8007576:	2105      	movs	r1, #5
 8007578:	2000      	movs	r0, #0
 800757a:	f7fb fec3 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_goto_xy(50, 3);
 800757e:	2103      	movs	r1, #3
 8007580:	2032      	movs	r0, #50	; 0x32
 8007582:	f7fb ff89 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Mode Choose:", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007586:	2201      	movs	r2, #1
 8007588:	493b      	ldr	r1, [pc, #236]	; (8007678 <system_display_snake_game_mode_choose+0x12c>)
 800758a:	483c      	ldr	r0, [pc, #240]	; (800767c <system_display_snake_game_mode_choose+0x130>)
 800758c:	f7fc f8c0 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 30);
 8007590:	211e      	movs	r1, #30
 8007592:	2046      	movs	r0, #70	; 0x46
 8007594:	f7fb ff80 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Classic", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007598:	2201      	movs	r2, #1
 800759a:	4937      	ldr	r1, [pc, #220]	; (8007678 <system_display_snake_game_mode_choose+0x12c>)
 800759c:	4838      	ldr	r0, [pc, #224]	; (8007680 <system_display_snake_game_mode_choose+0x134>)
 800759e:	f7fc f8b7 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 40);
 80075a2:	2128      	movs	r1, #40	; 0x28
 80075a4:	2046      	movs	r0, #70	; 0x46
 80075a6:	f7fb ff77 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Modern", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80075aa:	2201      	movs	r2, #1
 80075ac:	4932      	ldr	r1, [pc, #200]	; (8007678 <system_display_snake_game_mode_choose+0x12c>)
 80075ae:	4835      	ldr	r0, [pc, #212]	; (8007684 <system_display_snake_game_mode_choose+0x138>)
 80075b0:	f7fc f8ae 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 50);
 80075b4:	2132      	movs	r1, #50	; 0x32
 80075b6:	2046      	movs	r0, #70	; 0x46
 80075b8:	f7fb ff6e 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Infinity", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80075bc:	2201      	movs	r2, #1
 80075be:	492e      	ldr	r1, [pc, #184]	; (8007678 <system_display_snake_game_mode_choose+0x12c>)
 80075c0:	4831      	ldr	r0, [pc, #196]	; (8007688 <system_display_snake_game_mode_choose+0x13c>)
 80075c2:	f7fc f8a5 	bl	8003710 <drv_ssd1306_puts>

    // Down
    if (*button == 3)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d111      	bne.n	80075f2 <system_display_snake_game_mode_choose+0xa6>
    {
        add_space_pixel += 10;
 80075ce:	4b2f      	ldr	r3, [pc, #188]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 80075d0:	f993 3000 	ldrsb.w	r3, [r3]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	330a      	adds	r3, #10
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	b25a      	sxtb	r2, r3
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 80075de:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 20)
 80075e0:	4b2a      	ldr	r3, [pc, #168]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 80075e2:	f993 3000 	ldrsb.w	r3, [r3]
 80075e6:	2b13      	cmp	r3, #19
 80075e8:	dd18      	ble.n	800761c <system_display_snake_game_mode_choose+0xd0>
            add_space_pixel = 20;
 80075ea:	4b28      	ldr	r3, [pc, #160]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 80075ec:	2214      	movs	r2, #20
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	e014      	b.n	800761c <system_display_snake_game_mode_choose+0xd0>
    }
    // Up
    else if (*button == 2)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d110      	bne.n	800761c <system_display_snake_game_mode_choose+0xd0>
    {
        add_space_pixel -= 10;
 80075fa:	4b24      	ldr	r3, [pc, #144]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 80075fc:	f993 3000 	ldrsb.w	r3, [r3]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	3b0a      	subs	r3, #10
 8007604:	b2db      	uxtb	r3, r3
 8007606:	b25a      	sxtb	r2, r3
 8007608:	4b20      	ldr	r3, [pc, #128]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 800760a:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 800760c:	4b1f      	ldr	r3, [pc, #124]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 800760e:	f993 3000 	ldrsb.w	r3, [r3]
 8007612:	2b00      	cmp	r3, #0
 8007614:	da02      	bge.n	800761c <system_display_snake_game_mode_choose+0xd0>
            add_space_pixel = 0;
 8007616:	4b1d      	ldr	r3, [pc, #116]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 8007618:	2200      	movs	r2, #0
 800761a:	701a      	strb	r2, [r3, #0]
    }

    if (*button == 5)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b05      	cmp	r3, #5
 8007622:	d10f      	bne.n	8007644 <system_display_snake_game_mode_choose+0xf8>
    {
        *object_select  = add_space_pixel / 10;
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 8007626:	f993 3000 	ldrsb.w	r3, [r3]
 800762a:	4a19      	ldr	r2, [pc, #100]	; (8007690 <system_display_snake_game_mode_choose+0x144>)
 800762c:	fb82 1203 	smull	r1, r2, r2, r3
 8007630:	1092      	asrs	r2, r2, #2
 8007632:	17db      	asrs	r3, r3, #31
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	b25b      	sxtb	r3, r3
 8007638:	b2da      	uxtb	r2, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 800763e:	4b13      	ldr	r3, [pc, #76]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(60, 30 + add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8007644:	4b11      	ldr	r3, [pc, #68]	; (800768c <system_display_snake_game_mode_choose+0x140>)
 8007646:	f993 3000 	ldrsb.w	r3, [r3]
 800764a:	b29b      	uxth	r3, r3
 800764c:	331e      	adds	r3, #30
 800764e:	b29b      	uxth	r3, r3
 8007650:	b219      	sxth	r1, r3
 8007652:	2301      	movs	r3, #1
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	2307      	movs	r3, #7
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	2307      	movs	r3, #7
 800765c:	4a0d      	ldr	r2, [pc, #52]	; (8007694 <system_display_snake_game_mode_choose+0x148>)
 800765e:	203c      	movs	r0, #60	; 0x3c
 8007660:	f7fb fe50 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8007664:	480c      	ldr	r0, [pc, #48]	; (8007698 <system_display_snake_game_mode_choose+0x14c>)
 8007666:	f7fb fceb 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20001208 	.word	0x20001208
 8007678:	200011e8 	.word	0x200011e8
 800767c:	08014cf4 	.word	0x08014cf4
 8007680:	08014d04 	.word	0x08014d04
 8007684:	08014d0c 	.word	0x08014d0c
 8007688:	08014d14 	.word	0x08014d14
 800768c:	20003dd5 	.word	0x20003dd5
 8007690:	66666667 	.word	0x66666667
 8007694:	20001424 	.word	0x20001424
 8007698:	20003dd8 	.word	0x20003dd8

0800769c <system_display_snake_game_level_choose>:

system_display_error_t system_display_snake_game_level_choose(uint8_t *button, uint8_t *object_select)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
    if (*button == 3 || *button == 2)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d003      	beq.n	80076b6 <system_display_snake_game_level_choose+0x1a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d101      	bne.n	80076ba <system_display_snake_game_level_choose+0x1e>
        drv_ssd1306_fill_theme_color();
 80076b6:	f7fb fcb1 	bl	800301c <drv_ssd1306_fill_theme_color>

    drv_ssd1306_draw_bitmap(0, 5, icon_snake, 55, 55, DRV_SSD1306_COLOR_WHITE);
 80076ba:	2301      	movs	r3, #1
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	2337      	movs	r3, #55	; 0x37
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	2337      	movs	r3, #55	; 0x37
 80076c4:	4a3f      	ldr	r2, [pc, #252]	; (80077c4 <system_display_snake_game_level_choose+0x128>)
 80076c6:	2105      	movs	r1, #5
 80076c8:	2000      	movs	r0, #0
 80076ca:	f7fb fe1b 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_goto_xy(50, 3);
 80076ce:	2103      	movs	r1, #3
 80076d0:	2032      	movs	r0, #50	; 0x32
 80076d2:	f7fb fee1 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Level Choose:", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80076d6:	2201      	movs	r2, #1
 80076d8:	493b      	ldr	r1, [pc, #236]	; (80077c8 <system_display_snake_game_level_choose+0x12c>)
 80076da:	483c      	ldr	r0, [pc, #240]	; (80077cc <system_display_snake_game_level_choose+0x130>)
 80076dc:	f7fc f818 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 30);
 80076e0:	211e      	movs	r1, #30
 80076e2:	2046      	movs	r0, #70	; 0x46
 80076e4:	f7fb fed8 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Easy", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80076e8:	2201      	movs	r2, #1
 80076ea:	4937      	ldr	r1, [pc, #220]	; (80077c8 <system_display_snake_game_level_choose+0x12c>)
 80076ec:	4838      	ldr	r0, [pc, #224]	; (80077d0 <system_display_snake_game_level_choose+0x134>)
 80076ee:	f7fc f80f 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 40);
 80076f2:	2128      	movs	r1, #40	; 0x28
 80076f4:	2046      	movs	r0, #70	; 0x46
 80076f6:	f7fb fecf 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Medium", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80076fa:	2201      	movs	r2, #1
 80076fc:	4932      	ldr	r1, [pc, #200]	; (80077c8 <system_display_snake_game_level_choose+0x12c>)
 80076fe:	4835      	ldr	r0, [pc, #212]	; (80077d4 <system_display_snake_game_level_choose+0x138>)
 8007700:	f7fc f806 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(70, 50);
 8007704:	2132      	movs	r1, #50	; 0x32
 8007706:	2046      	movs	r0, #70	; 0x46
 8007708:	f7fb fec6 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Hard", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800770c:	2201      	movs	r2, #1
 800770e:	492e      	ldr	r1, [pc, #184]	; (80077c8 <system_display_snake_game_level_choose+0x12c>)
 8007710:	4831      	ldr	r0, [pc, #196]	; (80077d8 <system_display_snake_game_level_choose+0x13c>)
 8007712:	f7fb fffd 	bl	8003710 <drv_ssd1306_puts>

    // Down
    if (*button == 3)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b03      	cmp	r3, #3
 800771c:	d111      	bne.n	8007742 <system_display_snake_game_level_choose+0xa6>
    {
        add_space_pixel += 10;
 800771e:	4b2f      	ldr	r3, [pc, #188]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 8007720:	f993 3000 	ldrsb.w	r3, [r3]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	330a      	adds	r3, #10
 8007728:	b2db      	uxtb	r3, r3
 800772a:	b25a      	sxtb	r2, r3
 800772c:	4b2b      	ldr	r3, [pc, #172]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 800772e:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 20)
 8007730:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 8007732:	f993 3000 	ldrsb.w	r3, [r3]
 8007736:	2b13      	cmp	r3, #19
 8007738:	dd18      	ble.n	800776c <system_display_snake_game_level_choose+0xd0>
            add_space_pixel = 20;
 800773a:	4b28      	ldr	r3, [pc, #160]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 800773c:	2214      	movs	r2, #20
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e014      	b.n	800776c <system_display_snake_game_level_choose+0xd0>
    }
    // Up
    else if (*button == 2)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d110      	bne.n	800776c <system_display_snake_game_level_choose+0xd0>
    {
        add_space_pixel -= 10;
 800774a:	4b24      	ldr	r3, [pc, #144]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 800774c:	f993 3000 	ldrsb.w	r3, [r3]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	3b0a      	subs	r3, #10
 8007754:	b2db      	uxtb	r3, r3
 8007756:	b25a      	sxtb	r2, r3
 8007758:	4b20      	ldr	r3, [pc, #128]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 800775a:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 800775c:	4b1f      	ldr	r3, [pc, #124]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 800775e:	f993 3000 	ldrsb.w	r3, [r3]
 8007762:	2b00      	cmp	r3, #0
 8007764:	da02      	bge.n	800776c <system_display_snake_game_level_choose+0xd0>
            add_space_pixel = 0;
 8007766:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
    }

    if (*button == 5)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b05      	cmp	r3, #5
 8007772:	d10f      	bne.n	8007794 <system_display_snake_game_level_choose+0xf8>
    {
        *object_select  = add_space_pixel / 10;
 8007774:	4b19      	ldr	r3, [pc, #100]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 8007776:	f993 3000 	ldrsb.w	r3, [r3]
 800777a:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <system_display_snake_game_level_choose+0x144>)
 800777c:	fb82 1203 	smull	r1, r2, r2, r3
 8007780:	1092      	asrs	r2, r2, #2
 8007782:	17db      	asrs	r3, r3, #31
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	b25b      	sxtb	r3, r3
 8007788:	b2da      	uxtb	r2, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 800778e:	4b13      	ldr	r3, [pc, #76]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(60, 30 + add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8007794:	4b11      	ldr	r3, [pc, #68]	; (80077dc <system_display_snake_game_level_choose+0x140>)
 8007796:	f993 3000 	ldrsb.w	r3, [r3]
 800779a:	b29b      	uxth	r3, r3
 800779c:	331e      	adds	r3, #30
 800779e:	b29b      	uxth	r3, r3
 80077a0:	b219      	sxth	r1, r3
 80077a2:	2301      	movs	r3, #1
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	2307      	movs	r3, #7
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	2307      	movs	r3, #7
 80077ac:	4a0d      	ldr	r2, [pc, #52]	; (80077e4 <system_display_snake_game_level_choose+0x148>)
 80077ae:	203c      	movs	r0, #60	; 0x3c
 80077b0:	f7fb fda8 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 80077b4:	480c      	ldr	r0, [pc, #48]	; (80077e8 <system_display_snake_game_level_choose+0x14c>)
 80077b6:	f7fb fc43 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20001208 	.word	0x20001208
 80077c8:	200011e8 	.word	0x200011e8
 80077cc:	08014d20 	.word	0x08014d20
 80077d0:	08014d30 	.word	0x08014d30
 80077d4:	08014d38 	.word	0x08014d38
 80077d8:	08014d40 	.word	0x08014d40
 80077dc:	20003dd5 	.word	0x20003dd5
 80077e0:	66666667 	.word	0x66666667
 80077e4:	20001424 	.word	0x20001424
 80077e8:	20003dd8 	.word	0x20003dd8

080077ec <system_display_snake_game_over>:

system_display_error_t system_display_snake_game_over(uint8_t *button, uint8_t *object_select, snake_game_t *snake_game)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b092      	sub	sp, #72	; 0x48
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
    if (*button == 3 || *button == 2)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d003      	beq.n	8007808 <system_display_snake_game_over+0x1c>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d101      	bne.n	800780c <system_display_snake_game_over+0x20>
        drv_ssd1306_fill_theme_color();
 8007808:	f7fb fc08 	bl	800301c <drv_ssd1306_fill_theme_color>

    drv_ssd1306_goto_xy(30, 0);
 800780c:	2100      	movs	r1, #0
 800780e:	201e      	movs	r0, #30
 8007810:	f7fb fe42 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "GAME OVER", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007814:	2201      	movs	r2, #1
 8007816:	494d      	ldr	r1, [pc, #308]	; (800794c <system_display_snake_game_over+0x160>)
 8007818:	484d      	ldr	r0, [pc, #308]	; (8007950 <system_display_snake_game_over+0x164>)
 800781a:	f7fb ff79 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 20);
 800781e:	2114      	movs	r1, #20
 8007820:	2014      	movs	r0, #20
 8007822:	f7fb fe39 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Replay", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007826:	2201      	movs	r2, #1
 8007828:	4948      	ldr	r1, [pc, #288]	; (800794c <system_display_snake_game_over+0x160>)
 800782a:	484a      	ldr	r0, [pc, #296]	; (8007954 <system_display_snake_game_over+0x168>)
 800782c:	f7fb ff70 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 30);
 8007830:	211e      	movs	r1, #30
 8007832:	2014      	movs	r0, #20
 8007834:	f7fb fe30 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Quit", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007838:	2201      	movs	r2, #1
 800783a:	4944      	ldr	r1, [pc, #272]	; (800794c <system_display_snake_game_over+0x160>)
 800783c:	4846      	ldr	r0, [pc, #280]	; (8007958 <system_display_snake_game_over+0x16c>)
 800783e:	f7fb ff67 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 40);
 8007842:	2128      	movs	r1, #40	; 0x28
 8007844:	2014      	movs	r0, #20
 8007846:	f7fb fe27 	bl	8003498 <drv_ssd1306_goto_xy>
    uint8_t str_score[20];
    sprintf(str_score, "Your Score:%u", snake_game->snake_score);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007850:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	; 0x1b0
 8007854:	461a      	mov	r2, r3
 8007856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800785a:	4940      	ldr	r1, [pc, #256]	; (800795c <system_display_snake_game_over+0x170>)
 800785c:	4618      	mov	r0, r3
 800785e:	f009 ff73 	bl	8011748 <siprintf>
    drv_ssd1306_puts(str_score, &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007866:	2201      	movs	r2, #1
 8007868:	4938      	ldr	r1, [pc, #224]	; (800794c <system_display_snake_game_over+0x160>)
 800786a:	4618      	mov	r0, r3
 800786c:	f7fb ff50 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 50);
 8007870:	2132      	movs	r1, #50	; 0x32
 8007872:	2014      	movs	r0, #20
 8007874:	f7fb fe10 	bl	8003498 <drv_ssd1306_goto_xy>
    uint8_t str_highest_score[23];
    sprintf(str_highest_score, "Record:%u", snake_game->snake_highest_score);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787e:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	; 0x1b2
 8007882:	461a      	mov	r2, r3
 8007884:	f107 0314 	add.w	r3, r7, #20
 8007888:	4935      	ldr	r1, [pc, #212]	; (8007960 <system_display_snake_game_over+0x174>)
 800788a:	4618      	mov	r0, r3
 800788c:	f009 ff5c 	bl	8011748 <siprintf>
    drv_ssd1306_puts(str_highest_score, &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007890:	f107 0314 	add.w	r3, r7, #20
 8007894:	2201      	movs	r2, #1
 8007896:	492d      	ldr	r1, [pc, #180]	; (800794c <system_display_snake_game_over+0x160>)
 8007898:	4618      	mov	r0, r3
 800789a:	f7fb ff39 	bl	8003710 <drv_ssd1306_puts>

    // Down
    if (*button == 3)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d111      	bne.n	80078ca <system_display_snake_game_over+0xde>
    {
        add_space_pixel += 10;
 80078a6:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <system_display_snake_game_over+0x178>)
 80078a8:	f993 3000 	ldrsb.w	r3, [r3]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	330a      	adds	r3, #10
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	b25a      	sxtb	r2, r3
 80078b4:	4b2b      	ldr	r3, [pc, #172]	; (8007964 <system_display_snake_game_over+0x178>)
 80078b6:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 10)
 80078b8:	4b2a      	ldr	r3, [pc, #168]	; (8007964 <system_display_snake_game_over+0x178>)
 80078ba:	f993 3000 	ldrsb.w	r3, [r3]
 80078be:	2b09      	cmp	r3, #9
 80078c0:	dd18      	ble.n	80078f4 <system_display_snake_game_over+0x108>
            add_space_pixel = 10;
 80078c2:	4b28      	ldr	r3, [pc, #160]	; (8007964 <system_display_snake_game_over+0x178>)
 80078c4:	220a      	movs	r2, #10
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e014      	b.n	80078f4 <system_display_snake_game_over+0x108>
    }
    // Up
    else if (*button == 2)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d110      	bne.n	80078f4 <system_display_snake_game_over+0x108>
    {
        add_space_pixel -= 10;
 80078d2:	4b24      	ldr	r3, [pc, #144]	; (8007964 <system_display_snake_game_over+0x178>)
 80078d4:	f993 3000 	ldrsb.w	r3, [r3]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	3b0a      	subs	r3, #10
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	b25a      	sxtb	r2, r3
 80078e0:	4b20      	ldr	r3, [pc, #128]	; (8007964 <system_display_snake_game_over+0x178>)
 80078e2:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 80078e4:	4b1f      	ldr	r3, [pc, #124]	; (8007964 <system_display_snake_game_over+0x178>)
 80078e6:	f993 3000 	ldrsb.w	r3, [r3]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da02      	bge.n	80078f4 <system_display_snake_game_over+0x108>
            add_space_pixel = 0;
 80078ee:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <system_display_snake_game_over+0x178>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	701a      	strb	r2, [r3, #0]
    }

    if (*button == 5)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d10f      	bne.n	800791c <system_display_snake_game_over+0x130>
    {
        *object_select  = add_space_pixel / 10;
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <system_display_snake_game_over+0x178>)
 80078fe:	f993 3000 	ldrsb.w	r3, [r3]
 8007902:	4a19      	ldr	r2, [pc, #100]	; (8007968 <system_display_snake_game_over+0x17c>)
 8007904:	fb82 1203 	smull	r1, r2, r2, r3
 8007908:	1092      	asrs	r2, r2, #2
 800790a:	17db      	asrs	r3, r3, #31
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	b25b      	sxtb	r3, r3
 8007910:	b2da      	uxtb	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 8007916:	4b13      	ldr	r3, [pc, #76]	; (8007964 <system_display_snake_game_over+0x178>)
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(10, 20 + add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 800791c:	4b11      	ldr	r3, [pc, #68]	; (8007964 <system_display_snake_game_over+0x178>)
 800791e:	f993 3000 	ldrsb.w	r3, [r3]
 8007922:	b29b      	uxth	r3, r3
 8007924:	3314      	adds	r3, #20
 8007926:	b29b      	uxth	r3, r3
 8007928:	b219      	sxth	r1, r3
 800792a:	2301      	movs	r3, #1
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	2307      	movs	r3, #7
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	2307      	movs	r3, #7
 8007934:	4a0d      	ldr	r2, [pc, #52]	; (800796c <system_display_snake_game_over+0x180>)
 8007936:	200a      	movs	r0, #10
 8007938:	f7fb fce4 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 800793c:	480c      	ldr	r0, [pc, #48]	; (8007970 <system_display_snake_game_over+0x184>)
 800793e:	f7fb fb7f 	bl	8003040 <drv_ssd1306_update_screen>
}
 8007942:	bf00      	nop
 8007944:	4618      	mov	r0, r3
 8007946:	3740      	adds	r7, #64	; 0x40
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200011e8 	.word	0x200011e8
 8007950:	08014d48 	.word	0x08014d48
 8007954:	08014d54 	.word	0x08014d54
 8007958:	08014d5c 	.word	0x08014d5c
 800795c:	08014d64 	.word	0x08014d64
 8007960:	08014d74 	.word	0x08014d74
 8007964:	20003dd5 	.word	0x20003dd5
 8007968:	66666667 	.word	0x66666667
 800796c:	20001424 	.word	0x20001424
 8007970:	20003dd8 	.word	0x20003dd8

08007974 <system_display_snake_game_win>:

system_display_error_t system_display_snake_game_win(uint8_t *button, uint8_t *object_select, snake_game_t *snake_game)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b092      	sub	sp, #72	; 0x48
 8007978:	af02      	add	r7, sp, #8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
    if (*button == 3 || *button == 2)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d003      	beq.n	8007990 <system_display_snake_game_win+0x1c>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d102      	bne.n	8007996 <system_display_snake_game_win+0x22>
        drv_ssd1306_fill(0);
 8007990:	2000      	movs	r0, #0
 8007992:	f7fb fb2b 	bl	8002fec <drv_ssd1306_fill>

    drv_ssd1306_goto_xy(30, 0);
 8007996:	2100      	movs	r1, #0
 8007998:	201e      	movs	r0, #30
 800799a:	f7fb fd7d 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "GAME WIN", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800799e:	2201      	movs	r2, #1
 80079a0:	494d      	ldr	r1, [pc, #308]	; (8007ad8 <system_display_snake_game_win+0x164>)
 80079a2:	484e      	ldr	r0, [pc, #312]	; (8007adc <system_display_snake_game_win+0x168>)
 80079a4:	f7fb feb4 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 20);
 80079a8:	2114      	movs	r1, #20
 80079aa:	2014      	movs	r0, #20
 80079ac:	f7fb fd74 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Replay", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80079b0:	2201      	movs	r2, #1
 80079b2:	4949      	ldr	r1, [pc, #292]	; (8007ad8 <system_display_snake_game_win+0x164>)
 80079b4:	484a      	ldr	r0, [pc, #296]	; (8007ae0 <system_display_snake_game_win+0x16c>)
 80079b6:	f7fb feab 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 30);
 80079ba:	211e      	movs	r1, #30
 80079bc:	2014      	movs	r0, #20
 80079be:	f7fb fd6b 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Quit", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80079c2:	2201      	movs	r2, #1
 80079c4:	4944      	ldr	r1, [pc, #272]	; (8007ad8 <system_display_snake_game_win+0x164>)
 80079c6:	4847      	ldr	r0, [pc, #284]	; (8007ae4 <system_display_snake_game_win+0x170>)
 80079c8:	f7fb fea2 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 40);
 80079cc:	2128      	movs	r1, #40	; 0x28
 80079ce:	2014      	movs	r0, #20
 80079d0:	f7fb fd62 	bl	8003498 <drv_ssd1306_goto_xy>
    uint8_t str_score[20];
    sprintf(str_score, "Your Score:%u", snake_game->snake_score);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079da:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	; 0x1b0
 80079de:	461a      	mov	r2, r3
 80079e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079e4:	4940      	ldr	r1, [pc, #256]	; (8007ae8 <system_display_snake_game_win+0x174>)
 80079e6:	4618      	mov	r0, r3
 80079e8:	f009 feae 	bl	8011748 <siprintf>
    drv_ssd1306_puts(str_score, &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80079ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079f0:	2201      	movs	r2, #1
 80079f2:	4939      	ldr	r1, [pc, #228]	; (8007ad8 <system_display_snake_game_win+0x164>)
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fb fe8b 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 50);
 80079fa:	2132      	movs	r1, #50	; 0x32
 80079fc:	2014      	movs	r0, #20
 80079fe:	f7fb fd4b 	bl	8003498 <drv_ssd1306_goto_xy>
    uint8_t str_highest_score[23];
    sprintf(str_highest_score, "Record:%u", snake_game->snake_highest_score);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a08:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	; 0x1b2
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f107 0314 	add.w	r3, r7, #20
 8007a12:	4936      	ldr	r1, [pc, #216]	; (8007aec <system_display_snake_game_win+0x178>)
 8007a14:	4618      	mov	r0, r3
 8007a16:	f009 fe97 	bl	8011748 <siprintf>
    drv_ssd1306_puts(str_highest_score, &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007a1a:	f107 0314 	add.w	r3, r7, #20
 8007a1e:	2201      	movs	r2, #1
 8007a20:	492d      	ldr	r1, [pc, #180]	; (8007ad8 <system_display_snake_game_win+0x164>)
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fb fe74 	bl	8003710 <drv_ssd1306_puts>

    // Down
    if (*button == 3)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d111      	bne.n	8007a54 <system_display_snake_game_win+0xe0>
    {
        add_space_pixel += 10;
 8007a30:	4b2f      	ldr	r3, [pc, #188]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a32:	f993 3000 	ldrsb.w	r3, [r3]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	330a      	adds	r3, #10
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	b25a      	sxtb	r2, r3
 8007a3e:	4b2c      	ldr	r3, [pc, #176]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a40:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 10)
 8007a42:	4b2b      	ldr	r3, [pc, #172]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a44:	f993 3000 	ldrsb.w	r3, [r3]
 8007a48:	2b09      	cmp	r3, #9
 8007a4a:	dd18      	ble.n	8007a7e <system_display_snake_game_win+0x10a>
            add_space_pixel = 10;
 8007a4c:	4b28      	ldr	r3, [pc, #160]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a4e:	220a      	movs	r2, #10
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e014      	b.n	8007a7e <system_display_snake_game_win+0x10a>
    }
    // Up
    else if (*button == 2)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d110      	bne.n	8007a7e <system_display_snake_game_win+0x10a>
    {
        add_space_pixel -= 10;
 8007a5c:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a5e:	f993 3000 	ldrsb.w	r3, [r3]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	3b0a      	subs	r3, #10
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	b25a      	sxtb	r2, r3
 8007a6a:	4b21      	ldr	r3, [pc, #132]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a6c:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 8007a6e:	4b20      	ldr	r3, [pc, #128]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a70:	f993 3000 	ldrsb.w	r3, [r3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da02      	bge.n	8007a7e <system_display_snake_game_win+0x10a>
            add_space_pixel = 0;
 8007a78:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
    }

    if (*button == 5)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	d10f      	bne.n	8007aa6 <system_display_snake_game_win+0x132>
    {
        *object_select  = add_space_pixel / 10;
 8007a86:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007a88:	f993 3000 	ldrsb.w	r3, [r3]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	; (8007af4 <system_display_snake_game_win+0x180>)
 8007a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8007a92:	1092      	asrs	r2, r2, #2
 8007a94:	17db      	asrs	r3, r3, #31
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 8007aa0:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(10, 20 + add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8007aa6:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <system_display_snake_game_win+0x17c>)
 8007aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3314      	adds	r3, #20
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b219      	sxth	r1, r3
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	2307      	movs	r3, #7
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	2307      	movs	r3, #7
 8007abe:	4a0e      	ldr	r2, [pc, #56]	; (8007af8 <system_display_snake_game_win+0x184>)
 8007ac0:	200a      	movs	r0, #10
 8007ac2:	f7fb fc1f 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8007ac6:	480d      	ldr	r0, [pc, #52]	; (8007afc <system_display_snake_game_win+0x188>)
 8007ac8:	f7fb faba 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3740      	adds	r7, #64	; 0x40
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200011e8 	.word	0x200011e8
 8007adc:	08014d80 	.word	0x08014d80
 8007ae0:	08014d54 	.word	0x08014d54
 8007ae4:	08014d5c 	.word	0x08014d5c
 8007ae8:	08014d64 	.word	0x08014d64
 8007aec:	08014d74 	.word	0x08014d74
 8007af0:	20003dd5 	.word	0x20003dd5
 8007af4:	66666667 	.word	0x66666667
 8007af8:	20001424 	.word	0x20001424
 8007afc:	20003dd8 	.word	0x20003dd8

08007b00 <system_display_snake_game_info>:

system_display_error_t system_display_snake_game_info()
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
    drv_ssd1306_goto_xy(10, 0);
 8007b04:	2100      	movs	r1, #0
 8007b06:	200a      	movs	r0, #10
 8007b08:	f7fb fcc6 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "SNAKE GAME INFO", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	491b      	ldr	r1, [pc, #108]	; (8007b7c <system_display_snake_game_info+0x7c>)
 8007b10:	481b      	ldr	r0, [pc, #108]	; (8007b80 <system_display_snake_game_info+0x80>)
 8007b12:	f7fb fdfd 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 10);
 8007b16:	210a      	movs	r1, #10
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f7fb fcbd 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "About:Snake eat food", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4918      	ldr	r1, [pc, #96]	; (8007b84 <system_display_snake_game_info+0x84>)
 8007b22:	4819      	ldr	r0, [pc, #100]	; (8007b88 <system_display_snake_game_info+0x88>)
 8007b24:	f7fb fdf4 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 20);
 8007b28:	2114      	movs	r1, #20
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	f7fb fcb4 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Producer: ITR VN", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8007b30:	2201      	movs	r2, #1
 8007b32:	4914      	ldr	r1, [pc, #80]	; (8007b84 <system_display_snake_game_info+0x84>)
 8007b34:	4815      	ldr	r0, [pc, #84]	; (8007b8c <system_display_snake_game_info+0x8c>)
 8007b36:	f7fb fdeb 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 30);
 8007b3a:	211e      	movs	r1, #30
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f7fb fcab 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Author:Quynh,Quy,Hieu", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8007b42:	2201      	movs	r2, #1
 8007b44:	490f      	ldr	r1, [pc, #60]	; (8007b84 <system_display_snake_game_info+0x84>)
 8007b46:	4812      	ldr	r0, [pc, #72]	; (8007b90 <system_display_snake_game_info+0x90>)
 8007b48:	f7fb fde2 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 40);
 8007b4c:	2128      	movs	r1, #40	; 0x28
 8007b4e:	2000      	movs	r0, #0
 8007b50:	f7fb fca2 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Released: 07/09/2023", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8007b54:	2201      	movs	r2, #1
 8007b56:	490b      	ldr	r1, [pc, #44]	; (8007b84 <system_display_snake_game_info+0x84>)
 8007b58:	480e      	ldr	r0, [pc, #56]	; (8007b94 <system_display_snake_game_info+0x94>)
 8007b5a:	f7fb fdd9 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(0, 50);
 8007b5e:	2132      	movs	r1, #50	; 0x32
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7fb fc99 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Version: 1.0.0", &font_6x8, DRV_SSD1306_COLOR_WHITE);
 8007b66:	2201      	movs	r2, #1
 8007b68:	4906      	ldr	r1, [pc, #24]	; (8007b84 <system_display_snake_game_info+0x84>)
 8007b6a:	480b      	ldr	r0, [pc, #44]	; (8007b98 <system_display_snake_game_info+0x98>)
 8007b6c:	f7fb fdd0 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_update_screen(&drv_ssd1306);
 8007b70:	480a      	ldr	r0, [pc, #40]	; (8007b9c <system_display_snake_game_info+0x9c>)
 8007b72:	f7fb fa65 	bl	8003040 <drv_ssd1306_update_screen>
}
 8007b76:	bf00      	nop
 8007b78:	4618      	mov	r0, r3
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	200011e8 	.word	0x200011e8
 8007b80:	08014d8c 	.word	0x08014d8c
 8007b84:	200011e0 	.word	0x200011e0
 8007b88:	08014d9c 	.word	0x08014d9c
 8007b8c:	08014db4 	.word	0x08014db4
 8007b90:	08014dc8 	.word	0x08014dc8
 8007b94:	08014de0 	.word	0x08014de0
 8007b98:	08014df8 	.word	0x08014df8
 8007b9c:	20003dd8 	.word	0x20003dd8

08007ba0 <system_display_snake_game_playground>:

system_display_error_t system_display_snake_game_playground(uint8_t snake_grid_map[32][16])
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
    for (uint8_t x_pos = 0; x_pos < 32; x_pos++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	75fb      	strb	r3, [r7, #23]
 8007bac:	e104      	b.n	8007db8 <system_display_snake_game_playground+0x218>
    {
        for (uint8_t y_pos = 0; y_pos < 16; y_pos++)
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75bb      	strb	r3, [r7, #22]
 8007bb2:	e0fa      	b.n	8007daa <system_display_snake_game_playground+0x20a>
        {
            if (snake_grid_map[x_pos][y_pos] == 2)
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	441a      	add	r2, r3
 8007bbc:	7dbb      	ldrb	r3, [r7, #22]
 8007bbe:	5cd3      	ldrb	r3, [r2, r3]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d121      	bne.n	8007c08 <system_display_snake_game_playground+0x68>
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	757b      	strb	r3, [r7, #21]
 8007bca:	e017      	b.n	8007bfc <system_display_snake_game_playground+0x5c>
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007bcc:	7dbb      	ldrb	r3, [r7, #22]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	753b      	strb	r3, [r7, #20]
 8007bd2:	e00a      	b.n	8007bea <system_display_snake_game_playground+0x4a>
                        drv_ssd1306_draw_pixel(extend_x_pos, extend_y_pos, DRV_SSD1306_COLOR_WHITE);
 8007bd4:	7d7b      	ldrb	r3, [r7, #21]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	7d3a      	ldrb	r2, [r7, #20]
 8007bda:	b291      	uxth	r1, r2
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fb fbf8 	bl	80033d4 <drv_ssd1306_draw_pixel>
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007be4:	7d3b      	ldrb	r3, [r7, #20]
 8007be6:	3301      	adds	r3, #1
 8007be8:	753b      	strb	r3, [r7, #20]
 8007bea:	7d3a      	ldrb	r2, [r7, #20]
 8007bec:	7dbb      	ldrb	r3, [r7, #22]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	dbee      	blt.n	8007bd4 <system_display_snake_game_playground+0x34>
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007bf6:	7d7b      	ldrb	r3, [r7, #21]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	757b      	strb	r3, [r7, #21]
 8007bfc:	7d7a      	ldrb	r2, [r7, #21]
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	3301      	adds	r3, #1
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	429a      	cmp	r2, r3
 8007c06:	dbe1      	blt.n	8007bcc <system_display_snake_game_playground+0x2c>

            if (snake_grid_map[x_pos][y_pos] == 3)
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	441a      	add	r2, r3
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	5cd3      	ldrb	r3, [r2, r3]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d121      	bne.n	8007c5c <system_display_snake_game_playground+0xbc>
            {
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	74fb      	strb	r3, [r7, #19]
 8007c1e:	e017      	b.n	8007c50 <system_display_snake_game_playground+0xb0>
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007c20:	7dbb      	ldrb	r3, [r7, #22]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	74bb      	strb	r3, [r7, #18]
 8007c26:	e00a      	b.n	8007c3e <system_display_snake_game_playground+0x9e>
                        drv_ssd1306_draw_pixel(extend_x_pos, extend_y_pos, DRV_SSD1306_COLOR_WHITE);
 8007c28:	7cfb      	ldrb	r3, [r7, #19]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	7cba      	ldrb	r2, [r7, #18]
 8007c2e:	b291      	uxth	r1, r2
 8007c30:	2201      	movs	r2, #1
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fb fbce 	bl	80033d4 <drv_ssd1306_draw_pixel>
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007c38:	7cbb      	ldrb	r3, [r7, #18]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	74bb      	strb	r3, [r7, #18]
 8007c3e:	7cba      	ldrb	r2, [r7, #18]
 8007c40:	7dbb      	ldrb	r3, [r7, #22]
 8007c42:	3301      	adds	r3, #1
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	429a      	cmp	r2, r3
 8007c48:	dbee      	blt.n	8007c28 <system_display_snake_game_playground+0x88>
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007c4a:	7cfb      	ldrb	r3, [r7, #19]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	74fb      	strb	r3, [r7, #19]
 8007c50:	7cfa      	ldrb	r2, [r7, #19]
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	3301      	adds	r3, #1
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	dbe1      	blt.n	8007c20 <system_display_snake_game_playground+0x80>
            }

            if (snake_grid_map[x_pos][y_pos] == 1)
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	441a      	add	r2, r3
 8007c64:	7dbb      	ldrb	r3, [r7, #22]
 8007c66:	5cd3      	ldrb	r3, [r2, r3]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d171      	bne.n	8007d50 <system_display_snake_game_playground+0x1b0>
            {
                // draw cicle
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	747b      	strb	r3, [r7, #17]
 8007c72:	e067      	b.n	8007d44 <system_display_snake_game_playground+0x1a4>
                {
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007c74:	7dbb      	ldrb	r3, [r7, #22]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	743b      	strb	r3, [r7, #16]
 8007c7a:	e05a      	b.n	8007d32 <system_display_snake_game_playground+0x192>
                    {
                        if (extend_x_pos == x_pos * 4 || extend_y_pos == y_pos * 4 || extend_x_pos == (x_pos * 4 + 4) - 1
 8007c7c:	7c7a      	ldrb	r2, [r7, #17]
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d012      	beq.n	8007cac <system_display_snake_game_playground+0x10c>
 8007c86:	7c3a      	ldrb	r2, [r7, #16]
 8007c88:	7dbb      	ldrb	r3, [r7, #22]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d00d      	beq.n	8007cac <system_display_snake_game_playground+0x10c>
 8007c90:	7c7a      	ldrb	r2, [r7, #17]
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	3301      	adds	r3, #1
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d006      	beq.n	8007cac <system_display_snake_game_playground+0x10c>
                            || extend_y_pos == (y_pos * 4 + 4) - 1)
 8007c9e:	7c3a      	ldrb	r2, [r7, #16]
 8007ca0:	7dbb      	ldrb	r3, [r7, #22]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d107      	bne.n	8007cbc <system_display_snake_game_playground+0x11c>
                            drv_ssd1306_draw_pixel(extend_x_pos, extend_y_pos, DRV_SSD1306_COLOR_WHITE);
 8007cac:	7c7b      	ldrb	r3, [r7, #17]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	7c3a      	ldrb	r2, [r7, #16]
 8007cb2:	b291      	uxth	r1, r2
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fb fb8c 	bl	80033d4 <drv_ssd1306_draw_pixel>
                        if ((extend_x_pos == x_pos * 4 && extend_y_pos == y_pos * 4)
 8007cbc:	7c7a      	ldrb	r2, [r7, #17]
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d104      	bne.n	8007cd0 <system_display_snake_game_playground+0x130>
 8007cc6:	7c3a      	ldrb	r2, [r7, #16]
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d025      	beq.n	8007d1c <system_display_snake_game_playground+0x17c>
                            || (extend_x_pos == (x_pos * 4 + 4) - 1 && extend_y_pos == (y_pos * 4))
 8007cd0:	7c7a      	ldrb	r2, [r7, #17]
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d104      	bne.n	8007ce8 <system_display_snake_game_playground+0x148>
 8007cde:	7c3a      	ldrb	r2, [r7, #16]
 8007ce0:	7dbb      	ldrb	r3, [r7, #22]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d019      	beq.n	8007d1c <system_display_snake_game_playground+0x17c>
                            || (extend_x_pos == x_pos * 4 + 4 - 1 && extend_y_pos == y_pos * 4 + 4 - 1)
 8007ce8:	7c7a      	ldrb	r2, [r7, #17]
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	3301      	adds	r3, #1
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d106      	bne.n	8007d04 <system_display_snake_game_playground+0x164>
 8007cf6:	7c3a      	ldrb	r2, [r7, #16]
 8007cf8:	7dbb      	ldrb	r3, [r7, #22]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d00b      	beq.n	8007d1c <system_display_snake_game_playground+0x17c>
                            || (extend_x_pos == x_pos * 4 && extend_y_pos == y_pos * 4 + 4 - 1))
 8007d04:	7c7a      	ldrb	r2, [r7, #17]
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d10e      	bne.n	8007d2c <system_display_snake_game_playground+0x18c>
 8007d0e:	7c3a      	ldrb	r2, [r7, #16]
 8007d10:	7dbb      	ldrb	r3, [r7, #22]
 8007d12:	3301      	adds	r3, #1
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	3b01      	subs	r3, #1
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d107      	bne.n	8007d2c <system_display_snake_game_playground+0x18c>
                        {
                            drv_ssd1306_draw_pixel(extend_x_pos, extend_y_pos, DRV_SSD1306_COLOR_BLACK);
 8007d1c:	7c7b      	ldrb	r3, [r7, #17]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	7c3a      	ldrb	r2, [r7, #16]
 8007d22:	b291      	uxth	r1, r2
 8007d24:	2200      	movs	r2, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fb fb54 	bl	80033d4 <drv_ssd1306_draw_pixel>
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007d2c:	7c3b      	ldrb	r3, [r7, #16]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	743b      	strb	r3, [r7, #16]
 8007d32:	7c3a      	ldrb	r2, [r7, #16]
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	3301      	adds	r3, #1
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	db9e      	blt.n	8007c7c <system_display_snake_game_playground+0xdc>
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007d3e:	7c7b      	ldrb	r3, [r7, #17]
 8007d40:	3301      	adds	r3, #1
 8007d42:	747b      	strb	r3, [r7, #17]
 8007d44:	7c7a      	ldrb	r2, [r7, #17]
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	db91      	blt.n	8007c74 <system_display_snake_game_playground+0xd4>
                        }
                    }
                }
            }

            if (snake_grid_map[x_pos][y_pos] == 0)
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	441a      	add	r2, r3
 8007d58:	7dbb      	ldrb	r3, [r7, #22]
 8007d5a:	5cd3      	ldrb	r3, [r2, r3]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d121      	bne.n	8007da4 <system_display_snake_game_playground+0x204>
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	73fb      	strb	r3, [r7, #15]
 8007d66:	e017      	b.n	8007d98 <system_display_snake_game_playground+0x1f8>
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007d68:	7dbb      	ldrb	r3, [r7, #22]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	73bb      	strb	r3, [r7, #14]
 8007d6e:	e00a      	b.n	8007d86 <system_display_snake_game_playground+0x1e6>
                        drv_ssd1306_draw_pixel(extend_x_pos, extend_y_pos, DRV_SSD1306_COLOR_BLACK);
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	7bba      	ldrb	r2, [r7, #14]
 8007d76:	b291      	uxth	r1, r2
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fb fb2a 	bl	80033d4 <drv_ssd1306_draw_pixel>
                    for (uint8_t extend_y_pos = y_pos * 4; extend_y_pos < (y_pos * 4 + 4); extend_y_pos++)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	3301      	adds	r3, #1
 8007d84:	73bb      	strb	r3, [r7, #14]
 8007d86:	7bba      	ldrb	r2, [r7, #14]
 8007d88:	7dbb      	ldrb	r3, [r7, #22]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	dbee      	blt.n	8007d70 <system_display_snake_game_playground+0x1d0>
                for (uint8_t extend_x_pos = x_pos * 4; extend_x_pos < (x_pos * 4 + 4); extend_x_pos++)
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	3301      	adds	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	7bfa      	ldrb	r2, [r7, #15]
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	429a      	cmp	r2, r3
 8007da2:	dbe1      	blt.n	8007d68 <system_display_snake_game_playground+0x1c8>
        for (uint8_t y_pos = 0; y_pos < 16; y_pos++)
 8007da4:	7dbb      	ldrb	r3, [r7, #22]
 8007da6:	3301      	adds	r3, #1
 8007da8:	75bb      	strb	r3, [r7, #22]
 8007daa:	7dbb      	ldrb	r3, [r7, #22]
 8007dac:	2b0f      	cmp	r3, #15
 8007dae:	f67f af01 	bls.w	8007bb4 <system_display_snake_game_playground+0x14>
    for (uint8_t x_pos = 0; x_pos < 32; x_pos++)
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	3301      	adds	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	2b1f      	cmp	r3, #31
 8007dbc:	f67f aef7 	bls.w	8007bae <system_display_snake_game_playground+0xe>
        }
    }

    drv_ssd1306_update_screen(&drv_ssd1306);
 8007dc0:	4803      	ldr	r0, [pc, #12]	; (8007dd0 <system_display_snake_game_playground+0x230>)
 8007dc2:	f7fb f93d 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20003dd8 	.word	0x20003dd8

08007dd4 <system_display_time_countdown>:

system_display_error_t system_display_time_countdown(uint8_t button)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	; 0x28
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
    static uint8_t       pos_y      = 18;
    static uint32_t      time_count = 0, time_current = 0, time_last = 0;
    static rtc_t         rtc;
    static button_name_t last_button = 0;

    if (button == HOLD_DOWN_BUTTON || button == HOLD_UP_BUTTON)
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	2b09      	cmp	r3, #9
 8007de2:	d002      	beq.n	8007dea <system_display_time_countdown+0x16>
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d10b      	bne.n	8007e02 <system_display_time_countdown+0x2e>
    {
        for (volatile uint32_t i = 0; i < 0xFFFFF; i++) __NOP();
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	e003      	b.n	8007df8 <system_display_time_countdown+0x24>
 8007df0:	bf00      	nop
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60bb      	str	r3, [r7, #8]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4a9c      	ldr	r2, [pc, #624]	; (800806c <system_display_time_countdown+0x298>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d9f7      	bls.n	8007df0 <system_display_time_countdown+0x1c>
        goto start;
 8007e00:	e00f      	b.n	8007e22 <system_display_time_countdown+0x4e>
    }

    if (button == last_button)
 8007e02:	4b9b      	ldr	r3, [pc, #620]	; (8008070 <system_display_time_countdown+0x29c>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	79fa      	ldrb	r2, [r7, #7]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d105      	bne.n	8007e18 <system_display_time_countdown+0x44>
    {
        if (start_count == 1)
 8007e0c:	4b99      	ldr	r3, [pc, #612]	; (8008074 <system_display_time_countdown+0x2a0>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d005      	beq.n	8007e20 <system_display_time_countdown+0x4c>
            goto start;
        return SYSTEM_DISPLAY_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	e21a      	b.n	800824e <system_display_time_countdown+0x47a>
    }
    last_button = button;
 8007e18:	4a95      	ldr	r2, [pc, #596]	; (8008070 <system_display_time_countdown+0x29c>)
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	7013      	strb	r3, [r2, #0]
 8007e1e:	e000      	b.n	8007e22 <system_display_time_countdown+0x4e>
            goto start;
 8007e20:	bf00      	nop

start:;

    drv_ssd1306_fill_theme_color();
 8007e22:	f7fb f8fb 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_goto_xy(30, 4);
 8007e26:	2104      	movs	r1, #4
 8007e28:	201e      	movs	r0, #30
 8007e2a:	f7fb fb35 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Time Clock", &font_7x10, 1);
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4991      	ldr	r1, [pc, #580]	; (8008078 <system_display_time_countdown+0x2a4>)
 8007e32:	4892      	ldr	r0, [pc, #584]	; (800807c <system_display_time_countdown+0x2a8>)
 8007e34:	f7fb fc6c 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_draw_rectangle(0, 0, 128, 64, 1);
 8007e38:	2301      	movs	r3, #1
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	2280      	movs	r2, #128	; 0x80
 8007e40:	2100      	movs	r1, #0
 8007e42:	2000      	movs	r0, #0
 8007e44:	f7fb ff2e 	bl	8003ca4 <drv_ssd1306_draw_rectangle>
    system_time_get_date_time(&rtc);
 8007e48:	488d      	ldr	r0, [pc, #564]	; (8008080 <system_display_time_countdown+0x2ac>)
 8007e4a:	f001 ffd7 	bl	8009dfc <system_time_get_date_time>
    sprintf(string, (char *) "%02d %s 20%02d", rtc.day_of_month, string_month[rtc.month - 1], rtc.year);
 8007e4e:	4b8c      	ldr	r3, [pc, #560]	; (8008080 <system_display_time_countdown+0x2ac>)
 8007e50:	789b      	ldrb	r3, [r3, #2]
 8007e52:	4619      	mov	r1, r3
 8007e54:	4b8a      	ldr	r3, [pc, #552]	; (8008080 <system_display_time_countdown+0x2ac>)
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	4a8a      	ldr	r2, [pc, #552]	; (8008084 <system_display_time_countdown+0x2b0>)
 8007e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e60:	4a87      	ldr	r2, [pc, #540]	; (8008080 <system_display_time_countdown+0x2ac>)
 8007e62:	7812      	ldrb	r2, [r2, #0]
 8007e64:	f107 000c 	add.w	r0, r7, #12
 8007e68:	9200      	str	r2, [sp, #0]
 8007e6a:	460a      	mov	r2, r1
 8007e6c:	4986      	ldr	r1, [pc, #536]	; (8008088 <system_display_time_countdown+0x2b4>)
 8007e6e:	f009 fc6b 	bl	8011748 <siprintf>
    drv_ssd1306_goto_xy(25, 53);
 8007e72:	2135      	movs	r1, #53	; 0x35
 8007e74:	2019      	movs	r0, #25
 8007e76:	f7fb fb0f 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) string, &font_7x10, 1);
 8007e7a:	f107 030c 	add.w	r3, r7, #12
 8007e7e:	2201      	movs	r2, #1
 8007e80:	497d      	ldr	r1, [pc, #500]	; (8008078 <system_display_time_countdown+0x2a4>)
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fb fc44 	bl	8003710 <drv_ssd1306_puts>

    if (button == HOLD_SELECT_BUTTON)
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b0b      	cmp	r3, #11
 8007e8c:	d110      	bne.n	8007eb0 <system_display_time_countdown+0xdc>
    {
        if (mode_setting == 0)
 8007e8e:	4b7f      	ldr	r3, [pc, #508]	; (800808c <system_display_time_countdown+0x2b8>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <system_display_time_countdown+0xc8>
            init_time_count = 0;
 8007e96:	4b7e      	ldr	r3, [pc, #504]	; (8008090 <system_display_time_countdown+0x2bc>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	701a      	strb	r2, [r3, #0]
        mode_setting = !mode_setting;
 8007e9c:	4b7b      	ldr	r3, [pc, #492]	; (800808c <system_display_time_countdown+0x2b8>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2301      	moveq	r3, #1
 8007ea6:	2300      	movne	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4b77      	ldr	r3, [pc, #476]	; (800808c <system_display_time_countdown+0x2b8>)
 8007eae:	701a      	strb	r2, [r3, #0]
    }
    if (button == CLICK_SELECT_BUTTON)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	d11a      	bne.n	8007eec <system_display_time_countdown+0x118>
    {
        if (flag_timedown)
 8007eb6:	4b77      	ldr	r3, [pc, #476]	; (8008094 <system_display_time_countdown+0x2c0>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <system_display_time_countdown+0xf6>
        {
            drv_buzzer_off();
 8007ebe:	f7fa f8bb 	bl	8002038 <drv_buzzer_off>
            flag_timedown = 0;
 8007ec2:	4b74      	ldr	r3, [pc, #464]	; (8008094 <system_display_time_countdown+0x2c0>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e010      	b.n	8007eec <system_display_time_countdown+0x118>
        }
        else
        {
            if (mode_setting == 0)
 8007eca:	4b70      	ldr	r3, [pc, #448]	; (800808c <system_display_time_countdown+0x2b8>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10c      	bne.n	8007eec <system_display_time_countdown+0x118>
            {
                system_time_get_epoch_time(&time_last);
 8007ed2:	4871      	ldr	r0, [pc, #452]	; (8008098 <system_display_time_countdown+0x2c4>)
 8007ed4:	f001 ff78 	bl	8009dc8 <system_time_get_epoch_time>
                start_count = !start_count;
 8007ed8:	4b66      	ldr	r3, [pc, #408]	; (8008074 <system_display_time_countdown+0x2a0>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bf0c      	ite	eq
 8007ee0:	2301      	moveq	r3, #1
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4b62      	ldr	r3, [pc, #392]	; (8008074 <system_display_time_countdown+0x2a0>)
 8007eea:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (start_count)
 8007eec:	4b61      	ldr	r3, [pc, #388]	; (8008074 <system_display_time_countdown+0x2a0>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8092 	beq.w	800801a <system_display_time_countdown+0x246>
    {
        if (!init_time_count)
 8007ef6:	4b66      	ldr	r3, [pc, #408]	; (8008090 <system_display_time_countdown+0x2bc>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d127      	bne.n	8007f4e <system_display_time_countdown+0x17a>
        {
            time_count = (((time_hours * 60) + time_minutes) * 60 + time_seconds);
 8007efe:	4b67      	ldr	r3, [pc, #412]	; (800809c <system_display_time_countdown+0x2c8>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	4613      	mov	r3, r2
 8007f06:	011b      	lsls	r3, r3, #4
 8007f08:	1a9b      	subs	r3, r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4b64      	ldr	r3, [pc, #400]	; (80080a0 <system_display_time_countdown+0x2cc>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	441a      	add	r2, r3
 8007f14:	4613      	mov	r3, r2
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b61      	ldr	r3, [pc, #388]	; (80080a4 <system_display_time_countdown+0x2d0>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	4413      	add	r3, r2
 8007f24:	461a      	mov	r2, r3
 8007f26:	4b60      	ldr	r3, [pc, #384]	; (80080a8 <system_display_time_countdown+0x2d4>)
 8007f28:	601a      	str	r2, [r3, #0]
            system_time_get_epoch_time(&time_last);
 8007f2a:	485b      	ldr	r0, [pc, #364]	; (8008098 <system_display_time_countdown+0x2c4>)
 8007f2c:	f001 ff4c 	bl	8009dc8 <system_time_get_epoch_time>
            time_seconds_last = time_seconds;
 8007f30:	4b5c      	ldr	r3, [pc, #368]	; (80080a4 <system_display_time_countdown+0x2d0>)
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	4b5d      	ldr	r3, [pc, #372]	; (80080ac <system_display_time_countdown+0x2d8>)
 8007f36:	701a      	strb	r2, [r3, #0]
            time_minutes_last = time_minutes;
 8007f38:	4b59      	ldr	r3, [pc, #356]	; (80080a0 <system_display_time_countdown+0x2cc>)
 8007f3a:	781a      	ldrb	r2, [r3, #0]
 8007f3c:	4b5c      	ldr	r3, [pc, #368]	; (80080b0 <system_display_time_countdown+0x2dc>)
 8007f3e:	701a      	strb	r2, [r3, #0]
            time_hours_last   = time_hours;
 8007f40:	4b56      	ldr	r3, [pc, #344]	; (800809c <system_display_time_countdown+0x2c8>)
 8007f42:	781a      	ldrb	r2, [r3, #0]
 8007f44:	4b5b      	ldr	r3, [pc, #364]	; (80080b4 <system_display_time_countdown+0x2e0>)
 8007f46:	701a      	strb	r2, [r3, #0]
            init_time_count   = 1;
 8007f48:	4b51      	ldr	r3, [pc, #324]	; (8008090 <system_display_time_countdown+0x2bc>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
        }
        system_time_get_epoch_time(&time_current);
 8007f4e:	485a      	ldr	r0, [pc, #360]	; (80080b8 <system_display_time_countdown+0x2e4>)
 8007f50:	f001 ff3a 	bl	8009dc8 <system_time_get_epoch_time>
        time_count -= time_current - time_last;
 8007f54:	4b50      	ldr	r3, [pc, #320]	; (8008098 <system_display_time_countdown+0x2c4>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	4b57      	ldr	r3, [pc, #348]	; (80080b8 <system_display_time_countdown+0x2e4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	1ad2      	subs	r2, r2, r3
 8007f5e:	4b52      	ldr	r3, [pc, #328]	; (80080a8 <system_display_time_countdown+0x2d4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4413      	add	r3, r2
 8007f64:	4a50      	ldr	r2, [pc, #320]	; (80080a8 <system_display_time_countdown+0x2d4>)
 8007f66:	6013      	str	r3, [r2, #0]
        if (time_current == time_last)
 8007f68:	4b53      	ldr	r3, [pc, #332]	; (80080b8 <system_display_time_countdown+0x2e4>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	4b4a      	ldr	r3, [pc, #296]	; (8008098 <system_display_time_countdown+0x2c4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d101      	bne.n	8007f78 <system_display_time_countdown+0x1a4>
            return SYSTEM_DISPLAY_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e16a      	b.n	800824e <system_display_time_countdown+0x47a>
        time_last    = time_current;
 8007f78:	4b4f      	ldr	r3, [pc, #316]	; (80080b8 <system_display_time_countdown+0x2e4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a46      	ldr	r2, [pc, #280]	; (8008098 <system_display_time_countdown+0x2c4>)
 8007f7e:	6013      	str	r3, [r2, #0]
        time_hours   = time_count / 3600;
 8007f80:	4b49      	ldr	r3, [pc, #292]	; (80080a8 <system_display_time_countdown+0x2d4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a4d      	ldr	r2, [pc, #308]	; (80080bc <system_display_time_countdown+0x2e8>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	0adb      	lsrs	r3, r3, #11
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	4b43      	ldr	r3, [pc, #268]	; (800809c <system_display_time_countdown+0x2c8>)
 8007f90:	701a      	strb	r2, [r3, #0]
        time_minutes = (time_count % 3600) / 60;
 8007f92:	4b45      	ldr	r3, [pc, #276]	; (80080a8 <system_display_time_countdown+0x2d4>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	4b49      	ldr	r3, [pc, #292]	; (80080bc <system_display_time_countdown+0x2e8>)
 8007f98:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9c:	0adb      	lsrs	r3, r3, #11
 8007f9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007fa2:	fb01 f303 	mul.w	r3, r1, r3
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	4a45      	ldr	r2, [pc, #276]	; (80080c0 <system_display_time_countdown+0x2ec>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	4b3b      	ldr	r3, [pc, #236]	; (80080a0 <system_display_time_countdown+0x2cc>)
 8007fb4:	701a      	strb	r2, [r3, #0]
        time_seconds = time_count % 60;
 8007fb6:	4b3c      	ldr	r3, [pc, #240]	; (80080a8 <system_display_time_countdown+0x2d4>)
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	4b41      	ldr	r3, [pc, #260]	; (80080c0 <system_display_time_countdown+0x2ec>)
 8007fbc:	fba3 2301 	umull	r2, r3, r3, r1
 8007fc0:	095a      	lsrs	r2, r3, #5
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	1aca      	subs	r2, r1, r3
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <system_display_time_countdown+0x2d0>)
 8007fd0:	701a      	strb	r2, [r3, #0]

        if (time_hours == 0 && time_minutes == 0 && time_seconds == 0)
 8007fd2:	4b32      	ldr	r3, [pc, #200]	; (800809c <system_display_time_countdown+0x2c8>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d11f      	bne.n	800801a <system_display_time_countdown+0x246>
 8007fda:	4b31      	ldr	r3, [pc, #196]	; (80080a0 <system_display_time_countdown+0x2cc>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d11b      	bne.n	800801a <system_display_time_countdown+0x246>
 8007fe2:	4b30      	ldr	r3, [pc, #192]	; (80080a4 <system_display_time_countdown+0x2d0>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d117      	bne.n	800801a <system_display_time_countdown+0x246>
        {
            drv_buzzer_music(NOKIA_TUNE);
 8007fea:	2002      	movs	r0, #2
 8007fec:	f7f9 fffe 	bl	8001fec <drv_buzzer_music>
            time_seconds    = time_seconds_last;
 8007ff0:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <system_display_time_countdown+0x2d8>)
 8007ff2:	781a      	ldrb	r2, [r3, #0]
 8007ff4:	4b2b      	ldr	r3, [pc, #172]	; (80080a4 <system_display_time_countdown+0x2d0>)
 8007ff6:	701a      	strb	r2, [r3, #0]
            time_minutes    = time_minutes_last;
 8007ff8:	4b2d      	ldr	r3, [pc, #180]	; (80080b0 <system_display_time_countdown+0x2dc>)
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	4b28      	ldr	r3, [pc, #160]	; (80080a0 <system_display_time_countdown+0x2cc>)
 8007ffe:	701a      	strb	r2, [r3, #0]
            time_hours      = time_hours_last;
 8008000:	4b2c      	ldr	r3, [pc, #176]	; (80080b4 <system_display_time_countdown+0x2e0>)
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	4b25      	ldr	r3, [pc, #148]	; (800809c <system_display_time_countdown+0x2c8>)
 8008006:	701a      	strb	r2, [r3, #0]
            flag_timedown   = 1;
 8008008:	4b22      	ldr	r3, [pc, #136]	; (8008094 <system_display_time_countdown+0x2c0>)
 800800a:	2201      	movs	r2, #1
 800800c:	701a      	strb	r2, [r3, #0]
            init_time_count = 0;
 800800e:	4b20      	ldr	r3, [pc, #128]	; (8008090 <system_display_time_countdown+0x2bc>)
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
            start_count     = 0;
 8008014:	4b17      	ldr	r3, [pc, #92]	; (8008074 <system_display_time_countdown+0x2a0>)
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Setting time count down */
    if (mode_setting == 1)
 800801a:	4b1c      	ldr	r3, [pc, #112]	; (800808c <system_display_time_countdown+0x2b8>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b01      	cmp	r3, #1
 8008020:	f040 80d8 	bne.w	80081d4 <system_display_time_countdown+0x400>
    {
        if (button == CLICK_LEFT_BUTTON)
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	2b04      	cmp	r3, #4
 8008028:	d10e      	bne.n	8008048 <system_display_time_countdown+0x274>
        {
            if (index_select == 0)
 800802a:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <system_display_time_countdown+0x2f0>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <system_display_time_countdown+0x266>
                index_select = 0;
 8008032:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <system_display_time_countdown+0x2f0>)
 8008034:	2200      	movs	r2, #0
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	e0a5      	b.n	8008186 <system_display_time_countdown+0x3b2>
            else
                index_select--;
 800803a:	4b22      	ldr	r3, [pc, #136]	; (80080c4 <system_display_time_countdown+0x2f0>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	3b01      	subs	r3, #1
 8008040:	b2da      	uxtb	r2, r3
 8008042:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <system_display_time_countdown+0x2f0>)
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e09e      	b.n	8008186 <system_display_time_countdown+0x3b2>
        }
        else if (button == CLICK_RIGHT_BUTTON)
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d13c      	bne.n	80080c8 <system_display_time_countdown+0x2f4>
        {
            if (index_select == 2)
 800804e:	4b1d      	ldr	r3, [pc, #116]	; (80080c4 <system_display_time_countdown+0x2f0>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d103      	bne.n	800805e <system_display_time_countdown+0x28a>
                index_select = 2;
 8008056:	4b1b      	ldr	r3, [pc, #108]	; (80080c4 <system_display_time_countdown+0x2f0>)
 8008058:	2202      	movs	r2, #2
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	e093      	b.n	8008186 <system_display_time_countdown+0x3b2>
            else
                index_select++;
 800805e:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <system_display_time_countdown+0x2f0>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	b2da      	uxtb	r2, r3
 8008066:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <system_display_time_countdown+0x2f0>)
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	e08c      	b.n	8008186 <system_display_time_countdown+0x3b2>
 800806c:	000ffffe 	.word	0x000ffffe
 8008070:	20003e17 	.word	0x20003e17
 8008074:	20003e18 	.word	0x20003e18
 8008078:	200011e8 	.word	0x200011e8
 800807c:	08014e08 	.word	0x08014e08
 8008080:	20003e1c 	.word	0x20003e1c
 8008084:	200014f0 	.word	0x200014f0
 8008088:	08014e14 	.word	0x08014e14
 800808c:	20001525 	.word	0x20001525
 8008090:	20003e23 	.word	0x20003e23
 8008094:	20003e24 	.word	0x20003e24
 8008098:	20003e28 	.word	0x20003e28
 800809c:	20003e2c 	.word	0x20003e2c
 80080a0:	20003e2d 	.word	0x20003e2d
 80080a4:	20003e2e 	.word	0x20003e2e
 80080a8:	20003e30 	.word	0x20003e30
 80080ac:	20003e34 	.word	0x20003e34
 80080b0:	20003e35 	.word	0x20003e35
 80080b4:	20003e36 	.word	0x20003e36
 80080b8:	20003e38 	.word	0x20003e38
 80080bc:	91a2b3c5 	.word	0x91a2b3c5
 80080c0:	88888889 	.word	0x88888889
 80080c4:	20001526 	.word	0x20001526
        }
        else if (button == CLICK_UP_BUTTON || button == HOLD_UP_BUTTON)
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d002      	beq.n	80080d4 <system_display_time_countdown+0x300>
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	d128      	bne.n	8008126 <system_display_time_countdown+0x352>
        {
            if (index_select == 0)
 80080d4:	4b60      	ldr	r3, [pc, #384]	; (8008258 <system_display_time_countdown+0x484>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <system_display_time_countdown+0x31e>
            {
                if (time_hours != 60)
 80080dc:	4b5f      	ldr	r3, [pc, #380]	; (800825c <system_display_time_countdown+0x488>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b3c      	cmp	r3, #60	; 0x3c
 80080e2:	d04f      	beq.n	8008184 <system_display_time_countdown+0x3b0>
                    time_hours++;
 80080e4:	4b5d      	ldr	r3, [pc, #372]	; (800825c <system_display_time_countdown+0x488>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	4b5b      	ldr	r3, [pc, #364]	; (800825c <system_display_time_countdown+0x488>)
 80080ee:	701a      	strb	r2, [r3, #0]
            if (index_select == 0)
 80080f0:	e048      	b.n	8008184 <system_display_time_countdown+0x3b0>
            }
            else if (index_select == 1)
 80080f2:	4b59      	ldr	r3, [pc, #356]	; (8008258 <system_display_time_countdown+0x484>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d10a      	bne.n	8008110 <system_display_time_countdown+0x33c>
            {
                if (time_minutes != 60)
 80080fa:	4b59      	ldr	r3, [pc, #356]	; (8008260 <system_display_time_countdown+0x48c>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b3c      	cmp	r3, #60	; 0x3c
 8008100:	d040      	beq.n	8008184 <system_display_time_countdown+0x3b0>
                    time_minutes++;
 8008102:	4b57      	ldr	r3, [pc, #348]	; (8008260 <system_display_time_countdown+0x48c>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	3301      	adds	r3, #1
 8008108:	b2da      	uxtb	r2, r3
 800810a:	4b55      	ldr	r3, [pc, #340]	; (8008260 <system_display_time_countdown+0x48c>)
 800810c:	701a      	strb	r2, [r3, #0]
            if (index_select == 0)
 800810e:	e039      	b.n	8008184 <system_display_time_countdown+0x3b0>
            }
            else
            {
                if (time_seconds != 60)
 8008110:	4b54      	ldr	r3, [pc, #336]	; (8008264 <system_display_time_countdown+0x490>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b3c      	cmp	r3, #60	; 0x3c
 8008116:	d035      	beq.n	8008184 <system_display_time_countdown+0x3b0>
                    time_seconds++;
 8008118:	4b52      	ldr	r3, [pc, #328]	; (8008264 <system_display_time_countdown+0x490>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	b2da      	uxtb	r2, r3
 8008120:	4b50      	ldr	r3, [pc, #320]	; (8008264 <system_display_time_countdown+0x490>)
 8008122:	701a      	strb	r2, [r3, #0]
            if (index_select == 0)
 8008124:	e02e      	b.n	8008184 <system_display_time_countdown+0x3b0>
            }
        }
        else if (button == CLICK_DOWN_BUTTON || button == HOLD_DOWN_BUTTON)
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d002      	beq.n	8008132 <system_display_time_countdown+0x35e>
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	2b09      	cmp	r3, #9
 8008130:	d129      	bne.n	8008186 <system_display_time_countdown+0x3b2>
        {
            if (index_select == 0)
 8008132:	4b49      	ldr	r3, [pc, #292]	; (8008258 <system_display_time_countdown+0x484>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <system_display_time_countdown+0x37c>
            {
                if (time_hours != 0)
 800813a:	4b48      	ldr	r3, [pc, #288]	; (800825c <system_display_time_countdown+0x488>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d021      	beq.n	8008186 <system_display_time_countdown+0x3b2>
                    time_hours--;
 8008142:	4b46      	ldr	r3, [pc, #280]	; (800825c <system_display_time_countdown+0x488>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	3b01      	subs	r3, #1
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b44      	ldr	r3, [pc, #272]	; (800825c <system_display_time_countdown+0x488>)
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	e01a      	b.n	8008186 <system_display_time_countdown+0x3b2>
            }
            else if (index_select == 1)
 8008150:	4b41      	ldr	r3, [pc, #260]	; (8008258 <system_display_time_countdown+0x484>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10a      	bne.n	800816e <system_display_time_countdown+0x39a>
            {
                if (time_minutes != 0)
 8008158:	4b41      	ldr	r3, [pc, #260]	; (8008260 <system_display_time_countdown+0x48c>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d012      	beq.n	8008186 <system_display_time_countdown+0x3b2>
                    time_minutes--;
 8008160:	4b3f      	ldr	r3, [pc, #252]	; (8008260 <system_display_time_countdown+0x48c>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	3b01      	subs	r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	4b3d      	ldr	r3, [pc, #244]	; (8008260 <system_display_time_countdown+0x48c>)
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	e00b      	b.n	8008186 <system_display_time_countdown+0x3b2>
            }
            else
            {
                if (time_seconds != 0)
 800816e:	4b3d      	ldr	r3, [pc, #244]	; (8008264 <system_display_time_countdown+0x490>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d007      	beq.n	8008186 <system_display_time_countdown+0x3b2>
                    time_seconds--;
 8008176:	4b3b      	ldr	r3, [pc, #236]	; (8008264 <system_display_time_countdown+0x490>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	3b01      	subs	r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	4b39      	ldr	r3, [pc, #228]	; (8008264 <system_display_time_countdown+0x490>)
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	e000      	b.n	8008186 <system_display_time_countdown+0x3b2>
            if (index_select == 0)
 8008184:	bf00      	nop
            }
        }
        if (index_select == 2)
 8008186:	4b34      	ldr	r3, [pc, #208]	; (8008258 <system_display_time_countdown+0x484>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d103      	bne.n	8008196 <system_display_time_countdown+0x3c2>
            padding = 19;
 800818e:	4b36      	ldr	r3, [pc, #216]	; (8008268 <system_display_time_countdown+0x494>)
 8008190:	2213      	movs	r2, #19
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	e002      	b.n	800819c <system_display_time_countdown+0x3c8>
        else
            padding = 0;
 8008196:	4b34      	ldr	r3, [pc, #208]	; (8008268 <system_display_time_countdown+0x494>)
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
        drv_ssd1306_draw_bitmap(13 + 53 * index_select - padding, 45, icon_select_big, 23, 2, 1);
 800819c:	4b2e      	ldr	r3, [pc, #184]	; (8008258 <system_display_time_countdown+0x484>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	0052      	lsls	r2, r2, #1
 80081a6:	441a      	add	r2, r3
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	441a      	add	r2, r3
 80081ac:	0092      	lsls	r2, r2, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <system_display_time_countdown+0x494>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	330d      	adds	r3, #13
 80081be:	b29b      	uxth	r3, r3
 80081c0:	b218      	sxth	r0, r3
 80081c2:	2301      	movs	r3, #1
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	2302      	movs	r3, #2
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	2317      	movs	r3, #23
 80081cc:	4a27      	ldr	r2, [pc, #156]	; (800826c <system_display_time_countdown+0x498>)
 80081ce:	212d      	movs	r1, #45	; 0x2d
 80081d0:	f7fb f898 	bl	8003304 <drv_ssd1306_draw_bitmap>
    }
    drv_ssd1306_goto_xy(pos_x, pos_y);
 80081d4:	4b26      	ldr	r3, [pc, #152]	; (8008270 <system_display_time_countdown+0x49c>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4a26      	ldr	r2, [pc, #152]	; (8008274 <system_display_time_countdown+0x4a0>)
 80081dc:	7812      	ldrb	r2, [r2, #0]
 80081de:	b292      	uxth	r2, r2
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fb f958 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "%02d:%02d", time_hours, time_minutes);
 80081e8:	4b1c      	ldr	r3, [pc, #112]	; (800825c <system_display_time_countdown+0x488>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	4b1c      	ldr	r3, [pc, #112]	; (8008260 <system_display_time_countdown+0x48c>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	f107 000c 	add.w	r0, r7, #12
 80081f6:	4920      	ldr	r1, [pc, #128]	; (8008278 <system_display_time_countdown+0x4a4>)
 80081f8:	f009 faa6 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_15x25, 1);
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	2201      	movs	r2, #1
 8008202:	491e      	ldr	r1, [pc, #120]	; (800827c <system_display_time_countdown+0x4a8>)
 8008204:	4618      	mov	r0, r3
 8008206:	f7fb fa83 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_goto_xy(pos_x + 93, pos_y + 6);
 800820a:	4b19      	ldr	r3, [pc, #100]	; (8008270 <system_display_time_countdown+0x49c>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	335d      	adds	r3, #93	; 0x5d
 8008212:	b29a      	uxth	r2, r3
 8008214:	4b17      	ldr	r3, [pc, #92]	; (8008274 <system_display_time_countdown+0x4a0>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	3306      	adds	r3, #6
 800821c:	b29b      	uxth	r3, r3
 800821e:	4619      	mov	r1, r3
 8008220:	4610      	mov	r0, r2
 8008222:	f7fb f939 	bl	8003498 <drv_ssd1306_goto_xy>
    sprintf(string, "%02d", time_seconds);
 8008226:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <system_display_time_countdown+0x490>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f107 030c 	add.w	r3, r7, #12
 8008230:	4913      	ldr	r1, [pc, #76]	; (8008280 <system_display_time_countdown+0x4ac>)
 8008232:	4618      	mov	r0, r3
 8008234:	f009 fa88 	bl	8011748 <siprintf>
    drv_ssd1306_puts((uint8_t *) string, &font_10x19, 1);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	2201      	movs	r2, #1
 800823e:	4911      	ldr	r1, [pc, #68]	; (8008284 <system_display_time_countdown+0x4b0>)
 8008240:	4618      	mov	r0, r3
 8008242:	f7fb fa65 	bl	8003710 <drv_ssd1306_puts>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8008246:	4810      	ldr	r0, [pc, #64]	; (8008288 <system_display_time_countdown+0x4b4>)
 8008248:	f7fa fefa 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20001526 	.word	0x20001526
 800825c:	20003e2c 	.word	0x20003e2c
 8008260:	20003e2d 	.word	0x20003e2d
 8008264:	20003e2e 	.word	0x20003e2e
 8008268:	20003e3c 	.word	0x20003e3c
 800826c:	08018d98 	.word	0x08018d98
 8008270:	20001527 	.word	0x20001527
 8008274:	20001528 	.word	0x20001528
 8008278:	08014e24 	.word	0x08014e24
 800827c:	200011f8 	.word	0x200011f8
 8008280:	08014e30 	.word	0x08014e30
 8008284:	20001200 	.word	0x20001200
 8008288:	20003dd8 	.word	0x20003dd8

0800828c <system_display_clock>:
    }
    return SYSTEM_DISPLAY_OK;
}

system_display_error_t system_display_clock(uint8_t mode)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
    static uint32_t time_current  = 0;
    static uint32_t time_previous = 0;
    system_time_get_epoch_time(&time_current);
 8008296:	481d      	ldr	r0, [pc, #116]	; (800830c <system_display_clock+0x80>)
 8008298:	f001 fd96 	bl	8009dc8 <system_time_get_epoch_time>
    if (time_current == time_previous)
 800829c:	4b1b      	ldr	r3, [pc, #108]	; (800830c <system_display_clock+0x80>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	4b1b      	ldr	r3, [pc, #108]	; (8008310 <system_display_clock+0x84>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d101      	bne.n	80082ac <system_display_clock+0x20>
        return SYSTEM_DISPLAY_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e02a      	b.n	8008302 <system_display_clock+0x76>
    switch (mode)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <system_display_clock+0x2c>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d00d      	beq.n	80082d2 <system_display_clock+0x46>
 80082b6:	e01f      	b.n	80082f8 <system_display_clock+0x6c>
    {
    case 0:
    {
        rtc_t rtc;
        system_time_get_date_time(&rtc);
 80082b8:	f107 0310 	add.w	r3, r7, #16
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fd9d 	bl	8009dfc <system_time_get_date_time>
        drv_ds1306_clock_style_simple(&drv_ssd1306, rtc);
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80082ca:	4812      	ldr	r0, [pc, #72]	; (8008314 <system_display_clock+0x88>)
 80082cc:	f7fb fec0 	bl	8004050 <drv_ds1306_clock_style_simple>
        break;
 80082d0:	e012      	b.n	80082f8 <system_display_clock+0x6c>
    }
    case 1:
    {
        rtc_t rtc;
        system_time_get_date_time(&rtc);
 80082d2:	f107 0308 	add.w	r3, r7, #8
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 fd90 	bl	8009dfc <system_time_get_date_time>
        int8_t temp = cjmcu75_get_temp(&cjmcu75);
 80082dc:	480e      	ldr	r0, [pc, #56]	; (8008318 <system_display_clock+0x8c>)
 80082de:	f7fa f933 	bl	8002548 <cjmcu75_get_temp>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
        drv_ds1306_clock_style_digital(&drv_ssd1306, rtc, temp);
 80082e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082ea:	f107 0208 	add.w	r2, r7, #8
 80082ee:	ca06      	ldmia	r2, {r1, r2}
 80082f0:	4808      	ldr	r0, [pc, #32]	; (8008314 <system_display_clock+0x88>)
 80082f2:	f7fc f9c3 	bl	800467c <drv_ds1306_clock_style_digital>
        break;
 80082f6:	bf00      	nop
    }
    }
    time_previous = time_current;
 80082f8:	4b04      	ldr	r3, [pc, #16]	; (800830c <system_display_clock+0x80>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a04      	ldr	r2, [pc, #16]	; (8008310 <system_display_clock+0x84>)
 80082fe:	6013      	str	r3, [r2, #0]
    return SYSTEM_DISPLAY_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20003e40 	.word	0x20003e40
 8008310:	20003e44 	.word	0x20003e44
 8008314:	20003dd8 	.word	0x20003dd8
 8008318:	20003dc4 	.word	0x20003dc4

0800831c <system_display_boot_state>:

system_display_error_t system_display_boot_state(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af02      	add	r7, sp, #8
    static uint32_t count = 0;
    count++;
 8008322:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <system_display_boot_state+0x7c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	4a1b      	ldr	r2, [pc, #108]	; (8008398 <system_display_boot_state+0x7c>)
 800832a:	6013      	str	r3, [r2, #0]
    if (count == 70000)
 800832c:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <system_display_boot_state+0x7c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1a      	ldr	r2, [pc, #104]	; (800839c <system_display_boot_state+0x80>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d10f      	bne.n	8008356 <system_display_boot_state+0x3a>
    {
        drv_ssd1306_fill_theme_color();
 8008336:	f7fa fe71 	bl	800301c <drv_ssd1306_fill_theme_color>
        drv_ssd1306_draw_bitmap(0, 0, aVy_kocuoi, 128, 64, 1);
 800833a:	2301      	movs	r3, #1
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	2380      	movs	r3, #128	; 0x80
 8008344:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <system_display_boot_state+0x84>)
 8008346:	2100      	movs	r1, #0
 8008348:	2000      	movs	r0, #0
 800834a:	f7fa ffdb 	bl	8003304 <drv_ssd1306_draw_bitmap>
        drv_ssd1306_update_screen(&drv_ssd1306);
 800834e:	4815      	ldr	r0, [pc, #84]	; (80083a4 <system_display_boot_state+0x88>)
 8008350:	f7fa fe76 	bl	8003040 <drv_ssd1306_update_screen>
 8008354:	e013      	b.n	800837e <system_display_boot_state+0x62>
    }
    else if (count == 140000)
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <system_display_boot_state+0x7c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <system_display_boot_state+0x8c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10e      	bne.n	800837e <system_display_boot_state+0x62>
    {
        drv_ssd1306_fill_theme_color();
 8008360:	f7fa fe5c 	bl	800301c <drv_ssd1306_fill_theme_color>
        drv_ssd1306_draw_bitmap(0, 0, aVy_cuoi, 128, 64, 1);
 8008364:	2301      	movs	r3, #1
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	2380      	movs	r3, #128	; 0x80
 800836e:	4a0f      	ldr	r2, [pc, #60]	; (80083ac <system_display_boot_state+0x90>)
 8008370:	2100      	movs	r1, #0
 8008372:	2000      	movs	r0, #0
 8008374:	f7fa ffc6 	bl	8003304 <drv_ssd1306_draw_bitmap>
        drv_ssd1306_update_screen(&drv_ssd1306);
 8008378:	480a      	ldr	r0, [pc, #40]	; (80083a4 <system_display_boot_state+0x88>)
 800837a:	f7fa fe61 	bl	8003040 <drv_ssd1306_update_screen>
    }
    if (count >= 140000)
 800837e:	4b06      	ldr	r3, [pc, #24]	; (8008398 <system_display_boot_state+0x7c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a0b      	ldr	r2, [pc, #44]	; (80083b0 <system_display_boot_state+0x94>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d902      	bls.n	800838e <system_display_boot_state+0x72>
        count = 0;
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <system_display_boot_state+0x7c>)
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
    return SYSTEM_DISPLAY_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20003e48 	.word	0x20003e48
 800839c:	00011170 	.word	0x00011170
 80083a0:	08024818 	.word	0x08024818
 80083a4:	20003dd8 	.word	0x20003dd8
 80083a8:	000222e0 	.word	0x000222e0
 80083ac:	08024418 	.word	0x08024418
 80083b0:	000222df 	.word	0x000222df

080083b4 <system_display_wait_state>:

system_display_error_t system_display_wait_state(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
    uint8_t mode = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	71fb      	strb	r3, [r7, #7]
    system_data_get_type_clock(&mode);
 80083be:	1dfb      	adds	r3, r7, #7
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe f8a5 	bl	8006510 <system_data_get_type_clock>
    system_display_clock(mode);
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff ff5f 	bl	800828c <system_display_clock>
    return SYSTEM_DISPLAY_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <system_display_menu_state>:

system_display_error_t system_display_menu_state(uint8_t system_id_app)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af02      	add	r7, sp, #8
 80083de:	4603      	mov	r3, r0
 80083e0:	71fb      	strb	r3, [r7, #7]
	/* Turn off all */
	drv_buzzer_off();
 80083e2:	f7f9 fe29 	bl	8002038 <drv_buzzer_off>
	drv_led_off();
 80083e6:	f7fa fc63 	bl	8002cb0 <drv_led_off>

    /* Display menu icons */
    drv_ssd1306_fill_theme_color();
 80083ea:	f7fa fe17 	bl	800301c <drv_ssd1306_fill_theme_color>
    drv_ssd1306_draw_bitmap(3, 7, icon_menu_time, 26, 26, 1);
 80083ee:	2301      	movs	r3, #1
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	231a      	movs	r3, #26
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	231a      	movs	r3, #26
 80083f8:	4a43      	ldr	r2, [pc, #268]	; (8008508 <system_display_menu_state+0x130>)
 80083fa:	2107      	movs	r1, #7
 80083fc:	2003      	movs	r0, #3
 80083fe:	f7fa ff81 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_draw_bitmap(32, 7, icon_menu_snake, 26, 26, 1);
 8008402:	2301      	movs	r3, #1
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	231a      	movs	r3, #26
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	231a      	movs	r3, #26
 800840c:	4a3f      	ldr	r2, [pc, #252]	; (800850c <system_display_menu_state+0x134>)
 800840e:	2107      	movs	r1, #7
 8008410:	2020      	movs	r0, #32
 8008412:	f7fa ff77 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_draw_bitmap(61, 7, icon_menu_theme, 26, 26, 1);
 8008416:	2301      	movs	r3, #1
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	231a      	movs	r3, #26
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	231a      	movs	r3, #26
 8008420:	4a3b      	ldr	r2, [pc, #236]	; (8008510 <system_display_menu_state+0x138>)
 8008422:	2107      	movs	r1, #7
 8008424:	203d      	movs	r0, #61	; 0x3d
 8008426:	f7fa ff6d 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_draw_bitmap(90, 7, icon_menu_setting, 26, 26, 1);
 800842a:	2301      	movs	r3, #1
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	231a      	movs	r3, #26
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	231a      	movs	r3, #26
 8008434:	4a37      	ldr	r2, [pc, #220]	; (8008514 <system_display_menu_state+0x13c>)
 8008436:	2107      	movs	r1, #7
 8008438:	205a      	movs	r0, #90	; 0x5a
 800843a:	f7fa ff63 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_draw_bitmap(3, 35, icon_menu_pc_control, 26, 26, 1);
 800843e:	2301      	movs	r3, #1
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	231a      	movs	r3, #26
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	231a      	movs	r3, #26
 8008448:	4a33      	ldr	r2, [pc, #204]	; (8008518 <system_display_menu_state+0x140>)
 800844a:	2123      	movs	r1, #35	; 0x23
 800844c:	2003      	movs	r0, #3
 800844e:	f7fa ff59 	bl	8003304 <drv_ssd1306_draw_bitmap>

    /* Draw bound */
    if (system_id_app != 5)
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	2b05      	cmp	r3, #5
 8008456:	d03c      	beq.n	80084d2 <system_display_menu_state+0xfa>
    {
        drv_ssd1306_draw_bitmap(2 + (29 * system_id_app - 29), 6, icon_menu_bound, 28, 28, 1);
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	3b01      	subs	r3, #1
 800845c:	b29b      	uxth	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	00d2      	lsls	r2, r2, #3
 8008462:	1ad2      	subs	r2, r2, r3
 8008464:	0092      	lsls	r2, r2, #2
 8008466:	4413      	add	r3, r2
 8008468:	b29b      	uxth	r3, r3
 800846a:	3302      	adds	r3, #2
 800846c:	b29b      	uxth	r3, r3
 800846e:	b218      	sxth	r0, r3
 8008470:	2301      	movs	r3, #1
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	231c      	movs	r3, #28
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	231c      	movs	r3, #28
 800847a:	4a28      	ldr	r2, [pc, #160]	; (800851c <system_display_menu_state+0x144>)
 800847c:	2106      	movs	r1, #6
 800847e:	f7fa ff41 	bl	8003304 <drv_ssd1306_draw_bitmap>

        /* Display app name */
        drv_ssd1306_goto_xy(45, 45);
 8008482:	212d      	movs	r1, #45	; 0x2d
 8008484:	202d      	movs	r0, #45	; 0x2d
 8008486:	f7fb f807 	bl	8003498 <drv_ssd1306_goto_xy>

        if (system_id_app == 1)
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d105      	bne.n	800849c <system_display_menu_state+0xc4>
            drv_ssd1306_puts((uint8_t *) "CLOCK", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008490:	2201      	movs	r2, #1
 8008492:	4923      	ldr	r1, [pc, #140]	; (8008520 <system_display_menu_state+0x148>)
 8008494:	4823      	ldr	r0, [pc, #140]	; (8008524 <system_display_menu_state+0x14c>)
 8008496:	f7fb f93b 	bl	8003710 <drv_ssd1306_puts>
 800849a:	e02d      	b.n	80084f8 <system_display_menu_state+0x120>

        else if (system_id_app == 2)
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d105      	bne.n	80084ae <system_display_menu_state+0xd6>
            drv_ssd1306_puts((uint8_t *) "SNAKE GAME", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80084a2:	2201      	movs	r2, #1
 80084a4:	491e      	ldr	r1, [pc, #120]	; (8008520 <system_display_menu_state+0x148>)
 80084a6:	4820      	ldr	r0, [pc, #128]	; (8008528 <system_display_menu_state+0x150>)
 80084a8:	f7fb f932 	bl	8003710 <drv_ssd1306_puts>
 80084ac:	e024      	b.n	80084f8 <system_display_menu_state+0x120>

        else if (system_id_app == 3)
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d105      	bne.n	80084c0 <system_display_menu_state+0xe8>
            drv_ssd1306_puts((uint8_t *) "THEME", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80084b4:	2201      	movs	r2, #1
 80084b6:	491a      	ldr	r1, [pc, #104]	; (8008520 <system_display_menu_state+0x148>)
 80084b8:	481c      	ldr	r0, [pc, #112]	; (800852c <system_display_menu_state+0x154>)
 80084ba:	f7fb f929 	bl	8003710 <drv_ssd1306_puts>
 80084be:	e01b      	b.n	80084f8 <system_display_menu_state+0x120>

        else if (system_id_app == 4)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d118      	bne.n	80084f8 <system_display_menu_state+0x120>
            drv_ssd1306_puts((uint8_t *) "DIANOSTIC", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80084c6:	2201      	movs	r2, #1
 80084c8:	4915      	ldr	r1, [pc, #84]	; (8008520 <system_display_menu_state+0x148>)
 80084ca:	4819      	ldr	r0, [pc, #100]	; (8008530 <system_display_menu_state+0x158>)
 80084cc:	f7fb f920 	bl	8003710 <drv_ssd1306_puts>
 80084d0:	e012      	b.n	80084f8 <system_display_menu_state+0x120>
    }
    else
    {
        drv_ssd1306_draw_bitmap(2, 34, icon_menu_bound, 28, 28, 1);
 80084d2:	2301      	movs	r3, #1
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	231c      	movs	r3, #28
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	231c      	movs	r3, #28
 80084dc:	4a0f      	ldr	r2, [pc, #60]	; (800851c <system_display_menu_state+0x144>)
 80084de:	2122      	movs	r1, #34	; 0x22
 80084e0:	2002      	movs	r0, #2
 80084e2:	f7fa ff0f 	bl	8003304 <drv_ssd1306_draw_bitmap>

        drv_ssd1306_goto_xy(45, 45);
 80084e6:	212d      	movs	r1, #45	; 0x2d
 80084e8:	202d      	movs	r0, #45	; 0x2d
 80084ea:	f7fa ffd5 	bl	8003498 <drv_ssd1306_goto_xy>
        drv_ssd1306_puts((uint8_t *) "PC CONTROL", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80084ee:	2201      	movs	r2, #1
 80084f0:	490b      	ldr	r1, [pc, #44]	; (8008520 <system_display_menu_state+0x148>)
 80084f2:	4810      	ldr	r0, [pc, #64]	; (8008534 <system_display_menu_state+0x15c>)
 80084f4:	f7fb f90c 	bl	8003710 <drv_ssd1306_puts>
    }

    drv_ssd1306_update_screen(&drv_ssd1306);
 80084f8:	480f      	ldr	r0, [pc, #60]	; (8008538 <system_display_menu_state+0x160>)
 80084fa:	f7fa fda1 	bl	8003040 <drv_ssd1306_update_screen>

    return SYSTEM_DISPLAY_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	08024340 	.word	0x08024340
 800850c:	08023e70 	.word	0x08023e70
 8008510:	08023ed8 	.word	0x08023ed8
 8008514:	08023e08 	.word	0x08023e08
 8008518:	08023da0 	.word	0x08023da0
 800851c:	080243a8 	.word	0x080243a8
 8008520:	200011e8 	.word	0x200011e8
 8008524:	08014e38 	.word	0x08014e38
 8008528:	08014e40 	.word	0x08014e40
 800852c:	08014e4c 	.word	0x08014e4c
 8008530:	08014e54 	.word	0x08014e54
 8008534:	08014e60 	.word	0x08014e60
 8008538:	20003dd8 	.word	0x20003dd8

0800853c <system_display_diagnostic>:

system_display_error_t system_display_diagnostic(uint8_t *button, uint8_t *object_select)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af02      	add	r7, sp, #8
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
    drv_ssd1306_fill_theme_color();
 8008546:	f7fa fd69 	bl	800301c <drv_ssd1306_fill_theme_color>
    /* Display list of all module in smart desk clock */
    drv_ssd1306_goto_xy(20, 0);
 800854a:	2100      	movs	r1, #0
 800854c:	2014      	movs	r0, #20
 800854e:	f7fa ffa3 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Screen", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008552:	2201      	movs	r2, #1
 8008554:	4943      	ldr	r1, [pc, #268]	; (8008664 <system_display_diagnostic+0x128>)
 8008556:	4844      	ldr	r0, [pc, #272]	; (8008668 <system_display_diagnostic+0x12c>)
 8008558:	f7fb f8da 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 10);
 800855c:	210a      	movs	r1, #10
 800855e:	2014      	movs	r0, #20
 8008560:	f7fa ff9a 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Realtime module", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008564:	2201      	movs	r2, #1
 8008566:	493f      	ldr	r1, [pc, #252]	; (8008664 <system_display_diagnostic+0x128>)
 8008568:	4840      	ldr	r0, [pc, #256]	; (800866c <system_display_diagnostic+0x130>)
 800856a:	f7fb f8d1 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 20);
 800856e:	2114      	movs	r1, #20
 8008570:	2014      	movs	r0, #20
 8008572:	f7fa ff91 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Temp sensor", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008576:	2201      	movs	r2, #1
 8008578:	493a      	ldr	r1, [pc, #232]	; (8008664 <system_display_diagnostic+0x128>)
 800857a:	483d      	ldr	r0, [pc, #244]	; (8008670 <system_display_diagnostic+0x134>)
 800857c:	f7fb f8c8 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 30);
 8008580:	211e      	movs	r1, #30
 8008582:	2014      	movs	r0, #20
 8008584:	f7fa ff88 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Button", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008588:	2201      	movs	r2, #1
 800858a:	4936      	ldr	r1, [pc, #216]	; (8008664 <system_display_diagnostic+0x128>)
 800858c:	4839      	ldr	r0, [pc, #228]	; (8008674 <system_display_diagnostic+0x138>)
 800858e:	f7fb f8bf 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 40);
 8008592:	2128      	movs	r1, #40	; 0x28
 8008594:	2014      	movs	r0, #20
 8008596:	f7fa ff7f 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Led RGB", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800859a:	2201      	movs	r2, #1
 800859c:	4931      	ldr	r1, [pc, #196]	; (8008664 <system_display_diagnostic+0x128>)
 800859e:	4836      	ldr	r0, [pc, #216]	; (8008678 <system_display_diagnostic+0x13c>)
 80085a0:	f7fb f8b6 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 50);
 80085a4:	2132      	movs	r1, #50	; 0x32
 80085a6:	2014      	movs	r0, #20
 80085a8:	f7fa ff76 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Buzzer", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80085ac:	2201      	movs	r2, #1
 80085ae:	492d      	ldr	r1, [pc, #180]	; (8008664 <system_display_diagnostic+0x128>)
 80085b0:	4832      	ldr	r0, [pc, #200]	; (800867c <system_display_diagnostic+0x140>)
 80085b2:	f7fb f8ad 	bl	8003710 <drv_ssd1306_puts>

    /* Display pointer to the module user want to check */
    // Down
    if (*button == CLICK_DOWN_BUTTON)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d111      	bne.n	80085e2 <system_display_diagnostic+0xa6>
    {
        add_space_pixel += 10;
 80085be:	4b30      	ldr	r3, [pc, #192]	; (8008680 <system_display_diagnostic+0x144>)
 80085c0:	f993 3000 	ldrsb.w	r3, [r3]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	330a      	adds	r3, #10
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	b25a      	sxtb	r2, r3
 80085cc:	4b2c      	ldr	r3, [pc, #176]	; (8008680 <system_display_diagnostic+0x144>)
 80085ce:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 50)
 80085d0:	4b2b      	ldr	r3, [pc, #172]	; (8008680 <system_display_diagnostic+0x144>)
 80085d2:	f993 3000 	ldrsb.w	r3, [r3]
 80085d6:	2b31      	cmp	r3, #49	; 0x31
 80085d8:	dd18      	ble.n	800860c <system_display_diagnostic+0xd0>
            add_space_pixel = 50;
 80085da:	4b29      	ldr	r3, [pc, #164]	; (8008680 <system_display_diagnostic+0x144>)
 80085dc:	2232      	movs	r2, #50	; 0x32
 80085de:	701a      	strb	r2, [r3, #0]
 80085e0:	e014      	b.n	800860c <system_display_diagnostic+0xd0>
    }
    // Up
    else if (*button == CLICK_UP_BUTTON)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d110      	bne.n	800860c <system_display_diagnostic+0xd0>
    {
        add_space_pixel -= 10;
 80085ea:	4b25      	ldr	r3, [pc, #148]	; (8008680 <system_display_diagnostic+0x144>)
 80085ec:	f993 3000 	ldrsb.w	r3, [r3]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	3b0a      	subs	r3, #10
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	b25a      	sxtb	r2, r3
 80085f8:	4b21      	ldr	r3, [pc, #132]	; (8008680 <system_display_diagnostic+0x144>)
 80085fa:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 80085fc:	4b20      	ldr	r3, [pc, #128]	; (8008680 <system_display_diagnostic+0x144>)
 80085fe:	f993 3000 	ldrsb.w	r3, [r3]
 8008602:	2b00      	cmp	r3, #0
 8008604:	da02      	bge.n	800860c <system_display_diagnostic+0xd0>
            add_space_pixel = 0;
 8008606:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <system_display_diagnostic+0x144>)
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
    }

    if (*button == HOLD_SELECT_BUTTON)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b0b      	cmp	r3, #11
 8008612:	d111      	bne.n	8008638 <system_display_diagnostic+0xfc>
    {
    	drv_ssd1306_fill_theme_color();
 8008614:	f7fa fd02 	bl	800301c <drv_ssd1306_fill_theme_color>
        *object_select  = add_space_pixel / 10;
 8008618:	4b19      	ldr	r3, [pc, #100]	; (8008680 <system_display_diagnostic+0x144>)
 800861a:	f993 3000 	ldrsb.w	r3, [r3]
 800861e:	4a19      	ldr	r2, [pc, #100]	; (8008684 <system_display_diagnostic+0x148>)
 8008620:	fb82 1203 	smull	r1, r2, r2, r3
 8008624:	1092      	asrs	r2, r2, #2
 8008626:	17db      	asrs	r3, r3, #31
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	b25b      	sxtb	r3, r3
 800862c:	b2da      	uxtb	r2, r3
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 8008632:	4b13      	ldr	r3, [pc, #76]	; (8008680 <system_display_diagnostic+0x144>)
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(0, add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8008638:	4b11      	ldr	r3, [pc, #68]	; (8008680 <system_display_diagnostic+0x144>)
 800863a:	f993 3000 	ldrsb.w	r3, [r3]
 800863e:	b219      	sxth	r1, r3
 8008640:	2301      	movs	r3, #1
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	2307      	movs	r3, #7
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	2307      	movs	r3, #7
 800864a:	4a0f      	ldr	r2, [pc, #60]	; (8008688 <system_display_diagnostic+0x14c>)
 800864c:	2000      	movs	r0, #0
 800864e:	f7fa fe59 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8008652:	480e      	ldr	r0, [pc, #56]	; (800868c <system_display_diagnostic+0x150>)
 8008654:	f7fa fcf4 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200011e8 	.word	0x200011e8
 8008668:	08014e6c 	.word	0x08014e6c
 800866c:	08014e74 	.word	0x08014e74
 8008670:	08014e84 	.word	0x08014e84
 8008674:	08014e90 	.word	0x08014e90
 8008678:	08014e98 	.word	0x08014e98
 800867c:	08014ea0 	.word	0x08014ea0
 8008680:	20003dd5 	.word	0x20003dd5
 8008684:	66666667 	.word	0x66666667
 8008688:	20001424 	.word	0x20001424
 800868c:	20003dd8 	.word	0x20003dd8

08008690 <system_display_pc_control_mode>:

system_display_error_t system_display_pc_control_mode(uint8_t *button, uint8_t *object_select)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af02      	add	r7, sp, #8
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
    drv_ssd1306_fill(theme_color ? 1 : 0);
 800869a:	4b41      	ldr	r3, [pc, #260]	; (80087a0 <system_display_pc_control_mode+0x110>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fa fc9f 	bl	8002fec <drv_ssd1306_fill>
    /* Display list of all module in smart desk clock */
    drv_ssd1306_goto_xy(20, 0);
 80086ae:	2100      	movs	r1, #0
 80086b0:	2014      	movs	r0, #20
 80086b2:	f7fa fef1 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Set time", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80086b6:	2201      	movs	r2, #1
 80086b8:	493a      	ldr	r1, [pc, #232]	; (80087a4 <system_display_pc_control_mode+0x114>)
 80086ba:	483b      	ldr	r0, [pc, #236]	; (80087a8 <system_display_pc_control_mode+0x118>)
 80086bc:	f7fb f828 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 10);
 80086c0:	210a      	movs	r1, #10
 80086c2:	2014      	movs	r0, #20
 80086c4:	f7fa fee8 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Set reminder", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80086c8:	2201      	movs	r2, #1
 80086ca:	4936      	ldr	r1, [pc, #216]	; (80087a4 <system_display_pc_control_mode+0x114>)
 80086cc:	4837      	ldr	r0, [pc, #220]	; (80087ac <system_display_pc_control_mode+0x11c>)
 80086ce:	f7fb f81f 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 20);
 80086d2:	2114      	movs	r1, #20
 80086d4:	2014      	movs	r0, #20
 80086d6:	f7fa fedf 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Set theme", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80086da:	2201      	movs	r2, #1
 80086dc:	4931      	ldr	r1, [pc, #196]	; (80087a4 <system_display_pc_control_mode+0x114>)
 80086de:	4834      	ldr	r0, [pc, #208]	; (80087b0 <system_display_pc_control_mode+0x120>)
 80086e0:	f7fb f816 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 30);
 80086e4:	211e      	movs	r1, #30
 80086e6:	2014      	movs	r0, #20
 80086e8:	f7fa fed6 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "coming soon...", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80086ec:	2201      	movs	r2, #1
 80086ee:	492d      	ldr	r1, [pc, #180]	; (80087a4 <system_display_pc_control_mode+0x114>)
 80086f0:	4830      	ldr	r0, [pc, #192]	; (80087b4 <system_display_pc_control_mode+0x124>)
 80086f2:	f7fb f80d 	bl	8003710 <drv_ssd1306_puts>
    /* Display pointer to the module user want to check */
    // Down
    if (*button == CLICK_DOWN_BUTTON)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d111      	bne.n	8008722 <system_display_pc_control_mode+0x92>
    {
        add_space_pixel += 10;
 80086fe:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <system_display_pc_control_mode+0x128>)
 8008700:	f993 3000 	ldrsb.w	r3, [r3]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	330a      	adds	r3, #10
 8008708:	b2db      	uxtb	r3, r3
 800870a:	b25a      	sxtb	r2, r3
 800870c:	4b2a      	ldr	r3, [pc, #168]	; (80087b8 <system_display_pc_control_mode+0x128>)
 800870e:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 20)
 8008710:	4b29      	ldr	r3, [pc, #164]	; (80087b8 <system_display_pc_control_mode+0x128>)
 8008712:	f993 3000 	ldrsb.w	r3, [r3]
 8008716:	2b13      	cmp	r3, #19
 8008718:	dd18      	ble.n	800874c <system_display_pc_control_mode+0xbc>
            add_space_pixel = 20;
 800871a:	4b27      	ldr	r3, [pc, #156]	; (80087b8 <system_display_pc_control_mode+0x128>)
 800871c:	2214      	movs	r2, #20
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	e014      	b.n	800874c <system_display_pc_control_mode+0xbc>
    }
    // Up
    else if (*button == CLICK_UP_BUTTON)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d110      	bne.n	800874c <system_display_pc_control_mode+0xbc>
    {
        add_space_pixel -= 10;
 800872a:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <system_display_pc_control_mode+0x128>)
 800872c:	f993 3000 	ldrsb.w	r3, [r3]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	3b0a      	subs	r3, #10
 8008734:	b2db      	uxtb	r3, r3
 8008736:	b25a      	sxtb	r2, r3
 8008738:	4b1f      	ldr	r3, [pc, #124]	; (80087b8 <system_display_pc_control_mode+0x128>)
 800873a:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 800873c:	4b1e      	ldr	r3, [pc, #120]	; (80087b8 <system_display_pc_control_mode+0x128>)
 800873e:	f993 3000 	ldrsb.w	r3, [r3]
 8008742:	2b00      	cmp	r3, #0
 8008744:	da02      	bge.n	800874c <system_display_pc_control_mode+0xbc>
            add_space_pixel = 0;
 8008746:	4b1c      	ldr	r3, [pc, #112]	; (80087b8 <system_display_pc_control_mode+0x128>)
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
    }

    if (*button == HOLD_SELECT_BUTTON)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b0b      	cmp	r3, #11
 8008752:	d10f      	bne.n	8008774 <system_display_pc_control_mode+0xe4>
    {
        *object_select  = add_space_pixel / 10;
 8008754:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <system_display_pc_control_mode+0x128>)
 8008756:	f993 3000 	ldrsb.w	r3, [r3]
 800875a:	4a18      	ldr	r2, [pc, #96]	; (80087bc <system_display_pc_control_mode+0x12c>)
 800875c:	fb82 1203 	smull	r1, r2, r2, r3
 8008760:	1092      	asrs	r2, r2, #2
 8008762:	17db      	asrs	r3, r3, #31
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	b25b      	sxtb	r3, r3
 8008768:	b2da      	uxtb	r2, r3
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 800876e:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <system_display_pc_control_mode+0x128>)
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(0, add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8008774:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <system_display_pc_control_mode+0x128>)
 8008776:	f993 3000 	ldrsb.w	r3, [r3]
 800877a:	b219      	sxth	r1, r3
 800877c:	2301      	movs	r3, #1
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	2307      	movs	r3, #7
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	2307      	movs	r3, #7
 8008786:	4a0e      	ldr	r2, [pc, #56]	; (80087c0 <system_display_pc_control_mode+0x130>)
 8008788:	2000      	movs	r0, #0
 800878a:	f7fa fdbb 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 800878e:	480d      	ldr	r0, [pc, #52]	; (80087c4 <system_display_pc_control_mode+0x134>)
 8008790:	f7fa fc56 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20003dd4 	.word	0x20003dd4
 80087a4:	200011e8 	.word	0x200011e8
 80087a8:	08014ea8 	.word	0x08014ea8
 80087ac:	08014eb4 	.word	0x08014eb4
 80087b0:	08014ec4 	.word	0x08014ec4
 80087b4:	08014ed0 	.word	0x08014ed0
 80087b8:	20003dd5 	.word	0x20003dd5
 80087bc:	66666667 	.word	0x66666667
 80087c0:	20001424 	.word	0x20001424
 80087c4:	20003dd8 	.word	0x20003dd8

080087c8 <system_display_category_clock>:

system_display_error_t system_display_category_clock(uint8_t *button, uint8_t *object_select)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
    drv_ssd1306_fill_theme_color();
 80087d2:	f7fa fc23 	bl	800301c <drv_ssd1306_fill_theme_color>
    /* Display list of all module in smart desk clock */
    drv_ssd1306_goto_xy(20, 0);
 80087d6:	2100      	movs	r1, #0
 80087d8:	2014      	movs	r0, #20
 80087da:	f7fa fe5d 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Set time clock", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80087de:	2201      	movs	r2, #1
 80087e0:	4942      	ldr	r1, [pc, #264]	; (80088ec <system_display_category_clock+0x124>)
 80087e2:	4843      	ldr	r0, [pc, #268]	; (80088f0 <system_display_category_clock+0x128>)
 80087e4:	f7fa ff94 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 10);
 80087e8:	210a      	movs	r1, #10
 80087ea:	2014      	movs	r0, #20
 80087ec:	f7fa fe54 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Set reminder", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 80087f0:	2201      	movs	r2, #1
 80087f2:	493e      	ldr	r1, [pc, #248]	; (80088ec <system_display_category_clock+0x124>)
 80087f4:	483f      	ldr	r0, [pc, #252]	; (80088f4 <system_display_category_clock+0x12c>)
 80087f6:	f7fa ff8b 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 20);
 80087fa:	2114      	movs	r1, #20
 80087fc:	2014      	movs	r0, #20
 80087fe:	f7fa fe4b 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Time countdown", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008802:	2201      	movs	r2, #1
 8008804:	4939      	ldr	r1, [pc, #228]	; (80088ec <system_display_category_clock+0x124>)
 8008806:	483c      	ldr	r0, [pc, #240]	; (80088f8 <system_display_category_clock+0x130>)
 8008808:	f7fa ff82 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 30);
 800880c:	211e      	movs	r1, #30
 800880e:	2014      	movs	r0, #20
 8008810:	f7fa fe42 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Coming soon", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008814:	2201      	movs	r2, #1
 8008816:	4935      	ldr	r1, [pc, #212]	; (80088ec <system_display_category_clock+0x124>)
 8008818:	4838      	ldr	r0, [pc, #224]	; (80088fc <system_display_category_clock+0x134>)
 800881a:	f7fa ff79 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 40);
 800881e:	2128      	movs	r1, #40	; 0x28
 8008820:	2014      	movs	r0, #20
 8008822:	f7fa fe39 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Coming soon", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008826:	2201      	movs	r2, #1
 8008828:	4930      	ldr	r1, [pc, #192]	; (80088ec <system_display_category_clock+0x124>)
 800882a:	4834      	ldr	r0, [pc, #208]	; (80088fc <system_display_category_clock+0x134>)
 800882c:	f7fa ff70 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 50);
 8008830:	2132      	movs	r1, #50	; 0x32
 8008832:	2014      	movs	r0, #20
 8008834:	f7fa fe30 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Coming soon", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008838:	2201      	movs	r2, #1
 800883a:	492c      	ldr	r1, [pc, #176]	; (80088ec <system_display_category_clock+0x124>)
 800883c:	482f      	ldr	r0, [pc, #188]	; (80088fc <system_display_category_clock+0x134>)
 800883e:	f7fa ff67 	bl	8003710 <drv_ssd1306_puts>

    /* Display pointer to the module user want to check */
    // Down
    if (*button == CLICK_DOWN_BUTTON)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b03      	cmp	r3, #3
 8008848:	d111      	bne.n	800886e <system_display_category_clock+0xa6>
    {
        add_space_pixel += 10;
 800884a:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <system_display_category_clock+0x138>)
 800884c:	f993 3000 	ldrsb.w	r3, [r3]
 8008850:	b2db      	uxtb	r3, r3
 8008852:	330a      	adds	r3, #10
 8008854:	b2db      	uxtb	r3, r3
 8008856:	b25a      	sxtb	r2, r3
 8008858:	4b29      	ldr	r3, [pc, #164]	; (8008900 <system_display_category_clock+0x138>)
 800885a:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 20)
 800885c:	4b28      	ldr	r3, [pc, #160]	; (8008900 <system_display_category_clock+0x138>)
 800885e:	f993 3000 	ldrsb.w	r3, [r3]
 8008862:	2b13      	cmp	r3, #19
 8008864:	dd18      	ble.n	8008898 <system_display_category_clock+0xd0>
            add_space_pixel = 20;
 8008866:	4b26      	ldr	r3, [pc, #152]	; (8008900 <system_display_category_clock+0x138>)
 8008868:	2214      	movs	r2, #20
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	e014      	b.n	8008898 <system_display_category_clock+0xd0>
    }
    // Up
    else if (*button == CLICK_UP_BUTTON)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d110      	bne.n	8008898 <system_display_category_clock+0xd0>
    {
        add_space_pixel -= 10;
 8008876:	4b22      	ldr	r3, [pc, #136]	; (8008900 <system_display_category_clock+0x138>)
 8008878:	f993 3000 	ldrsb.w	r3, [r3]
 800887c:	b2db      	uxtb	r3, r3
 800887e:	3b0a      	subs	r3, #10
 8008880:	b2db      	uxtb	r3, r3
 8008882:	b25a      	sxtb	r2, r3
 8008884:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <system_display_category_clock+0x138>)
 8008886:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <system_display_category_clock+0x138>)
 800888a:	f993 3000 	ldrsb.w	r3, [r3]
 800888e:	2b00      	cmp	r3, #0
 8008890:	da02      	bge.n	8008898 <system_display_category_clock+0xd0>
            add_space_pixel = 0;
 8008892:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <system_display_category_clock+0x138>)
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
    }

    if (*button == HOLD_SELECT_BUTTON)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b0b      	cmp	r3, #11
 800889e:	d10f      	bne.n	80088c0 <system_display_category_clock+0xf8>
    {
        *object_select  = add_space_pixel / 10;
 80088a0:	4b17      	ldr	r3, [pc, #92]	; (8008900 <system_display_category_clock+0x138>)
 80088a2:	f993 3000 	ldrsb.w	r3, [r3]
 80088a6:	4a17      	ldr	r2, [pc, #92]	; (8008904 <system_display_category_clock+0x13c>)
 80088a8:	fb82 1203 	smull	r1, r2, r2, r3
 80088ac:	1092      	asrs	r2, r2, #2
 80088ae:	17db      	asrs	r3, r3, #31
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 80088ba:	4b11      	ldr	r3, [pc, #68]	; (8008900 <system_display_category_clock+0x138>)
 80088bc:	2200      	movs	r2, #0
 80088be:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(0, add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <system_display_category_clock+0x138>)
 80088c2:	f993 3000 	ldrsb.w	r3, [r3]
 80088c6:	b219      	sxth	r1, r3
 80088c8:	2301      	movs	r3, #1
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	2307      	movs	r3, #7
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	2307      	movs	r3, #7
 80088d2:	4a0d      	ldr	r2, [pc, #52]	; (8008908 <system_display_category_clock+0x140>)
 80088d4:	2000      	movs	r0, #0
 80088d6:	f7fa fd15 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 80088da:	480c      	ldr	r0, [pc, #48]	; (800890c <system_display_category_clock+0x144>)
 80088dc:	f7fa fbb0 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200011e8 	.word	0x200011e8
 80088f0:	08014ee0 	.word	0x08014ee0
 80088f4:	08014eb4 	.word	0x08014eb4
 80088f8:	08014ef0 	.word	0x08014ef0
 80088fc:	08014f00 	.word	0x08014f00
 8008900:	20003dd5 	.word	0x20003dd5
 8008904:	66666667 	.word	0x66666667
 8008908:	20001424 	.word	0x20001424
 800890c:	20003dd8 	.word	0x20003dd8

08008910 <system_display_theme_list>:

system_display_error_t system_display_theme_list(uint8_t *button, uint8_t *object_select)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af02      	add	r7, sp, #8
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
    drv_ssd1306_fill_theme_color();
 800891a:	f7fa fb7f 	bl	800301c <drv_ssd1306_fill_theme_color>
    /* Display list of all module in smart desk clock */
    drv_ssd1306_goto_xy(20, 0);
 800891e:	2100      	movs	r1, #0
 8008920:	2014      	movs	r0, #20
 8008922:	f7fa fdb9 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Set type clock", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008926:	2201      	movs	r2, #1
 8008928:	4943      	ldr	r1, [pc, #268]	; (8008a38 <system_display_theme_list+0x128>)
 800892a:	4844      	ldr	r0, [pc, #272]	; (8008a3c <system_display_theme_list+0x12c>)
 800892c:	f7fa fef0 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 10);
 8008930:	210a      	movs	r1, #10
 8008932:	2014      	movs	r0, #20
 8008934:	f7fa fdb0 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Set mode color", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008938:	2201      	movs	r2, #1
 800893a:	493f      	ldr	r1, [pc, #252]	; (8008a38 <system_display_theme_list+0x128>)
 800893c:	4840      	ldr	r0, [pc, #256]	; (8008a40 <system_display_theme_list+0x130>)
 800893e:	f7fa fee7 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 20);
 8008942:	2114      	movs	r1, #20
 8008944:	2014      	movs	r0, #20
 8008946:	f7fa fda7 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Coming soon", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800894a:	2201      	movs	r2, #1
 800894c:	493a      	ldr	r1, [pc, #232]	; (8008a38 <system_display_theme_list+0x128>)
 800894e:	483d      	ldr	r0, [pc, #244]	; (8008a44 <system_display_theme_list+0x134>)
 8008950:	f7fa fede 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 30);
 8008954:	211e      	movs	r1, #30
 8008956:	2014      	movs	r0, #20
 8008958:	f7fa fd9e 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Coming soon", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800895c:	2201      	movs	r2, #1
 800895e:	4936      	ldr	r1, [pc, #216]	; (8008a38 <system_display_theme_list+0x128>)
 8008960:	4838      	ldr	r0, [pc, #224]	; (8008a44 <system_display_theme_list+0x134>)
 8008962:	f7fa fed5 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 40);
 8008966:	2128      	movs	r1, #40	; 0x28
 8008968:	2014      	movs	r0, #20
 800896a:	f7fa fd95 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Coming soon", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 800896e:	2201      	movs	r2, #1
 8008970:	4931      	ldr	r1, [pc, #196]	; (8008a38 <system_display_theme_list+0x128>)
 8008972:	4834      	ldr	r0, [pc, #208]	; (8008a44 <system_display_theme_list+0x134>)
 8008974:	f7fa fecc 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 50);
 8008978:	2132      	movs	r1, #50	; 0x32
 800897a:	2014      	movs	r0, #20
 800897c:	f7fa fd8c 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Coming soon", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008980:	2201      	movs	r2, #1
 8008982:	492d      	ldr	r1, [pc, #180]	; (8008a38 <system_display_theme_list+0x128>)
 8008984:	482f      	ldr	r0, [pc, #188]	; (8008a44 <system_display_theme_list+0x134>)
 8008986:	f7fa fec3 	bl	8003710 <drv_ssd1306_puts>

    /* Display pointer to the module user want to check */
    // Down
    if (*button == CLICK_DOWN_BUTTON)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	2b03      	cmp	r3, #3
 8008990:	d111      	bne.n	80089b6 <system_display_theme_list+0xa6>
    {
        add_space_pixel += 10;
 8008992:	4b2d      	ldr	r3, [pc, #180]	; (8008a48 <system_display_theme_list+0x138>)
 8008994:	f993 3000 	ldrsb.w	r3, [r3]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	330a      	adds	r3, #10
 800899c:	b2db      	uxtb	r3, r3
 800899e:	b25a      	sxtb	r2, r3
 80089a0:	4b29      	ldr	r3, [pc, #164]	; (8008a48 <system_display_theme_list+0x138>)
 80089a2:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel >= 10)
 80089a4:	4b28      	ldr	r3, [pc, #160]	; (8008a48 <system_display_theme_list+0x138>)
 80089a6:	f993 3000 	ldrsb.w	r3, [r3]
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	dd18      	ble.n	80089e0 <system_display_theme_list+0xd0>
            add_space_pixel = 10;
 80089ae:	4b26      	ldr	r3, [pc, #152]	; (8008a48 <system_display_theme_list+0x138>)
 80089b0:	220a      	movs	r2, #10
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	e014      	b.n	80089e0 <system_display_theme_list+0xd0>
    }
    // Up
    else if (*button == CLICK_UP_BUTTON)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d110      	bne.n	80089e0 <system_display_theme_list+0xd0>
    {
        add_space_pixel -= 10;
 80089be:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <system_display_theme_list+0x138>)
 80089c0:	f993 3000 	ldrsb.w	r3, [r3]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	3b0a      	subs	r3, #10
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	b25a      	sxtb	r2, r3
 80089cc:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <system_display_theme_list+0x138>)
 80089ce:	701a      	strb	r2, [r3, #0]
        if (add_space_pixel < 0)
 80089d0:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <system_display_theme_list+0x138>)
 80089d2:	f993 3000 	ldrsb.w	r3, [r3]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da02      	bge.n	80089e0 <system_display_theme_list+0xd0>
            add_space_pixel = 0;
 80089da:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <system_display_theme_list+0x138>)
 80089dc:	2200      	movs	r2, #0
 80089de:	701a      	strb	r2, [r3, #0]
    }

    if (*button == HOLD_SELECT_BUTTON)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b0b      	cmp	r3, #11
 80089e6:	d111      	bne.n	8008a0c <system_display_theme_list+0xfc>
    {
        *object_select  = add_space_pixel / 10 + 3;
 80089e8:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <system_display_theme_list+0x138>)
 80089ea:	f993 3000 	ldrsb.w	r3, [r3]
 80089ee:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <system_display_theme_list+0x13c>)
 80089f0:	fb82 1203 	smull	r1, r2, r2, r3
 80089f4:	1092      	asrs	r2, r2, #2
 80089f6:	17db      	asrs	r3, r3, #31
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	b25b      	sxtb	r3, r3
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	3303      	adds	r3, #3
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	701a      	strb	r2, [r3, #0]
        add_space_pixel = 0;
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <system_display_theme_list+0x138>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
    }

    drv_ssd1306_draw_bitmap(0, add_space_pixel, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8008a0c:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <system_display_theme_list+0x138>)
 8008a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8008a12:	b219      	sxth	r1, r3
 8008a14:	2301      	movs	r3, #1
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	2307      	movs	r3, #7
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	2307      	movs	r3, #7
 8008a1e:	4a0c      	ldr	r2, [pc, #48]	; (8008a50 <system_display_theme_list+0x140>)
 8008a20:	2000      	movs	r0, #0
 8008a22:	f7fa fc6f 	bl	8003304 <drv_ssd1306_draw_bitmap>
    drv_ssd1306_update_screen(&drv_ssd1306);
 8008a26:	480b      	ldr	r0, [pc, #44]	; (8008a54 <system_display_theme_list+0x144>)
 8008a28:	f7fa fb0a 	bl	8003040 <drv_ssd1306_update_screen>
    return SYSTEM_DISPLAY_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200011e8 	.word	0x200011e8
 8008a3c:	08014f0c 	.word	0x08014f0c
 8008a40:	08014f1c 	.word	0x08014f1c
 8008a44:	08014f00 	.word	0x08014f00
 8008a48:	20003dd5 	.word	0x20003dd5
 8008a4c:	66666667 	.word	0x66666667
 8008a50:	20001424 	.word	0x20001424
 8008a54:	20003dd8 	.word	0x20003dd8

08008a58 <system_display_is_screen_ready>:

bool system_display_is_screen_ready(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
    return drv_ssd1306.i2c_is_device_ready(drv_ssd1306.device_address);
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <system_display_is_screen_ready+0x18>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	4a03      	ldr	r2, [pc, #12]	; (8008a70 <system_display_is_screen_ready+0x18>)
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20003dd8 	.word	0x20003dd8

08008a74 <system_display_type_clock>:

system_display_error_t system_display_type_clock(button_name_t *button_state)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	6078      	str	r0, [r7, #4]
    static uint8_t       index_select = 0;
    static button_name_t last_button  = 0;
    if (*button_state == last_button)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <system_display_type_clock+0xe8>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d101      	bne.n	8008a8c <system_display_type_clock+0x18>
    {
        return SYSTEM_DISPLAY_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e063      	b.n	8008b54 <system_display_type_clock+0xe0>
    }
    last_button = *button_state;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	781a      	ldrb	r2, [r3, #0]
 8008a90:	4b32      	ldr	r3, [pc, #200]	; (8008b5c <system_display_type_clock+0xe8>)
 8008a92:	701a      	strb	r2, [r3, #0]

    drv_ssd1306_fill_theme_color();
 8008a94:	f7fa fac2 	bl	800301c <drv_ssd1306_fill_theme_color>
    /* Display list of all module in smart desk clock */
    drv_ssd1306_goto_xy(20, 0);
 8008a98:	2100      	movs	r1, #0
 8008a9a:	2014      	movs	r0, #20
 8008a9c:	f7fa fcfc 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Type simple", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	492f      	ldr	r1, [pc, #188]	; (8008b60 <system_display_type_clock+0xec>)
 8008aa4:	482f      	ldr	r0, [pc, #188]	; (8008b64 <system_display_type_clock+0xf0>)
 8008aa6:	f7fa fe33 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 10);
 8008aaa:	210a      	movs	r1, #10
 8008aac:	2014      	movs	r0, #20
 8008aae:	f7fa fcf3 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Type digital", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	492a      	ldr	r1, [pc, #168]	; (8008b60 <system_display_type_clock+0xec>)
 8008ab6:	482c      	ldr	r0, [pc, #176]	; (8008b68 <system_display_type_clock+0xf4>)
 8008ab8:	f7fa fe2a 	bl	8003710 <drv_ssd1306_puts>

    /* Display pointer to the module user want to check */
    // Down
    if (*button_state == CLICK_DOWN_BUTTON)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d10d      	bne.n	8008ae0 <system_display_type_clock+0x6c>
    {
        index_select += 10;
 8008ac4:	4b29      	ldr	r3, [pc, #164]	; (8008b6c <system_display_type_clock+0xf8>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	330a      	adds	r3, #10
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	4b27      	ldr	r3, [pc, #156]	; (8008b6c <system_display_type_clock+0xf8>)
 8008ace:	701a      	strb	r2, [r3, #0]
        if (index_select >= 10)
 8008ad0:	4b26      	ldr	r3, [pc, #152]	; (8008b6c <system_display_type_clock+0xf8>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d90d      	bls.n	8008af4 <system_display_type_clock+0x80>
            index_select = 10;
 8008ad8:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <system_display_type_clock+0xf8>)
 8008ada:	220a      	movs	r2, #10
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	e009      	b.n	8008af4 <system_display_type_clock+0x80>
    }
    // Up
    else if (*button_state == CLICK_UP_BUTTON)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d105      	bne.n	8008af4 <system_display_type_clock+0x80>
    {
        index_select -= 10;
 8008ae8:	4b20      	ldr	r3, [pc, #128]	; (8008b6c <system_display_type_clock+0xf8>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	3b0a      	subs	r3, #10
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	4b1e      	ldr	r3, [pc, #120]	; (8008b6c <system_display_type_clock+0xf8>)
 8008af2:	701a      	strb	r2, [r3, #0]
        if (index_select < 0)
            index_select = 0;
    }

    if (*button_state == CLICK_SELECT_BUTTON)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b05      	cmp	r3, #5
 8008afa:	d11c      	bne.n	8008b36 <system_display_type_clock+0xc2>
    {
        system_display_screen_save();
 8008afc:	f7fe f8c2 	bl	8006c84 <system_display_screen_save>
        if (index_select == 0)
 8008b00:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <system_display_type_clock+0xf8>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d103      	bne.n	8008b10 <system_display_type_clock+0x9c>
            system_data_set_type_clock(0);
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f7fd fd59 	bl	80065c0 <system_data_set_type_clock>
 8008b0e:	e002      	b.n	8008b16 <system_display_type_clock+0xa2>
        else
            system_data_set_type_clock(1);
 8008b10:	2001      	movs	r0, #1
 8008b12:	f7fd fd55 	bl	80065c0 <system_data_set_type_clock>
        for (volatile uint32_t i = 0; i < 0xFFFFF; i++) __NOP();
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e003      	b.n	8008b24 <system_display_type_clock+0xb0>
 8008b1c:	bf00      	nop
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3301      	adds	r3, #1
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4a12      	ldr	r2, [pc, #72]	; (8008b70 <system_display_type_clock+0xfc>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d9f7      	bls.n	8008b1c <system_display_type_clock+0xa8>
        index_select = 0;
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <system_display_type_clock+0xf8>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	701a      	strb	r2, [r3, #0]
        return SYSTEM_DISPLAY_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e00e      	b.n	8008b54 <system_display_type_clock+0xe0>
    }

    drv_ssd1306_draw_bitmap(0, index_select, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8008b36:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <system_display_type_clock+0xf8>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b219      	sxth	r1, r3
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	2307      	movs	r3, #7
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2307      	movs	r3, #7
 8008b46:	4a0b      	ldr	r2, [pc, #44]	; (8008b74 <system_display_type_clock+0x100>)
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f7fa fbdb 	bl	8003304 <drv_ssd1306_draw_bitmap>
    system_display_update();
 8008b4e:	f000 f8cf 	bl	8008cf0 <system_display_update>
    return SYSTEM_DISPLAY_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20003e4c 	.word	0x20003e4c
 8008b60:	200011e8 	.word	0x200011e8
 8008b64:	08014f2c 	.word	0x08014f2c
 8008b68:	08014f38 	.word	0x08014f38
 8008b6c:	20003e4d 	.word	0x20003e4d
 8008b70:	000ffffe 	.word	0x000ffffe
 8008b74:	20001424 	.word	0x20001424

08008b78 <system_display_theme_color>:

system_display_error_t system_display_theme_color(button_name_t *button_state)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	6078      	str	r0, [r7, #4]
    static uint8_t       index_select = 0;
    static button_name_t last_button  = 0;
    if (*button_state == last_button)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	4b37      	ldr	r3, [pc, #220]	; (8008c64 <system_display_theme_color+0xec>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d101      	bne.n	8008b90 <system_display_theme_color+0x18>
    {
        return SYSTEM_DISPLAY_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e065      	b.n	8008c5c <system_display_theme_color+0xe4>
    }
    last_button = *button_state;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	4b33      	ldr	r3, [pc, #204]	; (8008c64 <system_display_theme_color+0xec>)
 8008b96:	701a      	strb	r2, [r3, #0]

    drv_ssd1306_fill_theme_color();
 8008b98:	f7fa fa40 	bl	800301c <drv_ssd1306_fill_theme_color>
    /* Display list of all module in smart desk clock */
    drv_ssd1306_goto_xy(20, 0);
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	2014      	movs	r0, #20
 8008ba0:	f7fa fc7a 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Dark mode", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	4930      	ldr	r1, [pc, #192]	; (8008c68 <system_display_theme_color+0xf0>)
 8008ba8:	4830      	ldr	r0, [pc, #192]	; (8008c6c <system_display_theme_color+0xf4>)
 8008baa:	f7fa fdb1 	bl	8003710 <drv_ssd1306_puts>

    drv_ssd1306_goto_xy(20, 10);
 8008bae:	210a      	movs	r1, #10
 8008bb0:	2014      	movs	r0, #20
 8008bb2:	f7fa fc71 	bl	8003498 <drv_ssd1306_goto_xy>
    drv_ssd1306_puts((uint8_t *) "Light mode", &font_7x10, DRV_SSD1306_COLOR_WHITE);
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	492b      	ldr	r1, [pc, #172]	; (8008c68 <system_display_theme_color+0xf0>)
 8008bba:	482d      	ldr	r0, [pc, #180]	; (8008c70 <system_display_theme_color+0xf8>)
 8008bbc:	f7fa fda8 	bl	8003710 <drv_ssd1306_puts>

    /* Display pointer to the module user want to check */
    // Down
    if (*button_state == CLICK_DOWN_BUTTON)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d10d      	bne.n	8008be4 <system_display_theme_color+0x6c>
    {
        index_select += 10;
 8008bc8:	4b2a      	ldr	r3, [pc, #168]	; (8008c74 <system_display_theme_color+0xfc>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	330a      	adds	r3, #10
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	4b28      	ldr	r3, [pc, #160]	; (8008c74 <system_display_theme_color+0xfc>)
 8008bd2:	701a      	strb	r2, [r3, #0]
        if (index_select >= 10)
 8008bd4:	4b27      	ldr	r3, [pc, #156]	; (8008c74 <system_display_theme_color+0xfc>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b09      	cmp	r3, #9
 8008bda:	d90d      	bls.n	8008bf8 <system_display_theme_color+0x80>
            index_select = 10;
 8008bdc:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <system_display_theme_color+0xfc>)
 8008bde:	220a      	movs	r2, #10
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e009      	b.n	8008bf8 <system_display_theme_color+0x80>
    }
    // Up
    else if (*button_state == CLICK_UP_BUTTON)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d105      	bne.n	8008bf8 <system_display_theme_color+0x80>
    {
        index_select -= 10;
 8008bec:	4b21      	ldr	r3, [pc, #132]	; (8008c74 <system_display_theme_color+0xfc>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	3b0a      	subs	r3, #10
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <system_display_theme_color+0xfc>)
 8008bf6:	701a      	strb	r2, [r3, #0]
        if (index_select < 0)
            index_select = 0;
    }

    if (*button_state == CLICK_SELECT_BUTTON)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b05      	cmp	r3, #5
 8008bfe:	d11e      	bne.n	8008c3e <system_display_theme_color+0xc6>
    {
        system_display_screen_save();
 8008c00:	f7fe f840 	bl	8006c84 <system_display_screen_save>
        if (index_select == 0)
 8008c04:	4b1b      	ldr	r3, [pc, #108]	; (8008c74 <system_display_theme_color+0xfc>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d103      	bne.n	8008c14 <system_display_theme_color+0x9c>
            system_data_set_theme_color(0);
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f7fd fcc5 	bl	800659c <system_data_set_theme_color>
 8008c12:	e002      	b.n	8008c1a <system_display_theme_color+0xa2>
        else
            system_data_set_theme_color(1);
 8008c14:	2001      	movs	r0, #1
 8008c16:	f7fd fcc1 	bl	800659c <system_data_set_theme_color>
        system_display_update_theme_color();
 8008c1a:	f7fe f821 	bl	8006c60 <system_display_update_theme_color>
        for (volatile uint32_t i = 0; i < 0xFFFFF; i++) __NOP();
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e003      	b.n	8008c2c <system_display_theme_color+0xb4>
 8008c24:	bf00      	nop
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <system_display_theme_color+0x100>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d9f7      	bls.n	8008c24 <system_display_theme_color+0xac>
        index_select = 0;
 8008c34:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <system_display_theme_color+0xfc>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
        return SYSTEM_DISPLAY_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e00e      	b.n	8008c5c <system_display_theme_color+0xe4>
    }

    drv_ssd1306_draw_bitmap(0, index_select, icon_snake_choose_pointer, 7, 7, DRV_SSD1306_COLOR_WHITE);
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <system_display_theme_color+0xfc>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b219      	sxth	r1, r3
 8008c44:	2301      	movs	r3, #1
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	2307      	movs	r3, #7
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2307      	movs	r3, #7
 8008c4e:	4a0b      	ldr	r2, [pc, #44]	; (8008c7c <system_display_theme_color+0x104>)
 8008c50:	2000      	movs	r0, #0
 8008c52:	f7fa fb57 	bl	8003304 <drv_ssd1306_draw_bitmap>
    system_display_update();
 8008c56:	f000 f84b 	bl	8008cf0 <system_display_update>
    return SYSTEM_DISPLAY_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20003e4e 	.word	0x20003e4e
 8008c68:	200011e8 	.word	0x200011e8
 8008c6c:	08014f48 	.word	0x08014f48
 8008c70:	08014f54 	.word	0x08014f54
 8008c74:	20003e4f 	.word	0x20003e4f
 8008c78:	000ffffe 	.word	0x000ffffe
 8008c7c:	20001424 	.word	0x20001424

08008c80 <system_display_clock_handle>:

system_display_error_t system_display_clock_handle(button_name_t *button_state, uint8_t *object_select)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]

    if (*object_select == SYSTEM_TIME_SET_TIME)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d105      	bne.n	8008c9e <system_display_clock_handle+0x1e>
        system_display_set_time(*button_state);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fa98 	bl	80071cc <system_display_set_time>
 8008c9c:	e022      	b.n	8008ce4 <system_display_clock_handle+0x64>

    else if (*object_select == SYSTEM_TIME_SET_REMINDER)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d105      	bne.n	8008cb2 <system_display_clock_handle+0x32>
    	system_display_time_reminder(*button_state);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe f81a 	bl	8006ce4 <system_display_time_reminder>
 8008cb0:	e018      	b.n	8008ce4 <system_display_clock_handle+0x64>

    else if (*object_select == SYSTEM_TIME_TIME_DOWN)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d105      	bne.n	8008cc6 <system_display_clock_handle+0x46>
    	system_display_time_countdown(*button_state);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff f888 	bl	8007dd4 <system_display_time_countdown>
 8008cc4:	e00e      	b.n	8008ce4 <system_display_clock_handle+0x64>

    else if (*object_select == SYSTEM_TIME_TYPE_CLOCK)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d103      	bne.n	8008cd6 <system_display_clock_handle+0x56>
        system_display_type_clock(button_state);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff fed0 	bl	8008a74 <system_display_type_clock>
 8008cd4:	e006      	b.n	8008ce4 <system_display_clock_handle+0x64>

    else if (*object_select == SYSTEM_TIME_THEME_COLOR)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d102      	bne.n	8008ce4 <system_display_clock_handle+0x64>
        system_display_theme_color(button_state);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff ff4a 	bl	8008b78 <system_display_theme_color>

    return SYSTEM_DISPLAY_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <system_display_update>:

void system_display_update(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
    drv_ssd1306_update_screen(&drv_ssd1306);
 8008cf4:	4802      	ldr	r0, [pc, #8]	; (8008d00 <system_display_update+0x10>)
 8008cf6:	f7fa f9a3 	bl	8003040 <drv_ssd1306_update_screen>
}
 8008cfa:	bf00      	nop
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20003dd8 	.word	0x20003dd8

08008d04 <system_game_init>:
snake_game_t               snake_game;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
system_game_error_t system_game_init(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
    mdv_snake_grid_init(&snake_game);
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <system_game_init+0x1c>)
 8008d0a:	f7fd fb5b 	bl	80063c4 <mdv_snake_grid_init>
    system_data_get_high_score(&(snake_game.snake_highest_score));
 8008d0e:	4805      	ldr	r0, [pc, #20]	; (8008d24 <system_game_init+0x20>)
 8008d10:	f7fd fc16 	bl	8006540 <system_data_get_high_score>
    drv_buzzer_init();
 8008d14:	f7f9 f940 	bl	8001f98 <drv_buzzer_init>
    return SYSTEM_GAME_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20003e54 	.word	0x20003e54
 8008d24:	20005006 	.word	0x20005006

08008d28 <system_game_run>:

system_game_error_t system_game_run(button_name_t *button_state)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
    system_game_error_t status = SYSTEM_GAME_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    while (status == SYSTEM_GAME_OK)
 8008d36:	e25a      	b.n	80091ee <system_game_run+0x4c6>
    {
        uint8_t count_speed = 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint16_t green[3] = {0,255,0};
 8008d3e:	2300      	movs	r3, #0
 8008d40:	843b      	strh	r3, [r7, #32]
 8008d42:	23ff      	movs	r3, #255	; 0xff
 8008d44:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d46:	2300      	movs	r3, #0
 8008d48:	84bb      	strh	r3, [r7, #36]	; 0x24
        uint16_t red[3] = {255,0,0};
 8008d4a:	23ff      	movs	r3, #255	; 0xff
 8008d4c:	833b      	strh	r3, [r7, #24]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	837b      	strh	r3, [r7, #26]
 8008d52:	2300      	movs	r3, #0
 8008d54:	83bb      	strh	r3, [r7, #28]
        uint16_t blue[3] = {0,0,255};
 8008d56:	2300      	movs	r3, #0
 8008d58:	823b      	strh	r3, [r7, #16]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	827b      	strh	r3, [r7, #18]
 8008d5e:	23ff      	movs	r3, #255	; 0xff
 8008d60:	82bb      	strh	r3, [r7, #20]
        uint16_t violet[3] = {255,255,255};
 8008d62:	4a9f      	ldr	r2, [pc, #636]	; (8008fe0 <system_game_run+0x2b8>)
 8008d64:	f107 0308 	add.w	r3, r7, #8
 8008d68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d6c:	6018      	str	r0, [r3, #0]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	8019      	strh	r1, [r3, #0]

        drv_button_check_event(button_state);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7f9 f80c 	bl	8001d90 <drv_button_check_event>
        drv_ssd1306_fill_theme_color();
 8008d78:	f7fa f950 	bl	800301c <drv_ssd1306_fill_theme_color>

        /*FSM*/
        switch (game_state)
 8008d7c:	4b99      	ldr	r3, [pc, #612]	; (8008fe4 <system_game_run+0x2bc>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b06      	cmp	r3, #6
 8008d82:	f200 822f 	bhi.w	80091e4 <system_game_run+0x4bc>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <system_game_run+0x64>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008da9 	.word	0x08008da9
 8008d90:	080090e9 	.word	0x080090e9
 8008d94:	0800915d 	.word	0x0800915d
 8008d98:	08008e07 	.word	0x08008e07
 8008d9c:	08009063 	.word	0x08009063
 8008da0:	08008fbb 	.word	0x08008fbb
 8008da4:	080091d1 	.word	0x080091d1
        {
        case START_MENU:

            system_display_snake_game_start(button_state, &start_screen_choose);
 8008da8:	498f      	ldr	r1, [pc, #572]	; (8008fe8 <system_game_run+0x2c0>)
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fe fb24 	bl	80073f8 <system_display_snake_game_start>
            drv_buzzer_off();
 8008db0:	f7f9 f942 	bl	8002038 <drv_buzzer_off>
            drv_led_off();
 8008db4:	f7f9 ff7c 	bl	8002cb0 <drv_led_off>

            // handle cancle button
            if (*button_state == CLICK_CANCEL_BUTTON)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b06      	cmp	r3, #6
 8008dbe:	d101      	bne.n	8008dc4 <system_game_run+0x9c>
            	return 1;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e21b      	b.n	80091fc <system_game_run+0x4d4>
            if (*button_state == HOLD_CANCEL_BUTTON)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b0c      	cmp	r3, #12
 8008dca:	d101      	bne.n	8008dd0 <system_game_run+0xa8>
            	return 2;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e215      	b.n	80091fc <system_game_run+0x4d4>

            if (start_screen_choose == 0)
 8008dd0:	4b85      	ldr	r3, [pc, #532]	; (8008fe8 <system_game_run+0x2c0>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <system_game_run+0xb8>
                game_state = START_NEWGAME_STATE;
 8008dd8:	4b82      	ldr	r3, [pc, #520]	; (8008fe4 <system_game_run+0x2bc>)
 8008dda:	2203      	movs	r2, #3
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	e00e      	b.n	8008dfe <system_game_run+0xd6>
            else if (start_screen_choose == 1)
 8008de0:	4b81      	ldr	r3, [pc, #516]	; (8008fe8 <system_game_run+0x2c0>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d103      	bne.n	8008df0 <system_game_run+0xc8>
                game_state = MAP_MENU;
 8008de8:	4b7e      	ldr	r3, [pc, #504]	; (8008fe4 <system_game_run+0x2bc>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	e006      	b.n	8008dfe <system_game_run+0xd6>
            else if (start_screen_choose == 2)
 8008df0:	4b7d      	ldr	r3, [pc, #500]	; (8008fe8 <system_game_run+0x2c0>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d102      	bne.n	8008dfe <system_game_run+0xd6>
                game_state = INFO;
 8008df8:	4b7a      	ldr	r3, [pc, #488]	; (8008fe4 <system_game_run+0x2bc>)
 8008dfa:	2206      	movs	r2, #6
 8008dfc:	701a      	strb	r2, [r3, #0]

            // reset flag unless it will jumpt to START_MENU again
            start_screen_choose = 3;
 8008dfe:	4b7a      	ldr	r3, [pc, #488]	; (8008fe8 <system_game_run+0x2c0>)
 8008e00:	2203      	movs	r2, #3
 8008e02:	701a      	strb	r2, [r3, #0]

            break;
 8008e04:	e1f3      	b.n	80091ee <system_game_run+0x4c6>

        case START_NEWGAME_STATE:

        	// set up map and config snake
            mdv_snake_map_mode(&snake_game);
 8008e06:	4879      	ldr	r0, [pc, #484]	; (8008fec <system_game_run+0x2c4>)
 8008e08:	f7fd f8fc 	bl	8006004 <mdv_snake_map_mode>
            mdv_snake_food_random(&snake_game);
 8008e0c:	4877      	ldr	r0, [pc, #476]	; (8008fec <system_game_run+0x2c4>)
 8008e0e:	f7fc fd93 	bl	8005938 <mdv_snake_food_random>

            drv_buzzer_off();
 8008e12:	f7f9 f911 	bl	8002038 <drv_buzzer_off>


            speed_game = snake_game.speed_game;
 8008e16:	4b75      	ldr	r3, [pc, #468]	; (8008fec <system_game_run+0x2c4>)
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	4b74      	ldr	r3, [pc, #464]	; (8008ff0 <system_game_run+0x2c8>)
 8008e1e:	801a      	strh	r2, [r3, #0]

            while (mdv_snake_check_gameover(&snake_game) == false && mdv_snake_win(&snake_game) == false && *button_state != 6)
 8008e20:	e097      	b.n	8008f52 <system_game_run+0x22a>
            {
            	drv_buzzer_music(Super_Mario);
 8008e22:	2004      	movs	r0, #4
 8008e24:	f7f9 f8e2 	bl	8001fec <drv_buzzer_music>
            	drv_led_fade_in_fade_out();
 8008e28:	f7f9 ffba 	bl	8002da0 <drv_led_fade_in_fade_out>
                if (count_speed > speed_game)
 8008e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	4b6f      	ldr	r3, [pc, #444]	; (8008ff0 <system_game_run+0x2c8>)
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d908      	bls.n	8008e4c <system_game_run+0x124>
                {
                    mdv_snake_check_food(&snake_game);
 8008e3a:	486c      	ldr	r0, [pc, #432]	; (8008fec <system_game_run+0x2c4>)
 8008e3c:	f7fc ffd2 	bl	8005de4 <mdv_snake_check_food>
                    mdv_snake_move(&snake_game);
 8008e40:	486a      	ldr	r0, [pc, #424]	; (8008fec <system_game_run+0x2c4>)
 8008e42:	f7fc fdc5 	bl	80059d0 <mdv_snake_move>
                    count_speed = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                // change speed based on click or hold status
                if ((snake_game.snake_step[0] == 1 && snake_game.snake_step[1] == 0) && *button_state == HOLD_RIGHT_BUTTON)
 8008e4c:	4b67      	ldr	r3, [pc, #412]	; (8008fec <system_game_run+0x2c4>)
 8008e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e52:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d112      	bne.n	8008e80 <system_game_run+0x158>
 8008e5a:	4b64      	ldr	r3, [pc, #400]	; (8008fec <system_game_run+0x2c4>)
 8008e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e60:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10b      	bne.n	8008e80 <system_game_run+0x158>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b07      	cmp	r3, #7
 8008e6e:	d107      	bne.n	8008e80 <system_game_run+0x158>
                    speed_game = snake_game.speed_game - 2;
 8008e70:	4b5e      	ldr	r3, [pc, #376]	; (8008fec <system_game_run+0x2c4>)
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b02      	subs	r3, #2
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	4b5d      	ldr	r3, [pc, #372]	; (8008ff0 <system_game_run+0x2c8>)
 8008e7c:	801a      	strh	r2, [r3, #0]
 8008e7e:	e054      	b.n	8008f2a <system_game_run+0x202>
                else if ((snake_game.snake_step[0] == -1 && snake_game.snake_step[1] == 0) && *button_state == HOLD_LEFT_BUTTON)
 8008e80:	4b5a      	ldr	r3, [pc, #360]	; (8008fec <system_game_run+0x2c4>)
 8008e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e86:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8e:	d112      	bne.n	8008eb6 <system_game_run+0x18e>
 8008e90:	4b56      	ldr	r3, [pc, #344]	; (8008fec <system_game_run+0x2c4>)
 8008e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e96:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <system_game_run+0x18e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b0a      	cmp	r3, #10
 8008ea4:	d107      	bne.n	8008eb6 <system_game_run+0x18e>
                    speed_game = snake_game.speed_game - 2;
 8008ea6:	4b51      	ldr	r3, [pc, #324]	; (8008fec <system_game_run+0x2c4>)
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b02      	subs	r3, #2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	4b4f      	ldr	r3, [pc, #316]	; (8008ff0 <system_game_run+0x2c8>)
 8008eb2:	801a      	strh	r2, [r3, #0]
 8008eb4:	e039      	b.n	8008f2a <system_game_run+0x202>
                else if ((snake_game.snake_step[0] == 0 && snake_game.snake_step[1] == 1) && *button_state == HOLD_DOWN_BUTTON)
 8008eb6:	4b4d      	ldr	r3, [pc, #308]	; (8008fec <system_game_run+0x2c4>)
 8008eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ebc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d112      	bne.n	8008eea <system_game_run+0x1c2>
 8008ec4:	4b49      	ldr	r3, [pc, #292]	; (8008fec <system_game_run+0x2c4>)
 8008ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eca:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d10b      	bne.n	8008eea <system_game_run+0x1c2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b09      	cmp	r3, #9
 8008ed8:	d107      	bne.n	8008eea <system_game_run+0x1c2>
                    speed_game = snake_game.speed_game - 2;
 8008eda:	4b44      	ldr	r3, [pc, #272]	; (8008fec <system_game_run+0x2c4>)
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b02      	subs	r3, #2
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	4b42      	ldr	r3, [pc, #264]	; (8008ff0 <system_game_run+0x2c8>)
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	e01f      	b.n	8008f2a <system_game_run+0x202>
                else if ((snake_game.snake_step[0] == 0 && snake_game.snake_step[1] == -1) && *button_state == HOLD_UP_BUTTON)
 8008eea:	4b40      	ldr	r3, [pc, #256]	; (8008fec <system_game_run+0x2c4>)
 8008eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d113      	bne.n	8008f20 <system_game_run+0x1f8>
 8008ef8:	4b3c      	ldr	r3, [pc, #240]	; (8008fec <system_game_run+0x2c4>)
 8008efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008efe:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d10b      	bne.n	8008f20 <system_game_run+0x1f8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d107      	bne.n	8008f20 <system_game_run+0x1f8>
                    speed_game = snake_game.speed_game - 2;
 8008f10:	4b36      	ldr	r3, [pc, #216]	; (8008fec <system_game_run+0x2c4>)
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b02      	subs	r3, #2
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	4b35      	ldr	r3, [pc, #212]	; (8008ff0 <system_game_run+0x2c8>)
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	e004      	b.n	8008f2a <system_game_run+0x202>
                else
                    speed_game = snake_game.speed_game;
 8008f20:	4b32      	ldr	r3, [pc, #200]	; (8008fec <system_game_run+0x2c4>)
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <system_game_run+0x2c8>)
 8008f28:	801a      	strh	r2, [r3, #0]

                drv_button_check_event(button_state);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7f8 ff30 	bl	8001d90 <drv_button_check_event>
                mdv_snake_check_button(&snake_game, *button_state);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	4619      	mov	r1, r3
 8008f36:	482d      	ldr	r0, [pc, #180]	; (8008fec <system_game_run+0x2c4>)
 8008f38:	f7fc ffc9 	bl	8005ece <mdv_snake_check_button>
                system_display_snake_game_playground(snake_game.snake_grid_map);
 8008f3c:	482d      	ldr	r0, [pc, #180]	; (8008ff4 <system_game_run+0x2cc>)
 8008f3e:	f7fe fe2f 	bl	8007ba0 <system_display_snake_game_playground>

                count_speed++;
 8008f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f46:	3301      	adds	r3, #1
 8008f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bsp_delay(1);
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f7f8 fdcb 	bl	8001ae8 <bsp_delay>
            while (mdv_snake_check_gameover(&snake_game) == false && mdv_snake_win(&snake_game) == false && *button_state != 6)
 8008f52:	4826      	ldr	r0, [pc, #152]	; (8008fec <system_game_run+0x2c4>)
 8008f54:	f7fc fe9f 	bl	8005c96 <mdv_snake_check_gameover>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f083 0301 	eor.w	r3, r3, #1
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00d      	beq.n	8008f80 <system_game_run+0x258>
 8008f64:	4821      	ldr	r0, [pc, #132]	; (8008fec <system_game_run+0x2c4>)
 8008f66:	f7fd fa19 	bl	800639c <mdv_snake_win>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f083 0301 	eor.w	r3, r3, #1
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d004      	beq.n	8008f80 <system_game_run+0x258>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b06      	cmp	r3, #6
 8008f7c:	f47f af51 	bne.w	8008e22 <system_game_run+0xfa>
            }

            if (*button_state == 6)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b06      	cmp	r3, #6
 8008f86:	d103      	bne.n	8008f90 <system_game_run+0x268>
            {
                game_state = START_MENU;
 8008f88:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <system_game_run+0x2bc>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
            else if (mdv_snake_win(&snake_game))
            {
                game_state = GAME_WIN_STATE;
            }

            break;
 8008f8e:	e12b      	b.n	80091e8 <system_game_run+0x4c0>
            else if (mdv_snake_check_gameover(&snake_game))
 8008f90:	4816      	ldr	r0, [pc, #88]	; (8008fec <system_game_run+0x2c4>)
 8008f92:	f7fc fe80 	bl	8005c96 <mdv_snake_check_gameover>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <system_game_run+0x27c>
                game_state = GAME_OVER_STATE;
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <system_game_run+0x2bc>)
 8008f9e:	2204      	movs	r2, #4
 8008fa0:	701a      	strb	r2, [r3, #0]
            break;
 8008fa2:	e121      	b.n	80091e8 <system_game_run+0x4c0>
            else if (mdv_snake_win(&snake_game))
 8008fa4:	4811      	ldr	r0, [pc, #68]	; (8008fec <system_game_run+0x2c4>)
 8008fa6:	f7fd f9f9 	bl	800639c <mdv_snake_win>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 811b 	beq.w	80091e8 <system_game_run+0x4c0>
                game_state = GAME_WIN_STATE;
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <system_game_run+0x2bc>)
 8008fb4:	2205      	movs	r2, #5
 8008fb6:	701a      	strb	r2, [r3, #0]
            break;
 8008fb8:	e116      	b.n	80091e8 <system_game_run+0x4c0>

        case GAME_WIN_STATE:


            drv_led_blink_color(green);
 8008fba:	f107 0320 	add.w	r3, r7, #32
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f9 feda 	bl	8002d78 <drv_led_blink_color>

            system_display_snake_game_win(button_state, &mode_game_win_choose, &snake_game);
 8008fc4:	4a09      	ldr	r2, [pc, #36]	; (8008fec <system_game_run+0x2c4>)
 8008fc6:	490c      	ldr	r1, [pc, #48]	; (8008ff8 <system_game_run+0x2d0>)
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fe fcd3 	bl	8007974 <system_display_snake_game_win>

            if (mode_game_over_choose == 0)
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <system_game_run+0x2d4>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d114      	bne.n	8009000 <system_game_run+0x2d8>
            {
                game_state = START_NEWGAME_STATE;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <system_game_run+0x2bc>)
 8008fd8:	2203      	movs	r2, #3
 8008fda:	701a      	strb	r2, [r3, #0]
 8008fdc:	e017      	b.n	800900e <system_game_run+0x2e6>
 8008fde:	bf00      	nop
 8008fe0:	08014f60 	.word	0x08014f60
 8008fe4:	20003e52 	.word	0x20003e52
 8008fe8:	20001529 	.word	0x20001529
 8008fec:	20003e54 	.word	0x20003e54
 8008ff0:	20003e50 	.word	0x20003e50
 8008ff4:	20003e58 	.word	0x20003e58
 8008ff8:	2000152d 	.word	0x2000152d
 8008ffc:	2000152c 	.word	0x2000152c
            }
            else if (mode_game_over_choose == 1)
 8009000:	4b80      	ldr	r3, [pc, #512]	; (8009204 <system_game_run+0x4dc>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d102      	bne.n	800900e <system_game_run+0x2e6>
            {
                game_state = START_MENU;
 8009008:	4b7f      	ldr	r3, [pc, #508]	; (8009208 <system_game_run+0x4e0>)
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
            }
            // implement saved action when any option being selected
            if (mode_game_over_choose == 0 || mode_game_over_choose == 1)
 800900e:	4b7d      	ldr	r3, [pc, #500]	; (8009204 <system_game_run+0x4dc>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <system_game_run+0x2f6>
 8009016:	4b7b      	ldr	r3, [pc, #492]	; (8009204 <system_game_run+0x4dc>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d11d      	bne.n	800905a <system_game_run+0x332>
            {
            	// save current score if it is the highest one
                if (snake_game.snake_score >= snake_game.snake_highest_score)
 800901e:	4b7b      	ldr	r3, [pc, #492]	; (800920c <system_game_run+0x4e4>)
 8009020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009024:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
 8009028:	4b78      	ldr	r3, [pc, #480]	; (800920c <system_game_run+0x4e4>)
 800902a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902e:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	; 0x1b2
 8009032:	429a      	cmp	r2, r3
 8009034:	d311      	bcc.n	800905a <system_game_run+0x332>
                {
                    system_data_set_high_score(snake_game.snake_score);
 8009036:	4b75      	ldr	r3, [pc, #468]	; (800920c <system_game_run+0x4e4>)
 8009038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903c:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	; 0x1b0
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd facf 	bl	80065e4 <system_data_set_high_score>
                    snake_game.snake_highest_score = snake_game.snake_score;
 8009046:	4b71      	ldr	r3, [pc, #452]	; (800920c <system_game_run+0x4e4>)
 8009048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904c:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
 8009050:	4b6e      	ldr	r3, [pc, #440]	; (800920c <system_game_run+0x4e4>)
 8009052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009056:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
                }
            }

            mode_game_over_choose = 3;
 800905a:	4b6a      	ldr	r3, [pc, #424]	; (8009204 <system_game_run+0x4dc>)
 800905c:	2203      	movs	r2, #3
 800905e:	701a      	strb	r2, [r3, #0]

            break;
 8009060:	e0c5      	b.n	80091ee <system_game_run+0x4c6>

        case GAME_OVER_STATE:

            system_display_snake_game_over(button_state, &mode_game_over_choose, &snake_game);
 8009062:	4a6a      	ldr	r2, [pc, #424]	; (800920c <system_game_run+0x4e4>)
 8009064:	4967      	ldr	r1, [pc, #412]	; (8009204 <system_game_run+0x4dc>)
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fe fbc0 	bl	80077ec <system_display_snake_game_over>

            drv_led_blink_color(red);
 800906c:	f107 0318 	add.w	r3, r7, #24
 8009070:	4618      	mov	r0, r3
 8009072:	f7f9 fe81 	bl	8002d78 <drv_led_blink_color>

            if (mode_game_over_choose == 0)
 8009076:	4b63      	ldr	r3, [pc, #396]	; (8009204 <system_game_run+0x4dc>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d103      	bne.n	8009086 <system_game_run+0x35e>
            {
                game_state = START_NEWGAME_STATE;
 800907e:	4b62      	ldr	r3, [pc, #392]	; (8009208 <system_game_run+0x4e0>)
 8009080:	2203      	movs	r2, #3
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	e006      	b.n	8009094 <system_game_run+0x36c>
            }
            else if (mode_game_over_choose == 1)
 8009086:	4b5f      	ldr	r3, [pc, #380]	; (8009204 <system_game_run+0x4dc>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d102      	bne.n	8009094 <system_game_run+0x36c>
            {
                game_state = START_MENU;
 800908e:	4b5e      	ldr	r3, [pc, #376]	; (8009208 <system_game_run+0x4e0>)
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
            }

            // implement saved action when any option being selected
            if (mode_game_over_choose == 0 || mode_game_over_choose == 1)
 8009094:	4b5b      	ldr	r3, [pc, #364]	; (8009204 <system_game_run+0x4dc>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <system_game_run+0x37c>
 800909c:	4b59      	ldr	r3, [pc, #356]	; (8009204 <system_game_run+0x4dc>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d11d      	bne.n	80090e0 <system_game_run+0x3b8>
            {
            	// save current score if it is the highest one
                if (snake_game.snake_score >= snake_game.snake_highest_score)
 80090a4:	4b59      	ldr	r3, [pc, #356]	; (800920c <system_game_run+0x4e4>)
 80090a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090aa:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
 80090ae:	4b57      	ldr	r3, [pc, #348]	; (800920c <system_game_run+0x4e4>)
 80090b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b4:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	; 0x1b2
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d311      	bcc.n	80090e0 <system_game_run+0x3b8>
                {
                    system_data_set_high_score(snake_game.snake_score);
 80090bc:	4b53      	ldr	r3, [pc, #332]	; (800920c <system_game_run+0x4e4>)
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	; 0x1b0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fd fa8c 	bl	80065e4 <system_data_set_high_score>
                    snake_game.snake_highest_score = snake_game.snake_score;
 80090cc:	4b4f      	ldr	r3, [pc, #316]	; (800920c <system_game_run+0x4e4>)
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
 80090d6:	4b4d      	ldr	r3, [pc, #308]	; (800920c <system_game_run+0x4e4>)
 80090d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090dc:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
                }
            }

            mode_game_over_choose = 3;
 80090e0:	4b48      	ldr	r3, [pc, #288]	; (8009204 <system_game_run+0x4dc>)
 80090e2:	2203      	movs	r2, #3
 80090e4:	701a      	strb	r2, [r3, #0]

            break;
 80090e6:	e082      	b.n	80091ee <system_game_run+0x4c6>

        case MAP_MENU:

        	drv_led_set_color(blue);
 80090e8:	f107 0310 	add.w	r3, r7, #16
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f9 fdfb 	bl	8002ce8 <drv_led_set_color>

            system_display_snake_game_mode_choose(button_state, &mode_screen_choose);
 80090f2:	4947      	ldr	r1, [pc, #284]	; (8009210 <system_game_run+0x4e8>)
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7fe fa29 	bl	800754c <system_display_snake_game_mode_choose>

            if (*button_state == 6)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b06      	cmp	r3, #6
 8009100:	d102      	bne.n	8009108 <system_game_run+0x3e0>
                game_state = START_MENU;
 8009102:	4b41      	ldr	r3, [pc, #260]	; (8009208 <system_game_run+0x4e0>)
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
            if (mode_screen_choose == 0)
 8009108:	4b41      	ldr	r3, [pc, #260]	; (8009210 <system_game_run+0x4e8>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <system_game_run+0x3f0>
                snake_game.mode_game = CLASSIC;
 8009110:	4b3e      	ldr	r3, [pc, #248]	; (800920c <system_game_run+0x4e4>)
 8009112:	2200      	movs	r2, #0
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	e00e      	b.n	8009136 <system_game_run+0x40e>
            else if (mode_screen_choose == 1)
 8009118:	4b3d      	ldr	r3, [pc, #244]	; (8009210 <system_game_run+0x4e8>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d103      	bne.n	8009128 <system_game_run+0x400>
                snake_game.mode_game = MODERN;
 8009120:	4b3a      	ldr	r3, [pc, #232]	; (800920c <system_game_run+0x4e4>)
 8009122:	2201      	movs	r2, #1
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	e006      	b.n	8009136 <system_game_run+0x40e>
            else if (mode_screen_choose == 2)
 8009128:	4b39      	ldr	r3, [pc, #228]	; (8009210 <system_game_run+0x4e8>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d102      	bne.n	8009136 <system_game_run+0x40e>
                snake_game.mode_game = INFINITY;
 8009130:	4b36      	ldr	r3, [pc, #216]	; (800920c <system_game_run+0x4e4>)
 8009132:	2202      	movs	r2, #2
 8009134:	701a      	strb	r2, [r3, #0]
            if (mode_screen_choose == 0 || mode_screen_choose == 1 || mode_screen_choose == 2)
 8009136:	4b36      	ldr	r3, [pc, #216]	; (8009210 <system_game_run+0x4e8>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <system_game_run+0x426>
 800913e:	4b34      	ldr	r3, [pc, #208]	; (8009210 <system_game_run+0x4e8>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d003      	beq.n	800914e <system_game_run+0x426>
 8009146:	4b32      	ldr	r3, [pc, #200]	; (8009210 <system_game_run+0x4e8>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d102      	bne.n	8009154 <system_game_run+0x42c>
                game_state = SPEED_MENU;
 800914e:	4b2e      	ldr	r3, [pc, #184]	; (8009208 <system_game_run+0x4e0>)
 8009150:	2202      	movs	r2, #2
 8009152:	701a      	strb	r2, [r3, #0]

            mode_screen_choose = 3;
 8009154:	4b2e      	ldr	r3, [pc, #184]	; (8009210 <system_game_run+0x4e8>)
 8009156:	2203      	movs	r2, #3
 8009158:	701a      	strb	r2, [r3, #0]

            break;
 800915a:	e048      	b.n	80091ee <system_game_run+0x4c6>

        case SPEED_MENU:

        	drv_led_set_color(violet);
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	4618      	mov	r0, r3
 8009162:	f7f9 fdc1 	bl	8002ce8 <drv_led_set_color>

            system_display_snake_game_level_choose(button_state, &mode_level_choose);
 8009166:	492b      	ldr	r1, [pc, #172]	; (8009214 <system_game_run+0x4ec>)
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7fe fa97 	bl	800769c <system_display_snake_game_level_choose>

            if (mode_level_choose == 0)
 800916e:	4b29      	ldr	r3, [pc, #164]	; (8009214 <system_game_run+0x4ec>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <system_game_run+0x456>
                snake_game.speed_game = EASSY;
 8009176:	4b25      	ldr	r3, [pc, #148]	; (800920c <system_game_run+0x4e4>)
 8009178:	2206      	movs	r2, #6
 800917a:	705a      	strb	r2, [r3, #1]
 800917c:	e00e      	b.n	800919c <system_game_run+0x474>
            else if (mode_level_choose == 1)
 800917e:	4b25      	ldr	r3, [pc, #148]	; (8009214 <system_game_run+0x4ec>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d103      	bne.n	800918e <system_game_run+0x466>
                snake_game.speed_game = MEDIUM;
 8009186:	4b21      	ldr	r3, [pc, #132]	; (800920c <system_game_run+0x4e4>)
 8009188:	2204      	movs	r2, #4
 800918a:	705a      	strb	r2, [r3, #1]
 800918c:	e006      	b.n	800919c <system_game_run+0x474>
            else if (mode_level_choose == 2)
 800918e:	4b21      	ldr	r3, [pc, #132]	; (8009214 <system_game_run+0x4ec>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b02      	cmp	r3, #2
 8009194:	d102      	bne.n	800919c <system_game_run+0x474>
                snake_game.speed_game = HARD;
 8009196:	4b1d      	ldr	r3, [pc, #116]	; (800920c <system_game_run+0x4e4>)
 8009198:	2202      	movs	r2, #2
 800919a:	705a      	strb	r2, [r3, #1]
            if (mode_level_choose == 0 || mode_level_choose == 1 || mode_level_choose == 2)
 800919c:	4b1d      	ldr	r3, [pc, #116]	; (8009214 <system_game_run+0x4ec>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d007      	beq.n	80091b4 <system_game_run+0x48c>
 80091a4:	4b1b      	ldr	r3, [pc, #108]	; (8009214 <system_game_run+0x4ec>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d003      	beq.n	80091b4 <system_game_run+0x48c>
 80091ac:	4b19      	ldr	r3, [pc, #100]	; (8009214 <system_game_run+0x4ec>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d102      	bne.n	80091ba <system_game_run+0x492>
                game_state = START_NEWGAME_STATE;
 80091b4:	4b14      	ldr	r3, [pc, #80]	; (8009208 <system_game_run+0x4e0>)
 80091b6:	2203      	movs	r2, #3
 80091b8:	701a      	strb	r2, [r3, #0]
            if (*button_state == 6)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d102      	bne.n	80091c8 <system_game_run+0x4a0>
                game_state = MAP_MENU;
 80091c2:	4b11      	ldr	r3, [pc, #68]	; (8009208 <system_game_run+0x4e0>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]

            mode_level_choose = 3;
 80091c8:	4b12      	ldr	r3, [pc, #72]	; (8009214 <system_game_run+0x4ec>)
 80091ca:	2203      	movs	r2, #3
 80091cc:	701a      	strb	r2, [r3, #0]

            break;
 80091ce:	e00e      	b.n	80091ee <system_game_run+0x4c6>

        case INFO:

        	system_display_snake_game_info();
 80091d0:	f7fe fc96 	bl	8007b00 <system_display_snake_game_info>

            if (*button_state == 6)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b06      	cmp	r3, #6
 80091da:	d107      	bne.n	80091ec <system_game_run+0x4c4>
                game_state = START_MENU;
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <system_game_run+0x4e0>)
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]

        	break;
 80091e2:	e003      	b.n	80091ec <system_game_run+0x4c4>

        default :

        	break ;
 80091e4:	bf00      	nop
 80091e6:	e002      	b.n	80091ee <system_game_run+0x4c6>
            break;
 80091e8:	bf00      	nop
 80091ea:	e000      	b.n	80091ee <system_game_run+0x4c6>
        	break;
 80091ec:	bf00      	nop
    while (status == SYSTEM_GAME_OK)
 80091ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f43f ada0 	beq.w	8008d38 <system_game_run+0x10>
        }
    }

    return status;
 80091f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3728      	adds	r7, #40	; 0x28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	2000152c 	.word	0x2000152c
 8009208:	20003e52 	.word	0x20003e52
 800920c:	20003e54 	.word	0x20003e54
 8009210:	2000152a 	.word	0x2000152a
 8009214:	2000152b 	.word	0x2000152b

08009218 <system_manager_check_state>:

/* Private function prototypes ---------------------------------------- */
static system_state_t system_manager_check_state(button_name_t *button_state);
/* Function definitions ----------------------------------------------- */
static system_state_t system_manager_check_state(button_name_t *button_state)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
    drv_button_check_event(button_state);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7f8 fdb5 	bl	8001d90 <drv_button_check_event>

    /* FSM */
    switch (system_state)
 8009226:	4b78      	ldr	r3, [pc, #480]	; (8009408 <system_manager_check_state+0x1f0>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	3b01      	subs	r3, #1
 800922c:	2b07      	cmp	r3, #7
 800922e:	f200 80d4 	bhi.w	80093da <system_manager_check_state+0x1c2>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <system_manager_check_state+0x20>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009259 	.word	0x08009259
 800923c:	0800926b 	.word	0x0800926b
 8009240:	0800927d 	.word	0x0800927d
 8009244:	0800934d 	.word	0x0800934d
 8009248:	0800936b 	.word	0x0800936b
 800924c:	08009381 	.word	0x08009381
 8009250:	0800939f 	.word	0x0800939f
 8009254:	080093bd 	.word	0x080093bd
    {
    case BOOT_STATE:
        if (*button_state == HOLD_SELECT_BUTTON)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b0b      	cmp	r3, #11
 800925e:	f040 80be 	bne.w	80093de <system_manager_check_state+0x1c6>
            system_state = WAIT_STATE;
 8009262:	4b69      	ldr	r3, [pc, #420]	; (8009408 <system_manager_check_state+0x1f0>)
 8009264:	2202      	movs	r2, #2
 8009266:	701a      	strb	r2, [r3, #0]
        break;
 8009268:	e0b9      	b.n	80093de <system_manager_check_state+0x1c6>

    case WAIT_STATE:
        if (*button_state == CLICK_SELECT_BUTTON)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b05      	cmp	r3, #5
 8009270:	f040 80b7 	bne.w	80093e2 <system_manager_check_state+0x1ca>
            system_state = MENU_STATE;
 8009274:	4b64      	ldr	r3, [pc, #400]	; (8009408 <system_manager_check_state+0x1f0>)
 8009276:	2203      	movs	r2, #3
 8009278:	701a      	strb	r2, [r3, #0]
        break;
 800927a:	e0b2      	b.n	80093e2 <system_manager_check_state+0x1ca>

    case MENU_STATE:
        // Check id_app here
        if (*button_state == CLICK_RIGHT_BUTTON)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d10d      	bne.n	80092a0 <system_manager_check_state+0x88>
        {
            system_id_app++;
 8009284:	4b61      	ldr	r3, [pc, #388]	; (800940c <system_manager_check_state+0x1f4>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	b2da      	uxtb	r2, r3
 800928c:	4b5f      	ldr	r3, [pc, #380]	; (800940c <system_manager_check_state+0x1f4>)
 800928e:	701a      	strb	r2, [r3, #0]
            if (system_id_app >= PC_CONTROL)
 8009290:	4b5e      	ldr	r3, [pc, #376]	; (800940c <system_manager_check_state+0x1f4>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b04      	cmp	r3, #4
 8009296:	d914      	bls.n	80092c2 <system_manager_check_state+0xaa>
                system_id_app = PC_CONTROL;
 8009298:	4b5c      	ldr	r3, [pc, #368]	; (800940c <system_manager_check_state+0x1f4>)
 800929a:	2205      	movs	r2, #5
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	e010      	b.n	80092c2 <system_manager_check_state+0xaa>
        }

        else if (*button_state == CLICK_LEFT_BUTTON)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d10c      	bne.n	80092c2 <system_manager_check_state+0xaa>
        {
            system_id_app--;
 80092a8:	4b58      	ldr	r3, [pc, #352]	; (800940c <system_manager_check_state+0x1f4>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	4b56      	ldr	r3, [pc, #344]	; (800940c <system_manager_check_state+0x1f4>)
 80092b2:	701a      	strb	r2, [r3, #0]
            if (system_id_app <= TIME)
 80092b4:	4b55      	ldr	r3, [pc, #340]	; (800940c <system_manager_check_state+0x1f4>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d802      	bhi.n	80092c2 <system_manager_check_state+0xaa>
                system_id_app = TIME;
 80092bc:	4b53      	ldr	r3, [pc, #332]	; (800940c <system_manager_check_state+0x1f4>)
 80092be:	2201      	movs	r2, #1
 80092c0:	701a      	strb	r2, [r3, #0]
        }

        if (*button_state == CLICK_SELECT_BUTTON && system_id_app == GAME)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d107      	bne.n	80092da <system_manager_check_state+0xc2>
 80092ca:	4b50      	ldr	r3, [pc, #320]	; (800940c <system_manager_check_state+0x1f4>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d103      	bne.n	80092da <system_manager_check_state+0xc2>
            system_state = GAME_STATE;
 80092d2:	4b4d      	ldr	r3, [pc, #308]	; (8009408 <system_manager_check_state+0x1f0>)
 80092d4:	2204      	movs	r2, #4
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	e037      	b.n	800934a <system_manager_check_state+0x132>

        else if (*button_state == CLICK_SELECT_BUTTON && system_id_app == TIME)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d107      	bne.n	80092f2 <system_manager_check_state+0xda>
 80092e2:	4b4a      	ldr	r3, [pc, #296]	; (800940c <system_manager_check_state+0x1f4>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d103      	bne.n	80092f2 <system_manager_check_state+0xda>
            system_state = TIME_STATE;
 80092ea:	4b47      	ldr	r3, [pc, #284]	; (8009408 <system_manager_check_state+0x1f0>)
 80092ec:	2205      	movs	r2, #5
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	e02b      	b.n	800934a <system_manager_check_state+0x132>

        else if (*button_state == CLICK_SELECT_BUTTON && system_id_app == DIAGNOSTIC)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b05      	cmp	r3, #5
 80092f8:	d107      	bne.n	800930a <system_manager_check_state+0xf2>
 80092fa:	4b44      	ldr	r3, [pc, #272]	; (800940c <system_manager_check_state+0x1f4>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b04      	cmp	r3, #4
 8009300:	d103      	bne.n	800930a <system_manager_check_state+0xf2>
            system_state = DIAGNOSTIC_STATE;
 8009302:	4b41      	ldr	r3, [pc, #260]	; (8009408 <system_manager_check_state+0x1f0>)
 8009304:	2207      	movs	r2, #7
 8009306:	701a      	strb	r2, [r3, #0]
 8009308:	e01f      	b.n	800934a <system_manager_check_state+0x132>

        else if (*button_state == CLICK_SELECT_BUTTON && system_id_app == THEME)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b05      	cmp	r3, #5
 8009310:	d107      	bne.n	8009322 <system_manager_check_state+0x10a>
 8009312:	4b3e      	ldr	r3, [pc, #248]	; (800940c <system_manager_check_state+0x1f4>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b03      	cmp	r3, #3
 8009318:	d103      	bne.n	8009322 <system_manager_check_state+0x10a>
            system_state = THEME_STATE;
 800931a:	4b3b      	ldr	r3, [pc, #236]	; (8009408 <system_manager_check_state+0x1f0>)
 800931c:	2206      	movs	r2, #6
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	e013      	b.n	800934a <system_manager_check_state+0x132>

        else if (*button_state == CLICK_SELECT_BUTTON && system_id_app == PC_CONTROL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b05      	cmp	r3, #5
 8009328:	d107      	bne.n	800933a <system_manager_check_state+0x122>
 800932a:	4b38      	ldr	r3, [pc, #224]	; (800940c <system_manager_check_state+0x1f4>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b05      	cmp	r3, #5
 8009330:	d103      	bne.n	800933a <system_manager_check_state+0x122>
            system_state = PC_CONTROL_STATE;
 8009332:	4b35      	ldr	r3, [pc, #212]	; (8009408 <system_manager_check_state+0x1f0>)
 8009334:	2208      	movs	r2, #8
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	e007      	b.n	800934a <system_manager_check_state+0x132>

        else if (*button_state == CLICK_CANCEL_BUTTON)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b06      	cmp	r3, #6
 8009340:	d151      	bne.n	80093e6 <system_manager_check_state+0x1ce>
            system_state = WAIT_STATE;
 8009342:	4b31      	ldr	r3, [pc, #196]	; (8009408 <system_manager_check_state+0x1f0>)
 8009344:	2202      	movs	r2, #2
 8009346:	701a      	strb	r2, [r3, #0]

        break;
 8009348:	e04d      	b.n	80093e6 <system_manager_check_state+0x1ce>
 800934a:	e04c      	b.n	80093e6 <system_manager_check_state+0x1ce>
    case GAME_STATE:
        /* Game state handle */
        if (*button_state == HOLD_CANCEL_BUTTON)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b0c      	cmp	r3, #12
 8009352:	d102      	bne.n	800935a <system_manager_check_state+0x142>
            system_state = WAIT_STATE;
 8009354:	4b2c      	ldr	r3, [pc, #176]	; (8009408 <system_manager_check_state+0x1f0>)
 8009356:	2202      	movs	r2, #2
 8009358:	701a      	strb	r2, [r3, #0]
        if (*button_state == CLICK_CANCEL_BUTTON)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b06      	cmp	r3, #6
 8009360:	d143      	bne.n	80093ea <system_manager_check_state+0x1d2>
            system_state = MENU_STATE;
 8009362:	4b29      	ldr	r3, [pc, #164]	; (8009408 <system_manager_check_state+0x1f0>)
 8009364:	2203      	movs	r2, #3
 8009366:	701a      	strb	r2, [r3, #0]
        break;
 8009368:	e03f      	b.n	80093ea <system_manager_check_state+0x1d2>
    case TIME_STATE:
        /* Time state handle */
        if (*button_state == CLICK_CANCEL_BUTTON)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b06      	cmp	r3, #6
 8009370:	d13d      	bne.n	80093ee <system_manager_check_state+0x1d6>
        {
            system_state  = MENU_STATE;
 8009372:	4b25      	ldr	r3, [pc, #148]	; (8009408 <system_manager_check_state+0x1f0>)
 8009374:	2203      	movs	r2, #3
 8009376:	701a      	strb	r2, [r3, #0]
            object_select = SYSTEM_SELECTING;
 8009378:	4b25      	ldr	r3, [pc, #148]	; (8009410 <system_manager_check_state+0x1f8>)
 800937a:	22ff      	movs	r2, #255	; 0xff
 800937c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800937e:	e036      	b.n	80093ee <system_manager_check_state+0x1d6>
    case THEME_STATE:
        /* Theme state handle */
        if (*button_state == CLICK_CANCEL_BUTTON || *button_state == HOLD_CANCEL_BUTTON)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b06      	cmp	r3, #6
 8009386:	d003      	beq.n	8009390 <system_manager_check_state+0x178>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b0c      	cmp	r3, #12
 800938e:	d130      	bne.n	80093f2 <system_manager_check_state+0x1da>
        {
            system_state  = MENU_STATE;
 8009390:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <system_manager_check_state+0x1f0>)
 8009392:	2203      	movs	r2, #3
 8009394:	701a      	strb	r2, [r3, #0]
            object_select = SYSTEM_SELECTING;
 8009396:	4b1e      	ldr	r3, [pc, #120]	; (8009410 <system_manager_check_state+0x1f8>)
 8009398:	22ff      	movs	r2, #255	; 0xff
 800939a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800939c:	e029      	b.n	80093f2 <system_manager_check_state+0x1da>
    case DIAGNOSTIC_STATE:
        /* Diagnostic state handle */
        if (*button_state == CLICK_CANCEL_BUTTON || *button_state == HOLD_CANCEL_BUTTON)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	2b06      	cmp	r3, #6
 80093a4:	d003      	beq.n	80093ae <system_manager_check_state+0x196>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b0c      	cmp	r3, #12
 80093ac:	d123      	bne.n	80093f6 <system_manager_check_state+0x1de>
        {
            system_state  = MENU_STATE;
 80093ae:	4b16      	ldr	r3, [pc, #88]	; (8009408 <system_manager_check_state+0x1f0>)
 80093b0:	2203      	movs	r2, #3
 80093b2:	701a      	strb	r2, [r3, #0]
            object_select = SYSTEM_SELECTING;
 80093b4:	4b16      	ldr	r3, [pc, #88]	; (8009410 <system_manager_check_state+0x1f8>)
 80093b6:	22ff      	movs	r2, #255	; 0xff
 80093b8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80093ba:	e01c      	b.n	80093f6 <system_manager_check_state+0x1de>
    case PC_CONTROL_STATE:
        /* PC Control state handle */
        if (*button_state == CLICK_CANCEL_BUTTON || *button_state == HOLD_CANCEL_BUTTON)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b06      	cmp	r3, #6
 80093c2:	d003      	beq.n	80093cc <system_manager_check_state+0x1b4>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b0c      	cmp	r3, #12
 80093ca:	d116      	bne.n	80093fa <system_manager_check_state+0x1e2>
        {
            system_state  = MENU_STATE;
 80093cc:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <system_manager_check_state+0x1f0>)
 80093ce:	2203      	movs	r2, #3
 80093d0:	701a      	strb	r2, [r3, #0]
            object_select = SYSTEM_SELECTING;
 80093d2:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <system_manager_check_state+0x1f8>)
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80093d8:	e00f      	b.n	80093fa <system_manager_check_state+0x1e2>
    default: break;
 80093da:	bf00      	nop
 80093dc:	e00e      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093de:	bf00      	nop
 80093e0:	e00c      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093e2:	bf00      	nop
 80093e4:	e00a      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093e6:	bf00      	nop
 80093e8:	e008      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093ea:	bf00      	nop
 80093ec:	e006      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093ee:	bf00      	nop
 80093f0:	e004      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <system_manager_check_state+0x1e4>
        break;
 80093fa:	bf00      	nop
    }

    return system_state;
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <system_manager_check_state+0x1f0>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	2000152e 	.word	0x2000152e
 800940c:	2000152f 	.word	0x2000152f
 8009410:	20001530 	.word	0x20001530

08009414 <system_manager_init>:

system_manager_error_t system_manager_init(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
    system_data_init();
 8009418:	f7fd f822 	bl	8006460 <system_data_init>
    system_game_init();
 800941c:	f7ff fc72 	bl	8008d04 <system_game_init>
    system_display_init();
 8009420:	f7fd fb48 	bl	8006ab4 <system_display_init>
    system_time_init();
 8009424:	f000 fb34 	bl	8009a90 <system_time_init>
    system_pc_control_init();
 8009428:	f000 f9b6 	bl	8009798 <system_pc_control_init>
    drv_button_init();
 800942c:	f7f8 fc4e 	bl	8001ccc <drv_button_init>
    drv_buzzer_init();
 8009430:	f7f8 fdb2 	bl	8001f98 <drv_buzzer_init>
    drv_led_init();
 8009434:	f7f9 fc28 	bl	8002c88 <drv_led_init>

    drv_uart_receive();
 8009438:	f7fb f9ca 	bl	80047d0 <drv_uart_receive>
    return SYSTEM_MANAGER_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <system_manager_run>:

system_manager_error_t system_manager_run(button_name_t *button_state)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
    system_manager_error_t status             = SYSTEM_MANAGER_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
    system_state_t         system_state_check = BOOT_STATE;
 8009450:	2301      	movs	r3, #1
 8009452:	73bb      	strb	r3, [r7, #14]

    while (status == SYSTEM_MANAGER_OK)
 8009454:	e078      	b.n	8009548 <system_manager_run+0x104>
    {
        system_state_check = system_manager_check_state(button_state);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff fede 	bl	8009218 <system_manager_check_state>
 800945c:	4603      	mov	r3, r0
 800945e:	73bb      	strb	r3, [r7, #14]

        if (system_state_check == BOOT_STATE)
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d102      	bne.n	800946c <system_manager_run+0x28>
        {
            system_display_boot_state();
 8009466:	f7fe ff59 	bl	800831c <system_display_boot_state>
 800946a:	e06d      	b.n	8009548 <system_manager_run+0x104>
        }

        else if (system_state_check == WAIT_STATE)
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d105      	bne.n	800947e <system_manager_run+0x3a>
        {
            system_display_wait_state();
 8009472:	f7fe ff9f 	bl	80083b4 <system_display_wait_state>

            object_select = SYSTEM_SELECTING;
 8009476:	4b38      	ldr	r3, [pc, #224]	; (8009558 <system_manager_run+0x114>)
 8009478:	22ff      	movs	r2, #255	; 0xff
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	e064      	b.n	8009548 <system_manager_run+0x104>
        }

        else if (system_state_check == MENU_STATE)
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	2b03      	cmp	r3, #3
 8009482:	d105      	bne.n	8009490 <system_manager_run+0x4c>
        {
            system_display_menu_state(system_id_app);
 8009484:	4b35      	ldr	r3, [pc, #212]	; (800955c <system_manager_run+0x118>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe ffa5 	bl	80083d8 <system_display_menu_state>
 800948e:	e05b      	b.n	8009548 <system_manager_run+0x104>
        }

        else if (system_state_check == TIME_STATE)
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	2b05      	cmp	r3, #5
 8009494:	d10d      	bne.n	80094b2 <system_manager_run+0x6e>
        {
            if (object_select == SYSTEM_SELECTING)
 8009496:	4b30      	ldr	r3, [pc, #192]	; (8009558 <system_manager_run+0x114>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2bff      	cmp	r3, #255	; 0xff
 800949c:	d104      	bne.n	80094a8 <system_manager_run+0x64>
            {
                system_display_category_clock(button_state, &object_select);
 800949e:	492e      	ldr	r1, [pc, #184]	; (8009558 <system_manager_run+0x114>)
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff f991 	bl	80087c8 <system_display_category_clock>
 80094a6:	e04f      	b.n	8009548 <system_manager_run+0x104>
            }
            else
            {
            	system_display_clock_handle(button_state, &object_select);
 80094a8:	492b      	ldr	r1, [pc, #172]	; (8009558 <system_manager_run+0x114>)
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fbe8 	bl	8008c80 <system_display_clock_handle>
 80094b0:	e04a      	b.n	8009548 <system_manager_run+0x104>
            }
        }

        else if (system_state_check == THEME_STATE)
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b06      	cmp	r3, #6
 80094b6:	d10d      	bne.n	80094d4 <system_manager_run+0x90>
        {
            if (object_select == SYSTEM_SELECTING)
 80094b8:	4b27      	ldr	r3, [pc, #156]	; (8009558 <system_manager_run+0x114>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2bff      	cmp	r3, #255	; 0xff
 80094be:	d104      	bne.n	80094ca <system_manager_run+0x86>
            {
                system_display_theme_list(button_state, &object_select);
 80094c0:	4925      	ldr	r1, [pc, #148]	; (8009558 <system_manager_run+0x114>)
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff fa24 	bl	8008910 <system_display_theme_list>
 80094c8:	e03e      	b.n	8009548 <system_manager_run+0x104>
            }
            else
            {
            	system_display_clock_handle(button_state, &object_select);
 80094ca:	4923      	ldr	r1, [pc, #140]	; (8009558 <system_manager_run+0x114>)
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fbd7 	bl	8008c80 <system_display_clock_handle>
 80094d2:	e039      	b.n	8009548 <system_manager_run+0x104>
            }
        }

        else if (system_state_check == GAME_STATE)
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b04      	cmp	r3, #4
 80094d8:	d113      	bne.n	8009502 <system_manager_run+0xbe>
        {
           if( system_game_run(button_state) == 1)
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7ff fc24 	bl	8008d28 <system_game_run>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d103      	bne.n	80094ee <system_manager_run+0xaa>
           {
        	   system_state = MENU_STATE ;
 80094e6:	4b1e      	ldr	r3, [pc, #120]	; (8009560 <system_manager_run+0x11c>)
 80094e8:	2203      	movs	r2, #3
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e02c      	b.n	8009548 <system_manager_run+0x104>
           }
           else if (system_game_run(button_state) == 2)
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff fc1a 	bl	8008d28 <system_game_run>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d126      	bne.n	8009548 <system_manager_run+0x104>
           {
        	   system_state = WAIT_STATE;
 80094fa:	4b19      	ldr	r3, [pc, #100]	; (8009560 <system_manager_run+0x11c>)
 80094fc:	2202      	movs	r2, #2
 80094fe:	701a      	strb	r2, [r3, #0]
 8009500:	e022      	b.n	8009548 <system_manager_run+0x104>
           }
        }

        else if (system_state_check == DIAGNOSTIC_STATE)
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	2b07      	cmp	r3, #7
 8009506:	d10d      	bne.n	8009524 <system_manager_run+0xe0>
        {
            if (object_select == SYSTEM_SELECTING)
 8009508:	4b13      	ldr	r3, [pc, #76]	; (8009558 <system_manager_run+0x114>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2bff      	cmp	r3, #255	; 0xff
 800950e:	d104      	bne.n	800951a <system_manager_run+0xd6>
            {
                system_display_diagnostic(button_state, &object_select);
 8009510:	4911      	ldr	r1, [pc, #68]	; (8009558 <system_manager_run+0x114>)
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff f812 	bl	800853c <system_display_diagnostic>
 8009518:	e016      	b.n	8009548 <system_manager_run+0x104>
            }
            else
            {
                system_diagnostic_handle(button_state, &object_select);
 800951a:	490f      	ldr	r1, [pc, #60]	; (8009558 <system_manager_run+0x114>)
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fd fa8f 	bl	8006a40 <system_diagnostic_handle>
 8009522:	e011      	b.n	8009548 <system_manager_run+0x104>
            }

        }

        else if (system_state_check == PC_CONTROL_STATE)
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b08      	cmp	r3, #8
 8009528:	d10e      	bne.n	8009548 <system_manager_run+0x104>
        {
            if (object_select == SYSTEM_SELECTING)
 800952a:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <system_manager_run+0x114>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2bff      	cmp	r3, #255	; 0xff
 8009530:	d106      	bne.n	8009540 <system_manager_run+0xfc>
            {
                system_display_pc_control_mode(button_state, &object_select);
 8009532:	4909      	ldr	r1, [pc, #36]	; (8009558 <system_manager_run+0x114>)
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff f8ab 	bl	8008690 <system_display_pc_control_mode>
                system_pc_control_reset();
 800953a:	f000 f921 	bl	8009780 <system_pc_control_reset>
 800953e:	e003      	b.n	8009548 <system_manager_run+0x104>
            }
            else
            {
                system_pc_control_handle(button_state, &object_select);
 8009540:	4905      	ldr	r1, [pc, #20]	; (8009558 <system_manager_run+0x114>)
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fa54 	bl	80099f0 <system_pc_control_handle>
    while (status == SYSTEM_MANAGER_OK)
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d083      	beq.n	8009456 <system_manager_run+0x12>
            }
        }
    }

    return status;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20001530 	.word	0x20001530
 800955c:	2000152f 	.word	0x2000152f
 8009560:	2000152e 	.word	0x2000152e

08009564 <str_to_byte>:
static bool system_pc_check_space(uint8_t command_array[22]);

static bool system_pc_check_command_set_time(uint8_t command_array[22]);
/* Function definitions ----------------------------------------------- */
static uint8_t str_to_byte(char *buffer)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
    uint8_t byte_data;

    byte_data = ((buffer[0] - '0') * 10) + (buffer[1] - '0');
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	3b30      	subs	r3, #48	; 0x30
 8009572:	b2db      	uxtb	r3, r3
 8009574:	461a      	mov	r2, r3
 8009576:	0092      	lsls	r2, r2, #2
 8009578:	4413      	add	r3, r2
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	b2da      	uxtb	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3301      	adds	r3, #1
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	4413      	add	r3, r2
 8009586:	b2db      	uxtb	r3, r3
 8009588:	3b30      	subs	r3, #48	; 0x30
 800958a:	73fb      	strb	r3, [r7, #15]

    return byte_data;
 800958c:	7bfb      	ldrb	r3, [r7, #15]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <system_pc_check_year>:

static bool system_pc_check_year(uint8_t command_array[22])
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
    uint8_t year = str_to_byte(command_array + 6);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3306      	adds	r3, #6
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff ffdc 	bl	8009564 <str_to_byte>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

    if (year > 99 || year < 0)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b63      	cmp	r3, #99	; 0x63
 80095b4:	d901      	bls.n	80095ba <system_pc_check_year+0x20>
        return false;
 80095b6:	2300      	movs	r3, #0
 80095b8:	e000      	b.n	80095bc <system_pc_check_year+0x22>
    else
        return true;
 80095ba:	2301      	movs	r3, #1
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <system_pc_check_month>:

static bool system_pc_check_month(uint8_t command_array[22])
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
    uint8_t month = str_to_byte(command_array + 9);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3309      	adds	r3, #9
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff ffc7 	bl	8009564 <str_to_byte>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]

    if (month > 12 || month < 0)
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	2b0c      	cmp	r3, #12
 80095de:	d901      	bls.n	80095e4 <system_pc_check_month+0x20>
        return false;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e000      	b.n	80095e6 <system_pc_check_month+0x22>
    else
        return true;
 80095e4:	2301      	movs	r3, #1
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <system_pc_check_day>:

static bool system_pc_check_day(uint8_t command_array[22])
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
    uint8_t day = str_to_byte(command_array + 12);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	330c      	adds	r3, #12
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff ffb2 	bl	8009564 <str_to_byte>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]

    if (day > 31 || day < 0)
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	2b1f      	cmp	r3, #31
 8009608:	d901      	bls.n	800960e <system_pc_check_day+0x20>
        return false;
 800960a:	2300      	movs	r3, #0
 800960c:	e000      	b.n	8009610 <system_pc_check_day+0x22>
    else
        return true;
 800960e:	2301      	movs	r3, #1
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <system_pc_check_hour>:

static bool system_pc_check_hour(uint8_t command_array[22])
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
    uint8_t hour = str_to_byte(command_array + 15);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	330f      	adds	r3, #15
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff ff9d 	bl	8009564 <str_to_byte>
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]

    if (hour > 23 || hour < 0)
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b17      	cmp	r3, #23
 8009632:	d901      	bls.n	8009638 <system_pc_check_hour+0x20>
        return false;
 8009634:	2300      	movs	r3, #0
 8009636:	e000      	b.n	800963a <system_pc_check_hour+0x22>
    else
        return true;
 8009638:	2301      	movs	r3, #1
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <system_pc_check_min>:

static bool system_pc_check_min(uint8_t command_array[22])
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
    uint8_t min = str_to_byte(command_array + 18);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3312      	adds	r3, #18
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff ff88 	bl	8009564 <str_to_byte>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]

    if (min > 59 || min < 0)
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	2b3b      	cmp	r3, #59	; 0x3b
 800965c:	d901      	bls.n	8009662 <system_pc_check_min+0x20>
        return false;
 800965e:	2300      	movs	r3, #0
 8009660:	e000      	b.n	8009664 <system_pc_check_min+0x22>
    else
        return true;
 8009662:	2301      	movs	r3, #1
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <system_pc_check_sec>:

static bool system_pc_check_sec(uint8_t command_array[22])
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
    uint8_t sec = str_to_byte(command_array + 21);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3315      	adds	r3, #21
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff ff73 	bl	8009564 <str_to_byte>
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]

    if (sec > 59 || sec < 0)
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	2b3b      	cmp	r3, #59	; 0x3b
 8009686:	d901      	bls.n	800968c <system_pc_check_sec+0x20>
        return false;
 8009688:	2300      	movs	r3, #0
 800968a:	e000      	b.n	800968e <system_pc_check_sec+0x22>
    else
        return true;
 800968c:	2301      	movs	r3, #1
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <system_pc_check_space>:

static bool system_pc_check_space(uint8_t command_array[22])
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
    if (command_array[8] != '-' || command_array[11] != '-' || command_array[17] != ':' || command_array[20] != ':')
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3308      	adds	r3, #8
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b2d      	cmp	r3, #45	; 0x2d
 80096a6:	d10e      	bne.n	80096c6 <system_pc_check_space+0x30>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	330b      	adds	r3, #11
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b2d      	cmp	r3, #45	; 0x2d
 80096b0:	d109      	bne.n	80096c6 <system_pc_check_space+0x30>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	3311      	adds	r3, #17
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b3a      	cmp	r3, #58	; 0x3a
 80096ba:	d104      	bne.n	80096c6 <system_pc_check_space+0x30>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3314      	adds	r3, #20
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b3a      	cmp	r3, #58	; 0x3a
 80096c4:	d001      	beq.n	80096ca <system_pc_check_space+0x34>
        return false;
 80096c6:	2300      	movs	r3, #0
 80096c8:	e000      	b.n	80096cc <system_pc_check_space+0x36>
    else
        return true;
 80096ca:	2301      	movs	r3, #1
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <system_pc_check_command_set_time>:

static bool system_pc_check_command_set_time(uint8_t command_array[22])
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
    if ((system_pc_check_year(command_array) && system_pc_check_month(command_array) && system_pc_check_day(command_array)
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff ff5a 	bl	800959a <system_pc_check_year>
 80096e6:	4603      	mov	r3, r0
         && system_pc_check_hour(command_array) && system_pc_check_min(command_array) && system_pc_check_sec(command_array)
         && system_pc_check_space(command_array))
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d025      	beq.n	8009738 <system_pc_check_command_set_time+0x60>
    if ((system_pc_check_year(command_array) && system_pc_check_month(command_array) && system_pc_check_day(command_array)
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff ff69 	bl	80095c4 <system_pc_check_month>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d01f      	beq.n	8009738 <system_pc_check_command_set_time+0x60>
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff ff78 	bl	80095ee <system_pc_check_day>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d019      	beq.n	8009738 <system_pc_check_command_set_time+0x60>
         && system_pc_check_hour(command_array) && system_pc_check_min(command_array) && system_pc_check_sec(command_array)
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff ff87 	bl	8009618 <system_pc_check_hour>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d013      	beq.n	8009738 <system_pc_check_command_set_time+0x60>
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff ff96 	bl	8009642 <system_pc_check_min>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00d      	beq.n	8009738 <system_pc_check_command_set_time+0x60>
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff ffa5 	bl	800966c <system_pc_check_sec>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <system_pc_check_command_set_time+0x60>
         && system_pc_check_space(command_array))
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7ff ffb4 	bl	8009696 <system_pc_check_space>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <system_pc_check_command_set_time+0x60>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <system_pc_check_command_set_time+0x62>
 8009738:	2300      	movs	r3, #0
    if ((system_pc_check_year(command_array) && system_pc_check_month(command_array) && system_pc_check_day(command_array)
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <system_pc_check_command_set_time+0x6a>
        == true)
        return true;
 800973e:	2301      	movs	r3, #1
 8009740:	e000      	b.n	8009744 <system_pc_check_command_set_time+0x6c>
    else
        return false;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <system_pc_reset_command_array>:

static void system_pc_reset_command_array(void)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < sizeof(command_array) / sizeof(command_array[0]); i++)
 8009752:	2300      	movs	r3, #0
 8009754:	71fb      	strb	r3, [r7, #7]
 8009756:	e006      	b.n	8009766 <system_pc_reset_command_array+0x1a>
    {
        command_array[i] = 0x00u;
 8009758:	79fb      	ldrb	r3, [r7, #7]
 800975a:	4a08      	ldr	r2, [pc, #32]	; (800977c <system_pc_reset_command_array+0x30>)
 800975c:	2100      	movs	r1, #0
 800975e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < sizeof(command_array) / sizeof(command_array[0]); i++)
 8009760:	79fb      	ldrb	r3, [r7, #7]
 8009762:	3301      	adds	r3, #1
 8009764:	71fb      	strb	r3, [r7, #7]
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	2b1d      	cmp	r3, #29
 800976a:	d9f5      	bls.n	8009758 <system_pc_reset_command_array+0xc>
    }
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20005010 	.word	0x20005010

08009780 <system_pc_control_reset>:

void system_pc_control_reset(void)
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
    enable_transmit = true;
 8009784:	4b03      	ldr	r3, [pc, #12]	; (8009794 <system_pc_control_reset+0x14>)
 8009786:	2201      	movs	r2, #1
 8009788:	701a      	strb	r2, [r3, #0]
}
 800978a:	bf00      	nop
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	20001531 	.word	0x20001531

08009798 <system_pc_control_init>:

system_pc_control_error_t system_pc_control_init(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
    drv_uart_init();
 800979c:	f7fb f800 	bl	80047a0 <drv_uart_init>
    return SYSTEM_PC_CONTROL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <system_pc_control_set_time>:

system_pc_control_error_t system_pc_control_set_time(button_name_t *button_state)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    /* Display screen and some instructions */
    uint8_t mode = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
    system_data_get_type_clock(&mode);
 80097b4:	f107 030f 	add.w	r3, r7, #15
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fc fea9 	bl	8006510 <system_data_get_type_clock>
    system_display_clock(mode);
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fd63 	bl	800828c <system_display_clock>

    /* Transmit notify this is set time mode */
    if (enable_transmit == true)
 80097c6:	4b1e      	ldr	r3, [pc, #120]	; (8009840 <system_pc_control_set_time+0x98>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d008      	beq.n	80097e0 <system_pc_control_set_time+0x38>
    {
        drv_uart_printf((uint8_t *) "\r\n THIS IS SET TIME MODE, PLEASE GIVE ME THE COMMAND: \r\n");
 80097ce:	481d      	ldr	r0, [pc, #116]	; (8009844 <system_pc_control_set_time+0x9c>)
 80097d0:	f7fa ffee 	bl	80047b0 <drv_uart_printf>
        drv_uart_printf((uint8_t *) "\r\n SET YYYY-MM-DD HH:MM:SS\r\n");
 80097d4:	481c      	ldr	r0, [pc, #112]	; (8009848 <system_pc_control_set_time+0xa0>)
 80097d6:	f7fa ffeb 	bl	80047b0 <drv_uart_printf>
        enable_transmit = false;
 80097da:	4b19      	ldr	r3, [pc, #100]	; (8009840 <system_pc_control_set_time+0x98>)
 80097dc:	2200      	movs	r2, #0
 80097de:	701a      	strb	r2, [r3, #0]

    /* Compare received data and do command */
    /* Check cbuffer to determine number of byte unread */

    /* Read data from cbuffer */
    drv_uart_read_cb_data(command_array, drv_uart_num_unread_cb_data());
 80097e0:	f7fb f806 	bl	80047f0 <drv_uart_num_unread_cb_data>
 80097e4:	4603      	mov	r3, r0
 80097e6:	4619      	mov	r1, r3
 80097e8:	4818      	ldr	r0, [pc, #96]	; (800984c <system_pc_control_set_time+0xa4>)
 80097ea:	f7fb f80b 	bl	8004804 <drv_uart_read_cb_data>
    /* If it is SET YYYY-MM-HH HH:MM:SS */
    if (command_array[0] == 'S' && command_array[1] == 'E' && command_array[2] == 'T')
 80097ee:	4b17      	ldr	r3, [pc, #92]	; (800984c <system_pc_control_set_time+0xa4>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b53      	cmp	r3, #83	; 0x53
 80097f4:	d11d      	bne.n	8009832 <system_pc_control_set_time+0x8a>
 80097f6:	4b15      	ldr	r3, [pc, #84]	; (800984c <system_pc_control_set_time+0xa4>)
 80097f8:	785b      	ldrb	r3, [r3, #1]
 80097fa:	2b45      	cmp	r3, #69	; 0x45
 80097fc:	d119      	bne.n	8009832 <system_pc_control_set_time+0x8a>
 80097fe:	4b13      	ldr	r3, [pc, #76]	; (800984c <system_pc_control_set_time+0xa4>)
 8009800:	789b      	ldrb	r3, [r3, #2]
 8009802:	2b54      	cmp	r3, #84	; 0x54
 8009804:	d115      	bne.n	8009832 <system_pc_control_set_time+0x8a>
    {
        /* Check if time input is invalid */
        // Check year
        if (system_pc_check_command_set_time(command_array) == true)
 8009806:	4811      	ldr	r0, [pc, #68]	; (800984c <system_pc_control_set_time+0xa4>)
 8009808:	f7ff ff66 	bl	80096d8 <system_pc_check_command_set_time>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <system_pc_control_set_time+0x80>
        {
            /* Change time and reset command array*/
            drv_ssd1306_fill(0);
 8009812:	2000      	movs	r0, #0
 8009814:	f7f9 fbea 	bl	8002fec <drv_ssd1306_fill>
            ds1307_set_time(&ds1307, command_array + 4);
 8009818:	4b0d      	ldr	r3, [pc, #52]	; (8009850 <system_pc_control_set_time+0xa8>)
 800981a:	4619      	mov	r1, r3
 800981c:	480d      	ldr	r0, [pc, #52]	; (8009854 <system_pc_control_set_time+0xac>)
 800981e:	f7f9 f923 	bl	8002a68 <ds1307_set_time>
            system_pc_reset_command_array();
 8009822:	f7ff ff93 	bl	800974c <system_pc_reset_command_array>
 8009826:	e004      	b.n	8009832 <system_pc_control_set_time+0x8a>
        }
        else
        {
            drv_uart_printf((uint8_t *) "\r\n WRONG COMMAND, PLEASE TRY AGAIN \r\n");
 8009828:	480b      	ldr	r0, [pc, #44]	; (8009858 <system_pc_control_set_time+0xb0>)
 800982a:	f7fa ffc1 	bl	80047b0 <drv_uart_printf>
            system_pc_reset_command_array();
 800982e:	f7ff ff8d 	bl	800974c <system_pc_reset_command_array>
        }
    }
    /* If it is SAVE */

    system_display_update();
 8009832:	f7ff fa5d 	bl	8008cf0 <system_display_update>
    return SYSTEM_PC_CONTROL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20001531 	.word	0x20001531
 8009844:	08014f68 	.word	0x08014f68
 8009848:	08014fa4 	.word	0x08014fa4
 800984c:	20005010 	.word	0x20005010
 8009850:	20005014 	.word	0x20005014
 8009854:	20005044 	.word	0x20005044
 8009858:	08014fc4 	.word	0x08014fc4

0800985c <system_pc_control_set_reminder>:

system_pc_control_error_t system_pc_control_set_reminder(button_name_t *button_state)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
    /* Display screen and some instructions */
    uint8_t mode = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
    system_data_get_type_clock(&mode);
 8009868:	f107 030f 	add.w	r3, r7, #15
 800986c:	4618      	mov	r0, r3
 800986e:	f7fc fe4f 	bl	8006510 <system_data_get_type_clock>
    system_display_clock(mode);
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe fd09 	bl	800828c <system_display_clock>

    /* Transmit notify this is set time mode */
    if (enable_transmit == true)
 800987a:	4b1e      	ldr	r3, [pc, #120]	; (80098f4 <system_pc_control_set_reminder+0x98>)
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d008      	beq.n	8009894 <system_pc_control_set_reminder+0x38>
    {
        drv_uart_printf((uint8_t *) "\r\n THIS IS SET REMINDER MODE, PLEASE GIVE ME THE COMMAND: \r\n");
 8009882:	481d      	ldr	r0, [pc, #116]	; (80098f8 <system_pc_control_set_reminder+0x9c>)
 8009884:	f7fa ff94 	bl	80047b0 <drv_uart_printf>
        drv_uart_printf((uint8_t *) "\r\n SET YYYY-MM-DD HH:MM:SS\r\n");
 8009888:	481c      	ldr	r0, [pc, #112]	; (80098fc <system_pc_control_set_reminder+0xa0>)
 800988a:	f7fa ff91 	bl	80047b0 <drv_uart_printf>

        enable_transmit = false;
 800988e:	4b19      	ldr	r3, [pc, #100]	; (80098f4 <system_pc_control_set_reminder+0x98>)
 8009890:	2200      	movs	r2, #0
 8009892:	701a      	strb	r2, [r3, #0]

    /* Compare received data and do command */
    /* Check cbuffer to determine number of byte unread */

    /* Read data from cbuffer */
    drv_uart_read_cb_data(command_array, drv_uart_num_unread_cb_data());
 8009894:	f7fa ffac 	bl	80047f0 <drv_uart_num_unread_cb_data>
 8009898:	4603      	mov	r3, r0
 800989a:	4619      	mov	r1, r3
 800989c:	4818      	ldr	r0, [pc, #96]	; (8009900 <system_pc_control_set_reminder+0xa4>)
 800989e:	f7fa ffb1 	bl	8004804 <drv_uart_read_cb_data>

    if (command_array[0] == 'S' && command_array[1] == 'E' && command_array[2] == 'T')
 80098a2:	4b17      	ldr	r3, [pc, #92]	; (8009900 <system_pc_control_set_reminder+0xa4>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b53      	cmp	r3, #83	; 0x53
 80098a8:	d11f      	bne.n	80098ea <system_pc_control_set_reminder+0x8e>
 80098aa:	4b15      	ldr	r3, [pc, #84]	; (8009900 <system_pc_control_set_reminder+0xa4>)
 80098ac:	785b      	ldrb	r3, [r3, #1]
 80098ae:	2b45      	cmp	r3, #69	; 0x45
 80098b0:	d11b      	bne.n	80098ea <system_pc_control_set_reminder+0x8e>
 80098b2:	4b13      	ldr	r3, [pc, #76]	; (8009900 <system_pc_control_set_reminder+0xa4>)
 80098b4:	789b      	ldrb	r3, [r3, #2]
 80098b6:	2b54      	cmp	r3, #84	; 0x54
 80098b8:	d117      	bne.n	80098ea <system_pc_control_set_reminder+0x8e>
    {
        /* Check if time input is invalid */
        // Check year
        if (system_pc_check_command_set_time(command_array) == true)
 80098ba:	4811      	ldr	r0, [pc, #68]	; (8009900 <system_pc_control_set_reminder+0xa4>)
 80098bc:	f7ff ff0c 	bl	80096d8 <system_pc_check_command_set_time>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00c      	beq.n	80098e0 <system_pc_control_set_reminder+0x84>
        {
            /* Change time and reset command array*/
            drv_ssd1306_fill(0);
 80098c6:	2000      	movs	r0, #0
 80098c8:	f7f9 fb90 	bl	8002fec <drv_ssd1306_fill>
            system_time_set_reminder_str(command_array + 4);
 80098cc:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <system_pc_control_set_reminder+0xa8>)
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f99a 	bl	8009c08 <system_time_set_reminder_str>
            drv_uart_printf((uint8_t *) "\r\n OKE \r\n");
 80098d4:	480c      	ldr	r0, [pc, #48]	; (8009908 <system_pc_control_set_reminder+0xac>)
 80098d6:	f7fa ff6b 	bl	80047b0 <drv_uart_printf>
            system_pc_reset_command_array();
 80098da:	f7ff ff37 	bl	800974c <system_pc_reset_command_array>
 80098de:	e004      	b.n	80098ea <system_pc_control_set_reminder+0x8e>
        }
        else
        {
            drv_uart_printf((uint8_t *) "\r\n WRONG COMMAND, PLEASE TRY AGAIN \r\n");
 80098e0:	480a      	ldr	r0, [pc, #40]	; (800990c <system_pc_control_set_reminder+0xb0>)
 80098e2:	f7fa ff65 	bl	80047b0 <drv_uart_printf>
            system_pc_reset_command_array();
 80098e6:	f7ff ff31 	bl	800974c <system_pc_reset_command_array>
        }
    }
}
 80098ea:	bf00      	nop
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20001531 	.word	0x20001531
 80098f8:	08014fec 	.word	0x08014fec
 80098fc:	08014fa4 	.word	0x08014fa4
 8009900:	20005010 	.word	0x20005010
 8009904:	20005014 	.word	0x20005014
 8009908:	0801502c 	.word	0x0801502c
 800990c:	08014fc4 	.word	0x08014fc4

08009910 <system_pc_control_set_theme>:

system_pc_control_error_t system_pc_control_set_theme(button_name_t *button_state)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
    /* Display screen and some instructions */
    uint8_t mode = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
    system_data_get_type_clock(&mode);
 800991c:	f107 030f 	add.w	r3, r7, #15
 8009920:	4618      	mov	r0, r3
 8009922:	f7fc fdf5 	bl	8006510 <system_data_get_type_clock>
    system_display_clock(mode);
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fcaf 	bl	800828c <system_display_clock>
    /* Transmit notify this is set time mode */
    if (enable_transmit == true)
 800992e:	4b2c      	ldr	r3, [pc, #176]	; (80099e0 <system_pc_control_set_theme+0xd0>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <system_pc_control_set_theme+0x32>
    {
        drv_uart_printf((uint8_t *) "\r\n THIS IS CHANGE THEME MODE, PLEASE GIVE ME THE COMMAND: \r\n");
 8009936:	482b      	ldr	r0, [pc, #172]	; (80099e4 <system_pc_control_set_theme+0xd4>)
 8009938:	f7fa ff3a 	bl	80047b0 <drv_uart_printf>

        enable_transmit = false;
 800993c:	4b28      	ldr	r3, [pc, #160]	; (80099e0 <system_pc_control_set_theme+0xd0>)
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]

    /* Compare received data and do command */
    /* Check cbuffer to determine number of byte unread */

    /* Read data from cbuffer */
    drv_uart_read_cb_data(command_array, drv_uart_num_unread_cb_data());
 8009942:	f7fa ff55 	bl	80047f0 <drv_uart_num_unread_cb_data>
 8009946:	4603      	mov	r3, r0
 8009948:	4619      	mov	r1, r3
 800994a:	4827      	ldr	r0, [pc, #156]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 800994c:	f7fa ff5a 	bl	8004804 <drv_uart_read_cb_data>

    if (command_array[0] == 'S' && command_array[1] == 'E' && command_array[2] == 'T')
 8009950:	4b25      	ldr	r3, [pc, #148]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b53      	cmp	r3, #83	; 0x53
 8009956:	d13c      	bne.n	80099d2 <system_pc_control_set_theme+0xc2>
 8009958:	4b23      	ldr	r3, [pc, #140]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 800995a:	785b      	ldrb	r3, [r3, #1]
 800995c:	2b45      	cmp	r3, #69	; 0x45
 800995e:	d138      	bne.n	80099d2 <system_pc_control_set_theme+0xc2>
 8009960:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 8009962:	789b      	ldrb	r3, [r3, #2]
 8009964:	2b54      	cmp	r3, #84	; 0x54
 8009966:	d134      	bne.n	80099d2 <system_pc_control_set_theme+0xc2>
    {
        if (command_array[4] == 'D' && command_array[5] == 'A' && command_array[6] == 'R' && command_array[7] == 'K')
 8009968:	4b1f      	ldr	r3, [pc, #124]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 800996a:	791b      	ldrb	r3, [r3, #4]
 800996c:	2b44      	cmp	r3, #68	; 0x44
 800996e:	d111      	bne.n	8009994 <system_pc_control_set_theme+0x84>
 8009970:	4b1d      	ldr	r3, [pc, #116]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 8009972:	795b      	ldrb	r3, [r3, #5]
 8009974:	2b41      	cmp	r3, #65	; 0x41
 8009976:	d10d      	bne.n	8009994 <system_pc_control_set_theme+0x84>
 8009978:	4b1b      	ldr	r3, [pc, #108]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 800997a:	799b      	ldrb	r3, [r3, #6]
 800997c:	2b52      	cmp	r3, #82	; 0x52
 800997e:	d109      	bne.n	8009994 <system_pc_control_set_theme+0x84>
 8009980:	4b19      	ldr	r3, [pc, #100]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 8009982:	79db      	ldrb	r3, [r3, #7]
 8009984:	2b4b      	cmp	r3, #75	; 0x4b
 8009986:	d105      	bne.n	8009994 <system_pc_control_set_theme+0x84>
        {
            system_data_set_theme_color(0);
 8009988:	2000      	movs	r0, #0
 800998a:	f7fc fe07 	bl	800659c <system_data_set_theme_color>
            system_display_update_theme_color();
 800998e:	f7fd f967 	bl	8006c60 <system_display_update_theme_color>
 8009992:	e01e      	b.n	80099d2 <system_pc_control_set_theme+0xc2>
        }
        else if (command_array[4] == 'L' && command_array[5] == 'I' && command_array[6] == 'G' && command_array[7] == 'H'
 8009994:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 8009996:	791b      	ldrb	r3, [r3, #4]
 8009998:	2b4c      	cmp	r3, #76	; 0x4c
 800999a:	d115      	bne.n	80099c8 <system_pc_control_set_theme+0xb8>
 800999c:	4b12      	ldr	r3, [pc, #72]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 800999e:	795b      	ldrb	r3, [r3, #5]
 80099a0:	2b49      	cmp	r3, #73	; 0x49
 80099a2:	d111      	bne.n	80099c8 <system_pc_control_set_theme+0xb8>
 80099a4:	4b10      	ldr	r3, [pc, #64]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 80099a6:	799b      	ldrb	r3, [r3, #6]
 80099a8:	2b47      	cmp	r3, #71	; 0x47
 80099aa:	d10d      	bne.n	80099c8 <system_pc_control_set_theme+0xb8>
 80099ac:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 80099ae:	79db      	ldrb	r3, [r3, #7]
 80099b0:	2b48      	cmp	r3, #72	; 0x48
 80099b2:	d109      	bne.n	80099c8 <system_pc_control_set_theme+0xb8>
                 && command_array[8] == 'T')
 80099b4:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <system_pc_control_set_theme+0xd8>)
 80099b6:	7a1b      	ldrb	r3, [r3, #8]
 80099b8:	2b54      	cmp	r3, #84	; 0x54
 80099ba:	d105      	bne.n	80099c8 <system_pc_control_set_theme+0xb8>
        {
            system_data_set_theme_color(1);
 80099bc:	2001      	movs	r0, #1
 80099be:	f7fc fded 	bl	800659c <system_data_set_theme_color>
            system_display_update_theme_color();
 80099c2:	f7fd f94d 	bl	8006c60 <system_display_update_theme_color>
 80099c6:	e004      	b.n	80099d2 <system_pc_control_set_theme+0xc2>
        }
        else
        {
            drv_uart_printf((uint8_t *) "\r\n WRONG COMMAND, PLEASE TRY AGAIN \r\n");
 80099c8:	4808      	ldr	r0, [pc, #32]	; (80099ec <system_pc_control_set_theme+0xdc>)
 80099ca:	f7fa fef1 	bl	80047b0 <drv_uart_printf>
            system_pc_reset_command_array();
 80099ce:	f7ff febd 	bl	800974c <system_pc_reset_command_array>
        }
    }

    system_display_update();
 80099d2:	f7ff f98d 	bl	8008cf0 <system_display_update>
    return SYSTEM_PC_CONTROL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20001531 	.word	0x20001531
 80099e4:	08015038 	.word	0x08015038
 80099e8:	20005010 	.word	0x20005010
 80099ec:	08014fc4 	.word	0x08014fc4

080099f0 <system_pc_control_handle>:

system_pc_control_error_t system_pc_control_handle(button_name_t *button_state, uint8_t *object_select)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
    if (*object_select == SYSTEM_PC_CONTROL_SET_TIME)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <system_pc_control_handle+0x1a>
        system_pc_control_set_time(button_state);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fed0 	bl	80097a8 <system_pc_control_set_time>
 8009a08:	e00e      	b.n	8009a28 <system_pc_control_handle+0x38>

    else if (*object_select == SYSTEM_PC_CONTROL_SET_REMINDER)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d103      	bne.n	8009a1a <system_pc_control_handle+0x2a>
        system_pc_control_set_reminder(button_state);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff ff22 	bl	800985c <system_pc_control_set_reminder>
 8009a18:	e006      	b.n	8009a28 <system_pc_control_handle+0x38>

    else if (*object_select == SYSTEM_PC_CONTROL_SET_THEME)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d102      	bne.n	8009a28 <system_pc_control_handle+0x38>
        system_pc_control_set_theme(button_state);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff ff74 	bl	8009910 <system_pc_control_set_theme>

    return SYSTEM_PC_CONTROL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <str_to_byte>:
static uint8_t check_leap_year(uint16_t year);
static uint8_t day_of_month(uint8_t month, uint8_t year);

/* Function definitions ----------------------------------------------- */
static uint8_t str_to_byte(char *buffer)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
    uint8_t byte_data;

    byte_data = ((buffer[0] - '0') * 10) + (buffer[1] - '0');
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	3b30      	subs	r3, #48	; 0x30
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	461a      	mov	r2, r3
 8009a44:	0092      	lsls	r2, r2, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	4413      	add	r3, r2
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	3b30      	subs	r3, #48	; 0x30
 8009a58:	73fb      	strb	r3, [r7, #15]

    return byte_data;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <system_time_update_reminder>:

system_time_error_t system_time_update_reminder(void)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af04      	add	r7, sp, #16
    system_data_set_reminder(data_remider);
 8009a6e:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <system_time_update_reminder+0x24>)
 8009a70:	466c      	mov	r4, sp
 8009a72:	f103 0210 	add.w	r2, r3, #16
 8009a76:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a7e:	f7fc fd71 	bl	8006564 <system_data_set_reminder>
    return SYSTEM_TIME_OK;
 8009a82:	2301      	movs	r3, #1
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3704      	adds	r7, #4
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd90      	pop	{r4, r7, pc}
 8009a8c:	20005064 	.word	0x20005064

08009a90 <system_time_init>:

system_time_error_t system_time_init(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
    /* Init ds1307 ok */
    ds1307_init(&ds1307);
 8009a94:	4813      	ldr	r0, [pc, #76]	; (8009ae4 <system_time_init+0x54>)
 8009a96:	f7f9 f865 	bl	8002b64 <ds1307_init>
    cjmcu75_init(&cjmcu75);
 8009a9a:	4813      	ldr	r0, [pc, #76]	; (8009ae8 <system_time_init+0x58>)
 8009a9c:	f7f8 fd38 	bl	8002510 <cjmcu75_init>
    if (!ds1307.i2c_is_device_ready(ds1307.device_address))
 8009aa0:	4b10      	ldr	r3, [pc, #64]	; (8009ae4 <system_time_init+0x54>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	4a0f      	ldr	r2, [pc, #60]	; (8009ae4 <system_time_init+0x54>)
 8009aa6:	79d2      	ldrb	r2, [r2, #7]
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	4603      	mov	r3, r0
 8009aae:	f083 0301 	eor.w	r3, r3, #1
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <system_time_init+0x2c>
    {
        return SYSTEM_TIME_ERROR;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e011      	b.n	8009ae0 <system_time_init+0x50>
    }
    ds1307_initialize_success = true;
 8009abc:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <system_time_init+0x5c>)
 8009abe:	2201      	movs	r2, #1
 8009ac0:	701a      	strb	r2, [r3, #0]

    /* Update data reminder */
    system_time_get_reminder(&data_remider);
 8009ac2:	480b      	ldr	r0, [pc, #44]	; (8009af0 <system_time_init+0x60>)
 8009ac4:	f000 f924 	bl	8009d10 <system_time_get_reminder>
    if (data_remider.number_reminder == 0xFF)
 8009ac8:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <system_time_init+0x60>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2bff      	cmp	r3, #255	; 0xff
 8009ace:	d104      	bne.n	8009ada <system_time_init+0x4a>
    {
        data_remider.number_reminder = 0;
 8009ad0:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <system_time_init+0x60>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
        system_time_update_reminder();
 8009ad6:	f7ff ffc7 	bl	8009a68 <system_time_update_reminder>
    }

    bsp_tim11_start_tim_it();
 8009ada:	f7f7 ff99 	bl	8001a10 <bsp_tim11_start_tim_it>
    return SYSTEM_TIME_OK;
 8009ade:	2301      	movs	r3, #1
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	20005044 	.word	0x20005044
 8009ae8:	20005034 	.word	0x20005034
 8009aec:	2000505f 	.word	0x2000505f
 8009af0:	20005064 	.word	0x20005064

08009af4 <system_time_alarm_set_callback>:

system_time_error_t system_time_alarm_set_callback(void *cb)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
    system_time_alarm_callback = cb;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <system_time_alarm_set_callback+0x1c>)
 8009b00:	6013      	str	r3, [r2, #0]
    return SYSTEM_TIME_OK;
 8009b02:	2301      	movs	r3, #1
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	20005030 	.word	0x20005030

08009b14 <system_time_save_reminder>:

system_time_error_t system_time_save_reminder(system_time_reminder_t data_save_reminder)
{
 8009b14:	b084      	sub	sp, #16
 8009b16:	b5b0      	push	{r4, r5, r7, lr}
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	f107 0410 	add.w	r4, r7, #16
 8009b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    data_remider = data_save_reminder;
 8009b22:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <system_time_save_reminder+0x34>)
 8009b24:	461d      	mov	r5, r3
 8009b26:	f107 0410 	add.w	r4, r7, #16
 8009b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009b32:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    system_time_update_reminder();
 8009b36:	f7ff ff97 	bl	8009a68 <system_time_update_reminder>
    return SYSTEM_TIME_OK;
 8009b3a:	2301      	movs	r3, #1
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009b44:	b004      	add	sp, #16
 8009b46:	4770      	bx	lr
 8009b48:	20005064 	.word	0x20005064

08009b4c <system_time_set_reminder>:
                                             uint8_t hour,
                                             uint8_t day_of_week,
                                             uint8_t day_of_month,
                                             uint8_t mon,
                                             uint8_t year)
{
 8009b4c:	b590      	push	{r4, r7, lr}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	4611      	mov	r1, r2
 8009b58:	461a      	mov	r2, r3
 8009b5a:	4623      	mov	r3, r4
 8009b5c:	71fb      	strb	r3, [r7, #7]
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71bb      	strb	r3, [r7, #6]
 8009b62:	460b      	mov	r3, r1
 8009b64:	717b      	strb	r3, [r7, #5]
 8009b66:	4613      	mov	r3, r2
 8009b68:	713b      	strb	r3, [r7, #4]
    uint8_t i = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < SYSTEM_TIME_MAX_REMINDER; i++)
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
 8009b72:	e00c      	b.n	8009b8e <system_time_set_reminder+0x42>
    {
        if (!(data_remider.number_reminder & (1 << i)))
 8009b74:	4b23      	ldr	r3, [pc, #140]	; (8009c04 <system_time_set_reminder+0xb8>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	fa42 f303 	asr.w	r3, r2, r3
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d006      	beq.n	8009b96 <system_time_set_reminder+0x4a>
    for (i = 0; i < SYSTEM_TIME_MAX_REMINDER; i++)
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	73fb      	strb	r3, [r7, #15]
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	2b05      	cmp	r3, #5
 8009b92:	d9ef      	bls.n	8009b74 <system_time_set_reminder+0x28>
 8009b94:	e000      	b.n	8009b98 <system_time_set_reminder+0x4c>
            break;
 8009b96:	bf00      	nop
    }
    if (i == SYSTEM_TIME_MAX_REMINDER)
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	2b06      	cmp	r3, #6
 8009b9c:	d101      	bne.n	8009ba2 <system_time_set_reminder+0x56>
        return SYSTEM_TIME_ERROR;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e02c      	b.n	8009bfc <system_time_set_reminder+0xb0>
    rtc_t time;
    time.second       = sec;
 8009ba2:	79fb      	ldrb	r3, [r7, #7]
 8009ba4:	73bb      	strb	r3, [r7, #14]
    time.minute       = min;
 8009ba6:	79bb      	ldrb	r3, [r7, #6]
 8009ba8:	737b      	strb	r3, [r7, #13]
    time.hour         = hour;
 8009baa:	797b      	ldrb	r3, [r7, #5]
 8009bac:	733b      	strb	r3, [r7, #12]
    time.day_of_week  = day_of_week;
 8009bae:	793b      	ldrb	r3, [r7, #4]
 8009bb0:	72fb      	strb	r3, [r7, #11]
    time.day_of_month = day_of_month;
 8009bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bb6:	72bb      	strb	r3, [r7, #10]
    time.month        = mon;
 8009bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bbc:	727b      	strb	r3, [r7, #9]
    time.year         = year;
 8009bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009bc2:	723b      	strb	r3, [r7, #8]
    data_remider.number_reminder |= (1 << i);
 8009bc4:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <system_time_set_reminder+0xb8>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	b25a      	sxtb	r2, r3
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	2101      	movs	r1, #1
 8009bce:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	b25b      	sxtb	r3, r3
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <system_time_set_reminder+0xb8>)
 8009bdc:	701a      	strb	r2, [r3, #0]
    ds1307_convert_to_epoch_time(time, &data_remider.rtc_reminder[i]);
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4a08      	ldr	r2, [pc, #32]	; (8009c04 <system_time_set_reminder+0xb8>)
 8009be4:	4413      	add	r3, r2
 8009be6:	3304      	adds	r3, #4
 8009be8:	461a      	mov	r2, r3
 8009bea:	f107 0308 	add.w	r3, r7, #8
 8009bee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bf2:	f7f8 ffd3 	bl	8002b9c <ds1307_convert_to_epoch_time>

    system_time_update_reminder();
 8009bf6:	f7ff ff37 	bl	8009a68 <system_time_update_reminder>
    return SYSTEM_TIME_OK;
 8009bfa:	2301      	movs	r3, #1
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd90      	pop	{r4, r7, pc}
 8009c04:	20005064 	.word	0x20005064

08009c08 <system_time_set_reminder_str>:

system_time_error_t system_time_set_reminder_str(char *time)
{
 8009c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c0c:	b089      	sub	sp, #36	; 0x24
 8009c0e:	af04      	add	r7, sp, #16
 8009c10:	6078      	str	r0, [r7, #4]
    uint16_t year        = (*(time) - '0') * 1000 + (*(time + 1) - '0') * 100 + (*(time + 2) - '0') * 10 + (*(time + 3) - '0');
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	3b30      	subs	r3, #48	; 0x30
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	0152      	lsls	r2, r2, #5
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	0092      	lsls	r2, r2, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	3b30      	subs	r3, #48	; 0x30
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4619      	mov	r1, r3
 8009c34:	0089      	lsls	r1, r1, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	4619      	mov	r1, r3
 8009c3a:	0088      	lsls	r0, r1, #2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4603      	mov	r3, r0
 8009c40:	440b      	add	r3, r1
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	4413      	add	r3, r2
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	3b30      	subs	r3, #48	; 0x30
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	4619      	mov	r1, r3
 8009c56:	0089      	lsls	r1, r1, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	4413      	add	r3, r2
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3303      	adds	r3, #3
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	4413      	add	r3, r2
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	3b30      	subs	r3, #48	; 0x30
 8009c70:	81fb      	strh	r3, [r7, #14]
    uint8_t  day_of_week = calculate_day_of_week(str_to_byte(time + 8), str_to_byte(time + 5), year);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3308      	adds	r3, #8
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff fedb 	bl	8009a32 <str_to_byte>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	461c      	mov	r4, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3305      	adds	r3, #5
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff fed4 	bl	8009a32 <str_to_byte>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	89fb      	ldrh	r3, [r7, #14]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7f8 fd25 	bl	80026e4 <calculate_day_of_week>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	737b      	strb	r3, [r7, #13]

    system_time_set_reminder(str_to_byte(time + 17), str_to_byte(time + 14), str_to_byte(time + 11), day_of_week,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3311      	adds	r3, #17
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff fec5 	bl	8009a32 <str_to_byte>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461e      	mov	r6, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	330e      	adds	r3, #14
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff febe 	bl	8009a32 <str_to_byte>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4698      	mov	r8, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	330b      	adds	r3, #11
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff feb7 	bl	8009a32 <str_to_byte>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	4699      	mov	r9, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3308      	adds	r3, #8
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff feb0 	bl	8009a32 <str_to_byte>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461c      	mov	r4, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3305      	adds	r3, #5
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff fea9 	bl	8009a32 <str_to_byte>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461d      	mov	r5, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3302      	adds	r3, #2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7ff fea2 	bl	8009a32 <str_to_byte>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	7b7b      	ldrb	r3, [r7, #13]
 8009cf4:	9202      	str	r2, [sp, #8]
 8009cf6:	9501      	str	r5, [sp, #4]
 8009cf8:	9400      	str	r4, [sp, #0]
 8009cfa:	464a      	mov	r2, r9
 8009cfc:	4641      	mov	r1, r8
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff ff24 	bl	8009b4c <system_time_set_reminder>
                             str_to_byte(time + 8), str_to_byte(time + 5), str_to_byte(time + 2));

    return SYSTEM_TIME_OK;
 8009d04:	2301      	movs	r3, #1
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009d10 <system_time_get_reminder>:

system_time_error_t system_time_get_reminder(system_time_reminder_t *reminder_read)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
    system_data_get_reminder(reminder_read);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7fc fbcb 	bl	80064b4 <system_data_get_reminder>
    return SYSTEM_TIME_OK;
 8009d1e:	2301      	movs	r3, #1
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <system_time_number_reminder>:

system_time_error_t system_time_number_reminder(uint8_t *reminder_number)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < SYSTEM_TIME_MAX_REMINDER; i++)
 8009d34:	2300      	movs	r3, #0
 8009d36:	73bb      	strb	r3, [r7, #14]
 8009d38:	e00f      	b.n	8009d5a <system_time_number_reminder+0x32>
    {
        if (data_remider.number_reminder & (1 << i))
 8009d3a:	4b0e      	ldr	r3, [pc, #56]	; (8009d74 <system_time_number_reminder+0x4c>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	fa42 f303 	asr.w	r3, r2, r3
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <system_time_number_reminder+0x2c>
        {
            value++;
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	3301      	adds	r3, #1
 8009d52:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < SYSTEM_TIME_MAX_REMINDER; i++)
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	3301      	adds	r3, #1
 8009d58:	73bb      	strb	r3, [r7, #14]
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b05      	cmp	r3, #5
 8009d5e:	d9ec      	bls.n	8009d3a <system_time_number_reminder+0x12>
        }
    }
    *reminder_number = value;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	7bfa      	ldrb	r2, [r7, #15]
 8009d64:	701a      	strb	r2, [r3, #0]
    return SYSTEM_TIME_OK;
 8009d66:	2301      	movs	r3, #1
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	20005064 	.word	0x20005064

08009d78 <system_time_clear_reminder>:

system_time_error_t system_time_clear_reminder(uint8_t id)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	71fb      	strb	r3, [r7, #7]
    if (data_remider.number_reminder & (1 << id))
 8009d82:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <system_time_clear_reminder+0x4c>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	fa42 f303 	asr.w	r3, r2, r3
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d010      	beq.n	8009db8 <system_time_clear_reminder+0x40>
    {
        data_remider.number_reminder &= ~(1 << id);
 8009d96:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <system_time_clear_reminder+0x4c>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	b25a      	sxtb	r2, r3
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	2101      	movs	r1, #1
 8009da0:	fa01 f303 	lsl.w	r3, r1, r3
 8009da4:	b25b      	sxtb	r3, r3
 8009da6:	43db      	mvns	r3, r3
 8009da8:	b25b      	sxtb	r3, r3
 8009daa:	4013      	ands	r3, r2
 8009dac:	b25b      	sxtb	r3, r3
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <system_time_clear_reminder+0x4c>)
 8009db2:	701a      	strb	r2, [r3, #0]
        system_time_update_reminder();
 8009db4:	f7ff fe58 	bl	8009a68 <system_time_update_reminder>
    }
    return SYSTEM_TIME_OK;
 8009db8:	2301      	movs	r3, #1
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20005064 	.word	0x20005064

08009dc8 <system_time_get_epoch_time>:
    }
    return SYSTEM_TIME_ERROR;
}

system_time_error_t system_time_get_epoch_time(uint32_t *epoch_time)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
    if (ds1307_initialize_success)
 8009dd0:	4b08      	ldr	r3, [pc, #32]	; (8009df4 <system_time_get_epoch_time+0x2c>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d007      	beq.n	8009de8 <system_time_get_epoch_time+0x20>
    {
        ds1307_convert_to_epoch_time(rtc, epoch_time);
 8009dd8:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <system_time_get_epoch_time+0x30>)
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009de0:	f7f8 fedc 	bl	8002b9c <ds1307_convert_to_epoch_time>
        return SYSTEM_TIME_OK;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e000      	b.n	8009dea <system_time_get_epoch_time+0x22>
    }
    return SYSTEM_TIME_ERROR;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	2000505f 	.word	0x2000505f
 8009df8:	20005058 	.word	0x20005058

08009dfc <system_time_get_date_time>:

system_time_error_t system_time_get_date_time(rtc_t *date_time)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
    if (ds1307_initialize_success)
 8009e04:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <system_time_get_date_time+0x34>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d009      	beq.n	8009e20 <system_time_get_date_time+0x24>
    {
        *date_time = rtc;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a09      	ldr	r2, [pc, #36]	; (8009e34 <system_time_get_date_time+0x38>)
 8009e10:	6810      	ldr	r0, [r2, #0]
 8009e12:	6018      	str	r0, [r3, #0]
 8009e14:	8891      	ldrh	r1, [r2, #4]
 8009e16:	7992      	ldrb	r2, [r2, #6]
 8009e18:	8099      	strh	r1, [r3, #4]
 8009e1a:	719a      	strb	r2, [r3, #6]
        return SYSTEM_TIME_OK;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e000      	b.n	8009e22 <system_time_get_date_time+0x26>
    }
    return SYSTEM_TIME_ERROR;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	2000505f 	.word	0x2000505f
 8009e34:	20005058 	.word	0x20005058

08009e38 <system_time_set_value>:
                                          uint8_t hour,
                                          uint8_t day_of_week,
                                          uint8_t day_of_month,
                                          uint8_t mon,
                                          uint8_t year)
{
 8009e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3a:	b095      	sub	sp, #84	; 0x54
 8009e3c:	af04      	add	r7, sp, #16
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	4611      	mov	r1, r2
 8009e44:	461a      	mov	r2, r3
 8009e46:	4623      	mov	r3, r4
 8009e48:	71fb      	strb	r3, [r7, #7]
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	71bb      	strb	r3, [r7, #6]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	717b      	strb	r3, [r7, #5]
 8009e52:	4613      	mov	r3, r2
 8009e54:	713b      	strb	r3, [r7, #4]
    if (ds1307_initialize_success)
 8009e56:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <system_time_set_value+0x70>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d01e      	beq.n	8009e9c <system_time_set_value+0x64>
    {
        /* YYYY-MM-DD HH:MM:SS */
        /* Set year, month, day*/
        char string_set_time[50];
        sprintf(string_set_time, "%04d-%02d-%02d %02d-%02d-%02d", 2000 + year, mon, day_of_month, hour, min, sec);
 8009e5e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8009e62:	f503 65fa 	add.w	r5, r3, #2000	; 0x7d0
 8009e66:	f897 605c 	ldrb.w	r6, [r7, #92]	; 0x5c
 8009e6a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009e6e:	797a      	ldrb	r2, [r7, #5]
 8009e70:	79b9      	ldrb	r1, [r7, #6]
 8009e72:	79f8      	ldrb	r0, [r7, #7]
 8009e74:	f107 040c 	add.w	r4, r7, #12
 8009e78:	9003      	str	r0, [sp, #12]
 8009e7a:	9102      	str	r1, [sp, #8]
 8009e7c:	9201      	str	r2, [sp, #4]
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4633      	mov	r3, r6
 8009e82:	462a      	mov	r2, r5
 8009e84:	4909      	ldr	r1, [pc, #36]	; (8009eac <system_time_set_value+0x74>)
 8009e86:	4620      	mov	r0, r4
 8009e88:	f007 fc5e 	bl	8011748 <siprintf>
        ds1307_set_time(&ds1307, string_set_time);
 8009e8c:	f107 030c 	add.w	r3, r7, #12
 8009e90:	4619      	mov	r1, r3
 8009e92:	4807      	ldr	r0, [pc, #28]	; (8009eb0 <system_time_set_value+0x78>)
 8009e94:	f7f8 fde8 	bl	8002a68 <ds1307_set_time>
        return SYSTEM_TIME_OK;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e000      	b.n	8009e9e <system_time_set_value+0x66>
    }
    return SYSTEM_TIME_ERROR;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3744      	adds	r7, #68	; 0x44
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2000505f 	.word	0x2000505f
 8009eac:	08015078 	.word	0x08015078
 8009eb0:	20005044 	.word	0x20005044

08009eb4 <bsp_tim11_handle>:

void bsp_tim11_handle()
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
    rtc                       = *ds1307_get_time(&ds1307);
 8009eba:	482b      	ldr	r0, [pc, #172]	; (8009f68 <bsp_tim11_handle+0xb4>)
 8009ebc:	f7f8 fd3c 	bl	8002938 <ds1307_get_time>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <bsp_tim11_handle+0xb8>)
 8009ec4:	6810      	ldr	r0, [r2, #0]
 8009ec6:	6018      	str	r0, [r3, #0]
 8009ec8:	8891      	ldrh	r1, [r2, #4]
 8009eca:	7992      	ldrb	r2, [r2, #6]
 8009ecc:	8099      	strh	r1, [r3, #4]
 8009ece:	719a      	strb	r2, [r3, #6]
    uint32_t value_epoch_time = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	603b      	str	r3, [r7, #0]
    ds1307_convert_to_epoch_time(rtc, &value_epoch_time);
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	4925      	ldr	r1, [pc, #148]	; (8009f6c <bsp_tim11_handle+0xb8>)
 8009ed8:	461a      	mov	r2, r3
 8009eda:	c903      	ldmia	r1, {r0, r1}
 8009edc:	f7f8 fe5e 	bl	8002b9c <ds1307_convert_to_epoch_time>

    if ((data_remider.number_reminder != 0) && ds1307_initialize_success)
 8009ee0:	4b23      	ldr	r3, [pc, #140]	; (8009f70 <bsp_tim11_handle+0xbc>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d03a      	beq.n	8009f5e <bsp_tim11_handle+0xaa>
 8009ee8:	4b22      	ldr	r3, [pc, #136]	; (8009f74 <bsp_tim11_handle+0xc0>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d036      	beq.n	8009f5e <bsp_tim11_handle+0xaa>
    {
        uint8_t i = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	71fb      	strb	r3, [r7, #7]
        for (i = 0; i < SYSTEM_TIME_MAX_REMINDER; i++)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	71fb      	strb	r3, [r7, #7]
 8009ef8:	e02e      	b.n	8009f58 <bsp_tim11_handle+0xa4>
        {
            if (data_remider.number_reminder & (1 << i))
 8009efa:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <bsp_tim11_handle+0xbc>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	fa42 f303 	asr.w	r3, r2, r3
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d021      	beq.n	8009f52 <bsp_tim11_handle+0x9e>
            {
                if (data_remider.rtc_reminder[i] == value_epoch_time)
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	4a17      	ldr	r2, [pc, #92]	; (8009f70 <bsp_tim11_handle+0xbc>)
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d119      	bne.n	8009f52 <bsp_tim11_handle+0x9e>
                {
                    flag_rtc_reminder |= (1 << i);
 8009f1e:	79fb      	ldrb	r3, [r7, #7]
 8009f20:	2201      	movs	r2, #1
 8009f22:	fa02 f303 	lsl.w	r3, r2, r3
 8009f26:	b25a      	sxtb	r2, r3
 8009f28:	4b13      	ldr	r3, [pc, #76]	; (8009f78 <bsp_tim11_handle+0xc4>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	b25b      	sxtb	r3, r3
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <bsp_tim11_handle+0xc4>)
 8009f36:	701a      	strb	r2, [r3, #0]
                    system_time_clear_reminder(i);
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff ff1c 	bl	8009d78 <system_time_clear_reminder>
                    if (system_time_alarm_callback != NULL)
 8009f40:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <bsp_tim11_handle+0xc8>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <bsp_tim11_handle+0x9e>
                        system_time_alarm_callback(i);
 8009f48:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <bsp_tim11_handle+0xc8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	79fa      	ldrb	r2, [r7, #7]
 8009f4e:	4610      	mov	r0, r2
 8009f50:	4798      	blx	r3
        for (i = 0; i < SYSTEM_TIME_MAX_REMINDER; i++)
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	3301      	adds	r3, #1
 8009f56:	71fb      	strb	r3, [r7, #7]
 8009f58:	79fb      	ldrb	r3, [r7, #7]
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d9cd      	bls.n	8009efa <bsp_tim11_handle+0x46>
                }
            }
        }
    }
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20005044 	.word	0x20005044
 8009f6c:	20005058 	.word	0x20005058
 8009f70:	20005064 	.word	0x20005064
 8009f74:	2000505f 	.word	0x2000505f
 8009f78:	20005060 	.word	0x20005060
 8009f7c:	20005030 	.word	0x20005030

08009f80 <check_leap_year>:

static uint8_t check_leap_year(uint16_t year)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	80fb      	strh	r3, [r7, #6]
    return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);
 8009f8a:	88fb      	ldrh	r3, [r7, #6]
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10b      	bne.n	8009fae <check_leap_year+0x2e>
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	4a10      	ldr	r2, [pc, #64]	; (8009fdc <check_leap_year+0x5c>)
 8009f9a:	fba2 1203 	umull	r1, r2, r2, r3
 8009f9e:	0952      	lsrs	r2, r2, #5
 8009fa0:	2164      	movs	r1, #100	; 0x64
 8009fa2:	fb01 f202 	mul.w	r2, r1, r2
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10c      	bne.n	8009fc8 <check_leap_year+0x48>
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	4a0a      	ldr	r2, [pc, #40]	; (8009fdc <check_leap_year+0x5c>)
 8009fb2:	fba2 1203 	umull	r1, r2, r2, r3
 8009fb6:	09d2      	lsrs	r2, r2, #7
 8009fb8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009fbc:	fb01 f202 	mul.w	r2, r1, r2
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <check_leap_year+0x4c>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e000      	b.n	8009fce <check_leap_year+0x4e>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	b2db      	uxtb	r3, r3
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	51eb851f 	.word	0x51eb851f

08009fe0 <day_of_month>:

static uint8_t day_of_month(uint8_t month, uint8_t year)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	460a      	mov	r2, r1
 8009fea:	71fb      	strb	r3, [r7, #7]
 8009fec:	4613      	mov	r3, r2
 8009fee:	71bb      	strb	r3, [r7, #6]
    switch (month)
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	2b0b      	cmp	r3, #11
 8009ff6:	d82e      	bhi.n	800a056 <day_of_month+0x76>
 8009ff8:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <day_of_month+0x20>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a031 	.word	0x0800a031
 800a004:	0800a039 	.word	0x0800a039
 800a008:	0800a031 	.word	0x0800a031
 800a00c:	0800a035 	.word	0x0800a035
 800a010:	0800a031 	.word	0x0800a031
 800a014:	0800a035 	.word	0x0800a035
 800a018:	0800a031 	.word	0x0800a031
 800a01c:	0800a031 	.word	0x0800a031
 800a020:	0800a035 	.word	0x0800a035
 800a024:	0800a031 	.word	0x0800a031
 800a028:	0800a035 	.word	0x0800a035
 800a02c:	0800a031 	.word	0x0800a031
    case 3:
    case 5:
    case 7:
    case 8:
    case 10:
    case 12: return 31;
 800a030:	231f      	movs	r3, #31
 800a032:	e011      	b.n	800a058 <day_of_month+0x78>
    case 4:
    case 6:
    case 9:
    case 11: return 30;
 800a034:	231e      	movs	r3, #30
 800a036:	e00f      	b.n	800a058 <day_of_month+0x78>
    case 2:
        if (check_leap_year(2000 + year))
 800a038:	79bb      	ldrb	r3, [r7, #6]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a040:	b29b      	uxth	r3, r3
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff ff9c 	bl	8009f80 <check_leap_year>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <day_of_month+0x72>
            return 29;
 800a04e:	231d      	movs	r3, #29
 800a050:	e002      	b.n	800a058 <day_of_month+0x78>
        else
            return 28;
 800a052:	231c      	movs	r3, #28
 800a054:	e000      	b.n	800a058 <day_of_month+0x78>
    default: break;
    }
    return 0;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <system_time_change>:

void system_time_change(uint8_t choose, rtc_t *rtc, int8_t direct)
{
 800a060:	b590      	push	{r4, r7, lr}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	6039      	str	r1, [r7, #0]
 800a06a:	71fb      	strb	r3, [r7, #7]
 800a06c:	4613      	mov	r3, r2
 800a06e:	71bb      	strb	r3, [r7, #6]
    switch (choose + 1)
 800a070:	79fb      	ldrb	r3, [r7, #7]
 800a072:	3301      	adds	r3, #1
 800a074:	3b01      	subs	r3, #1
 800a076:	2b05      	cmp	r3, #5
 800a078:	f200 80b4 	bhi.w	800a1e4 <system_time_change+0x184>
 800a07c:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <system_time_change+0x24>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a09d 	.word	0x0800a09d
 800a088:	0800a0d3 	.word	0x0800a0d3
 800a08c:	0800a107 	.word	0x0800a107
 800a090:	0800a139 	.word	0x0800a139
 800a094:	0800a181 	.word	0x0800a181
 800a098:	0800a1b3 	.word	0x0800a1b3
    {
    case 1:
    {
        if ((rtc->hour != 0 || direct != -1) && (rtc->hour != 23 || direct != 1))
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	791b      	ldrb	r3, [r3, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d105      	bne.n	800a0b0 <system_time_change+0x50>
 800a0a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ac:	f000 809c 	beq.w	800a1e8 <system_time_change+0x188>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	791b      	ldrb	r3, [r3, #4]
 800a0b4:	2b17      	cmp	r3, #23
 800a0b6:	d104      	bne.n	800a0c2 <system_time_change+0x62>
 800a0b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	f000 8093 	beq.w	800a1e8 <system_time_change+0x188>
            rtc->hour += direct;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	791a      	ldrb	r2, [r3, #4]
 800a0c6:	79bb      	ldrb	r3, [r7, #6]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	711a      	strb	r2, [r3, #4]
        break;
 800a0d0:	e08a      	b.n	800a1e8 <system_time_change+0x188>
    }
    case 2:
    {
        if ((rtc->minute != 0 || direct != -1) && (rtc->minute != 59 || direct != 1))
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	795b      	ldrb	r3, [r3, #5]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <system_time_change+0x86>
 800a0da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e2:	f000 8083 	beq.w	800a1ec <system_time_change+0x18c>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	795b      	ldrb	r3, [r3, #5]
 800a0ea:	2b3b      	cmp	r3, #59	; 0x3b
 800a0ec:	d103      	bne.n	800a0f6 <system_time_change+0x96>
 800a0ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d07a      	beq.n	800a1ec <system_time_change+0x18c>
            rtc->minute += direct;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	795a      	ldrb	r2, [r3, #5]
 800a0fa:	79bb      	ldrb	r3, [r7, #6]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	715a      	strb	r2, [r3, #5]
        break;
 800a104:	e072      	b.n	800a1ec <system_time_change+0x18c>
    }
    case 3:
    {
        if ((rtc->second != 0 || direct != -1) && (rtc->second != 59 || direct != 1))
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	799b      	ldrb	r3, [r3, #6]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d104      	bne.n	800a118 <system_time_change+0xb8>
 800a10e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a116:	d06b      	beq.n	800a1f0 <system_time_change+0x190>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	799b      	ldrb	r3, [r3, #6]
 800a11c:	2b3b      	cmp	r3, #59	; 0x3b
 800a11e:	d103      	bne.n	800a128 <system_time_change+0xc8>
 800a120:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d063      	beq.n	800a1f0 <system_time_change+0x190>
            rtc->second += direct;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	799a      	ldrb	r2, [r3, #6]
 800a12c:	79bb      	ldrb	r3, [r7, #6]
 800a12e:	4413      	add	r3, r2
 800a130:	b2da      	uxtb	r2, r3
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	719a      	strb	r2, [r3, #6]
        break;
 800a136:	e05b      	b.n	800a1f0 <system_time_change+0x190>
    }
    case 4:
    {
        if ((rtc->day_of_month != 0 || direct != -1)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	789b      	ldrb	r3, [r3, #2]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d104      	bne.n	800a14a <system_time_change+0xea>
 800a140:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a148:	d054      	beq.n	800a1f4 <system_time_change+0x194>
            && (rtc->day_of_month != day_of_month(rtc->month, 2000 + rtc->year) || direct != 1))
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	789c      	ldrb	r4, [r3, #2]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	785a      	ldrb	r2, [r3, #1]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	3b30      	subs	r3, #48	; 0x30
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f7ff ff3f 	bl	8009fe0 <day_of_month>
 800a162:	4603      	mov	r3, r0
 800a164:	429c      	cmp	r4, r3
 800a166:	d103      	bne.n	800a170 <system_time_change+0x110>
 800a168:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d041      	beq.n	800a1f4 <system_time_change+0x194>
            rtc->day_of_month += direct;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	789a      	ldrb	r2, [r3, #2]
 800a174:	79bb      	ldrb	r3, [r7, #6]
 800a176:	4413      	add	r3, r2
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	709a      	strb	r2, [r3, #2]
        break;
 800a17e:	e039      	b.n	800a1f4 <system_time_change+0x194>
    }
    case 5:
    {
        if ((rtc->month != 1 || direct != -1) && (rtc->month != 12 || direct != 1))
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	785b      	ldrb	r3, [r3, #1]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d104      	bne.n	800a192 <system_time_change+0x132>
 800a188:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d032      	beq.n	800a1f8 <system_time_change+0x198>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b0c      	cmp	r3, #12
 800a198:	d103      	bne.n	800a1a2 <system_time_change+0x142>
 800a19a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d02a      	beq.n	800a1f8 <system_time_change+0x198>
            rtc->month += direct;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	785a      	ldrb	r2, [r3, #1]
 800a1a6:	79bb      	ldrb	r3, [r7, #6]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	705a      	strb	r2, [r3, #1]
        break;
 800a1b0:	e022      	b.n	800a1f8 <system_time_change+0x198>
    }
    case 6:
    {
        if ((rtc->year != 0 || direct != -1) && (rtc->year != 99 || direct != 1))
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d104      	bne.n	800a1c4 <system_time_change+0x164>
 800a1ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c2:	d01b      	beq.n	800a1fc <system_time_change+0x19c>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b63      	cmp	r3, #99	; 0x63
 800a1ca:	d103      	bne.n	800a1d4 <system_time_change+0x174>
 800a1cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d013      	beq.n	800a1fc <system_time_change+0x19c>
            rtc->year += direct;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	79bb      	ldrb	r3, [r7, #6]
 800a1da:	4413      	add	r3, r2
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	701a      	strb	r2, [r3, #0]
        break;
 800a1e2:	e00b      	b.n	800a1fc <system_time_change+0x19c>
    }
    default: break;
 800a1e4:	bf00      	nop
 800a1e6:	e00a      	b.n	800a1fe <system_time_change+0x19e>
        break;
 800a1e8:	bf00      	nop
 800a1ea:	e008      	b.n	800a1fe <system_time_change+0x19e>
        break;
 800a1ec:	bf00      	nop
 800a1ee:	e006      	b.n	800a1fe <system_time_change+0x19e>
        break;
 800a1f0:	bf00      	nop
 800a1f2:	e004      	b.n	800a1fe <system_time_change+0x19e>
        break;
 800a1f4:	bf00      	nop
 800a1f6:	e002      	b.n	800a1fe <system_time_change+0x19e>
        break;
 800a1f8:	bf00      	nop
 800a1fa:	e000      	b.n	800a1fe <system_time_change+0x19e>
        break;
 800a1fc:	bf00      	nop
    }
}
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	bd90      	pop	{r4, r7, pc}
 800a206:	bf00      	nop

0800a208 <system_time_is_realtime_ready>:

bool system_time_is_realtime_ready(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
    return ds1307.i2c_is_device_ready(ds1307.device_address);
 800a20c:	4b04      	ldr	r3, [pc, #16]	; (800a220 <system_time_is_realtime_ready+0x18>)
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	4a03      	ldr	r2, [pc, #12]	; (800a220 <system_time_is_realtime_ready+0x18>)
 800a212:	79d2      	ldrb	r2, [r2, #7]
 800a214:	4610      	mov	r0, r2
 800a216:	4798      	blx	r3
 800a218:	4603      	mov	r3, r0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20005044 	.word	0x20005044

0800a224 <system_time_is_temp_sensor_ready>:

bool system_time_is_temp_sensor_ready(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
    return cjmcu75.i2c_is_device_ready(cjmcu75.device_address);
 800a228:	4b04      	ldr	r3, [pc, #16]	; (800a23c <system_time_is_temp_sensor_ready+0x18>)
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	4a03      	ldr	r2, [pc, #12]	; (800a23c <system_time_is_temp_sensor_ready+0x18>)
 800a22e:	7812      	ldrb	r2, [r2, #0]
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
 800a234:	4603      	mov	r3, r0
}
 800a236:	4618      	mov	r0, r3
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20005034 	.word	0x20005034

0800a240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a240:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a244:	480d      	ldr	r0, [pc, #52]	; (800a27c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a246:	490e      	ldr	r1, [pc, #56]	; (800a280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a248:	4a0e      	ldr	r2, [pc, #56]	; (800a284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a24a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a24c:	e002      	b.n	800a254 <LoopCopyDataInit>

0800a24e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a24e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a252:	3304      	adds	r3, #4

0800a254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a258:	d3f9      	bcc.n	800a24e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a25a:	4a0b      	ldr	r2, [pc, #44]	; (800a288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a25c:	4c0b      	ldr	r4, [pc, #44]	; (800a28c <LoopFillZerobss+0x26>)
  movs r3, #0
 800a25e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a260:	e001      	b.n	800a266 <LoopFillZerobss>

0800a262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a264:	3204      	adds	r2, #4

0800a266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a268:	d3fb      	bcc.n	800a262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a26a:	f7fb fa27 	bl	80056bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a26e:	f006 fd41 	bl	8010cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a272:	f7fa fad9 	bl	8004828 <main>
  bx  lr    
 800a276:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a27c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a280:	20001600 	.word	0x20001600
  ldr r2, =_sidata
 800a284:	080251c8 	.word	0x080251c8
  ldr r2, =_sbss
 800a288:	20001600 	.word	0x20001600
  ldr r4, =_ebss
 800a28c:	200050bc 	.word	0x200050bc

0800a290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a290:	e7fe      	b.n	800a290 <ADC_IRQHandler>
	...

0800a294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a298:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <HAL_Init+0x40>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <HAL_Init+0x40>)
 800a29e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a2a4:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <HAL_Init+0x40>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a0a      	ldr	r2, [pc, #40]	; (800a2d4 <HAL_Init+0x40>)
 800a2aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a2b0:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <HAL_Init+0x40>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a07      	ldr	r2, [pc, #28]	; (800a2d4 <HAL_Init+0x40>)
 800a2b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a2bc:	2003      	movs	r0, #3
 800a2be:	f000 f94f 	bl	800a560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	f000 f808 	bl	800a2d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a2c8:	f7fa fdea 	bl	8004ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	40023c00 	.word	0x40023c00

0800a2d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a2e0:	4b12      	ldr	r3, [pc, #72]	; (800a32c <HAL_InitTick+0x54>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	4b12      	ldr	r3, [pc, #72]	; (800a330 <HAL_InitTick+0x58>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f967 	bl	800a5ca <HAL_SYSTICK_Config>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e00e      	b.n	800a324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b0f      	cmp	r3, #15
 800a30a:	d80a      	bhi.n	800a322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a30c:	2200      	movs	r2, #0
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	f04f 30ff 	mov.w	r0, #4294967295
 800a314:	f000 f92f 	bl	800a576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a318:	4a06      	ldr	r2, [pc, #24]	; (800a334 <HAL_InitTick+0x5c>)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	e000      	b.n	800a324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	200011dc 	.word	0x200011dc
 800a330:	20001538 	.word	0x20001538
 800a334:	20001534 	.word	0x20001534

0800a338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a33c:	4b06      	ldr	r3, [pc, #24]	; (800a358 <HAL_IncTick+0x20>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	4b06      	ldr	r3, [pc, #24]	; (800a35c <HAL_IncTick+0x24>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4413      	add	r3, r2
 800a348:	4a04      	ldr	r2, [pc, #16]	; (800a35c <HAL_IncTick+0x24>)
 800a34a:	6013      	str	r3, [r2, #0]
}
 800a34c:	bf00      	nop
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	20001538 	.word	0x20001538
 800a35c:	20005080 	.word	0x20005080

0800a360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0
  return uwTick;
 800a364:	4b03      	ldr	r3, [pc, #12]	; (800a374 <HAL_GetTick+0x14>)
 800a366:	681b      	ldr	r3, [r3, #0]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20005080 	.word	0x20005080

0800a378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a380:	f7ff ffee 	bl	800a360 <HAL_GetTick>
 800a384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a390:	d005      	beq.n	800a39e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <HAL_Delay+0x44>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4413      	add	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a39e:	bf00      	nop
 800a3a0:	f7ff ffde 	bl	800a360 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d8f7      	bhi.n	800a3a0 <HAL_Delay+0x28>
  {
  }
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20001538 	.word	0x20001538

0800a3c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a3d0:	4b0c      	ldr	r3, [pc, #48]	; (800a404 <__NVIC_SetPriorityGrouping+0x44>)
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a3dc:	4013      	ands	r3, r2
 800a3de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a3e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a3ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a3f2:	4a04      	ldr	r2, [pc, #16]	; (800a404 <__NVIC_SetPriorityGrouping+0x44>)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	60d3      	str	r3, [r2, #12]
}
 800a3f8:	bf00      	nop
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	e000ed00 	.word	0xe000ed00

0800a408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <__NVIC_GetPriorityGrouping+0x18>)
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	0a1b      	lsrs	r3, r3, #8
 800a412:	f003 0307 	and.w	r3, r3, #7
}
 800a416:	4618      	mov	r0, r3
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	e000ed00 	.word	0xe000ed00

0800a424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a432:	2b00      	cmp	r3, #0
 800a434:	db0b      	blt.n	800a44e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	f003 021f 	and.w	r2, r3, #31
 800a43c:	4907      	ldr	r1, [pc, #28]	; (800a45c <__NVIC_EnableIRQ+0x38>)
 800a43e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a442:	095b      	lsrs	r3, r3, #5
 800a444:	2001      	movs	r0, #1
 800a446:	fa00 f202 	lsl.w	r2, r0, r2
 800a44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	e000e100 	.word	0xe000e100

0800a460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a46c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a470:	2b00      	cmp	r3, #0
 800a472:	db0a      	blt.n	800a48a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	b2da      	uxtb	r2, r3
 800a478:	490c      	ldr	r1, [pc, #48]	; (800a4ac <__NVIC_SetPriority+0x4c>)
 800a47a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a47e:	0112      	lsls	r2, r2, #4
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	440b      	add	r3, r1
 800a484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a488:	e00a      	b.n	800a4a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	b2da      	uxtb	r2, r3
 800a48e:	4908      	ldr	r1, [pc, #32]	; (800a4b0 <__NVIC_SetPriority+0x50>)
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	f003 030f 	and.w	r3, r3, #15
 800a496:	3b04      	subs	r3, #4
 800a498:	0112      	lsls	r2, r2, #4
 800a49a:	b2d2      	uxtb	r2, r2
 800a49c:	440b      	add	r3, r1
 800a49e:	761a      	strb	r2, [r3, #24]
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	e000e100 	.word	0xe000e100
 800a4b0:	e000ed00 	.word	0xe000ed00

0800a4b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	; 0x24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	f1c3 0307 	rsb	r3, r3, #7
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	bf28      	it	cs
 800a4d2:	2304      	movcs	r3, #4
 800a4d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	2b06      	cmp	r3, #6
 800a4dc:	d902      	bls.n	800a4e4 <NVIC_EncodePriority+0x30>
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	3b03      	subs	r3, #3
 800a4e2:	e000      	b.n	800a4e6 <NVIC_EncodePriority+0x32>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f2:	43da      	mvns	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	401a      	ands	r2, r3
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a4fc:	f04f 31ff 	mov.w	r1, #4294967295
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	fa01 f303 	lsl.w	r3, r1, r3
 800a506:	43d9      	mvns	r1, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a50c:	4313      	orrs	r3, r2
         );
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3724      	adds	r7, #36	; 0x24
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3b01      	subs	r3, #1
 800a528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a52c:	d301      	bcc.n	800a532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a52e:	2301      	movs	r3, #1
 800a530:	e00f      	b.n	800a552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a532:	4a0a      	ldr	r2, [pc, #40]	; (800a55c <SysTick_Config+0x40>)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3b01      	subs	r3, #1
 800a538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a53a:	210f      	movs	r1, #15
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	f7ff ff8e 	bl	800a460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <SysTick_Config+0x40>)
 800a546:	2200      	movs	r2, #0
 800a548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a54a:	4b04      	ldr	r3, [pc, #16]	; (800a55c <SysTick_Config+0x40>)
 800a54c:	2207      	movs	r2, #7
 800a54e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	e000e010 	.word	0xe000e010

0800a560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff ff29 	bl	800a3c0 <__NVIC_SetPriorityGrouping>
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	4603      	mov	r3, r0
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
 800a582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a584:	2300      	movs	r3, #0
 800a586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a588:	f7ff ff3e 	bl	800a408 <__NVIC_GetPriorityGrouping>
 800a58c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	68b9      	ldr	r1, [r7, #8]
 800a592:	6978      	ldr	r0, [r7, #20]
 800a594:	f7ff ff8e 	bl	800a4b4 <NVIC_EncodePriority>
 800a598:	4602      	mov	r2, r0
 800a59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff ff5d 	bl	800a460 <__NVIC_SetPriority>
}
 800a5a6:	bf00      	nop
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a5b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff ff31 	bl	800a424 <__NVIC_EnableIRQ>
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff ffa2 	bl	800a51c <SysTick_Config>
 800a5d8:	4603      	mov	r3, r0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a5f0:	f7ff feb6 	bl	800a360 <HAL_GetTick>
 800a5f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d101      	bne.n	800a600 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e099      	b.n	800a734 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0201 	bic.w	r2, r2, #1
 800a61e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a620:	e00f      	b.n	800a642 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a622:	f7ff fe9d 	bl	800a360 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b05      	cmp	r3, #5
 800a62e:	d908      	bls.n	800a642 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2220      	movs	r2, #32
 800a634:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2203      	movs	r2, #3
 800a63a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e078      	b.n	800a734 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e8      	bne.n	800a622 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	4b38      	ldr	r3, [pc, #224]	; (800a73c <HAL_DMA_Init+0x158>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a66e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a67a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	4313      	orrs	r3, r2
 800a692:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d107      	bne.n	800a6ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f023 0307 	bic.w	r3, r3, #7
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d117      	bne.n	800a706 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00e      	beq.n	800a706 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fb1b 	bl	800ad24 <DMA_CheckFifoParam>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d008      	beq.n	800a706 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2240      	movs	r2, #64	; 0x40
 800a6f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a702:	2301      	movs	r3, #1
 800a704:	e016      	b.n	800a734 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fad2 	bl	800acb8 <DMA_CalcBaseAndBitshift>
 800a714:	4603      	mov	r3, r0
 800a716:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71c:	223f      	movs	r2, #63	; 0x3f
 800a71e:	409a      	lsls	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	f010803f 	.word	0xf010803f

0800a740 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a756:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d101      	bne.n	800a766 <HAL_DMA_Start_IT+0x26>
 800a762:	2302      	movs	r3, #2
 800a764:	e040      	b.n	800a7e8 <HAL_DMA_Start_IT+0xa8>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b01      	cmp	r3, #1
 800a778:	d12f      	bne.n	800a7da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2202      	movs	r2, #2
 800a77e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	68b9      	ldr	r1, [r7, #8]
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 fa64 	bl	800ac5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a798:	223f      	movs	r2, #63	; 0x3f
 800a79a:	409a      	lsls	r2, r3
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f042 0216 	orr.w	r2, r2, #22
 800a7ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d007      	beq.n	800a7c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0208 	orr.w	r2, r2, #8
 800a7c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0201 	orr.w	r2, r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	e005      	b.n	800a7e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a7fe:	f7ff fdaf 	bl	800a360 <HAL_GetTick>
 800a802:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d008      	beq.n	800a822 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2280      	movs	r2, #128	; 0x80
 800a814:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e052      	b.n	800a8c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f022 0216 	bic.w	r2, r2, #22
 800a830:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	695a      	ldr	r2, [r3, #20]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a840:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	2b00      	cmp	r3, #0
 800a848:	d103      	bne.n	800a852 <HAL_DMA_Abort+0x62>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d007      	beq.n	800a862 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0208 	bic.w	r2, r2, #8
 800a860:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 0201 	bic.w	r2, r2, #1
 800a870:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a872:	e013      	b.n	800a89c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a874:	f7ff fd74 	bl	800a360 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b05      	cmp	r3, #5
 800a880:	d90c      	bls.n	800a89c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2220      	movs	r2, #32
 800a886:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2203      	movs	r2, #3
 800a88c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e015      	b.n	800a8c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1e4      	bne.n	800a874 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ae:	223f      	movs	r2, #63	; 0x3f
 800a8b0:	409a      	lsls	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d004      	beq.n	800a8ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2280      	movs	r2, #128	; 0x80
 800a8e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e00c      	b.n	800a908 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2205      	movs	r2, #5
 800a8f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f022 0201 	bic.w	r2, r2, #1
 800a904:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a920:	4b8e      	ldr	r3, [pc, #568]	; (800ab5c <HAL_DMA_IRQHandler+0x248>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a8e      	ldr	r2, [pc, #568]	; (800ab60 <HAL_DMA_IRQHandler+0x24c>)
 800a926:	fba2 2303 	umull	r2, r3, r2, r3
 800a92a:	0a9b      	lsrs	r3, r3, #10
 800a92c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a932:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a93e:	2208      	movs	r2, #8
 800a940:	409a      	lsls	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4013      	ands	r3, r2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d01a      	beq.n	800a980 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d013      	beq.n	800a980 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f022 0204 	bic.w	r2, r2, #4
 800a966:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96c:	2208      	movs	r2, #8
 800a96e:	409a      	lsls	r2, r3
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a978:	f043 0201 	orr.w	r2, r3, #1
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a984:	2201      	movs	r2, #1
 800a986:	409a      	lsls	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4013      	ands	r3, r2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d012      	beq.n	800a9b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	409a      	lsls	r2, r3
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ae:	f043 0202 	orr.w	r2, r3, #2
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ba:	2204      	movs	r2, #4
 800a9bc:	409a      	lsls	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d012      	beq.n	800a9ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d8:	2204      	movs	r2, #4
 800a9da:	409a      	lsls	r2, r3
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e4:	f043 0204 	orr.w	r2, r3, #4
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f0:	2210      	movs	r2, #16
 800a9f2:	409a      	lsls	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d043      	beq.n	800aa84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0308 	and.w	r3, r3, #8
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d03c      	beq.n	800aa84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa0e:	2210      	movs	r2, #16
 800aa10:	409a      	lsls	r2, r3
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d018      	beq.n	800aa56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d108      	bne.n	800aa44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d024      	beq.n	800aa84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
 800aa42:	e01f      	b.n	800aa84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01b      	beq.n	800aa84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	4798      	blx	r3
 800aa54:	e016      	b.n	800aa84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d107      	bne.n	800aa74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0208 	bic.w	r2, r2, #8
 800aa72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa88:	2220      	movs	r2, #32
 800aa8a:	409a      	lsls	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 808f 	beq.w	800abb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0310 	and.w	r3, r3, #16
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 8087 	beq.w	800abb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaaa:	2220      	movs	r2, #32
 800aaac:	409a      	lsls	r2, r3
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b05      	cmp	r3, #5
 800aabc:	d136      	bne.n	800ab2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0216 	bic.w	r2, r2, #22
 800aacc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	695a      	ldr	r2, [r3, #20]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aadc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d103      	bne.n	800aaee <HAL_DMA_IRQHandler+0x1da>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d007      	beq.n	800aafe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0208 	bic.w	r2, r2, #8
 800aafc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab02:	223f      	movs	r2, #63	; 0x3f
 800ab04:	409a      	lsls	r2, r3
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d07e      	beq.n	800ac20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	4798      	blx	r3
        }
        return;
 800ab2a:	e079      	b.n	800ac20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d01d      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10d      	bne.n	800ab64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d031      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
 800ab58:	e02c      	b.n	800abb4 <HAL_DMA_IRQHandler+0x2a0>
 800ab5a:	bf00      	nop
 800ab5c:	200011dc 	.word	0x200011dc
 800ab60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d023      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
 800ab74:	e01e      	b.n	800abb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10f      	bne.n	800aba4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0210 	bic.w	r2, r2, #16
 800ab92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d032      	beq.n	800ac22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d022      	beq.n	800ac0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2205      	movs	r2, #5
 800abcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0201 	bic.w	r2, r2, #1
 800abde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	3301      	adds	r3, #1
 800abe4:	60bb      	str	r3, [r7, #8]
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d307      	bcc.n	800abfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1f2      	bne.n	800abe0 <HAL_DMA_IRQHandler+0x2cc>
 800abfa:	e000      	b.n	800abfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 800abfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d005      	beq.n	800ac22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
 800ac1e:	e000      	b.n	800ac22 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ac20:	bf00      	nop
    }
  }
}
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac36:	b2db      	uxtb	r3, r3
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	2b40      	cmp	r3, #64	; 0x40
 800ac88:	d108      	bne.n	800ac9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ac9a:	e007      	b.n	800acac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	60da      	str	r2, [r3, #12]
}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	3b10      	subs	r3, #16
 800acc8:	4a14      	ldr	r2, [pc, #80]	; (800ad1c <DMA_CalcBaseAndBitshift+0x64>)
 800acca:	fba2 2303 	umull	r2, r3, r2, r3
 800acce:	091b      	lsrs	r3, r3, #4
 800acd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800acd2:	4a13      	ldr	r2, [pc, #76]	; (800ad20 <DMA_CalcBaseAndBitshift+0x68>)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d909      	bls.n	800acfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800acee:	f023 0303 	bic.w	r3, r3, #3
 800acf2:	1d1a      	adds	r2, r3, #4
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	659a      	str	r2, [r3, #88]	; 0x58
 800acf8:	e007      	b.n	800ad0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad02:	f023 0303 	bic.w	r3, r3, #3
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3714      	adds	r7, #20
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	aaaaaaab 	.word	0xaaaaaaab
 800ad20:	08024c18 	.word	0x08024c18

0800ad24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d11f      	bne.n	800ad7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d856      	bhi.n	800adf2 <DMA_CheckFifoParam+0xce>
 800ad44:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <DMA_CheckFifoParam+0x28>)
 800ad46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4a:	bf00      	nop
 800ad4c:	0800ad5d 	.word	0x0800ad5d
 800ad50:	0800ad6f 	.word	0x0800ad6f
 800ad54:	0800ad5d 	.word	0x0800ad5d
 800ad58:	0800adf3 	.word	0x0800adf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d046      	beq.n	800adf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad6c:	e043      	b.n	800adf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ad76:	d140      	bne.n	800adfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad7c:	e03d      	b.n	800adfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad86:	d121      	bne.n	800adcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d837      	bhi.n	800adfe <DMA_CheckFifoParam+0xda>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <DMA_CheckFifoParam+0x70>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ada5 	.word	0x0800ada5
 800ad98:	0800adab 	.word	0x0800adab
 800ad9c:	0800ada5 	.word	0x0800ada5
 800ada0:	0800adbd 	.word	0x0800adbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
      break;
 800ada8:	e030      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d025      	beq.n	800ae02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adba:	e022      	b.n	800ae02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800adc4:	d11f      	bne.n	800ae06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800adca:	e01c      	b.n	800ae06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b02      	cmp	r3, #2
 800add0:	d903      	bls.n	800adda <DMA_CheckFifoParam+0xb6>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2b03      	cmp	r3, #3
 800add6:	d003      	beq.n	800ade0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800add8:	e018      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	73fb      	strb	r3, [r7, #15]
      break;
 800adde:	e015      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00e      	beq.n	800ae0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	73fb      	strb	r3, [r7, #15]
      break;
 800adf0:	e00b      	b.n	800ae0a <DMA_CheckFifoParam+0xe6>
      break;
 800adf2:	bf00      	nop
 800adf4:	e00a      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      break;
 800adf6:	bf00      	nop
 800adf8:	e008      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      break;
 800adfa:	bf00      	nop
 800adfc:	e006      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      break;
 800adfe:	bf00      	nop
 800ae00:	e004      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      break;
 800ae02:	bf00      	nop
 800ae04:	e002      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      break;   
 800ae06:	bf00      	nop
 800ae08:	e000      	b.n	800ae0c <DMA_CheckFifoParam+0xe8>
      break;
 800ae0a:	bf00      	nop
    }
  } 
  
  return status; 
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop

0800ae1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b089      	sub	sp, #36	; 0x24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae32:	2300      	movs	r3, #0
 800ae34:	61fb      	str	r3, [r7, #28]
 800ae36:	e159      	b.n	800b0ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae38:	2201      	movs	r2, #1
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4013      	ands	r3, r2
 800ae4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	f040 8148 	bne.w	800b0e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f003 0303 	and.w	r3, r3, #3
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d005      	beq.n	800ae6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d130      	bne.n	800aed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	2203      	movs	r2, #3
 800ae7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7e:	43db      	mvns	r3, r3
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	4013      	ands	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aea4:	2201      	movs	r2, #1
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeac:	43db      	mvns	r3, r3
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	091b      	lsrs	r3, r3, #4
 800aeba:	f003 0201 	and.w	r2, r3, #1
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	fa02 f303 	lsl.w	r3, r2, r3
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	f003 0303 	and.w	r3, r3, #3
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d017      	beq.n	800af0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	2203      	movs	r2, #3
 800aee8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeec:	43db      	mvns	r3, r3
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	4013      	ands	r3, r2
 800aef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	fa02 f303 	lsl.w	r3, r2, r3
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	4313      	orrs	r3, r2
 800af04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	2b02      	cmp	r3, #2
 800af16:	d123      	bne.n	800af60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	08da      	lsrs	r2, r3, #3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3208      	adds	r2, #8
 800af20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	f003 0307 	and.w	r3, r3, #7
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	220f      	movs	r2, #15
 800af30:	fa02 f303 	lsl.w	r3, r2, r3
 800af34:	43db      	mvns	r3, r3
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	4013      	ands	r3, r2
 800af3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	691a      	ldr	r2, [r3, #16]
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	fa02 f303 	lsl.w	r3, r2, r3
 800af4c:	69ba      	ldr	r2, [r7, #24]
 800af4e:	4313      	orrs	r3, r2
 800af50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	08da      	lsrs	r2, r3, #3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3208      	adds	r2, #8
 800af5a:	69b9      	ldr	r1, [r7, #24]
 800af5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	2203      	movs	r2, #3
 800af6c:	fa02 f303 	lsl.w	r3, r2, r3
 800af70:	43db      	mvns	r3, r3
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	4013      	ands	r3, r2
 800af76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f003 0203 	and.w	r2, r3, #3
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 80a2 	beq.w	800b0e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	4b57      	ldr	r3, [pc, #348]	; (800b104 <HAL_GPIO_Init+0x2e8>)
 800afa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afaa:	4a56      	ldr	r2, [pc, #344]	; (800b104 <HAL_GPIO_Init+0x2e8>)
 800afac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afb0:	6453      	str	r3, [r2, #68]	; 0x44
 800afb2:	4b54      	ldr	r3, [pc, #336]	; (800b104 <HAL_GPIO_Init+0x2e8>)
 800afb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800afbe:	4a52      	ldr	r2, [pc, #328]	; (800b108 <HAL_GPIO_Init+0x2ec>)
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	089b      	lsrs	r3, r3, #2
 800afc4:	3302      	adds	r3, #2
 800afc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f003 0303 	and.w	r3, r3, #3
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	220f      	movs	r2, #15
 800afd6:	fa02 f303 	lsl.w	r3, r2, r3
 800afda:	43db      	mvns	r3, r3
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	4013      	ands	r3, r2
 800afe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a49      	ldr	r2, [pc, #292]	; (800b10c <HAL_GPIO_Init+0x2f0>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d019      	beq.n	800b01e <HAL_GPIO_Init+0x202>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a48      	ldr	r2, [pc, #288]	; (800b110 <HAL_GPIO_Init+0x2f4>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d013      	beq.n	800b01a <HAL_GPIO_Init+0x1fe>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a47      	ldr	r2, [pc, #284]	; (800b114 <HAL_GPIO_Init+0x2f8>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d00d      	beq.n	800b016 <HAL_GPIO_Init+0x1fa>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a46      	ldr	r2, [pc, #280]	; (800b118 <HAL_GPIO_Init+0x2fc>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d007      	beq.n	800b012 <HAL_GPIO_Init+0x1f6>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a45      	ldr	r2, [pc, #276]	; (800b11c <HAL_GPIO_Init+0x300>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d101      	bne.n	800b00e <HAL_GPIO_Init+0x1f2>
 800b00a:	2304      	movs	r3, #4
 800b00c:	e008      	b.n	800b020 <HAL_GPIO_Init+0x204>
 800b00e:	2307      	movs	r3, #7
 800b010:	e006      	b.n	800b020 <HAL_GPIO_Init+0x204>
 800b012:	2303      	movs	r3, #3
 800b014:	e004      	b.n	800b020 <HAL_GPIO_Init+0x204>
 800b016:	2302      	movs	r3, #2
 800b018:	e002      	b.n	800b020 <HAL_GPIO_Init+0x204>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e000      	b.n	800b020 <HAL_GPIO_Init+0x204>
 800b01e:	2300      	movs	r3, #0
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	f002 0203 	and.w	r2, r2, #3
 800b026:	0092      	lsls	r2, r2, #2
 800b028:	4093      	lsls	r3, r2
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b030:	4935      	ldr	r1, [pc, #212]	; (800b108 <HAL_GPIO_Init+0x2ec>)
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	089b      	lsrs	r3, r3, #2
 800b036:	3302      	adds	r3, #2
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b03e:	4b38      	ldr	r3, [pc, #224]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	43db      	mvns	r3, r3
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	4013      	ands	r3, r2
 800b04c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	4313      	orrs	r3, r2
 800b060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b062:	4a2f      	ldr	r2, [pc, #188]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b068:	4b2d      	ldr	r3, [pc, #180]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	43db      	mvns	r3, r3
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	4013      	ands	r3, r2
 800b076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	4313      	orrs	r3, r2
 800b08a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b08c:	4a24      	ldr	r2, [pc, #144]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b092:	4b23      	ldr	r3, [pc, #140]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	43db      	mvns	r3, r3
 800b09c:	69ba      	ldr	r2, [r7, #24]
 800b09e:	4013      	ands	r3, r2
 800b0a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b0b6:	4a1a      	ldr	r2, [pc, #104]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b0bc:	4b18      	ldr	r3, [pc, #96]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	43db      	mvns	r3, r3
 800b0c6:	69ba      	ldr	r2, [r7, #24]
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b0e0:	4a0f      	ldr	r2, [pc, #60]	; (800b120 <HAL_GPIO_Init+0x304>)
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	61fb      	str	r3, [r7, #28]
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	2b0f      	cmp	r3, #15
 800b0f0:	f67f aea2 	bls.w	800ae38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b0f4:	bf00      	nop
 800b0f6:	bf00      	nop
 800b0f8:	3724      	adds	r7, #36	; 0x24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	40023800 	.word	0x40023800
 800b108:	40013800 	.word	0x40013800
 800b10c:	40020000 	.word	0x40020000
 800b110:	40020400 	.word	0x40020400
 800b114:	40020800 	.word	0x40020800
 800b118:	40020c00 	.word	0x40020c00
 800b11c:	40021000 	.word	0x40021000
 800b120:	40013c00 	.word	0x40013c00

0800b124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	691a      	ldr	r2, [r3, #16]
 800b134:	887b      	ldrh	r3, [r7, #2]
 800b136:	4013      	ands	r3, r2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b13c:	2301      	movs	r3, #1
 800b13e:	73fb      	strb	r3, [r7, #15]
 800b140:	e001      	b.n	800b146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b146:	7bfb      	ldrb	r3, [r7, #15]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	4603      	mov	r3, r0
 800b15c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b15e:	4b08      	ldr	r3, [pc, #32]	; (800b180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b160:	695a      	ldr	r2, [r3, #20]
 800b162:	88fb      	ldrh	r3, [r7, #6]
 800b164:	4013      	ands	r3, r2
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b16a:	4a05      	ldr	r2, [pc, #20]	; (800b180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b16c:	88fb      	ldrh	r3, [r7, #6]
 800b16e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	4618      	mov	r0, r3
 800b174:	f7f6 feda 	bl	8001f2c <HAL_GPIO_EXTI_Callback>
  }
}
 800b178:	bf00      	nop
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	40013c00 	.word	0x40013c00

0800b184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e12b      	b.n	800b3ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d106      	bne.n	800b1b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7f9 fea0 	bl	8004ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2224      	movs	r2, #36	; 0x24
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0201 	bic.w	r2, r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b1e8:	f003 fb5e 	bl	800e8a8 <HAL_RCC_GetPCLK1Freq>
 800b1ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	4a81      	ldr	r2, [pc, #516]	; (800b3f8 <HAL_I2C_Init+0x274>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d807      	bhi.n	800b208 <HAL_I2C_Init+0x84>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4a80      	ldr	r2, [pc, #512]	; (800b3fc <HAL_I2C_Init+0x278>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	bf94      	ite	ls
 800b200:	2301      	movls	r3, #1
 800b202:	2300      	movhi	r3, #0
 800b204:	b2db      	uxtb	r3, r3
 800b206:	e006      	b.n	800b216 <HAL_I2C_Init+0x92>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4a7d      	ldr	r2, [pc, #500]	; (800b400 <HAL_I2C_Init+0x27c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	bf94      	ite	ls
 800b210:	2301      	movls	r3, #1
 800b212:	2300      	movhi	r3, #0
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e0e7      	b.n	800b3ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4a78      	ldr	r2, [pc, #480]	; (800b404 <HAL_I2C_Init+0x280>)
 800b222:	fba2 2303 	umull	r2, r3, r2, r3
 800b226:	0c9b      	lsrs	r3, r3, #18
 800b228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	430a      	orrs	r2, r1
 800b23c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	4a6a      	ldr	r2, [pc, #424]	; (800b3f8 <HAL_I2C_Init+0x274>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d802      	bhi.n	800b258 <HAL_I2C_Init+0xd4>
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	3301      	adds	r3, #1
 800b256:	e009      	b.n	800b26c <HAL_I2C_Init+0xe8>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b25e:	fb02 f303 	mul.w	r3, r2, r3
 800b262:	4a69      	ldr	r2, [pc, #420]	; (800b408 <HAL_I2C_Init+0x284>)
 800b264:	fba2 2303 	umull	r2, r3, r2, r3
 800b268:	099b      	lsrs	r3, r3, #6
 800b26a:	3301      	adds	r3, #1
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6812      	ldr	r2, [r2, #0]
 800b270:	430b      	orrs	r3, r1
 800b272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b27e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	495c      	ldr	r1, [pc, #368]	; (800b3f8 <HAL_I2C_Init+0x274>)
 800b288:	428b      	cmp	r3, r1
 800b28a:	d819      	bhi.n	800b2c0 <HAL_I2C_Init+0x13c>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	1e59      	subs	r1, r3, #1
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	fbb1 f3f3 	udiv	r3, r1, r3
 800b29a:	1c59      	adds	r1, r3, #1
 800b29c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b2a0:	400b      	ands	r3, r1
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00a      	beq.n	800b2bc <HAL_I2C_Init+0x138>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	1e59      	subs	r1, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2ba:	e051      	b.n	800b360 <HAL_I2C_Init+0x1dc>
 800b2bc:	2304      	movs	r3, #4
 800b2be:	e04f      	b.n	800b360 <HAL_I2C_Init+0x1dc>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d111      	bne.n	800b2ec <HAL_I2C_Init+0x168>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	1e58      	subs	r0, r3, #1
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6859      	ldr	r1, [r3, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	440b      	add	r3, r1
 800b2d6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2da:	3301      	adds	r3, #1
 800b2dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2301      	moveq	r3, #1
 800b2e6:	2300      	movne	r3, #0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	e012      	b.n	800b312 <HAL_I2C_Init+0x18e>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	1e58      	subs	r0, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6859      	ldr	r1, [r3, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	440b      	add	r3, r1
 800b2fa:	0099      	lsls	r1, r3, #2
 800b2fc:	440b      	add	r3, r1
 800b2fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800b302:	3301      	adds	r3, #1
 800b304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b308:	2b00      	cmp	r3, #0
 800b30a:	bf0c      	ite	eq
 800b30c:	2301      	moveq	r3, #1
 800b30e:	2300      	movne	r3, #0
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <HAL_I2C_Init+0x196>
 800b316:	2301      	movs	r3, #1
 800b318:	e022      	b.n	800b360 <HAL_I2C_Init+0x1dc>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10e      	bne.n	800b340 <HAL_I2C_Init+0x1bc>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	1e58      	subs	r0, r3, #1
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6859      	ldr	r1, [r3, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	440b      	add	r3, r1
 800b330:	fbb0 f3f3 	udiv	r3, r0, r3
 800b334:	3301      	adds	r3, #1
 800b336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b33e:	e00f      	b.n	800b360 <HAL_I2C_Init+0x1dc>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	1e58      	subs	r0, r3, #1
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6859      	ldr	r1, [r3, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	0099      	lsls	r1, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	fbb0 f3f3 	udiv	r3, r0, r3
 800b356:	3301      	adds	r3, #1
 800b358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b35c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	6809      	ldr	r1, [r1, #0]
 800b364:	4313      	orrs	r3, r2
 800b366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	69da      	ldr	r2, [r3, #28]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	431a      	orrs	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b38e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6911      	ldr	r1, [r2, #16]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	68d2      	ldr	r2, [r2, #12]
 800b39a:	4311      	orrs	r1, r2
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	695a      	ldr	r2, [r3, #20]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f042 0201 	orr.w	r2, r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	000186a0 	.word	0x000186a0
 800b3fc:	001e847f 	.word	0x001e847f
 800b400:	003d08ff 	.word	0x003d08ff
 800b404:	431bde83 	.word	0x431bde83
 800b408:	10624dd3 	.word	0x10624dd3

0800b40c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	817b      	strh	r3, [r7, #10]
 800b41e:	460b      	mov	r3, r1
 800b420:	813b      	strh	r3, [r7, #8]
 800b422:	4613      	mov	r3, r2
 800b424:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b426:	f7fe ff9b 	bl	800a360 <HAL_GetTick>
 800b42a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b20      	cmp	r3, #32
 800b436:	f040 80d9 	bne.w	800b5ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	2319      	movs	r3, #25
 800b440:	2201      	movs	r2, #1
 800b442:	496d      	ldr	r1, [pc, #436]	; (800b5f8 <HAL_I2C_Mem_Write+0x1ec>)
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f002 fb95 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b450:	2302      	movs	r3, #2
 800b452:	e0cc      	b.n	800b5ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d101      	bne.n	800b462 <HAL_I2C_Mem_Write+0x56>
 800b45e:	2302      	movs	r3, #2
 800b460:	e0c5      	b.n	800b5ee <HAL_I2C_Mem_Write+0x1e2>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b01      	cmp	r3, #1
 800b476:	d007      	beq.n	800b488 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b496:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2221      	movs	r2, #33	; 0x21
 800b49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2240      	movs	r2, #64	; 0x40
 800b4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6a3a      	ldr	r2, [r7, #32]
 800b4b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4a4d      	ldr	r2, [pc, #308]	; (800b5fc <HAL_I2C_Mem_Write+0x1f0>)
 800b4c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b4ca:	88f8      	ldrh	r0, [r7, #6]
 800b4cc:	893a      	ldrh	r2, [r7, #8]
 800b4ce:	8979      	ldrh	r1, [r7, #10]
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	4603      	mov	r3, r0
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f002 f812 	bl	800d504 <I2C_RequestMemoryWrite>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d052      	beq.n	800b58c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e081      	b.n	800b5ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f002 fc16 	bl	800dd20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00d      	beq.n	800b516 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d107      	bne.n	800b512 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e06b      	b.n	800b5ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	781a      	ldrb	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	1c5a      	adds	r2, r3, #1
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b530:	3b01      	subs	r3, #1
 800b532:	b29a      	uxth	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	695b      	ldr	r3, [r3, #20]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b04      	cmp	r3, #4
 800b552:	d11b      	bne.n	800b58c <HAL_I2C_Mem_Write+0x180>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d017      	beq.n	800b58c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	781a      	ldrb	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b576:	3b01      	subs	r3, #1
 800b578:	b29a      	uxth	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b582:	b29b      	uxth	r3, r3
 800b584:	3b01      	subs	r3, #1
 800b586:	b29a      	uxth	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1aa      	bne.n	800b4ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f002 fc02 	bl	800dda2 <I2C_WaitOnBTFFlagUntilTimeout>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00d      	beq.n	800b5c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a8:	2b04      	cmp	r3, #4
 800b5aa:	d107      	bne.n	800b5bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e016      	b.n	800b5ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2220      	movs	r2, #32
 800b5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e000      	b.n	800b5ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b5ec:	2302      	movs	r3, #2
  }
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	00100002 	.word	0x00100002
 800b5fc:	ffff0000 	.word	0xffff0000

0800b600 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08c      	sub	sp, #48	; 0x30
 800b604:	af02      	add	r7, sp, #8
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	4608      	mov	r0, r1
 800b60a:	4611      	mov	r1, r2
 800b60c:	461a      	mov	r2, r3
 800b60e:	4603      	mov	r3, r0
 800b610:	817b      	strh	r3, [r7, #10]
 800b612:	460b      	mov	r3, r1
 800b614:	813b      	strh	r3, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b61a:	f7fe fea1 	bl	800a360 <HAL_GetTick>
 800b61e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b20      	cmp	r3, #32
 800b62a:	f040 8208 	bne.w	800ba3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	2319      	movs	r3, #25
 800b634:	2201      	movs	r2, #1
 800b636:	497b      	ldr	r1, [pc, #492]	; (800b824 <HAL_I2C_Mem_Read+0x224>)
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f002 fa9b 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b644:	2302      	movs	r3, #2
 800b646:	e1fb      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d101      	bne.n	800b656 <HAL_I2C_Mem_Read+0x56>
 800b652:	2302      	movs	r3, #2
 800b654:	e1f4      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d007      	beq.n	800b67c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f042 0201 	orr.w	r2, r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b68a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2222      	movs	r2, #34	; 0x22
 800b690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2240      	movs	r2, #64	; 0x40
 800b698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b6ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4a5b      	ldr	r2, [pc, #364]	; (800b828 <HAL_I2C_Mem_Read+0x228>)
 800b6bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b6be:	88f8      	ldrh	r0, [r7, #6]
 800b6c0:	893a      	ldrh	r2, [r7, #8]
 800b6c2:	8979      	ldrh	r1, [r7, #10]
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	9301      	str	r3, [sp, #4]
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f001 ffae 	bl	800d630 <I2C_RequestMemoryRead>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e1b0      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d113      	bne.n	800b70e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	623b      	str	r3, [r7, #32]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	695b      	ldr	r3, [r3, #20]
 800b6f0:	623b      	str	r3, [r7, #32]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	623b      	str	r3, [r7, #32]
 800b6fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e184      	b.n	800ba18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b712:	2b01      	cmp	r3, #1
 800b714:	d11b      	bne.n	800b74e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	61fb      	str	r3, [r7, #28]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	61fb      	str	r3, [r7, #28]
 800b73a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e164      	b.n	800ba18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b752:	2b02      	cmp	r3, #2
 800b754:	d11b      	bne.n	800b78e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b764:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b776:	2300      	movs	r3, #0
 800b778:	61bb      	str	r3, [r7, #24]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	61bb      	str	r3, [r7, #24]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	61bb      	str	r3, [r7, #24]
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	e144      	b.n	800ba18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	617b      	str	r3, [r7, #20]
 800b7a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b7a4:	e138      	b.n	800ba18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	f200 80f1 	bhi.w	800b992 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d123      	bne.n	800b800 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f002 fb63 	bl	800de88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e139      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	691a      	ldr	r2, [r3, #16]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7fe:	e10b      	b.n	800ba18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b804:	2b02      	cmp	r3, #2
 800b806:	d14e      	bne.n	800b8a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	2200      	movs	r2, #0
 800b810:	4906      	ldr	r1, [pc, #24]	; (800b82c <HAL_I2C_Mem_Read+0x22c>)
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f002 f9ae 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d008      	beq.n	800b830 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e10e      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
 800b822:	bf00      	nop
 800b824:	00100002 	.word	0x00100002
 800b828:	ffff0000 	.word	0xffff0000
 800b82c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b83e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691a      	ldr	r2, [r3, #16]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	b2d2      	uxtb	r2, r2
 800b84c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b85c:	3b01      	subs	r3, #1
 800b85e:	b29a      	uxth	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b868:	b29b      	uxth	r3, r3
 800b86a:	3b01      	subs	r3, #1
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	691a      	ldr	r2, [r3, #16]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	b2d2      	uxtb	r2, r2
 800b87e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88e:	3b01      	subs	r3, #1
 800b890:	b29a      	uxth	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	3b01      	subs	r3, #1
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8a4:	e0b8      	b.n	800ba18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4966      	ldr	r1, [pc, #408]	; (800ba48 <HAL_I2C_Mem_Read+0x448>)
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f002 f95f 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e0bf      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	691a      	ldr	r2, [r3, #16]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	b2d2      	uxtb	r2, r2
 800b8dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	2200      	movs	r2, #0
 800b90a:	494f      	ldr	r1, [pc, #316]	; (800ba48 <HAL_I2C_Mem_Read+0x448>)
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f002 f931 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e091      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b92a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	691a      	ldr	r2, [r3, #16]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b936:	b2d2      	uxtb	r2, r2
 800b938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b948:	3b01      	subs	r3, #1
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b954:	b29b      	uxth	r3, r3
 800b956:	3b01      	subs	r3, #1
 800b958:	b29a      	uxth	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	691a      	ldr	r2, [r3, #16]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b968:	b2d2      	uxtb	r2, r2
 800b96a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b97a:	3b01      	subs	r3, #1
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b986:	b29b      	uxth	r3, r3
 800b988:	3b01      	subs	r3, #1
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b990:	e042      	b.n	800ba18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f002 fa76 	bl	800de88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e04c      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	691a      	ldr	r2, [r3, #16]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	b2d2      	uxtb	r2, r2
 800b9b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	f003 0304 	and.w	r3, r3, #4
 800b9e2:	2b04      	cmp	r3, #4
 800b9e4:	d118      	bne.n	800ba18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	691a      	ldr	r2, [r3, #16]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	b2d2      	uxtb	r2, r2
 800b9f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba02:	3b01      	subs	r3, #1
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	3b01      	subs	r3, #1
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f47f aec2 	bne.w	800b7a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	e000      	b.n	800ba40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ba3e:	2302      	movs	r3, #2
  }
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3728      	adds	r7, #40	; 0x28
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	00010004 	.word	0x00010004

0800ba4c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08a      	sub	sp, #40	; 0x28
 800ba50:	af02      	add	r7, sp, #8
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	817b      	strh	r3, [r7, #10]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	813b      	strh	r3, [r7, #8]
 800ba62:	4613      	mov	r3, r2
 800ba64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba6a:	f7fe fc79 	bl	800a360 <HAL_GetTick>
 800ba6e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b20      	cmp	r3, #32
 800ba7a:	f040 8145 	bne.w	800bd08 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800ba7e:	4b9d      	ldr	r3, [pc, #628]	; (800bcf4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	08db      	lsrs	r3, r3, #3
 800ba84:	4a9c      	ldr	r2, [pc, #624]	; (800bcf8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800ba86:	fba2 2303 	umull	r2, r3, r2, r3
 800ba8a:	0a1a      	lsrs	r2, r3, #8
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4413      	add	r3, r2
 800ba92:	009a      	lsls	r2, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d116      	bne.n	800bad2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2220      	movs	r2, #32
 800baae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	f043 0220 	orr.w	r2, r3, #32
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e11b      	b.n	800bd0a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b02      	cmp	r3, #2
 800bade:	d0db      	beq.n	800ba98 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d101      	bne.n	800baee <HAL_I2C_Mem_Write_DMA+0xa2>
 800baea:	2302      	movs	r3, #2
 800baec:	e10d      	b.n	800bd0a <HAL_I2C_Mem_Write_DMA+0x2be>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d007      	beq.n	800bb14 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f042 0201 	orr.w	r2, r2, #1
 800bb12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2221      	movs	r2, #33	; 0x21
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2240      	movs	r2, #64	; 0x40
 800bb30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bb44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a6a      	ldr	r2, [pc, #424]	; (800bcfc <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800bb54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bb56:	897a      	ldrh	r2, [r7, #10]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800bb5c:	893a      	ldrh	r2, [r7, #8]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800bb62:	88fa      	ldrh	r2, [r7, #6]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 80a9 	beq.w	800bcca <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d02a      	beq.n	800bbd6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb84:	4a5e      	ldr	r2, [pc, #376]	; (800bd00 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800bb86:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	4a5d      	ldr	r2, [pc, #372]	; (800bd04 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800bb8e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb94:	2200      	movs	r2, #0
 800bb96:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba4:	2200      	movs	r2, #0
 800bba6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbac:	2200      	movs	r2, #0
 800bbae:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb8:	4619      	mov	r1, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3310      	adds	r3, #16
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbc6:	f7fe fdbb 	bl	800a740 <HAL_DMA_Start_IT>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bbce:	7efb      	ldrb	r3, [r7, #27]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d166      	bne.n	800bca2 <HAL_I2C_Mem_Write_DMA+0x256>
 800bbd4:	e013      	b.n	800bbfe <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2220      	movs	r2, #32
 800bbda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e085      	b.n	800bd0a <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800bbfe:	88f8      	ldrh	r0, [r7, #6]
 800bc00:	893a      	ldrh	r2, [r7, #8]
 800bc02:	8979      	ldrh	r1, [r7, #10]
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	2323      	movs	r3, #35	; 0x23
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f001 fc78 	bl	800d504 <I2C_RequestMemoryWrite>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d022      	beq.n	800bc60 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fe56 	bl	800a8d0 <HAL_DMA_Abort_IT>
 800bc24:	4603      	mov	r3, r0
 800bc26:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc3e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f022 0201 	bic.w	r2, r2, #1
 800bc5a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e054      	b.n	800bd0a <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc60:	2300      	movs	r3, #0
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	613b      	str	r3, [r7, #16]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	613b      	str	r3, [r7, #16]
 800bc74:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc8c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc9c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e033      	b.n	800bd0a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2220      	movs	r2, #32
 800bca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb6:	f043 0210 	orr.w	r2, r3, #16
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e01f      	b.n	800bd0a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2220      	movs	r2, #32
 800bcce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e00b      	b.n	800bd0a <HAL_I2C_Mem_Write_DMA+0x2be>
 800bcf2:	bf00      	nop
 800bcf4:	200011dc 	.word	0x200011dc
 800bcf8:	14f8b589 	.word	0x14f8b589
 800bcfc:	ffff0000 	.word	0xffff0000
 800bd00:	0800d801 	.word	0x0800d801
 800bd04:	0800d9ab 	.word	0x0800d9ab
    }
  }
  else
  {
    return HAL_BUSY;
 800bd08:	2302      	movs	r3, #2
  }
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3720      	adds	r7, #32
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop

0800bd14 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08a      	sub	sp, #40	; 0x28
 800bd18:	af02      	add	r7, sp, #8
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	607a      	str	r2, [r7, #4]
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	460b      	mov	r3, r1
 800bd22:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800bd24:	f7fe fb1c 	bl	800a360 <HAL_GetTick>
 800bd28:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	f040 8111 	bne.w	800bf5e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	2319      	movs	r3, #25
 800bd42:	2201      	movs	r2, #1
 800bd44:	4988      	ldr	r1, [pc, #544]	; (800bf68 <HAL_I2C_IsDeviceReady+0x254>)
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f001 ff14 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d001      	beq.n	800bd56 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800bd52:	2302      	movs	r3, #2
 800bd54:	e104      	b.n	800bf60 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d101      	bne.n	800bd64 <HAL_I2C_IsDeviceReady+0x50>
 800bd60:	2302      	movs	r3, #2
 800bd62:	e0fd      	b.n	800bf60 <HAL_I2C_IsDeviceReady+0x24c>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d007      	beq.n	800bd8a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f042 0201 	orr.w	r2, r2, #1
 800bd88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2224      	movs	r2, #36	; 0x24
 800bd9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	4a70      	ldr	r2, [pc, #448]	; (800bf6c <HAL_I2C_IsDeviceReady+0x258>)
 800bdac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdbc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f001 fed2 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00d      	beq.n	800bdf2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde4:	d103      	bne.n	800bdee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e0b6      	b.n	800bf60 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdf2:	897b      	ldrh	r3, [r7, #10]
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800be00:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800be02:	f7fe faad 	bl	800a360 <HAL_GetTick>
 800be06:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	695b      	ldr	r3, [r3, #20]
 800be0e:	f003 0302 	and.w	r3, r3, #2
 800be12:	2b02      	cmp	r3, #2
 800be14:	bf0c      	ite	eq
 800be16:	2301      	moveq	r3, #1
 800be18:	2300      	movne	r3, #0
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be2c:	bf0c      	ite	eq
 800be2e:	2301      	moveq	r3, #1
 800be30:	2300      	movne	r3, #0
 800be32:	b2db      	uxtb	r3, r3
 800be34:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800be36:	e025      	b.n	800be84 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800be38:	f7fe fa92 	bl	800a360 <HAL_GetTick>
 800be3c:	4602      	mov	r2, r0
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d302      	bcc.n	800be4e <HAL_I2C_IsDeviceReady+0x13a>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d103      	bne.n	800be56 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	22a0      	movs	r2, #160	; 0xa0
 800be52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	695b      	ldr	r3, [r3, #20]
 800be5c:	f003 0302 	and.w	r3, r3, #2
 800be60:	2b02      	cmp	r3, #2
 800be62:	bf0c      	ite	eq
 800be64:	2301      	moveq	r3, #1
 800be66:	2300      	movne	r3, #0
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be7a:	bf0c      	ite	eq
 800be7c:	2301      	moveq	r3, #1
 800be7e:	2300      	movne	r3, #0
 800be80:	b2db      	uxtb	r3, r3
 800be82:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2ba0      	cmp	r3, #160	; 0xa0
 800be8e:	d005      	beq.n	800be9c <HAL_I2C_IsDeviceReady+0x188>
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d102      	bne.n	800be9c <HAL_I2C_IsDeviceReady+0x188>
 800be96:	7dbb      	ldrb	r3, [r7, #22]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0cd      	beq.n	800be38 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2220      	movs	r2, #32
 800bea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d129      	bne.n	800bf06 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bec0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bec2:	2300      	movs	r3, #0
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	613b      	str	r3, [r7, #16]
 800bed6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	2319      	movs	r3, #25
 800bede:	2201      	movs	r2, #1
 800bee0:	4921      	ldr	r1, [pc, #132]	; (800bf68 <HAL_I2C_IsDeviceReady+0x254>)
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f001 fe46 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	e036      	b.n	800bf60 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	e02c      	b.n	800bf60 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf14:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bf1e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	2319      	movs	r3, #25
 800bf26:	2201      	movs	r2, #1
 800bf28:	490f      	ldr	r1, [pc, #60]	; (800bf68 <HAL_I2C_IsDeviceReady+0x254>)
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f001 fe22 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e012      	b.n	800bf60 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800bf40:	69ba      	ldr	r2, [r7, #24]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	f4ff af32 	bcc.w	800bdae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e000      	b.n	800bf60 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800bf5e:	2302      	movs	r3, #2
  }
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3720      	adds	r7, #32
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	00100002 	.word	0x00100002
 800bf6c:	ffff0000 	.word	0xffff0000

0800bf70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf98:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	2b10      	cmp	r3, #16
 800bf9e:	d003      	beq.n	800bfa8 <HAL_I2C_EV_IRQHandler+0x38>
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b40      	cmp	r3, #64	; 0x40
 800bfa4:	f040 80c1 	bne.w	800c12a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10d      	bne.n	800bfde <HAL_I2C_EV_IRQHandler+0x6e>
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bfc8:	d003      	beq.n	800bfd2 <HAL_I2C_EV_IRQHandler+0x62>
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bfd0:	d101      	bne.n	800bfd6 <HAL_I2C_EV_IRQHandler+0x66>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e000      	b.n	800bfd8 <HAL_I2C_EV_IRQHandler+0x68>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	f000 8132 	beq.w	800c242 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00c      	beq.n	800c002 <HAL_I2C_EV_IRQHandler+0x92>
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	0a5b      	lsrs	r3, r3, #9
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d006      	beq.n	800c002 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f001 ffcc 	bl	800df92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fcd6 	bl	800c9ac <I2C_Master_SB>
 800c000:	e092      	b.n	800c128 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	08db      	lsrs	r3, r3, #3
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d009      	beq.n	800c022 <HAL_I2C_EV_IRQHandler+0xb2>
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	0a5b      	lsrs	r3, r3, #9
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fd4c 	bl	800cab8 <I2C_Master_ADD10>
 800c020:	e082      	b.n	800c128 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	085b      	lsrs	r3, r3, #1
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d009      	beq.n	800c042 <HAL_I2C_EV_IRQHandler+0xd2>
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	0a5b      	lsrs	r3, r3, #9
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fd66 	bl	800cb0c <I2C_Master_ADDR>
 800c040:	e072      	b.n	800c128 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	089b      	lsrs	r3, r3, #2
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d03b      	beq.n	800c0c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c05c:	f000 80f3 	beq.w	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	09db      	lsrs	r3, r3, #7
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00f      	beq.n	800c08c <HAL_I2C_EV_IRQHandler+0x11c>
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	0a9b      	lsrs	r3, r3, #10
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d009      	beq.n	800c08c <HAL_I2C_EV_IRQHandler+0x11c>
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	089b      	lsrs	r3, r3, #2
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	2b00      	cmp	r3, #0
 800c082:	d103      	bne.n	800c08c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f946 	bl	800c316 <I2C_MasterTransmit_TXE>
 800c08a:	e04d      	b.n	800c128 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	089b      	lsrs	r3, r3, #2
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 80d6 	beq.w	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	0a5b      	lsrs	r3, r3, #9
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 80cf 	beq.w	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	2b21      	cmp	r3, #33	; 0x21
 800c0ac:	d103      	bne.n	800c0b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f9cd 	bl	800c44e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0b4:	e0c7      	b.n	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	2b40      	cmp	r3, #64	; 0x40
 800c0ba:	f040 80c4 	bne.w	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fa3b 	bl	800c53a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c0c4:	e0bf      	b.n	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0d4:	f000 80b7 	beq.w	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	099b      	lsrs	r3, r3, #6
 800c0dc:	f003 0301 	and.w	r3, r3, #1
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00f      	beq.n	800c104 <HAL_I2C_EV_IRQHandler+0x194>
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	0a9b      	lsrs	r3, r3, #10
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d009      	beq.n	800c104 <HAL_I2C_EV_IRQHandler+0x194>
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	089b      	lsrs	r3, r3, #2
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d103      	bne.n	800c104 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fab0 	bl	800c662 <I2C_MasterReceive_RXNE>
 800c102:	e011      	b.n	800c128 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	089b      	lsrs	r3, r3, #2
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 809a 	beq.w	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	0a5b      	lsrs	r3, r3, #9
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 8093 	beq.w	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fb59 	bl	800c7d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c126:	e08e      	b.n	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
 800c128:	e08d      	b.n	800c246 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d004      	beq.n	800c13c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	61fb      	str	r3, [r7, #28]
 800c13a:	e007      	b.n	800c14c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d012      	beq.n	800c17e <HAL_I2C_EV_IRQHandler+0x20e>
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	0a5b      	lsrs	r3, r3, #9
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00c      	beq.n	800c17e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c174:	69b9      	ldr	r1, [r7, #24]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 ff17 	bl	800cfaa <I2C_Slave_ADDR>
 800c17c:	e066      	b.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	091b      	lsrs	r3, r3, #4
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	d009      	beq.n	800c19e <HAL_I2C_EV_IRQHandler+0x22e>
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	0a5b      	lsrs	r3, r3, #9
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	d003      	beq.n	800c19e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 ff52 	bl	800d040 <I2C_Slave_STOPF>
 800c19c:	e056      	b.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	2b21      	cmp	r3, #33	; 0x21
 800c1a2:	d002      	beq.n	800c1aa <HAL_I2C_EV_IRQHandler+0x23a>
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b29      	cmp	r3, #41	; 0x29
 800c1a8:	d125      	bne.n	800c1f6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	09db      	lsrs	r3, r3, #7
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00f      	beq.n	800c1d6 <HAL_I2C_EV_IRQHandler+0x266>
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	0a9b      	lsrs	r3, r3, #10
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d009      	beq.n	800c1d6 <HAL_I2C_EV_IRQHandler+0x266>
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	089b      	lsrs	r3, r3, #2
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d103      	bne.n	800c1d6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fe2d 	bl	800ce2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c1d4:	e039      	b.n	800c24a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	089b      	lsrs	r3, r3, #2
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d033      	beq.n	800c24a <HAL_I2C_EV_IRQHandler+0x2da>
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	0a5b      	lsrs	r3, r3, #9
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d02d      	beq.n	800c24a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fe5a 	bl	800cea8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c1f4:	e029      	b.n	800c24a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	099b      	lsrs	r3, r3, #6
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00f      	beq.n	800c222 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	0a9b      	lsrs	r3, r3, #10
 800c206:	f003 0301 	and.w	r3, r3, #1
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d009      	beq.n	800c222 <HAL_I2C_EV_IRQHandler+0x2b2>
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	089b      	lsrs	r3, r3, #2
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d103      	bne.n	800c222 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fe65 	bl	800ceea <I2C_SlaveReceive_RXNE>
 800c220:	e014      	b.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	089b      	lsrs	r3, r3, #2
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00e      	beq.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	0a5b      	lsrs	r3, r3, #9
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d008      	beq.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fe93 	bl	800cf66 <I2C_SlaveReceive_BTF>
 800c240:	e004      	b.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800c242:	bf00      	nop
 800c244:	e002      	b.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c246:	bf00      	nop
 800c248:	e000      	b.n	800c24c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c24a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c252:	b480      	push	{r7}
 800c254:	b083      	sub	sp, #12
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c26e:	bf00      	nop
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c282:	bf00      	nop
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	70fb      	strb	r3, [r7, #3]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c2b2:	bf00      	nop
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2be:	b480      	push	{r7}
 800c2c0:	b083      	sub	sp, #12
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c2c6:	bf00      	nop
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c2da:	bf00      	nop
 800c2dc:	370c      	adds	r7, #12
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b083      	sub	sp, #12
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c2ee:	bf00      	nop
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c2fa:	b480      	push	{r7}
 800c2fc:	b083      	sub	sp, #12
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c308:	b2db      	uxtb	r3, r3
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	370c      	adds	r7, #12
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c324:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c32c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c332:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d150      	bne.n	800c3de <I2C_MasterTransmit_TXE+0xc8>
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
 800c33e:	2b21      	cmp	r3, #33	; 0x21
 800c340:	d14d      	bne.n	800c3de <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2b08      	cmp	r3, #8
 800c346:	d01d      	beq.n	800c384 <I2C_MasterTransmit_TXE+0x6e>
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2b20      	cmp	r3, #32
 800c34c:	d01a      	beq.n	800c384 <I2C_MasterTransmit_TXE+0x6e>
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c354:	d016      	beq.n	800c384 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c364:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2211      	movs	r2, #17
 800c36a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2220      	movs	r2, #32
 800c378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff ff68 	bl	800c252 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c382:	e060      	b.n	800c446 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c392:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3a2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b40      	cmp	r3, #64	; 0x40
 800c3bc:	d107      	bne.n	800c3ce <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7f5 fa2c 	bl	8001824 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c3cc:	e03b      	b.n	800c446 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff ff3b 	bl	800c252 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c3dc:	e033      	b.n	800c446 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	2b21      	cmp	r3, #33	; 0x21
 800c3e2:	d005      	beq.n	800c3f0 <I2C_MasterTransmit_TXE+0xda>
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	2b40      	cmp	r3, #64	; 0x40
 800c3e8:	d12d      	bne.n	800c446 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c3ea:	7bfb      	ldrb	r3, [r7, #15]
 800c3ec:	2b22      	cmp	r3, #34	; 0x22
 800c3ee:	d12a      	bne.n	800c446 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d108      	bne.n	800c40c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c408:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c40a:	e01c      	b.n	800c446 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2b40      	cmp	r3, #64	; 0x40
 800c416:	d103      	bne.n	800c420 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f88e 	bl	800c53a <I2C_MemoryTransmit_TXE_BTF>
}
 800c41e:	e012      	b.n	800c446 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c424:	781a      	ldrb	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	3b01      	subs	r3, #1
 800c43e:	b29a      	uxth	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c444:	e7ff      	b.n	800c446 <I2C_MasterTransmit_TXE+0x130>
 800c446:	bf00      	nop
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b21      	cmp	r3, #33	; 0x21
 800c466:	d164      	bne.n	800c532 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d012      	beq.n	800c498 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c476:	781a      	ldrb	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c482:	1c5a      	adds	r2, r3, #1
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	3b01      	subs	r3, #1
 800c490:	b29a      	uxth	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c496:	e04c      	b.n	800c532 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b08      	cmp	r3, #8
 800c49c:	d01d      	beq.n	800c4da <I2C_MasterTransmit_BTF+0x8c>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b20      	cmp	r3, #32
 800c4a2:	d01a      	beq.n	800c4da <I2C_MasterTransmit_BTF+0x8c>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4aa:	d016      	beq.n	800c4da <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c4ba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2211      	movs	r2, #17
 800c4c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff febd 	bl	800c252 <HAL_I2C_MasterTxCpltCallback>
}
 800c4d8:	e02b      	b.n	800c532 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c4e8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4f8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2220      	movs	r2, #32
 800c504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b40      	cmp	r3, #64	; 0x40
 800c512:	d107      	bne.n	800c524 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7f5 f981 	bl	8001824 <HAL_I2C_MemTxCpltCallback>
}
 800c522:	e006      	b.n	800c532 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff fe90 	bl	800c252 <HAL_I2C_MasterTxCpltCallback>
}
 800c532:	bf00      	nop
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b084      	sub	sp, #16
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c548:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d11d      	bne.n	800c58e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c556:	2b01      	cmp	r3, #1
 800c558:	d10b      	bne.n	800c572 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c56a:	1c9a      	adds	r2, r3, #2
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c570:	e073      	b.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c576:	b29b      	uxth	r3, r3
 800c578:	121b      	asrs	r3, r3, #8
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c58c:	e065      	b.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c592:	2b01      	cmp	r3, #1
 800c594:	d10b      	bne.n	800c5ae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c5ac:	e055      	b.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d151      	bne.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	2b22      	cmp	r3, #34	; 0x22
 800c5ba:	d10d      	bne.n	800c5d8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5ca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c5d6:	e040      	b.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d015      	beq.n	800c60e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
 800c5e4:	2b21      	cmp	r3, #33	; 0x21
 800c5e6:	d112      	bne.n	800c60e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ec:	781a      	ldrb	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c602:	b29b      	uxth	r3, r3
 800c604:	3b01      	subs	r3, #1
 800c606:	b29a      	uxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c60c:	e025      	b.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c612:	b29b      	uxth	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d120      	bne.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	2b21      	cmp	r3, #33	; 0x21
 800c61c:	d11d      	bne.n	800c65a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	685a      	ldr	r2, [r3, #4]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c62c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c63c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2220      	movs	r2, #32
 800c648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7f5 f8e5 	bl	8001824 <HAL_I2C_MemTxCpltCallback>
}
 800c65a:	bf00      	nop
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b22      	cmp	r3, #34	; 0x22
 800c674:	f040 80ac 	bne.w	800c7d0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b03      	cmp	r3, #3
 800c684:	d921      	bls.n	800c6ca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	691a      	ldr	r2, [r3, #16]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	b2d2      	uxtb	r2, r2
 800c692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	f040 808c 	bne.w	800c7d0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800c6c8:	e082      	b.n	800c7d0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d075      	beq.n	800c7be <I2C_MasterReceive_RXNE+0x15c>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d002      	beq.n	800c6de <I2C_MasterReceive_RXNE+0x7c>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d16f      	bne.n	800c7be <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f001 fba0 	bl	800de24 <I2C_WaitOnSTOPRequestThroughIT>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d142      	bne.n	800c770 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c708:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	691a      	ldr	r2, [r3, #16]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c714:	b2d2      	uxtb	r2, r2
 800c716:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71c:	1c5a      	adds	r2, r3, #1
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c726:	b29b      	uxth	r3, r3
 800c728:	3b01      	subs	r3, #1
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2220      	movs	r2, #32
 800c734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b40      	cmp	r3, #64	; 0x40
 800c742:	d10a      	bne.n	800c75a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7f5 f890 	bl	8001878 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c758:	e03a      	b.n	800c7d0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2212      	movs	r2, #18
 800c766:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff fd7c 	bl	800c266 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c76e:	e02f      	b.n	800c7d0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c77e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	691a      	ldr	r2, [r3, #16]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78a:	b2d2      	uxtb	r2, r2
 800c78c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff fd8b 	bl	800c2d2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c7bc:	e008      	b.n	800c7d0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7cc:	605a      	str	r2, [r3, #4]
}
 800c7ce:	e7ff      	b.n	800c7d0 <I2C_MasterReceive_RXNE+0x16e>
 800c7d0:	bf00      	nop
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	2b04      	cmp	r3, #4
 800c7ee:	d11b      	bne.n	800c828 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	691a      	ldr	r2, [r3, #16]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	b2d2      	uxtb	r2, r2
 800c80c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	3b01      	subs	r3, #1
 800c820:	b29a      	uxth	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c826:	e0bd      	b.n	800c9a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	2b03      	cmp	r3, #3
 800c830:	d129      	bne.n	800c886 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	685a      	ldr	r2, [r3, #4]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c840:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b04      	cmp	r3, #4
 800c846:	d00a      	beq.n	800c85e <I2C_MasterReceive_BTF+0x86>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d007      	beq.n	800c85e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c85c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	691a      	ldr	r2, [r3, #16]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c868:	b2d2      	uxtb	r2, r2
 800c86a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	3b01      	subs	r3, #1
 800c87e:	b29a      	uxth	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c884:	e08e      	b.n	800c9a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d176      	bne.n	800c97e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d002      	beq.n	800c89c <I2C_MasterReceive_BTF+0xc4>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b10      	cmp	r3, #16
 800c89a:	d108      	bne.n	800c8ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	e019      	b.n	800c8e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d002      	beq.n	800c8ba <I2C_MasterReceive_BTF+0xe2>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d108      	bne.n	800c8cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	e00a      	b.n	800c8e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b10      	cmp	r3, #16
 800c8d0:	d007      	beq.n	800c8e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	691a      	ldr	r2, [r3, #16]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	3b01      	subs	r3, #1
 800c902:	b29a      	uxth	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	691a      	ldr	r2, [r3, #16]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c912:	b2d2      	uxtb	r2, r2
 800c914:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c924:	b29b      	uxth	r3, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	b29a      	uxth	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c93c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2220      	movs	r2, #32
 800c942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b40      	cmp	r3, #64	; 0x40
 800c950:	d10a      	bne.n	800c968 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7f4 ff89 	bl	8001878 <HAL_I2C_MemRxCpltCallback>
}
 800c966:	e01d      	b.n	800c9a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2212      	movs	r2, #18
 800c974:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff fc75 	bl	800c266 <HAL_I2C_MasterRxCpltCallback>
}
 800c97c:	e012      	b.n	800c9a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	691a      	ldr	r2, [r3, #16]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c988:	b2d2      	uxtb	r2, r2
 800c98a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	1c5a      	adds	r2, r3, #1
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	3b01      	subs	r3, #1
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c9a4:	bf00      	nop
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b40      	cmp	r3, #64	; 0x40
 800c9be:	d117      	bne.n	800c9f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d109      	bne.n	800c9dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c9d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c9da:	e067      	b.n	800caac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	f043 0301 	orr.w	r3, r3, #1
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	611a      	str	r2, [r3, #16]
}
 800c9ee:	e05d      	b.n	800caac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9f8:	d133      	bne.n	800ca62 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b21      	cmp	r3, #33	; 0x21
 800ca04:	d109      	bne.n	800ca1a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ca16:	611a      	str	r2, [r3, #16]
 800ca18:	e008      	b.n	800ca2c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	f043 0301 	orr.w	r3, r3, #1
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <I2C_Master_SB+0x92>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d108      	bne.n	800ca50 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d032      	beq.n	800caac <I2C_Master_SB+0x100>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d02d      	beq.n	800caac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca5e:	605a      	str	r2, [r3, #4]
}
 800ca60:	e024      	b.n	800caac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10e      	bne.n	800ca88 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	11db      	asrs	r3, r3, #7
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 0306 	and.w	r3, r3, #6
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	f063 030f 	orn	r3, r3, #15
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	611a      	str	r2, [r3, #16]
}
 800ca86:	e011      	b.n	800caac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d10d      	bne.n	800caac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	11db      	asrs	r3, r3, #7
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	f003 0306 	and.w	r3, r3, #6
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	f063 030e 	orn	r3, r3, #14
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	611a      	str	r2, [r3, #16]
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d004      	beq.n	800cade <I2C_Master_ADD10+0x26>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d108      	bne.n	800caf0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00c      	beq.n	800cb00 <I2C_Master_ADD10+0x48>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d007      	beq.n	800cb00 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cafe:	605a      	str	r2, [r3, #4]
  }
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b091      	sub	sp, #68	; 0x44
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b22      	cmp	r3, #34	; 0x22
 800cb34:	f040 8169 	bne.w	800ce0a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10f      	bne.n	800cb60 <I2C_Master_ADDR+0x54>
 800cb40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb44:	2b40      	cmp	r3, #64	; 0x40
 800cb46:	d10b      	bne.n	800cb60 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb48:	2300      	movs	r3, #0
 800cb4a:	633b      	str	r3, [r7, #48]	; 0x30
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	633b      	str	r3, [r7, #48]	; 0x30
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	633b      	str	r3, [r7, #48]	; 0x30
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	e160      	b.n	800ce22 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d11d      	bne.n	800cba4 <I2C_Master_ADDR+0x98>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb70:	d118      	bne.n	800cba4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb72:	2300      	movs	r3, #0
 800cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb96:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	651a      	str	r2, [r3, #80]	; 0x50
 800cba2:	e13e      	b.n	800ce22 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d113      	bne.n	800cbd6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbae:	2300      	movs	r3, #0
 800cbb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	695b      	ldr	r3, [r3, #20]
 800cbb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e115      	b.n	800ce02 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	f040 808a 	bne.w	800ccf6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cbe8:	d137      	bne.n	800cc5a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbf8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc08:	d113      	bne.n	800cc32 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc18:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	627b      	str	r3, [r7, #36]	; 0x24
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc30:	e0e7      	b.n	800ce02 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc32:	2300      	movs	r3, #0
 800cc34:	623b      	str	r3, [r7, #32]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	623b      	str	r3, [r7, #32]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	623b      	str	r3, [r7, #32]
 800cc46:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc56:	601a      	str	r2, [r3, #0]
 800cc58:	e0d3      	b.n	800ce02 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	2b08      	cmp	r3, #8
 800cc5e:	d02e      	beq.n	800ccbe <I2C_Master_ADDR+0x1b2>
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	2b20      	cmp	r3, #32
 800cc64:	d02b      	beq.n	800ccbe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800cc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc68:	2b12      	cmp	r3, #18
 800cc6a:	d102      	bne.n	800cc72 <I2C_Master_ADDR+0x166>
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d125      	bne.n	800ccbe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc74:	2b04      	cmp	r3, #4
 800cc76:	d00e      	beq.n	800cc96 <I2C_Master_ADDR+0x18a>
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d00b      	beq.n	800cc96 <I2C_Master_ADDR+0x18a>
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc80:	2b10      	cmp	r3, #16
 800cc82:	d008      	beq.n	800cc96 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	e007      	b.n	800cca6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cca4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cca6:	2300      	movs	r3, #0
 800cca8:	61fb      	str	r3, [r7, #28]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	61fb      	str	r3, [r7, #28]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	61fb      	str	r3, [r7, #28]
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	e0a1      	b.n	800ce02 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cccc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	61bb      	str	r3, [r7, #24]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	61bb      	str	r3, [r7, #24]
 800cce2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	e085      	b.n	800ce02 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d14d      	bne.n	800cd9c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	2b04      	cmp	r3, #4
 800cd04:	d016      	beq.n	800cd34 <I2C_Master_ADDR+0x228>
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d013      	beq.n	800cd34 <I2C_Master_ADDR+0x228>
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	2b10      	cmp	r3, #16
 800cd10:	d010      	beq.n	800cd34 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd20:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	e007      	b.n	800cd44 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd42:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd52:	d117      	bne.n	800cd84 <I2C_Master_ADDR+0x278>
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cd5a:	d00b      	beq.n	800cd74 <I2C_Master_ADDR+0x268>
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d008      	beq.n	800cd74 <I2C_Master_ADDR+0x268>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	2b08      	cmp	r3, #8
 800cd66:	d005      	beq.n	800cd74 <I2C_Master_ADDR+0x268>
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	2b10      	cmp	r3, #16
 800cd6c:	d002      	beq.n	800cd74 <I2C_Master_ADDR+0x268>
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	2b20      	cmp	r3, #32
 800cd72:	d107      	bne.n	800cd84 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd84:	2300      	movs	r3, #0
 800cd86:	617b      	str	r3, [r7, #20]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	617b      	str	r3, [r7, #20]
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	e032      	b.n	800ce02 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cdaa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdba:	d117      	bne.n	800cdec <I2C_Master_ADDR+0x2e0>
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cdc2:	d00b      	beq.n	800cddc <I2C_Master_ADDR+0x2d0>
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d008      	beq.n	800cddc <I2C_Master_ADDR+0x2d0>
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	2b08      	cmp	r3, #8
 800cdce:	d005      	beq.n	800cddc <I2C_Master_ADDR+0x2d0>
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	2b10      	cmp	r3, #16
 800cdd4:	d002      	beq.n	800cddc <I2C_Master_ADDR+0x2d0>
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	2b20      	cmp	r3, #32
 800cdda:	d107      	bne.n	800cdec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	685a      	ldr	r2, [r3, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cdec:	2300      	movs	r3, #0
 800cdee:	613b      	str	r3, [r7, #16]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	613b      	str	r3, [r7, #16]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ce08:	e00b      	b.n	800ce22 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	60fb      	str	r3, [r7, #12]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
}
 800ce20:	e7ff      	b.n	800ce22 <I2C_Master_ADDR+0x316>
 800ce22:	bf00      	nop
 800ce24:	3744      	adds	r7, #68	; 0x44
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d02b      	beq.n	800cea0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	781a      	ldrb	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	3b01      	subs	r3, #1
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d114      	bne.n	800cea0 <I2C_SlaveTransmit_TXE+0x72>
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
 800ce78:	2b29      	cmp	r3, #41	; 0x29
 800ce7a:	d111      	bne.n	800cea0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2221      	movs	r2, #33	; 0x21
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2228      	movs	r2, #40	; 0x28
 800ce96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff f9ed 	bl	800c27a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cea0:	bf00      	nop
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d011      	beq.n	800cede <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cebe:	781a      	ldrb	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	3b01      	subs	r3, #1
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cede:	bf00      	nop
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d02c      	beq.n	800cf5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	691a      	ldr	r2, [r3, #16]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0e:	b2d2      	uxtb	r2, r2
 800cf10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	3b01      	subs	r3, #1
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d114      	bne.n	800cf5e <I2C_SlaveReceive_RXNE+0x74>
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
 800cf36:	2b2a      	cmp	r3, #42	; 0x2a
 800cf38:	d111      	bne.n	800cf5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2222      	movs	r2, #34	; 0x22
 800cf4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2228      	movs	r2, #40	; 0x28
 800cf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff f998 	bl	800c28e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cf5e:	bf00      	nop
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cf66:	b480      	push	{r7}
 800cf68:	b083      	sub	sp, #12
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d012      	beq.n	800cf9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	691a      	ldr	r2, [r3, #16]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf82:	b2d2      	uxtb	r2, r2
 800cf84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	3b01      	subs	r3, #1
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800cf9e:	bf00      	nop
 800cfa0:	370c      	adds	r7, #12
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cfc4:	2b28      	cmp	r3, #40	; 0x28
 800cfc6:	d127      	bne.n	800d018 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfd6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	089b      	lsrs	r3, r3, #2
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	09db      	lsrs	r3, r3, #7
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d103      	bne.n	800cffc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	81bb      	strh	r3, [r7, #12]
 800cffa:	e002      	b.n	800d002 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d00a:	89ba      	ldrh	r2, [r7, #12]
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	4619      	mov	r1, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7ff f946 	bl	800c2a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d016:	e00e      	b.n	800d036 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d018:	2300      	movs	r3, #0
 800d01a:	60bb      	str	r3, [r7, #8]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	60bb      	str	r3, [r7, #8]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	60bb      	str	r3, [r7, #8]
 800d02c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d036:	bf00      	nop
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d04e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d05e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d060:	2300      	movs	r3, #0
 800d062:	60bb      	str	r3, [r7, #8]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	695b      	ldr	r3, [r3, #20]
 800d06a:	60bb      	str	r3, [r7, #8]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f042 0201 	orr.w	r2, r2, #1
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d08c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d09c:	d172      	bne.n	800d184 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	2b22      	cmp	r3, #34	; 0x22
 800d0a2:	d002      	beq.n	800d0aa <I2C_Slave_STOPF+0x6a>
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d0a8:	d135      	bne.n	800d116 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d005      	beq.n	800d0ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	f043 0204 	orr.w	r2, r3, #4
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fd fda0 	bl	800ac28 <HAL_DMA_GetState>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d049      	beq.n	800d182 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f2:	4a69      	ldr	r2, [pc, #420]	; (800d298 <I2C_Slave_STOPF+0x258>)
 800d0f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fd fbe8 	bl	800a8d0 <HAL_DMA_Abort_IT>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d03d      	beq.n	800d182 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d110:	4610      	mov	r0, r2
 800d112:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d114:	e035      	b.n	800d182 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	b29a      	uxth	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d128:	b29b      	uxth	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d005      	beq.n	800d13a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d132:	f043 0204 	orr.w	r2, r3, #4
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	685a      	ldr	r2, [r3, #4]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d148:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fd fd6a 	bl	800ac28 <HAL_DMA_GetState>
 800d154:	4603      	mov	r3, r0
 800d156:	2b01      	cmp	r3, #1
 800d158:	d014      	beq.n	800d184 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d15e:	4a4e      	ldr	r2, [pc, #312]	; (800d298 <I2C_Slave_STOPF+0x258>)
 800d160:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d166:	4618      	mov	r0, r3
 800d168:	f7fd fbb2 	bl	800a8d0 <HAL_DMA_Abort_IT>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d008      	beq.n	800d184 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d17c:	4610      	mov	r0, r2
 800d17e:	4798      	blx	r3
 800d180:	e000      	b.n	800d184 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d182:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d188:	b29b      	uxth	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d03e      	beq.n	800d20c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	695b      	ldr	r3, [r3, #20]
 800d194:	f003 0304 	and.w	r3, r3, #4
 800d198:	2b04      	cmp	r3, #4
 800d19a:	d112      	bne.n	800d1c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	691a      	ldr	r2, [r3, #16]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ae:	1c5a      	adds	r2, r3, #1
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1cc:	2b40      	cmp	r3, #64	; 0x40
 800d1ce:	d112      	bne.n	800d1f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	691a      	ldr	r2, [r3, #16]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1da:	b2d2      	uxtb	r2, r2
 800d1dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e2:	1c5a      	adds	r2, r3, #1
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d005      	beq.n	800d20c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d204:	f043 0204 	orr.w	r2, r3, #4
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d210:	2b00      	cmp	r3, #0
 800d212:	d003      	beq.n	800d21c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f843 	bl	800d2a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d21a:	e039      	b.n	800d290 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
 800d21e:	2b2a      	cmp	r3, #42	; 0x2a
 800d220:	d109      	bne.n	800d236 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2228      	movs	r2, #40	; 0x28
 800d22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff f82c 	bl	800c28e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b28      	cmp	r3, #40	; 0x28
 800d240:	d111      	bne.n	800d266 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a15      	ldr	r2, [pc, #84]	; (800d29c <I2C_Slave_STOPF+0x25c>)
 800d246:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2220      	movs	r2, #32
 800d252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7ff f82d 	bl	800c2be <HAL_I2C_ListenCpltCallback>
}
 800d264:	e014      	b.n	800d290 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d26a:	2b22      	cmp	r3, #34	; 0x22
 800d26c:	d002      	beq.n	800d274 <I2C_Slave_STOPF+0x234>
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	2b22      	cmp	r3, #34	; 0x22
 800d272:	d10d      	bne.n	800d290 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2220      	movs	r2, #32
 800d27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7fe ffff 	bl	800c28e <HAL_I2C_SlaveRxCpltCallback>
}
 800d290:	bf00      	nop
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	0800da25 	.word	0x0800da25
 800d29c:	ffff0000 	.word	0xffff0000

0800d2a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d2b8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ba:	2b10      	cmp	r3, #16
 800d2bc:	d002      	beq.n	800d2c4 <I2C_ITError+0x24>
 800d2be:	7bbb      	ldrb	r3, [r7, #14]
 800d2c0:	2b40      	cmp	r3, #64	; 0x40
 800d2c2:	d10a      	bne.n	800d2da <I2C_ITError+0x3a>
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
 800d2c6:	2b22      	cmp	r3, #34	; 0x22
 800d2c8:	d107      	bne.n	800d2da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d2e0:	2b28      	cmp	r3, #40	; 0x28
 800d2e2:	d107      	bne.n	800d2f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2228      	movs	r2, #40	; 0x28
 800d2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d2f2:	e015      	b.n	800d320 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d302:	d00a      	beq.n	800d31a <I2C_ITError+0x7a>
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	2b60      	cmp	r3, #96	; 0x60
 800d308:	d007      	beq.n	800d31a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2220      	movs	r2, #32
 800d30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d32a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d32e:	d162      	bne.n	800d3f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d33e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d020      	beq.n	800d390 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d352:	4a6a      	ldr	r2, [pc, #424]	; (800d4fc <I2C_ITError+0x25c>)
 800d354:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fd fab8 	bl	800a8d0 <HAL_DMA_Abort_IT>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	f000 8089 	beq.w	800d47a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f022 0201 	bic.w	r2, r2, #1
 800d376:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2220      	movs	r2, #32
 800d37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d38a:	4610      	mov	r0, r2
 800d38c:	4798      	blx	r3
 800d38e:	e074      	b.n	800d47a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d394:	4a59      	ldr	r2, [pc, #356]	; (800d4fc <I2C_ITError+0x25c>)
 800d396:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fd fa97 	bl	800a8d0 <HAL_DMA_Abort_IT>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d068      	beq.n	800d47a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b2:	2b40      	cmp	r3, #64	; 0x40
 800d3b4:	d10b      	bne.n	800d3ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	691a      	ldr	r2, [r3, #16]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c0:	b2d2      	uxtb	r2, r2
 800d3c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f022 0201 	bic.w	r2, r2, #1
 800d3dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2220      	movs	r2, #32
 800d3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	4798      	blx	r3
 800d3f4:	e041      	b.n	800d47a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	2b60      	cmp	r3, #96	; 0x60
 800d400:	d125      	bne.n	800d44e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2220      	movs	r2, #32
 800d406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d41a:	2b40      	cmp	r3, #64	; 0x40
 800d41c:	d10b      	bne.n	800d436 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	691a      	ldr	r2, [r3, #16]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d428:	b2d2      	uxtb	r2, r2
 800d42a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	1c5a      	adds	r2, r3, #1
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f022 0201 	bic.w	r2, r2, #1
 800d444:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7fe ff4d 	bl	800c2e6 <HAL_I2C_AbortCpltCallback>
 800d44c:	e015      	b.n	800d47a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d458:	2b40      	cmp	r3, #64	; 0x40
 800d45a:	d10b      	bne.n	800d474 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	691a      	ldr	r2, [r3, #16]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d466:	b2d2      	uxtb	r2, r2
 800d468:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7fe ff2c 	bl	800c2d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10e      	bne.n	800d4a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d490:	2b00      	cmp	r3, #0
 800d492:	d109      	bne.n	800d4a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d104      	bne.n	800d4a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d007      	beq.n	800d4b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d4b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c4:	f003 0304 	and.w	r3, r3, #4
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d113      	bne.n	800d4f4 <I2C_ITError+0x254>
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
 800d4ce:	2b28      	cmp	r3, #40	; 0x28
 800d4d0:	d110      	bne.n	800d4f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a0a      	ldr	r2, [pc, #40]	; (800d500 <I2C_ITError+0x260>)
 800d4d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2220      	movs	r2, #32
 800d4e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7fe fee5 	bl	800c2be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d4f4:	bf00      	nop
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	0800da25 	.word	0x0800da25
 800d500:	ffff0000 	.word	0xffff0000

0800d504 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b088      	sub	sp, #32
 800d508:	af02      	add	r7, sp, #8
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	4608      	mov	r0, r1
 800d50e:	4611      	mov	r1, r2
 800d510:	461a      	mov	r2, r3
 800d512:	4603      	mov	r3, r0
 800d514:	817b      	strh	r3, [r7, #10]
 800d516:	460b      	mov	r3, r1
 800d518:	813b      	strh	r3, [r7, #8]
 800d51a:	4613      	mov	r3, r2
 800d51c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d52c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	2200      	movs	r2, #0
 800d536:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f000 fb1a 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00d      	beq.n	800d562 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d554:	d103      	bne.n	800d55e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d55c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d55e:	2303      	movs	r3, #3
 800d560:	e05f      	b.n	800d622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d562:	897b      	ldrh	r3, [r7, #10]
 800d564:	b2db      	uxtb	r3, r3
 800d566:	461a      	mov	r2, r3
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d570:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d574:	6a3a      	ldr	r2, [r7, #32]
 800d576:	492d      	ldr	r1, [pc, #180]	; (800d62c <I2C_RequestMemoryWrite+0x128>)
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f000 fb52 	bl	800dc22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e04c      	b.n	800d622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d588:	2300      	movs	r3, #0
 800d58a:	617b      	str	r3, [r7, #20]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	617b      	str	r3, [r7, #20]
 800d59c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5a0:	6a39      	ldr	r1, [r7, #32]
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f000 fbbc 	bl	800dd20 <I2C_WaitOnTXEFlagUntilTimeout>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00d      	beq.n	800d5ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b2:	2b04      	cmp	r3, #4
 800d5b4:	d107      	bne.n	800d5c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e02b      	b.n	800d622 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d5ca:	88fb      	ldrh	r3, [r7, #6]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d105      	bne.n	800d5dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d5d0:	893b      	ldrh	r3, [r7, #8]
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	611a      	str	r2, [r3, #16]
 800d5da:	e021      	b.n	800d620 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d5dc:	893b      	ldrh	r3, [r7, #8]
 800d5de:	0a1b      	lsrs	r3, r3, #8
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ec:	6a39      	ldr	r1, [r7, #32]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f000 fb96 	bl	800dd20 <I2C_WaitOnTXEFlagUntilTimeout>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00d      	beq.n	800d616 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d107      	bne.n	800d612 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d610:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	e005      	b.n	800d622 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d616:	893b      	ldrh	r3, [r7, #8]
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	00010002 	.word	0x00010002

0800d630 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af02      	add	r7, sp, #8
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	4608      	mov	r0, r1
 800d63a:	4611      	mov	r1, r2
 800d63c:	461a      	mov	r2, r3
 800d63e:	4603      	mov	r3, r0
 800d640:	817b      	strh	r3, [r7, #10]
 800d642:	460b      	mov	r3, r1
 800d644:	813b      	strh	r3, [r7, #8]
 800d646:	4613      	mov	r3, r2
 800d648:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d658:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d668:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	2200      	movs	r2, #0
 800d672:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 fa7c 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00d      	beq.n	800d69e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d690:	d103      	bne.n	800d69a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d698:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d69a:	2303      	movs	r3, #3
 800d69c:	e0aa      	b.n	800d7f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d69e:	897b      	ldrh	r3, [r7, #10]
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d6ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b0:	6a3a      	ldr	r2, [r7, #32]
 800d6b2:	4952      	ldr	r1, [pc, #328]	; (800d7fc <I2C_RequestMemoryRead+0x1cc>)
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f000 fab4 	bl	800dc22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e097      	b.n	800d7f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	617b      	str	r3, [r7, #20]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	617b      	str	r3, [r7, #20]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	617b      	str	r3, [r7, #20]
 800d6d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6dc:	6a39      	ldr	r1, [r7, #32]
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 fb1e 	bl	800dd20 <I2C_WaitOnTXEFlagUntilTimeout>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00d      	beq.n	800d706 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ee:	2b04      	cmp	r3, #4
 800d6f0:	d107      	bne.n	800d702 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d700:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d702:	2301      	movs	r3, #1
 800d704:	e076      	b.n	800d7f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d105      	bne.n	800d718 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d70c:	893b      	ldrh	r3, [r7, #8]
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	611a      	str	r2, [r3, #16]
 800d716:	e021      	b.n	800d75c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d718:	893b      	ldrh	r3, [r7, #8]
 800d71a:	0a1b      	lsrs	r3, r3, #8
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d728:	6a39      	ldr	r1, [r7, #32]
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f000 faf8 	bl	800dd20 <I2C_WaitOnTXEFlagUntilTimeout>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00d      	beq.n	800d752 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	d107      	bne.n	800d74e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d74c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e050      	b.n	800d7f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d752:	893b      	ldrh	r3, [r7, #8]
 800d754:	b2da      	uxtb	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d75e:	6a39      	ldr	r1, [r7, #32]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 fadd 	bl	800dd20 <I2C_WaitOnTXEFlagUntilTimeout>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00d      	beq.n	800d788 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d770:	2b04      	cmp	r3, #4
 800d772:	d107      	bne.n	800d784 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d782:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d784:	2301      	movs	r3, #1
 800d786:	e035      	b.n	800d7f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d796:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f9e5 	bl	800db74 <I2C_WaitOnFlagUntilTimeout>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00d      	beq.n	800d7cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7be:	d103      	bne.n	800d7c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e013      	b.n	800d7f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d7cc:	897b      	ldrh	r3, [r7, #10]
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f043 0301 	orr.w	r3, r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	6a3a      	ldr	r2, [r7, #32]
 800d7e0:	4906      	ldr	r1, [pc, #24]	; (800d7fc <I2C_RequestMemoryRead+0x1cc>)
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f000 fa1d 	bl	800dc22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e000      	b.n	800d7f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	00010002 	.word	0x00010002

0800d800 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d814:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d81c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d822:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	685a      	ldr	r2, [r3, #4]
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d832:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d840:	2200      	movs	r2, #0
 800d842:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d003      	beq.n	800d854 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d850:	2200      	movs	r2, #0
 800d852:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800d854:	7cfb      	ldrb	r3, [r7, #19]
 800d856:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800d85a:	2b21      	cmp	r3, #33	; 0x21
 800d85c:	d007      	beq.n	800d86e <I2C_DMAXferCplt+0x6e>
 800d85e:	7cfb      	ldrb	r3, [r7, #19]
 800d860:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800d864:	2b22      	cmp	r3, #34	; 0x22
 800d866:	d131      	bne.n	800d8cc <I2C_DMAXferCplt+0xcc>
 800d868:	7cbb      	ldrb	r3, [r7, #18]
 800d86a:	2b20      	cmp	r3, #32
 800d86c:	d12e      	bne.n	800d8cc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	685a      	ldr	r2, [r3, #4]
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d87c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	2200      	movs	r2, #0
 800d882:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d884:	7cfb      	ldrb	r3, [r7, #19]
 800d886:	2b29      	cmp	r3, #41	; 0x29
 800d888:	d10a      	bne.n	800d8a0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2221      	movs	r2, #33	; 0x21
 800d88e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	2228      	movs	r2, #40	; 0x28
 800d894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d898:	6978      	ldr	r0, [r7, #20]
 800d89a:	f7fe fcee 	bl	800c27a <HAL_I2C_SlaveTxCpltCallback>
 800d89e:	e00c      	b.n	800d8ba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d8a0:	7cfb      	ldrb	r3, [r7, #19]
 800d8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a4:	d109      	bne.n	800d8ba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2222      	movs	r2, #34	; 0x22
 800d8aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2228      	movs	r2, #40	; 0x28
 800d8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d8b4:	6978      	ldr	r0, [r7, #20]
 800d8b6:	f7fe fcea 	bl	800c28e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d8c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d8ca:	e06a      	b.n	800d9a2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d064      	beq.n	800d9a2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d107      	bne.n	800d8f2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8f0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	685a      	ldr	r2, [r3, #4]
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d900:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d908:	d009      	beq.n	800d91e <I2C_DMAXferCplt+0x11e>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2b08      	cmp	r3, #8
 800d90e:	d006      	beq.n	800d91e <I2C_DMAXferCplt+0x11e>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d916:	d002      	beq.n	800d91e <I2C_DMAXferCplt+0x11e>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2b20      	cmp	r3, #32
 800d91c:	d107      	bne.n	800d92e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d92c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	685a      	ldr	r2, [r3, #4]
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d93c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	685a      	ldr	r2, [r3, #4]
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d94c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	2200      	movs	r2, #0
 800d952:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d003      	beq.n	800d964 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800d95c:	6978      	ldr	r0, [r7, #20]
 800d95e:	f7fe fcb8 	bl	800c2d2 <HAL_I2C_ErrorCallback>
}
 800d962:	e01e      	b.n	800d9a2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2220      	movs	r2, #32
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b40      	cmp	r3, #64	; 0x40
 800d976:	d10a      	bne.n	800d98e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2200      	movs	r2, #0
 800d984:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800d986:	6978      	ldr	r0, [r7, #20]
 800d988:	f7f3 ff76 	bl	8001878 <HAL_I2C_MemRxCpltCallback>
}
 800d98c:	e009      	b.n	800d9a2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	2200      	movs	r2, #0
 800d992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2212      	movs	r2, #18
 800d99a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800d99c:	6978      	ldr	r0, [r7, #20]
 800d99e:	f7fe fc62 	bl	800c266 <HAL_I2C_MasterRxCpltCallback>
}
 800d9a2:	bf00      	nop
 800d9a4:	3718      	adds	r7, #24
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b084      	sub	sp, #16
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d003      	beq.n	800d9c8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7fd f933 	bl	800ac44 <HAL_DMA_GetError>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d01b      	beq.n	800da1c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9f2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0e:	f043 0210 	orr.w	r2, r3, #16
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7fe fc5b 	bl	800c2d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800da1c:	bf00      	nop
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800da3e:	4b4b      	ldr	r3, [pc, #300]	; (800db6c <I2C_DMAAbort+0x148>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	08db      	lsrs	r3, r3, #3
 800da44:	4a4a      	ldr	r2, [pc, #296]	; (800db70 <I2C_DMAAbort+0x14c>)
 800da46:	fba2 2303 	umull	r2, r3, r2, r3
 800da4a:	0a1a      	lsrs	r2, r3, #8
 800da4c:	4613      	mov	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4413      	add	r3, r2
 800da52:	00da      	lsls	r2, r3, #3
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da62:	f043 0220 	orr.w	r2, r3, #32
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800da6a:	e00a      	b.n	800da82 <I2C_DMAAbort+0x5e>
    }
    count--;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	3b01      	subs	r3, #1
 800da70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da80:	d0ea      	beq.n	800da58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da86:	2b00      	cmp	r3, #0
 800da88:	d003      	beq.n	800da92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8e:	2200      	movs	r2, #0
 800da90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da96:	2b00      	cmp	r3, #0
 800da98:	d003      	beq.n	800daa2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9e:	2200      	movs	r2, #0
 800daa0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dab0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2200      	movs	r2, #0
 800dab6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac4:	2200      	movs	r2, #0
 800dac6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d003      	beq.n	800dad8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad4:	2200      	movs	r2, #0
 800dad6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f022 0201 	bic.w	r2, r2, #1
 800dae6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b60      	cmp	r3, #96	; 0x60
 800daf2:	d10e      	bne.n	800db12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2220      	movs	r2, #32
 800daf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2200      	movs	r2, #0
 800db08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800db0a:	6978      	ldr	r0, [r7, #20]
 800db0c:	f7fe fbeb 	bl	800c2e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800db10:	e027      	b.n	800db62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800db12:	7cfb      	ldrb	r3, [r7, #19]
 800db14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800db18:	2b28      	cmp	r3, #40	; 0x28
 800db1a:	d117      	bne.n	800db4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f042 0201 	orr.w	r2, r2, #1
 800db2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2200      	movs	r2, #0
 800db40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	2228      	movs	r2, #40	; 0x28
 800db46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800db4a:	e007      	b.n	800db5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2220      	movs	r2, #32
 800db50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800db5c:	6978      	ldr	r0, [r7, #20]
 800db5e:	f7fe fbb8 	bl	800c2d2 <HAL_I2C_ErrorCallback>
}
 800db62:	bf00      	nop
 800db64:	3718      	adds	r7, #24
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	200011dc 	.word	0x200011dc
 800db70:	14f8b589 	.word	0x14f8b589

0800db74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	603b      	str	r3, [r7, #0]
 800db80:	4613      	mov	r3, r2
 800db82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db84:	e025      	b.n	800dbd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db8c:	d021      	beq.n	800dbd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db8e:	f7fc fbe7 	bl	800a360 <HAL_GetTick>
 800db92:	4602      	mov	r2, r0
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	683a      	ldr	r2, [r7, #0]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d302      	bcc.n	800dba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d116      	bne.n	800dbd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2220      	movs	r2, #32
 800dbae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbbe:	f043 0220 	orr.w	r2, r3, #32
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e023      	b.n	800dc1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	0c1b      	lsrs	r3, r3, #16
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d10d      	bne.n	800dbf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	43da      	mvns	r2, r3
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	bf0c      	ite	eq
 800dbee:	2301      	moveq	r3, #1
 800dbf0:	2300      	movne	r3, #0
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	e00c      	b.n	800dc12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	43da      	mvns	r2, r3
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	4013      	ands	r3, r2
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	bf0c      	ite	eq
 800dc0a:	2301      	moveq	r3, #1
 800dc0c:	2300      	movne	r3, #0
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	461a      	mov	r2, r3
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d0b6      	beq.n	800db86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b084      	sub	sp, #16
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	60f8      	str	r0, [r7, #12]
 800dc2a:	60b9      	str	r1, [r7, #8]
 800dc2c:	607a      	str	r2, [r7, #4]
 800dc2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dc30:	e051      	b.n	800dcd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc40:	d123      	bne.n	800dc8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dc5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2220      	movs	r2, #32
 800dc66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc76:	f043 0204 	orr.w	r2, r3, #4
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e046      	b.n	800dd18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc90:	d021      	beq.n	800dcd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc92:	f7fc fb65 	bl	800a360 <HAL_GetTick>
 800dc96:	4602      	mov	r2, r0
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d302      	bcc.n	800dca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d116      	bne.n	800dcd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc2:	f043 0220 	orr.w	r2, r3, #32
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e020      	b.n	800dd18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	0c1b      	lsrs	r3, r3, #16
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d10c      	bne.n	800dcfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	695b      	ldr	r3, [r3, #20]
 800dce6:	43da      	mvns	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	4013      	ands	r3, r2
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	bf14      	ite	ne
 800dcf2:	2301      	movne	r3, #1
 800dcf4:	2300      	moveq	r3, #0
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	e00b      	b.n	800dd12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	43da      	mvns	r2, r3
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	4013      	ands	r3, r2
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	bf14      	ite	ne
 800dd0c:	2301      	movne	r3, #1
 800dd0e:	2300      	moveq	r3, #0
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d18d      	bne.n	800dc32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dd2c:	e02d      	b.n	800dd8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f000 f900 	bl	800df34 <I2C_IsAcknowledgeFailed>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e02d      	b.n	800dd9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd44:	d021      	beq.n	800dd8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd46:	f7fc fb0b 	bl	800a360 <HAL_GetTick>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d302      	bcc.n	800dd5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d116      	bne.n	800dd8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2220      	movs	r2, #32
 800dd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd76:	f043 0220 	orr.w	r2, r3, #32
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e007      	b.n	800dd9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd94:	2b80      	cmp	r3, #128	; 0x80
 800dd96:	d1ca      	bne.n	800dd2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	60f8      	str	r0, [r7, #12]
 800ddaa:	60b9      	str	r1, [r7, #8]
 800ddac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ddae:	e02d      	b.n	800de0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 f8bf 	bl	800df34 <I2C_IsAcknowledgeFailed>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d001      	beq.n	800ddc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e02d      	b.n	800de1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc6:	d021      	beq.n	800de0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddc8:	f7fc faca 	bl	800a360 <HAL_GetTick>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d302      	bcc.n	800ddde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d116      	bne.n	800de0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2220      	movs	r2, #32
 800dde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf8:	f043 0220 	orr.w	r2, r3, #32
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800de08:	2301      	movs	r3, #1
 800de0a:	e007      	b.n	800de1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	f003 0304 	and.w	r3, r3, #4
 800de16:	2b04      	cmp	r3, #4
 800de18:	d1ca      	bne.n	800ddb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de2c:	2300      	movs	r3, #0
 800de2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800de30:	4b13      	ldr	r3, [pc, #76]	; (800de80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	08db      	lsrs	r3, r3, #3
 800de36:	4a13      	ldr	r2, [pc, #76]	; (800de84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800de38:	fba2 2303 	umull	r2, r3, r2, r3
 800de3c:	0a1a      	lsrs	r2, r3, #8
 800de3e:	4613      	mov	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	3b01      	subs	r3, #1
 800de4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d107      	bne.n	800de62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de56:	f043 0220 	orr.w	r2, r3, #32
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e008      	b.n	800de74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de70:	d0e9      	beq.n	800de46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3714      	adds	r7, #20
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	200011dc 	.word	0x200011dc
 800de84:	14f8b589 	.word	0x14f8b589

0800de88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800de94:	e042      	b.n	800df1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	f003 0310 	and.w	r3, r3, #16
 800dea0:	2b10      	cmp	r3, #16
 800dea2:	d119      	bne.n	800ded8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f06f 0210 	mvn.w	r2, #16
 800deac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2200      	movs	r2, #0
 800deb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2220      	movs	r2, #32
 800deb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e029      	b.n	800df2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ded8:	f7fc fa42 	bl	800a360 <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	68ba      	ldr	r2, [r7, #8]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d302      	bcc.n	800deee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d116      	bne.n	800df1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2200      	movs	r2, #0
 800def2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2220      	movs	r2, #32
 800def8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df08:	f043 0220 	orr.w	r2, r3, #32
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	e007      	b.n	800df2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df26:	2b40      	cmp	r3, #64	; 0x40
 800df28:	d1b5      	bne.n	800de96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df4a:	d11b      	bne.n	800df84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800df54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2220      	movs	r2, #32
 800df60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df70:	f043 0204 	orr.w	r2, r3, #4
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e000      	b.n	800df86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr

0800df92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800df92:	b480      	push	{r7}
 800df94:	b083      	sub	sp, #12
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800dfa2:	d103      	bne.n	800dfac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800dfaa:	e007      	b.n	800dfbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800dfb4:	d102      	bne.n	800dfbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2208      	movs	r2, #8
 800dfba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e267      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d075      	beq.n	800e0d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dfe6:	4b88      	ldr	r3, [pc, #544]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f003 030c 	and.w	r3, r3, #12
 800dfee:	2b04      	cmp	r3, #4
 800dff0:	d00c      	beq.n	800e00c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dff2:	4b85      	ldr	r3, [pc, #532]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dffa:	2b08      	cmp	r3, #8
 800dffc:	d112      	bne.n	800e024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dffe:	4b82      	ldr	r3, [pc, #520]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e00a:	d10b      	bne.n	800e024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e00c:	4b7e      	ldr	r3, [pc, #504]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d05b      	beq.n	800e0d0 <HAL_RCC_OscConfig+0x108>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d157      	bne.n	800e0d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e242      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e02c:	d106      	bne.n	800e03c <HAL_RCC_OscConfig+0x74>
 800e02e:	4b76      	ldr	r3, [pc, #472]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a75      	ldr	r2, [pc, #468]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e038:	6013      	str	r3, [r2, #0]
 800e03a:	e01d      	b.n	800e078 <HAL_RCC_OscConfig+0xb0>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e044:	d10c      	bne.n	800e060 <HAL_RCC_OscConfig+0x98>
 800e046:	4b70      	ldr	r3, [pc, #448]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a6f      	ldr	r2, [pc, #444]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e04c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e050:	6013      	str	r3, [r2, #0]
 800e052:	4b6d      	ldr	r3, [pc, #436]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a6c      	ldr	r2, [pc, #432]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	e00b      	b.n	800e078 <HAL_RCC_OscConfig+0xb0>
 800e060:	4b69      	ldr	r3, [pc, #420]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a68      	ldr	r2, [pc, #416]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	4b66      	ldr	r3, [pc, #408]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a65      	ldr	r2, [pc, #404]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d013      	beq.n	800e0a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e080:	f7fc f96e 	bl	800a360 <HAL_GetTick>
 800e084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e086:	e008      	b.n	800e09a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e088:	f7fc f96a 	bl	800a360 <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	2b64      	cmp	r3, #100	; 0x64
 800e094:	d901      	bls.n	800e09a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e096:	2303      	movs	r3, #3
 800e098:	e207      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e09a:	4b5b      	ldr	r3, [pc, #364]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0f0      	beq.n	800e088 <HAL_RCC_OscConfig+0xc0>
 800e0a6:	e014      	b.n	800e0d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0a8:	f7fc f95a 	bl	800a360 <HAL_GetTick>
 800e0ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e0ae:	e008      	b.n	800e0c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e0b0:	f7fc f956 	bl	800a360 <HAL_GetTick>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	1ad3      	subs	r3, r2, r3
 800e0ba:	2b64      	cmp	r3, #100	; 0x64
 800e0bc:	d901      	bls.n	800e0c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e0be:	2303      	movs	r3, #3
 800e0c0:	e1f3      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e0c2:	4b51      	ldr	r3, [pc, #324]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1f0      	bne.n	800e0b0 <HAL_RCC_OscConfig+0xe8>
 800e0ce:	e000      	b.n	800e0d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f003 0302 	and.w	r3, r3, #2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d063      	beq.n	800e1a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e0de:	4b4a      	ldr	r3, [pc, #296]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	f003 030c 	and.w	r3, r3, #12
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00b      	beq.n	800e102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e0ea:	4b47      	ldr	r3, [pc, #284]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e0f2:	2b08      	cmp	r3, #8
 800e0f4:	d11c      	bne.n	800e130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e0f6:	4b44      	ldr	r3, [pc, #272]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d116      	bne.n	800e130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e102:	4b41      	ldr	r3, [pc, #260]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 0302 	and.w	r3, r3, #2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d005      	beq.n	800e11a <HAL_RCC_OscConfig+0x152>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d001      	beq.n	800e11a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e1c7      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e11a:	4b3b      	ldr	r3, [pc, #236]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	4937      	ldr	r1, [pc, #220]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e12a:	4313      	orrs	r3, r2
 800e12c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e12e:	e03a      	b.n	800e1a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d020      	beq.n	800e17a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e138:	4b34      	ldr	r3, [pc, #208]	; (800e20c <HAL_RCC_OscConfig+0x244>)
 800e13a:	2201      	movs	r2, #1
 800e13c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e13e:	f7fc f90f 	bl	800a360 <HAL_GetTick>
 800e142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e144:	e008      	b.n	800e158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e146:	f7fc f90b 	bl	800a360 <HAL_GetTick>
 800e14a:	4602      	mov	r2, r0
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	2b02      	cmp	r3, #2
 800e152:	d901      	bls.n	800e158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e154:	2303      	movs	r3, #3
 800e156:	e1a8      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e158:	4b2b      	ldr	r3, [pc, #172]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f003 0302 	and.w	r3, r3, #2
 800e160:	2b00      	cmp	r3, #0
 800e162:	d0f0      	beq.n	800e146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e164:	4b28      	ldr	r3, [pc, #160]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	4925      	ldr	r1, [pc, #148]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e174:	4313      	orrs	r3, r2
 800e176:	600b      	str	r3, [r1, #0]
 800e178:	e015      	b.n	800e1a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e17a:	4b24      	ldr	r3, [pc, #144]	; (800e20c <HAL_RCC_OscConfig+0x244>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e180:	f7fc f8ee 	bl	800a360 <HAL_GetTick>
 800e184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e186:	e008      	b.n	800e19a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e188:	f7fc f8ea 	bl	800a360 <HAL_GetTick>
 800e18c:	4602      	mov	r2, r0
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	2b02      	cmp	r3, #2
 800e194:	d901      	bls.n	800e19a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e196:	2303      	movs	r3, #3
 800e198:	e187      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e19a:	4b1b      	ldr	r3, [pc, #108]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1f0      	bne.n	800e188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f003 0308 	and.w	r3, r3, #8
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d036      	beq.n	800e220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d016      	beq.n	800e1e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e1ba:	4b15      	ldr	r3, [pc, #84]	; (800e210 <HAL_RCC_OscConfig+0x248>)
 800e1bc:	2201      	movs	r2, #1
 800e1be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1c0:	f7fc f8ce 	bl	800a360 <HAL_GetTick>
 800e1c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e1c6:	e008      	b.n	800e1da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e1c8:	f7fc f8ca 	bl	800a360 <HAL_GetTick>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d901      	bls.n	800e1da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	e167      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e1da:	4b0b      	ldr	r3, [pc, #44]	; (800e208 <HAL_RCC_OscConfig+0x240>)
 800e1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1de:	f003 0302 	and.w	r3, r3, #2
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d0f0      	beq.n	800e1c8 <HAL_RCC_OscConfig+0x200>
 800e1e6:	e01b      	b.n	800e220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e1e8:	4b09      	ldr	r3, [pc, #36]	; (800e210 <HAL_RCC_OscConfig+0x248>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e1ee:	f7fc f8b7 	bl	800a360 <HAL_GetTick>
 800e1f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e1f4:	e00e      	b.n	800e214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e1f6:	f7fc f8b3 	bl	800a360 <HAL_GetTick>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	2b02      	cmp	r3, #2
 800e202:	d907      	bls.n	800e214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	e150      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
 800e208:	40023800 	.word	0x40023800
 800e20c:	42470000 	.word	0x42470000
 800e210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e214:	4b88      	ldr	r3, [pc, #544]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e218:	f003 0302 	and.w	r3, r3, #2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1ea      	bne.n	800e1f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 8097 	beq.w	800e35c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e22e:	2300      	movs	r3, #0
 800e230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e232:	4b81      	ldr	r3, [pc, #516]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10f      	bne.n	800e25e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e23e:	2300      	movs	r3, #0
 800e240:	60bb      	str	r3, [r7, #8]
 800e242:	4b7d      	ldr	r3, [pc, #500]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e246:	4a7c      	ldr	r2, [pc, #496]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e24c:	6413      	str	r3, [r2, #64]	; 0x40
 800e24e:	4b7a      	ldr	r3, [pc, #488]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e256:	60bb      	str	r3, [r7, #8]
 800e258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e25a:	2301      	movs	r3, #1
 800e25c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e25e:	4b77      	ldr	r3, [pc, #476]	; (800e43c <HAL_RCC_OscConfig+0x474>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e266:	2b00      	cmp	r3, #0
 800e268:	d118      	bne.n	800e29c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e26a:	4b74      	ldr	r3, [pc, #464]	; (800e43c <HAL_RCC_OscConfig+0x474>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a73      	ldr	r2, [pc, #460]	; (800e43c <HAL_RCC_OscConfig+0x474>)
 800e270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e276:	f7fc f873 	bl	800a360 <HAL_GetTick>
 800e27a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e27c:	e008      	b.n	800e290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e27e:	f7fc f86f 	bl	800a360 <HAL_GetTick>
 800e282:	4602      	mov	r2, r0
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d901      	bls.n	800e290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e28c:	2303      	movs	r3, #3
 800e28e:	e10c      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e290:	4b6a      	ldr	r3, [pc, #424]	; (800e43c <HAL_RCC_OscConfig+0x474>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0f0      	beq.n	800e27e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d106      	bne.n	800e2b2 <HAL_RCC_OscConfig+0x2ea>
 800e2a4:	4b64      	ldr	r3, [pc, #400]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a8:	4a63      	ldr	r2, [pc, #396]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2aa:	f043 0301 	orr.w	r3, r3, #1
 800e2ae:	6713      	str	r3, [r2, #112]	; 0x70
 800e2b0:	e01c      	b.n	800e2ec <HAL_RCC_OscConfig+0x324>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	2b05      	cmp	r3, #5
 800e2b8:	d10c      	bne.n	800e2d4 <HAL_RCC_OscConfig+0x30c>
 800e2ba:	4b5f      	ldr	r3, [pc, #380]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2be:	4a5e      	ldr	r2, [pc, #376]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2c0:	f043 0304 	orr.w	r3, r3, #4
 800e2c4:	6713      	str	r3, [r2, #112]	; 0x70
 800e2c6:	4b5c      	ldr	r3, [pc, #368]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ca:	4a5b      	ldr	r2, [pc, #364]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2cc:	f043 0301 	orr.w	r3, r3, #1
 800e2d0:	6713      	str	r3, [r2, #112]	; 0x70
 800e2d2:	e00b      	b.n	800e2ec <HAL_RCC_OscConfig+0x324>
 800e2d4:	4b58      	ldr	r3, [pc, #352]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2d8:	4a57      	ldr	r2, [pc, #348]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2da:	f023 0301 	bic.w	r3, r3, #1
 800e2de:	6713      	str	r3, [r2, #112]	; 0x70
 800e2e0:	4b55      	ldr	r3, [pc, #340]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2e4:	4a54      	ldr	r2, [pc, #336]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e2e6:	f023 0304 	bic.w	r3, r3, #4
 800e2ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d015      	beq.n	800e320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2f4:	f7fc f834 	bl	800a360 <HAL_GetTick>
 800e2f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2fa:	e00a      	b.n	800e312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2fc:	f7fc f830 	bl	800a360 <HAL_GetTick>
 800e300:	4602      	mov	r2, r0
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	f241 3288 	movw	r2, #5000	; 0x1388
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d901      	bls.n	800e312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e30e:	2303      	movs	r3, #3
 800e310:	e0cb      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e312:	4b49      	ldr	r3, [pc, #292]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e316:	f003 0302 	and.w	r3, r3, #2
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d0ee      	beq.n	800e2fc <HAL_RCC_OscConfig+0x334>
 800e31e:	e014      	b.n	800e34a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e320:	f7fc f81e 	bl	800a360 <HAL_GetTick>
 800e324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e326:	e00a      	b.n	800e33e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e328:	f7fc f81a 	bl	800a360 <HAL_GetTick>
 800e32c:	4602      	mov	r2, r0
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	f241 3288 	movw	r2, #5000	; 0x1388
 800e336:	4293      	cmp	r3, r2
 800e338:	d901      	bls.n	800e33e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e33a:	2303      	movs	r3, #3
 800e33c:	e0b5      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e33e:	4b3e      	ldr	r3, [pc, #248]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e342:	f003 0302 	and.w	r3, r3, #2
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1ee      	bne.n	800e328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d105      	bne.n	800e35c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e350:	4b39      	ldr	r3, [pc, #228]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e354:	4a38      	ldr	r2, [pc, #224]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e35a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	2b00      	cmp	r3, #0
 800e362:	f000 80a1 	beq.w	800e4a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e366:	4b34      	ldr	r3, [pc, #208]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	f003 030c 	and.w	r3, r3, #12
 800e36e:	2b08      	cmp	r3, #8
 800e370:	d05c      	beq.n	800e42c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	699b      	ldr	r3, [r3, #24]
 800e376:	2b02      	cmp	r3, #2
 800e378:	d141      	bne.n	800e3fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e37a:	4b31      	ldr	r3, [pc, #196]	; (800e440 <HAL_RCC_OscConfig+0x478>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e380:	f7fb ffee 	bl	800a360 <HAL_GetTick>
 800e384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e386:	e008      	b.n	800e39a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e388:	f7fb ffea 	bl	800a360 <HAL_GetTick>
 800e38c:	4602      	mov	r2, r0
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	2b02      	cmp	r3, #2
 800e394:	d901      	bls.n	800e39a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e396:	2303      	movs	r3, #3
 800e398:	e087      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e39a:	4b27      	ldr	r3, [pc, #156]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1f0      	bne.n	800e388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	69da      	ldr	r2, [r3, #28]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	431a      	orrs	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b4:	019b      	lsls	r3, r3, #6
 800e3b6:	431a      	orrs	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3bc:	085b      	lsrs	r3, r3, #1
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	041b      	lsls	r3, r3, #16
 800e3c2:	431a      	orrs	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c8:	061b      	lsls	r3, r3, #24
 800e3ca:	491b      	ldr	r1, [pc, #108]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e3d0:	4b1b      	ldr	r3, [pc, #108]	; (800e440 <HAL_RCC_OscConfig+0x478>)
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e3d6:	f7fb ffc3 	bl	800a360 <HAL_GetTick>
 800e3da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e3dc:	e008      	b.n	800e3f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e3de:	f7fb ffbf 	bl	800a360 <HAL_GetTick>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	2b02      	cmp	r3, #2
 800e3ea:	d901      	bls.n	800e3f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	e05c      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e3f0:	4b11      	ldr	r3, [pc, #68]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d0f0      	beq.n	800e3de <HAL_RCC_OscConfig+0x416>
 800e3fc:	e054      	b.n	800e4a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e3fe:	4b10      	ldr	r3, [pc, #64]	; (800e440 <HAL_RCC_OscConfig+0x478>)
 800e400:	2200      	movs	r2, #0
 800e402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e404:	f7fb ffac 	bl	800a360 <HAL_GetTick>
 800e408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e40a:	e008      	b.n	800e41e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e40c:	f7fb ffa8 	bl	800a360 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	2b02      	cmp	r3, #2
 800e418:	d901      	bls.n	800e41e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	e045      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e41e:	4b06      	ldr	r3, [pc, #24]	; (800e438 <HAL_RCC_OscConfig+0x470>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1f0      	bne.n	800e40c <HAL_RCC_OscConfig+0x444>
 800e42a:	e03d      	b.n	800e4a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	699b      	ldr	r3, [r3, #24]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d107      	bne.n	800e444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e434:	2301      	movs	r3, #1
 800e436:	e038      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
 800e438:	40023800 	.word	0x40023800
 800e43c:	40007000 	.word	0x40007000
 800e440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e444:	4b1b      	ldr	r3, [pc, #108]	; (800e4b4 <HAL_RCC_OscConfig+0x4ec>)
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	699b      	ldr	r3, [r3, #24]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d028      	beq.n	800e4a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d121      	bne.n	800e4a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d11a      	bne.n	800e4a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e474:	4013      	ands	r3, r2
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e47a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d111      	bne.n	800e4a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48a:	085b      	lsrs	r3, r3, #1
 800e48c:	3b01      	subs	r3, #1
 800e48e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e490:	429a      	cmp	r2, r3
 800e492:	d107      	bne.n	800e4a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e49e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d001      	beq.n	800e4a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e000      	b.n	800e4aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3718      	adds	r7, #24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	40023800 	.word	0x40023800

0800e4b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e0cc      	b.n	800e666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e4cc:	4b68      	ldr	r3, [pc, #416]	; (800e670 <HAL_RCC_ClockConfig+0x1b8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f003 0307 	and.w	r3, r3, #7
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d90c      	bls.n	800e4f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e4da:	4b65      	ldr	r3, [pc, #404]	; (800e670 <HAL_RCC_ClockConfig+0x1b8>)
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	b2d2      	uxtb	r2, r2
 800e4e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e4e2:	4b63      	ldr	r3, [pc, #396]	; (800e670 <HAL_RCC_ClockConfig+0x1b8>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f003 0307 	and.w	r3, r3, #7
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d001      	beq.n	800e4f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e0b8      	b.n	800e666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f003 0302 	and.w	r3, r3, #2
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d020      	beq.n	800e542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f003 0304 	and.w	r3, r3, #4
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d005      	beq.n	800e518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e50c:	4b59      	ldr	r3, [pc, #356]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	4a58      	ldr	r2, [pc, #352]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f003 0308 	and.w	r3, r3, #8
 800e520:	2b00      	cmp	r3, #0
 800e522:	d005      	beq.n	800e530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e524:	4b53      	ldr	r3, [pc, #332]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e526:	689b      	ldr	r3, [r3, #8]
 800e528:	4a52      	ldr	r2, [pc, #328]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e52a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e52e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e530:	4b50      	ldr	r3, [pc, #320]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	494d      	ldr	r1, [pc, #308]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e53e:	4313      	orrs	r3, r2
 800e540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d044      	beq.n	800e5d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d107      	bne.n	800e566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e556:	4b47      	ldr	r3, [pc, #284]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d119      	bne.n	800e596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	e07f      	b.n	800e666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d003      	beq.n	800e576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e572:	2b03      	cmp	r3, #3
 800e574:	d107      	bne.n	800e586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e576:	4b3f      	ldr	r3, [pc, #252]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d109      	bne.n	800e596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e582:	2301      	movs	r3, #1
 800e584:	e06f      	b.n	800e666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e586:	4b3b      	ldr	r3, [pc, #236]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f003 0302 	and.w	r3, r3, #2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e067      	b.n	800e666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e596:	4b37      	ldr	r3, [pc, #220]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	f023 0203 	bic.w	r2, r3, #3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	4934      	ldr	r1, [pc, #208]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e5a8:	f7fb feda 	bl	800a360 <HAL_GetTick>
 800e5ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5ae:	e00a      	b.n	800e5c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5b0:	f7fb fed6 	bl	800a360 <HAL_GetTick>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d901      	bls.n	800e5c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	e04f      	b.n	800e666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5c6:	4b2b      	ldr	r3, [pc, #172]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	f003 020c 	and.w	r2, r3, #12
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d1eb      	bne.n	800e5b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e5d8:	4b25      	ldr	r3, [pc, #148]	; (800e670 <HAL_RCC_ClockConfig+0x1b8>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f003 0307 	and.w	r3, r3, #7
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d20c      	bcs.n	800e600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5e6:	4b22      	ldr	r3, [pc, #136]	; (800e670 <HAL_RCC_ClockConfig+0x1b8>)
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	b2d2      	uxtb	r2, r2
 800e5ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5ee:	4b20      	ldr	r3, [pc, #128]	; (800e670 <HAL_RCC_ClockConfig+0x1b8>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f003 0307 	and.w	r3, r3, #7
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d001      	beq.n	800e600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e032      	b.n	800e666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 0304 	and.w	r3, r3, #4
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d008      	beq.n	800e61e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e60c:	4b19      	ldr	r3, [pc, #100]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	4916      	ldr	r1, [pc, #88]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e61a:	4313      	orrs	r3, r2
 800e61c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 0308 	and.w	r3, r3, #8
 800e626:	2b00      	cmp	r3, #0
 800e628:	d009      	beq.n	800e63e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e62a:	4b12      	ldr	r3, [pc, #72]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	490e      	ldr	r1, [pc, #56]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e63a:	4313      	orrs	r3, r2
 800e63c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e63e:	f000 f821 	bl	800e684 <HAL_RCC_GetSysClockFreq>
 800e642:	4602      	mov	r2, r0
 800e644:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <HAL_RCC_ClockConfig+0x1bc>)
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	091b      	lsrs	r3, r3, #4
 800e64a:	f003 030f 	and.w	r3, r3, #15
 800e64e:	490a      	ldr	r1, [pc, #40]	; (800e678 <HAL_RCC_ClockConfig+0x1c0>)
 800e650:	5ccb      	ldrb	r3, [r1, r3]
 800e652:	fa22 f303 	lsr.w	r3, r2, r3
 800e656:	4a09      	ldr	r2, [pc, #36]	; (800e67c <HAL_RCC_ClockConfig+0x1c4>)
 800e658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e65a:	4b09      	ldr	r3, [pc, #36]	; (800e680 <HAL_RCC_ClockConfig+0x1c8>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fb fe3a 	bl	800a2d8 <HAL_InitTick>

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	40023c00 	.word	0x40023c00
 800e674:	40023800 	.word	0x40023800
 800e678:	080150a4 	.word	0x080150a4
 800e67c:	200011dc 	.word	0x200011dc
 800e680:	20001534 	.word	0x20001534

0800e684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e688:	b094      	sub	sp, #80	; 0x50
 800e68a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e68c:	2300      	movs	r3, #0
 800e68e:	647b      	str	r3, [r7, #68]	; 0x44
 800e690:	2300      	movs	r3, #0
 800e692:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e694:	2300      	movs	r3, #0
 800e696:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800e698:	2300      	movs	r3, #0
 800e69a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e69c:	4b79      	ldr	r3, [pc, #484]	; (800e884 <HAL_RCC_GetSysClockFreq+0x200>)
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	f003 030c 	and.w	r3, r3, #12
 800e6a4:	2b08      	cmp	r3, #8
 800e6a6:	d00d      	beq.n	800e6c4 <HAL_RCC_GetSysClockFreq+0x40>
 800e6a8:	2b08      	cmp	r3, #8
 800e6aa:	f200 80e1 	bhi.w	800e870 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d002      	beq.n	800e6b8 <HAL_RCC_GetSysClockFreq+0x34>
 800e6b2:	2b04      	cmp	r3, #4
 800e6b4:	d003      	beq.n	800e6be <HAL_RCC_GetSysClockFreq+0x3a>
 800e6b6:	e0db      	b.n	800e870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e6b8:	4b73      	ldr	r3, [pc, #460]	; (800e888 <HAL_RCC_GetSysClockFreq+0x204>)
 800e6ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800e6bc:	e0db      	b.n	800e876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e6be:	4b73      	ldr	r3, [pc, #460]	; (800e88c <HAL_RCC_GetSysClockFreq+0x208>)
 800e6c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e6c2:	e0d8      	b.n	800e876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e6c4:	4b6f      	ldr	r3, [pc, #444]	; (800e884 <HAL_RCC_GetSysClockFreq+0x200>)
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e6ce:	4b6d      	ldr	r3, [pc, #436]	; (800e884 <HAL_RCC_GetSysClockFreq+0x200>)
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d063      	beq.n	800e7a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e6da:	4b6a      	ldr	r3, [pc, #424]	; (800e884 <HAL_RCC_GetSysClockFreq+0x200>)
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	099b      	lsrs	r3, r3, #6
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6ec:	633b      	str	r3, [r7, #48]	; 0x30
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e6f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	462b      	mov	r3, r5
 800e6fa:	f04f 0000 	mov.w	r0, #0
 800e6fe:	f04f 0100 	mov.w	r1, #0
 800e702:	0159      	lsls	r1, r3, #5
 800e704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e708:	0150      	lsls	r0, r2, #5
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	4621      	mov	r1, r4
 800e710:	1a51      	subs	r1, r2, r1
 800e712:	6139      	str	r1, [r7, #16]
 800e714:	4629      	mov	r1, r5
 800e716:	eb63 0301 	sbc.w	r3, r3, r1
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	f04f 0200 	mov.w	r2, #0
 800e720:	f04f 0300 	mov.w	r3, #0
 800e724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e728:	4659      	mov	r1, fp
 800e72a:	018b      	lsls	r3, r1, #6
 800e72c:	4651      	mov	r1, sl
 800e72e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e732:	4651      	mov	r1, sl
 800e734:	018a      	lsls	r2, r1, #6
 800e736:	4651      	mov	r1, sl
 800e738:	ebb2 0801 	subs.w	r8, r2, r1
 800e73c:	4659      	mov	r1, fp
 800e73e:	eb63 0901 	sbc.w	r9, r3, r1
 800e742:	f04f 0200 	mov.w	r2, #0
 800e746:	f04f 0300 	mov.w	r3, #0
 800e74a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e74e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e756:	4690      	mov	r8, r2
 800e758:	4699      	mov	r9, r3
 800e75a:	4623      	mov	r3, r4
 800e75c:	eb18 0303 	adds.w	r3, r8, r3
 800e760:	60bb      	str	r3, [r7, #8]
 800e762:	462b      	mov	r3, r5
 800e764:	eb49 0303 	adc.w	r3, r9, r3
 800e768:	60fb      	str	r3, [r7, #12]
 800e76a:	f04f 0200 	mov.w	r2, #0
 800e76e:	f04f 0300 	mov.w	r3, #0
 800e772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e776:	4629      	mov	r1, r5
 800e778:	024b      	lsls	r3, r1, #9
 800e77a:	4621      	mov	r1, r4
 800e77c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e780:	4621      	mov	r1, r4
 800e782:	024a      	lsls	r2, r1, #9
 800e784:	4610      	mov	r0, r2
 800e786:	4619      	mov	r1, r3
 800e788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e78a:	2200      	movs	r2, #0
 800e78c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e78e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e794:	f7f2 faaa 	bl	8000cec <__aeabi_uldivmod>
 800e798:	4602      	mov	r2, r0
 800e79a:	460b      	mov	r3, r1
 800e79c:	4613      	mov	r3, r2
 800e79e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7a0:	e058      	b.n	800e854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e7a2:	4b38      	ldr	r3, [pc, #224]	; (800e884 <HAL_RCC_GetSysClockFreq+0x200>)
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	099b      	lsrs	r3, r3, #6
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	4611      	mov	r1, r2
 800e7ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e7b2:	623b      	str	r3, [r7, #32]
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e7b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e7bc:	4642      	mov	r2, r8
 800e7be:	464b      	mov	r3, r9
 800e7c0:	f04f 0000 	mov.w	r0, #0
 800e7c4:	f04f 0100 	mov.w	r1, #0
 800e7c8:	0159      	lsls	r1, r3, #5
 800e7ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7ce:	0150      	lsls	r0, r2, #5
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4641      	mov	r1, r8
 800e7d6:	ebb2 0a01 	subs.w	sl, r2, r1
 800e7da:	4649      	mov	r1, r9
 800e7dc:	eb63 0b01 	sbc.w	fp, r3, r1
 800e7e0:	f04f 0200 	mov.w	r2, #0
 800e7e4:	f04f 0300 	mov.w	r3, #0
 800e7e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e7ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e7f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e7f4:	ebb2 040a 	subs.w	r4, r2, sl
 800e7f8:	eb63 050b 	sbc.w	r5, r3, fp
 800e7fc:	f04f 0200 	mov.w	r2, #0
 800e800:	f04f 0300 	mov.w	r3, #0
 800e804:	00eb      	lsls	r3, r5, #3
 800e806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e80a:	00e2      	lsls	r2, r4, #3
 800e80c:	4614      	mov	r4, r2
 800e80e:	461d      	mov	r5, r3
 800e810:	4643      	mov	r3, r8
 800e812:	18e3      	adds	r3, r4, r3
 800e814:	603b      	str	r3, [r7, #0]
 800e816:	464b      	mov	r3, r9
 800e818:	eb45 0303 	adc.w	r3, r5, r3
 800e81c:	607b      	str	r3, [r7, #4]
 800e81e:	f04f 0200 	mov.w	r2, #0
 800e822:	f04f 0300 	mov.w	r3, #0
 800e826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e82a:	4629      	mov	r1, r5
 800e82c:	028b      	lsls	r3, r1, #10
 800e82e:	4621      	mov	r1, r4
 800e830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e834:	4621      	mov	r1, r4
 800e836:	028a      	lsls	r2, r1, #10
 800e838:	4610      	mov	r0, r2
 800e83a:	4619      	mov	r1, r3
 800e83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e83e:	2200      	movs	r2, #0
 800e840:	61bb      	str	r3, [r7, #24]
 800e842:	61fa      	str	r2, [r7, #28]
 800e844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e848:	f7f2 fa50 	bl	8000cec <__aeabi_uldivmod>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4613      	mov	r3, r2
 800e852:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e854:	4b0b      	ldr	r3, [pc, #44]	; (800e884 <HAL_RCC_GetSysClockFreq+0x200>)
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	0c1b      	lsrs	r3, r3, #16
 800e85a:	f003 0303 	and.w	r3, r3, #3
 800e85e:	3301      	adds	r3, #1
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800e864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e868:	fbb2 f3f3 	udiv	r3, r2, r3
 800e86c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e86e:	e002      	b.n	800e876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e870:	4b05      	ldr	r3, [pc, #20]	; (800e888 <HAL_RCC_GetSysClockFreq+0x204>)
 800e872:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e874:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3750      	adds	r7, #80	; 0x50
 800e87c:	46bd      	mov	sp, r7
 800e87e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e882:	bf00      	nop
 800e884:	40023800 	.word	0x40023800
 800e888:	00f42400 	.word	0x00f42400
 800e88c:	007a1200 	.word	0x007a1200

0800e890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e890:	b480      	push	{r7}
 800e892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e894:	4b03      	ldr	r3, [pc, #12]	; (800e8a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e896:	681b      	ldr	r3, [r3, #0]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	200011dc 	.word	0x200011dc

0800e8a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e8ac:	f7ff fff0 	bl	800e890 <HAL_RCC_GetHCLKFreq>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	0a9b      	lsrs	r3, r3, #10
 800e8b8:	f003 0307 	and.w	r3, r3, #7
 800e8bc:	4903      	ldr	r1, [pc, #12]	; (800e8cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800e8be:	5ccb      	ldrb	r3, [r1, r3]
 800e8c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	40023800 	.word	0x40023800
 800e8cc:	080150b4 	.word	0x080150b4

0800e8d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e8d4:	f7ff ffdc 	bl	800e890 <HAL_RCC_GetHCLKFreq>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	4b05      	ldr	r3, [pc, #20]	; (800e8f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	0b5b      	lsrs	r3, r3, #13
 800e8e0:	f003 0307 	and.w	r3, r3, #7
 800e8e4:	4903      	ldr	r1, [pc, #12]	; (800e8f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e8e6:	5ccb      	ldrb	r3, [r1, r3]
 800e8e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	40023800 	.word	0x40023800
 800e8f4:	080150b4 	.word	0x080150b4

0800e8f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e906:	2301      	movs	r3, #1
 800e908:	e041      	b.n	800e98e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e910:	b2db      	uxtb	r3, r3
 800e912:	2b00      	cmp	r3, #0
 800e914:	d106      	bne.n	800e924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f7f6 fbc2 	bl	80050a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2202      	movs	r2, #2
 800e928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	3304      	adds	r3, #4
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f000 fc54 	bl	800f1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2201      	movs	r2, #1
 800e980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2201      	movs	r2, #1
 800e988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d001      	beq.n	800e9b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e044      	b.n	800ea3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68da      	ldr	r2, [r3, #12]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f042 0201 	orr.w	r2, r2, #1
 800e9c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a1e      	ldr	r2, [pc, #120]	; (800ea48 <HAL_TIM_Base_Start_IT+0xb0>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d018      	beq.n	800ea04 <HAL_TIM_Base_Start_IT+0x6c>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9da:	d013      	beq.n	800ea04 <HAL_TIM_Base_Start_IT+0x6c>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a1a      	ldr	r2, [pc, #104]	; (800ea4c <HAL_TIM_Base_Start_IT+0xb4>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d00e      	beq.n	800ea04 <HAL_TIM_Base_Start_IT+0x6c>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a19      	ldr	r2, [pc, #100]	; (800ea50 <HAL_TIM_Base_Start_IT+0xb8>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d009      	beq.n	800ea04 <HAL_TIM_Base_Start_IT+0x6c>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a17      	ldr	r2, [pc, #92]	; (800ea54 <HAL_TIM_Base_Start_IT+0xbc>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d004      	beq.n	800ea04 <HAL_TIM_Base_Start_IT+0x6c>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a16      	ldr	r2, [pc, #88]	; (800ea58 <HAL_TIM_Base_Start_IT+0xc0>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d111      	bne.n	800ea28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	f003 0307 	and.w	r3, r3, #7
 800ea0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b06      	cmp	r3, #6
 800ea14:	d010      	beq.n	800ea38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f042 0201 	orr.w	r2, r2, #1
 800ea24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea26:	e007      	b.n	800ea38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f042 0201 	orr.w	r2, r2, #1
 800ea36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3714      	adds	r7, #20
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	40010000 	.word	0x40010000
 800ea4c:	40000400 	.word	0x40000400
 800ea50:	40000800 	.word	0x40000800
 800ea54:	40000c00 	.word	0x40000c00
 800ea58:	40014000 	.word	0x40014000

0800ea5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d101      	bne.n	800ea6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e041      	b.n	800eaf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d106      	bne.n	800ea88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f839 	bl	800eafa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2202      	movs	r2, #2
 800ea8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3304      	adds	r3, #4
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4610      	mov	r0, r2
 800ea9c:	f000 fba2 	bl	800f1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800eafa:	b480      	push	{r7}
 800eafc:	b083      	sub	sp, #12
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800eb02:	bf00      	nop
 800eb04:	370c      	adds	r7, #12
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
	...

0800eb10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d109      	bne.n	800eb34 <HAL_TIM_PWM_Start+0x24>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	bf14      	ite	ne
 800eb2c:	2301      	movne	r3, #1
 800eb2e:	2300      	moveq	r3, #0
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	e022      	b.n	800eb7a <HAL_TIM_PWM_Start+0x6a>
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	2b04      	cmp	r3, #4
 800eb38:	d109      	bne.n	800eb4e <HAL_TIM_PWM_Start+0x3e>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	bf14      	ite	ne
 800eb46:	2301      	movne	r3, #1
 800eb48:	2300      	moveq	r3, #0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	e015      	b.n	800eb7a <HAL_TIM_PWM_Start+0x6a>
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	2b08      	cmp	r3, #8
 800eb52:	d109      	bne.n	800eb68 <HAL_TIM_PWM_Start+0x58>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	bf14      	ite	ne
 800eb60:	2301      	movne	r3, #1
 800eb62:	2300      	moveq	r3, #0
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	e008      	b.n	800eb7a <HAL_TIM_PWM_Start+0x6a>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	bf14      	ite	ne
 800eb74:	2301      	movne	r3, #1
 800eb76:	2300      	moveq	r3, #0
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e068      	b.n	800ec54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d104      	bne.n	800eb92 <HAL_TIM_PWM_Start+0x82>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb90:	e013      	b.n	800ebba <HAL_TIM_PWM_Start+0xaa>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b04      	cmp	r3, #4
 800eb96:	d104      	bne.n	800eba2 <HAL_TIM_PWM_Start+0x92>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eba0:	e00b      	b.n	800ebba <HAL_TIM_PWM_Start+0xaa>
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b08      	cmp	r3, #8
 800eba6:	d104      	bne.n	800ebb2 <HAL_TIM_PWM_Start+0xa2>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2202      	movs	r2, #2
 800ebac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebb0:	e003      	b.n	800ebba <HAL_TIM_PWM_Start+0xaa>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2202      	movs	r2, #2
 800ebb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 fdb4 	bl	800f730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a23      	ldr	r2, [pc, #140]	; (800ec5c <HAL_TIM_PWM_Start+0x14c>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d107      	bne.n	800ebe2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ebe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4a1d      	ldr	r2, [pc, #116]	; (800ec5c <HAL_TIM_PWM_Start+0x14c>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d018      	beq.n	800ec1e <HAL_TIM_PWM_Start+0x10e>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebf4:	d013      	beq.n	800ec1e <HAL_TIM_PWM_Start+0x10e>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a19      	ldr	r2, [pc, #100]	; (800ec60 <HAL_TIM_PWM_Start+0x150>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d00e      	beq.n	800ec1e <HAL_TIM_PWM_Start+0x10e>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a17      	ldr	r2, [pc, #92]	; (800ec64 <HAL_TIM_PWM_Start+0x154>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d009      	beq.n	800ec1e <HAL_TIM_PWM_Start+0x10e>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a16      	ldr	r2, [pc, #88]	; (800ec68 <HAL_TIM_PWM_Start+0x158>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d004      	beq.n	800ec1e <HAL_TIM_PWM_Start+0x10e>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a14      	ldr	r2, [pc, #80]	; (800ec6c <HAL_TIM_PWM_Start+0x15c>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d111      	bne.n	800ec42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	f003 0307 	and.w	r3, r3, #7
 800ec28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b06      	cmp	r3, #6
 800ec2e:	d010      	beq.n	800ec52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f042 0201 	orr.w	r2, r2, #1
 800ec3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec40:	e007      	b.n	800ec52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f042 0201 	orr.w	r2, r2, #1
 800ec50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	40010000 	.word	0x40010000
 800ec60:	40000400 	.word	0x40000400
 800ec64:	40000800 	.word	0x40000800
 800ec68:	40000c00 	.word	0x40000c00
 800ec6c:	40014000 	.word	0x40014000

0800ec70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f003 0302 	and.w	r3, r3, #2
 800ec82:	2b02      	cmp	r3, #2
 800ec84:	d122      	bne.n	800eccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d11b      	bne.n	800eccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f06f 0202 	mvn.w	r2, #2
 800ec9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2201      	movs	r2, #1
 800eca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	699b      	ldr	r3, [r3, #24]
 800ecaa:	f003 0303 	and.w	r3, r3, #3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 fa77 	bl	800f1a6 <HAL_TIM_IC_CaptureCallback>
 800ecb8:	e005      	b.n	800ecc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fa69 	bl	800f192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fa7a 	bl	800f1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	f003 0304 	and.w	r3, r3, #4
 800ecd6:	2b04      	cmp	r3, #4
 800ecd8:	d122      	bne.n	800ed20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	f003 0304 	and.w	r3, r3, #4
 800ece4:	2b04      	cmp	r3, #4
 800ece6:	d11b      	bne.n	800ed20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f06f 0204 	mvn.w	r2, #4
 800ecf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d003      	beq.n	800ed0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 fa4d 	bl	800f1a6 <HAL_TIM_IC_CaptureCallback>
 800ed0c:	e005      	b.n	800ed1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 fa3f 	bl	800f192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 fa50 	bl	800f1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	f003 0308 	and.w	r3, r3, #8
 800ed2a:	2b08      	cmp	r3, #8
 800ed2c:	d122      	bne.n	800ed74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	f003 0308 	and.w	r3, r3, #8
 800ed38:	2b08      	cmp	r3, #8
 800ed3a:	d11b      	bne.n	800ed74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f06f 0208 	mvn.w	r2, #8
 800ed44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2204      	movs	r2, #4
 800ed4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	69db      	ldr	r3, [r3, #28]
 800ed52:	f003 0303 	and.w	r3, r3, #3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d003      	beq.n	800ed62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fa23 	bl	800f1a6 <HAL_TIM_IC_CaptureCallback>
 800ed60:	e005      	b.n	800ed6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 fa15 	bl	800f192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 fa26 	bl	800f1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	f003 0310 	and.w	r3, r3, #16
 800ed7e:	2b10      	cmp	r3, #16
 800ed80:	d122      	bne.n	800edc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	f003 0310 	and.w	r3, r3, #16
 800ed8c:	2b10      	cmp	r3, #16
 800ed8e:	d11b      	bne.n	800edc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f06f 0210 	mvn.w	r2, #16
 800ed98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2208      	movs	r2, #8
 800ed9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	69db      	ldr	r3, [r3, #28]
 800eda6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f9f9 	bl	800f1a6 <HAL_TIM_IC_CaptureCallback>
 800edb4:	e005      	b.n	800edc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 f9eb 	bl	800f192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f9fc 	bl	800f1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	691b      	ldr	r3, [r3, #16]
 800edce:	f003 0301 	and.w	r3, r3, #1
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d10e      	bne.n	800edf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	f003 0301 	and.w	r3, r3, #1
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d107      	bne.n	800edf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f06f 0201 	mvn.w	r2, #1
 800edec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7f2 fe1e 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edfe:	2b80      	cmp	r3, #128	; 0x80
 800ee00:	d10e      	bne.n	800ee20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee0c:	2b80      	cmp	r3, #128	; 0x80
 800ee0e:	d107      	bne.n	800ee20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ee18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 fd26 	bl	800f86c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	691b      	ldr	r3, [r3, #16]
 800ee26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee2a:	2b40      	cmp	r3, #64	; 0x40
 800ee2c:	d10e      	bne.n	800ee4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee38:	2b40      	cmp	r3, #64	; 0x40
 800ee3a:	d107      	bne.n	800ee4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 f9c1 	bl	800f1ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	f003 0320 	and.w	r3, r3, #32
 800ee56:	2b20      	cmp	r3, #32
 800ee58:	d10e      	bne.n	800ee78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	f003 0320 	and.w	r3, r3, #32
 800ee64:	2b20      	cmp	r3, #32
 800ee66:	d107      	bne.n	800ee78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f06f 0220 	mvn.w	r2, #32
 800ee70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fcf0 	bl	800f858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ee78:	bf00      	nop
 800ee7a:	3708      	adds	r7, #8
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d101      	bne.n	800ee9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ee9a:	2302      	movs	r3, #2
 800ee9c:	e0ae      	b.n	800effc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2b0c      	cmp	r3, #12
 800eeaa:	f200 809f 	bhi.w	800efec <HAL_TIM_PWM_ConfigChannel+0x16c>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800eee9 	.word	0x0800eee9
 800eeb8:	0800efed 	.word	0x0800efed
 800eebc:	0800efed 	.word	0x0800efed
 800eec0:	0800efed 	.word	0x0800efed
 800eec4:	0800ef29 	.word	0x0800ef29
 800eec8:	0800efed 	.word	0x0800efed
 800eecc:	0800efed 	.word	0x0800efed
 800eed0:	0800efed 	.word	0x0800efed
 800eed4:	0800ef6b 	.word	0x0800ef6b
 800eed8:	0800efed 	.word	0x0800efed
 800eedc:	0800efed 	.word	0x0800efed
 800eee0:	0800efed 	.word	0x0800efed
 800eee4:	0800efab 	.word	0x0800efab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68b9      	ldr	r1, [r7, #8]
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 f9f8 	bl	800f2e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	699a      	ldr	r2, [r3, #24]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f042 0208 	orr.w	r2, r2, #8
 800ef02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	699a      	ldr	r2, [r3, #24]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f022 0204 	bic.w	r2, r2, #4
 800ef12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	6999      	ldr	r1, [r3, #24]
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	691a      	ldr	r2, [r3, #16]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	430a      	orrs	r2, r1
 800ef24:	619a      	str	r2, [r3, #24]
      break;
 800ef26:	e064      	b.n	800eff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68b9      	ldr	r1, [r7, #8]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f000 fa3e 	bl	800f3b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	699a      	ldr	r2, [r3, #24]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	699a      	ldr	r2, [r3, #24]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	6999      	ldr	r1, [r3, #24]
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	691b      	ldr	r3, [r3, #16]
 800ef5e:	021a      	lsls	r2, r3, #8
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	430a      	orrs	r2, r1
 800ef66:	619a      	str	r2, [r3, #24]
      break;
 800ef68:	e043      	b.n	800eff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68b9      	ldr	r1, [r7, #8]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f000 fa89 	bl	800f488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	69da      	ldr	r2, [r3, #28]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f042 0208 	orr.w	r2, r2, #8
 800ef84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	69da      	ldr	r2, [r3, #28]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f022 0204 	bic.w	r2, r2, #4
 800ef94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	69d9      	ldr	r1, [r3, #28]
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	691a      	ldr	r2, [r3, #16]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	430a      	orrs	r2, r1
 800efa6:	61da      	str	r2, [r3, #28]
      break;
 800efa8:	e023      	b.n	800eff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68b9      	ldr	r1, [r7, #8]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f000 fad3 	bl	800f55c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	69da      	ldr	r2, [r3, #28]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	69da      	ldr	r2, [r3, #28]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	69d9      	ldr	r1, [r3, #28]
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	691b      	ldr	r3, [r3, #16]
 800efe0:	021a      	lsls	r2, r3, #8
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	430a      	orrs	r2, r1
 800efe8:	61da      	str	r2, [r3, #28]
      break;
 800efea:	e002      	b.n	800eff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800efec:	2301      	movs	r3, #1
 800efee:	75fb      	strb	r3, [r7, #23]
      break;
 800eff0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800effa:	7dfb      	ldrb	r3, [r7, #23]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f00e:	2300      	movs	r3, #0
 800f010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d101      	bne.n	800f020 <HAL_TIM_ConfigClockSource+0x1c>
 800f01c:	2302      	movs	r3, #2
 800f01e:	e0b4      	b.n	800f18a <HAL_TIM_ConfigClockSource+0x186>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2202      	movs	r2, #2
 800f02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f03e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f058:	d03e      	beq.n	800f0d8 <HAL_TIM_ConfigClockSource+0xd4>
 800f05a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f05e:	f200 8087 	bhi.w	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f066:	f000 8086 	beq.w	800f176 <HAL_TIM_ConfigClockSource+0x172>
 800f06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f06e:	d87f      	bhi.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f070:	2b70      	cmp	r3, #112	; 0x70
 800f072:	d01a      	beq.n	800f0aa <HAL_TIM_ConfigClockSource+0xa6>
 800f074:	2b70      	cmp	r3, #112	; 0x70
 800f076:	d87b      	bhi.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f078:	2b60      	cmp	r3, #96	; 0x60
 800f07a:	d050      	beq.n	800f11e <HAL_TIM_ConfigClockSource+0x11a>
 800f07c:	2b60      	cmp	r3, #96	; 0x60
 800f07e:	d877      	bhi.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f080:	2b50      	cmp	r3, #80	; 0x50
 800f082:	d03c      	beq.n	800f0fe <HAL_TIM_ConfigClockSource+0xfa>
 800f084:	2b50      	cmp	r3, #80	; 0x50
 800f086:	d873      	bhi.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f088:	2b40      	cmp	r3, #64	; 0x40
 800f08a:	d058      	beq.n	800f13e <HAL_TIM_ConfigClockSource+0x13a>
 800f08c:	2b40      	cmp	r3, #64	; 0x40
 800f08e:	d86f      	bhi.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f090:	2b30      	cmp	r3, #48	; 0x30
 800f092:	d064      	beq.n	800f15e <HAL_TIM_ConfigClockSource+0x15a>
 800f094:	2b30      	cmp	r3, #48	; 0x30
 800f096:	d86b      	bhi.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f098:	2b20      	cmp	r3, #32
 800f09a:	d060      	beq.n	800f15e <HAL_TIM_ConfigClockSource+0x15a>
 800f09c:	2b20      	cmp	r3, #32
 800f09e:	d867      	bhi.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d05c      	beq.n	800f15e <HAL_TIM_ConfigClockSource+0x15a>
 800f0a4:	2b10      	cmp	r3, #16
 800f0a6:	d05a      	beq.n	800f15e <HAL_TIM_ConfigClockSource+0x15a>
 800f0a8:	e062      	b.n	800f170 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6818      	ldr	r0, [r3, #0]
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	6899      	ldr	r1, [r3, #8]
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	685a      	ldr	r2, [r3, #4]
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	f000 fb19 	bl	800f6f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	689b      	ldr	r3, [r3, #8]
 800f0c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f0cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68ba      	ldr	r2, [r7, #8]
 800f0d4:	609a      	str	r2, [r3, #8]
      break;
 800f0d6:	e04f      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6818      	ldr	r0, [r3, #0]
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	6899      	ldr	r1, [r3, #8]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	685a      	ldr	r2, [r3, #4]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	f000 fb02 	bl	800f6f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	689a      	ldr	r2, [r3, #8]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f0fa:	609a      	str	r2, [r3, #8]
      break;
 800f0fc:	e03c      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6818      	ldr	r0, [r3, #0]
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	6859      	ldr	r1, [r3, #4]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	461a      	mov	r2, r3
 800f10c:	f000 fa76 	bl	800f5fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2150      	movs	r1, #80	; 0x50
 800f116:	4618      	mov	r0, r3
 800f118:	f000 facf 	bl	800f6ba <TIM_ITRx_SetConfig>
      break;
 800f11c:	e02c      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6818      	ldr	r0, [r3, #0]
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	6859      	ldr	r1, [r3, #4]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	461a      	mov	r2, r3
 800f12c:	f000 fa95 	bl	800f65a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2160      	movs	r1, #96	; 0x60
 800f136:	4618      	mov	r0, r3
 800f138:	f000 fabf 	bl	800f6ba <TIM_ITRx_SetConfig>
      break;
 800f13c:	e01c      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6818      	ldr	r0, [r3, #0]
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	6859      	ldr	r1, [r3, #4]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	461a      	mov	r2, r3
 800f14c:	f000 fa56 	bl	800f5fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2140      	movs	r1, #64	; 0x40
 800f156:	4618      	mov	r0, r3
 800f158:	f000 faaf 	bl	800f6ba <TIM_ITRx_SetConfig>
      break;
 800f15c:	e00c      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4619      	mov	r1, r3
 800f168:	4610      	mov	r0, r2
 800f16a:	f000 faa6 	bl	800f6ba <TIM_ITRx_SetConfig>
      break;
 800f16e:	e003      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f170:	2301      	movs	r3, #1
 800f172:	73fb      	strb	r3, [r7, #15]
      break;
 800f174:	e000      	b.n	800f178 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f188:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f192:	b480      	push	{r7}
 800f194:	b083      	sub	sp, #12
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f19a:	bf00      	nop
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f1a6:	b480      	push	{r7}
 800f1a8:	b083      	sub	sp, #12
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f1ae:	bf00      	nop
 800f1b0:	370c      	adds	r7, #12
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b083      	sub	sp, #12
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f1c2:	bf00      	nop
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f1ce:	b480      	push	{r7}
 800f1d0:	b083      	sub	sp, #12
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f1d6:	bf00      	nop
 800f1d8:	370c      	adds	r7, #12
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
	...

0800f1e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4a34      	ldr	r2, [pc, #208]	; (800f2c8 <TIM_Base_SetConfig+0xe4>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d00f      	beq.n	800f21c <TIM_Base_SetConfig+0x38>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f202:	d00b      	beq.n	800f21c <TIM_Base_SetConfig+0x38>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a31      	ldr	r2, [pc, #196]	; (800f2cc <TIM_Base_SetConfig+0xe8>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d007      	beq.n	800f21c <TIM_Base_SetConfig+0x38>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a30      	ldr	r2, [pc, #192]	; (800f2d0 <TIM_Base_SetConfig+0xec>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d003      	beq.n	800f21c <TIM_Base_SetConfig+0x38>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a2f      	ldr	r2, [pc, #188]	; (800f2d4 <TIM_Base_SetConfig+0xf0>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d108      	bne.n	800f22e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4a25      	ldr	r2, [pc, #148]	; (800f2c8 <TIM_Base_SetConfig+0xe4>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d01b      	beq.n	800f26e <TIM_Base_SetConfig+0x8a>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f23c:	d017      	beq.n	800f26e <TIM_Base_SetConfig+0x8a>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a22      	ldr	r2, [pc, #136]	; (800f2cc <TIM_Base_SetConfig+0xe8>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d013      	beq.n	800f26e <TIM_Base_SetConfig+0x8a>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4a21      	ldr	r2, [pc, #132]	; (800f2d0 <TIM_Base_SetConfig+0xec>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d00f      	beq.n	800f26e <TIM_Base_SetConfig+0x8a>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4a20      	ldr	r2, [pc, #128]	; (800f2d4 <TIM_Base_SetConfig+0xf0>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d00b      	beq.n	800f26e <TIM_Base_SetConfig+0x8a>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4a1f      	ldr	r2, [pc, #124]	; (800f2d8 <TIM_Base_SetConfig+0xf4>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d007      	beq.n	800f26e <TIM_Base_SetConfig+0x8a>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4a1e      	ldr	r2, [pc, #120]	; (800f2dc <TIM_Base_SetConfig+0xf8>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d003      	beq.n	800f26e <TIM_Base_SetConfig+0x8a>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4a1d      	ldr	r2, [pc, #116]	; (800f2e0 <TIM_Base_SetConfig+0xfc>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d108      	bne.n	800f280 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	4313      	orrs	r3, r2
 800f27e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	689a      	ldr	r2, [r3, #8]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a08      	ldr	r2, [pc, #32]	; (800f2c8 <TIM_Base_SetConfig+0xe4>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d103      	bne.n	800f2b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	691a      	ldr	r2, [r3, #16]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	615a      	str	r2, [r3, #20]
}
 800f2ba:	bf00      	nop
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	40010000 	.word	0x40010000
 800f2cc:	40000400 	.word	0x40000400
 800f2d0:	40000800 	.word	0x40000800
 800f2d4:	40000c00 	.word	0x40000c00
 800f2d8:	40014000 	.word	0x40014000
 800f2dc:	40014400 	.word	0x40014400
 800f2e0:	40014800 	.word	0x40014800

0800f2e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b087      	sub	sp, #28
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	f023 0201 	bic.w	r2, r3, #1
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	699b      	ldr	r3, [r3, #24]
 800f30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f023 0303 	bic.w	r3, r3, #3
 800f31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	4313      	orrs	r3, r2
 800f324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	f023 0302 	bic.w	r3, r3, #2
 800f32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	697a      	ldr	r2, [r7, #20]
 800f334:	4313      	orrs	r3, r2
 800f336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4a1c      	ldr	r2, [pc, #112]	; (800f3ac <TIM_OC1_SetConfig+0xc8>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d10c      	bne.n	800f35a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	f023 0308 	bic.w	r3, r3, #8
 800f346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	4313      	orrs	r3, r2
 800f350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	f023 0304 	bic.w	r3, r3, #4
 800f358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a13      	ldr	r2, [pc, #76]	; (800f3ac <TIM_OC1_SetConfig+0xc8>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d111      	bne.n	800f386 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	695b      	ldr	r3, [r3, #20]
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	4313      	orrs	r3, r2
 800f37a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	699b      	ldr	r3, [r3, #24]
 800f380:	693a      	ldr	r2, [r7, #16]
 800f382:	4313      	orrs	r3, r2
 800f384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	697a      	ldr	r2, [r7, #20]
 800f39e:	621a      	str	r2, [r3, #32]
}
 800f3a0:	bf00      	nop
 800f3a2:	371c      	adds	r7, #28
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr
 800f3ac:	40010000 	.word	0x40010000

0800f3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b087      	sub	sp, #28
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6a1b      	ldr	r3, [r3, #32]
 800f3be:	f023 0210 	bic.w	r2, r3, #16
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	699b      	ldr	r3, [r3, #24]
 800f3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	021b      	lsls	r3, r3, #8
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	f023 0320 	bic.w	r3, r3, #32
 800f3fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	011b      	lsls	r3, r3, #4
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	4313      	orrs	r3, r2
 800f406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a1e      	ldr	r2, [pc, #120]	; (800f484 <TIM_OC2_SetConfig+0xd4>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d10d      	bne.n	800f42c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	011b      	lsls	r3, r3, #4
 800f41e:	697a      	ldr	r2, [r7, #20]
 800f420:	4313      	orrs	r3, r2
 800f422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f42a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a15      	ldr	r2, [pc, #84]	; (800f484 <TIM_OC2_SetConfig+0xd4>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d113      	bne.n	800f45c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f43a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	695b      	ldr	r3, [r3, #20]
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	693a      	ldr	r2, [r7, #16]
 800f44c:	4313      	orrs	r3, r2
 800f44e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	699b      	ldr	r3, [r3, #24]
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	4313      	orrs	r3, r2
 800f45a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	693a      	ldr	r2, [r7, #16]
 800f460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	697a      	ldr	r2, [r7, #20]
 800f474:	621a      	str	r2, [r3, #32]
}
 800f476:	bf00      	nop
 800f478:	371c      	adds	r7, #28
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	40010000 	.word	0x40010000

0800f488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f488:	b480      	push	{r7}
 800f48a:	b087      	sub	sp, #28
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6a1b      	ldr	r3, [r3, #32]
 800f496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6a1b      	ldr	r3, [r3, #32]
 800f4a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	69db      	ldr	r3, [r3, #28]
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f023 0303 	bic.w	r3, r3, #3
 800f4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	021b      	lsls	r3, r3, #8
 800f4d8:	697a      	ldr	r2, [r7, #20]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4a1d      	ldr	r2, [pc, #116]	; (800f558 <TIM_OC3_SetConfig+0xd0>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d10d      	bne.n	800f502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	021b      	lsls	r3, r3, #8
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a14      	ldr	r2, [pc, #80]	; (800f558 <TIM_OC3_SetConfig+0xd0>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d113      	bne.n	800f532 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	011b      	lsls	r3, r3, #4
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	4313      	orrs	r3, r2
 800f524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	699b      	ldr	r3, [r3, #24]
 800f52a:	011b      	lsls	r3, r3, #4
 800f52c:	693a      	ldr	r2, [r7, #16]
 800f52e:	4313      	orrs	r3, r2
 800f530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	693a      	ldr	r2, [r7, #16]
 800f536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	68fa      	ldr	r2, [r7, #12]
 800f53c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	697a      	ldr	r2, [r7, #20]
 800f54a:	621a      	str	r2, [r3, #32]
}
 800f54c:	bf00      	nop
 800f54e:	371c      	adds	r7, #28
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr
 800f558:	40010000 	.word	0x40010000

0800f55c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6a1b      	ldr	r3, [r3, #32]
 800f56a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	69db      	ldr	r3, [r3, #28]
 800f582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	021b      	lsls	r3, r3, #8
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f5a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	031b      	lsls	r3, r3, #12
 800f5ae:	693a      	ldr	r2, [r7, #16]
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a10      	ldr	r2, [pc, #64]	; (800f5f8 <TIM_OC4_SetConfig+0x9c>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d109      	bne.n	800f5d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	695b      	ldr	r3, [r3, #20]
 800f5c8:	019b      	lsls	r3, r3, #6
 800f5ca:	697a      	ldr	r2, [r7, #20]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	685a      	ldr	r2, [r3, #4]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	693a      	ldr	r2, [r7, #16]
 800f5e8:	621a      	str	r2, [r3, #32]
}
 800f5ea:	bf00      	nop
 800f5ec:	371c      	adds	r7, #28
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	40010000 	.word	0x40010000

0800f5fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b087      	sub	sp, #28
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6a1b      	ldr	r3, [r3, #32]
 800f60c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6a1b      	ldr	r3, [r3, #32]
 800f612:	f023 0201 	bic.w	r2, r3, #1
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	699b      	ldr	r3, [r3, #24]
 800f61e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	693a      	ldr	r2, [r7, #16]
 800f62e:	4313      	orrs	r3, r2
 800f630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	f023 030a 	bic.w	r3, r3, #10
 800f638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f63a:	697a      	ldr	r2, [r7, #20]
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	4313      	orrs	r3, r2
 800f640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	693a      	ldr	r2, [r7, #16]
 800f646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	621a      	str	r2, [r3, #32]
}
 800f64e:	bf00      	nop
 800f650:	371c      	adds	r7, #28
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f65a:	b480      	push	{r7}
 800f65c:	b087      	sub	sp, #28
 800f65e:	af00      	add	r7, sp, #0
 800f660:	60f8      	str	r0, [r7, #12]
 800f662:	60b9      	str	r1, [r7, #8]
 800f664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6a1b      	ldr	r3, [r3, #32]
 800f66a:	f023 0210 	bic.w	r2, r3, #16
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	699b      	ldr	r3, [r3, #24]
 800f676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6a1b      	ldr	r3, [r3, #32]
 800f67c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	031b      	lsls	r3, r3, #12
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	011b      	lsls	r3, r3, #4
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	697a      	ldr	r2, [r7, #20]
 800f6a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	693a      	ldr	r2, [r7, #16]
 800f6ac:	621a      	str	r2, [r3, #32]
}
 800f6ae:	bf00      	nop
 800f6b0:	371c      	adds	r7, #28
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr

0800f6ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f6ba:	b480      	push	{r7}
 800f6bc:	b085      	sub	sp, #20
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
 800f6c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	f043 0307 	orr.w	r3, r3, #7
 800f6dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	609a      	str	r2, [r3, #8]
}
 800f6e4:	bf00      	nop
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
 800f6fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f70a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	021a      	lsls	r2, r3, #8
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	431a      	orrs	r2, r3
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	4313      	orrs	r3, r2
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	697a      	ldr	r2, [r7, #20]
 800f722:	609a      	str	r2, [r3, #8]
}
 800f724:	bf00      	nop
 800f726:	371c      	adds	r7, #28
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f730:	b480      	push	{r7}
 800f732:	b087      	sub	sp, #28
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	f003 031f 	and.w	r3, r3, #31
 800f742:	2201      	movs	r2, #1
 800f744:	fa02 f303 	lsl.w	r3, r2, r3
 800f748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	6a1a      	ldr	r2, [r3, #32]
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	43db      	mvns	r3, r3
 800f752:	401a      	ands	r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6a1a      	ldr	r2, [r3, #32]
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	f003 031f 	and.w	r3, r3, #31
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	fa01 f303 	lsl.w	r3, r1, r3
 800f768:	431a      	orrs	r2, r3
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	621a      	str	r2, [r3, #32]
}
 800f76e:	bf00      	nop
 800f770:	371c      	adds	r7, #28
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr
	...

0800f77c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d101      	bne.n	800f794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f790:	2302      	movs	r3, #2
 800f792:	e050      	b.n	800f836 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2201      	movs	r2, #1
 800f798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2202      	movs	r2, #2
 800f7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	689b      	ldr	r3, [r3, #8]
 800f7b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	4a1c      	ldr	r2, [pc, #112]	; (800f844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d018      	beq.n	800f80a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7e0:	d013      	beq.n	800f80a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a18      	ldr	r2, [pc, #96]	; (800f848 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d00e      	beq.n	800f80a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a16      	ldr	r2, [pc, #88]	; (800f84c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d009      	beq.n	800f80a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a15      	ldr	r2, [pc, #84]	; (800f850 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d004      	beq.n	800f80a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a13      	ldr	r2, [pc, #76]	; (800f854 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d10c      	bne.n	800f824 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	4313      	orrs	r3, r2
 800f81a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2201      	movs	r2, #1
 800f828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	40010000 	.word	0x40010000
 800f848:	40000400 	.word	0x40000400
 800f84c:	40000800 	.word	0x40000800
 800f850:	40000c00 	.word	0x40000c00
 800f854:	40014000 	.word	0x40014000

0800f858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f874:	bf00      	nop
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d101      	bne.n	800f892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	e03f      	b.n	800f912 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f7f5 fce2 	bl	8005270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2224      	movs	r2, #36	; 0x24
 800f8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68da      	ldr	r2, [r3, #12]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f8c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 ff9b 	bl	8010800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	691a      	ldr	r2, [r3, #16]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f8d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	695a      	ldr	r2, [r3, #20]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f8e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	68da      	ldr	r2, [r3, #12]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2220      	movs	r2, #32
 800f904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2220      	movs	r2, #32
 800f90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b08a      	sub	sp, #40	; 0x28
 800f91e:	af02      	add	r7, sp, #8
 800f920:	60f8      	str	r0, [r7, #12]
 800f922:	60b9      	str	r1, [r7, #8]
 800f924:	603b      	str	r3, [r7, #0]
 800f926:	4613      	mov	r3, r2
 800f928:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f92a:	2300      	movs	r3, #0
 800f92c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b20      	cmp	r3, #32
 800f938:	d17c      	bne.n	800fa34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <HAL_UART_Transmit+0x2c>
 800f940:	88fb      	ldrh	r3, [r7, #6]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d101      	bne.n	800f94a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f946:	2301      	movs	r3, #1
 800f948:	e075      	b.n	800fa36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f950:	2b01      	cmp	r3, #1
 800f952:	d101      	bne.n	800f958 <HAL_UART_Transmit+0x3e>
 800f954:	2302      	movs	r3, #2
 800f956:	e06e      	b.n	800fa36 <HAL_UART_Transmit+0x11c>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2221      	movs	r2, #33	; 0x21
 800f96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f96e:	f7fa fcf7 	bl	800a360 <HAL_GetTick>
 800f972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	88fa      	ldrh	r2, [r7, #6]
 800f978:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	88fa      	ldrh	r2, [r7, #6]
 800f97e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f988:	d108      	bne.n	800f99c <HAL_UART_Transmit+0x82>
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d104      	bne.n	800f99c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800f992:	2300      	movs	r3, #0
 800f994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	61bb      	str	r3, [r7, #24]
 800f99a:	e003      	b.n	800f9a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800f9ac:	e02a      	b.n	800fa04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	2180      	movs	r1, #128	; 0x80
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f000 fc53 	bl	8010264 <UART_WaitOnFlagUntilTimeout>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d001      	beq.n	800f9c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	e036      	b.n	800fa36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d10b      	bne.n	800f9e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	881b      	ldrh	r3, [r3, #0]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f9dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	3302      	adds	r3, #2
 800f9e2:	61bb      	str	r3, [r7, #24]
 800f9e4:	e007      	b.n	800f9f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	781a      	ldrb	r2, [r3, #0]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1cf      	bne.n	800f9ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	2200      	movs	r2, #0
 800fa16:	2140      	movs	r1, #64	; 0x40
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f000 fc23 	bl	8010264 <UART_WaitOnFlagUntilTimeout>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d001      	beq.n	800fa28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800fa24:	2303      	movs	r3, #3
 800fa26:	e006      	b.n	800fa36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2220      	movs	r2, #32
 800fa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800fa30:	2300      	movs	r3, #0
 800fa32:	e000      	b.n	800fa36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800fa34:	2302      	movs	r3, #2
  }
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3720      	adds	r7, #32
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b08c      	sub	sp, #48	; 0x30
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	60f8      	str	r0, [r7, #12]
 800fa46:	60b9      	str	r1, [r7, #8]
 800fa48:	4613      	mov	r3, r2
 800fa4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b20      	cmp	r3, #32
 800fa56:	d152      	bne.n	800fafe <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d002      	beq.n	800fa64 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800fa5e:	88fb      	ldrh	r3, [r7, #6]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d101      	bne.n	800fa68 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800fa64:	2301      	movs	r3, #1
 800fa66:	e04b      	b.n	800fb00 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d101      	bne.n	800fa76 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800fa72:	2302      	movs	r3, #2
 800fa74:	e044      	b.n	800fb00 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2201      	movs	r2, #1
 800fa82:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fa84:	88fb      	ldrh	r3, [r7, #6]
 800fa86:	461a      	mov	r2, r3
 800fa88:	68b9      	ldr	r1, [r7, #8]
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f000 fc58 	bl	8010340 <UART_Start_Receive_DMA>
 800fa90:	4603      	mov	r3, r0
 800fa92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fa96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d12c      	bne.n	800faf8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d125      	bne.n	800faf2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800faa6:	2300      	movs	r3, #0
 800faa8:	613b      	str	r3, [r7, #16]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	613b      	str	r3, [r7, #16]
 800faba:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	330c      	adds	r3, #12
 800fac2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	e853 3f00 	ldrex	r3, [r3]
 800faca:	617b      	str	r3, [r7, #20]
   return(result);
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	f043 0310 	orr.w	r3, r3, #16
 800fad2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	330c      	adds	r3, #12
 800fada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fadc:	627a      	str	r2, [r7, #36]	; 0x24
 800fade:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae0:	6a39      	ldr	r1, [r7, #32]
 800fae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fae4:	e841 2300 	strex	r3, r2, [r1]
 800fae8:	61fb      	str	r3, [r7, #28]
   return(result);
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1e5      	bne.n	800fabc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800faf0:	e002      	b.n	800faf8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800faf2:	2301      	movs	r3, #1
 800faf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800faf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fafc:	e000      	b.n	800fb00 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800fafe:	2302      	movs	r3, #2
  }
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3730      	adds	r7, #48	; 0x30
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b0ba      	sub	sp, #232	; 0xe8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	695b      	ldr	r3, [r3, #20]
 800fb2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fb34:	2300      	movs	r3, #0
 800fb36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb3e:	f003 030f 	and.w	r3, r3, #15
 800fb42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800fb46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d10f      	bne.n	800fb6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb52:	f003 0320 	and.w	r3, r3, #32
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d009      	beq.n	800fb6e <HAL_UART_IRQHandler+0x66>
 800fb5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb5e:	f003 0320 	and.w	r3, r3, #32
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d003      	beq.n	800fb6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 fd8f 	bl	801068a <UART_Receive_IT>
      return;
 800fb6c:	e256      	b.n	801001c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fb6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f000 80de 	beq.w	800fd34 <HAL_UART_IRQHandler+0x22c>
 800fb78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d106      	bne.n	800fb92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fb84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 80d1 	beq.w	800fd34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fb92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb96:	f003 0301 	and.w	r3, r3, #1
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00b      	beq.n	800fbb6 <HAL_UART_IRQHandler+0xae>
 800fb9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d005      	beq.n	800fbb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbae:	f043 0201 	orr.w	r2, r3, #1
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fbb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbba:	f003 0304 	and.w	r3, r3, #4
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00b      	beq.n	800fbda <HAL_UART_IRQHandler+0xd2>
 800fbc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fbc6:	f003 0301 	and.w	r3, r3, #1
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d005      	beq.n	800fbda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbd2:	f043 0202 	orr.w	r2, r3, #2
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fbda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbde:	f003 0302 	and.w	r3, r3, #2
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00b      	beq.n	800fbfe <HAL_UART_IRQHandler+0xf6>
 800fbe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d005      	beq.n	800fbfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf6:	f043 0204 	orr.w	r2, r3, #4
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fbfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc02:	f003 0308 	and.w	r3, r3, #8
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d011      	beq.n	800fc2e <HAL_UART_IRQHandler+0x126>
 800fc0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc0e:	f003 0320 	and.w	r3, r3, #32
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d105      	bne.n	800fc22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fc16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc1a:	f003 0301 	and.w	r3, r3, #1
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d005      	beq.n	800fc2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc26:	f043 0208 	orr.w	r2, r3, #8
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 81ed 	beq.w	8010012 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc3c:	f003 0320 	and.w	r3, r3, #32
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d008      	beq.n	800fc56 <HAL_UART_IRQHandler+0x14e>
 800fc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc48:	f003 0320 	and.w	r3, r3, #32
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d002      	beq.n	800fc56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fd1a 	bl	801068a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	695b      	ldr	r3, [r3, #20]
 800fc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc60:	2b40      	cmp	r3, #64	; 0x40
 800fc62:	bf0c      	ite	eq
 800fc64:	2301      	moveq	r3, #1
 800fc66:	2300      	movne	r3, #0
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc72:	f003 0308 	and.w	r3, r3, #8
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d103      	bne.n	800fc82 <HAL_UART_IRQHandler+0x17a>
 800fc7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d04f      	beq.n	800fd22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 fc22 	bl	80104cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	695b      	ldr	r3, [r3, #20]
 800fc8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc92:	2b40      	cmp	r3, #64	; 0x40
 800fc94:	d141      	bne.n	800fd1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	3314      	adds	r3, #20
 800fc9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fca4:	e853 3f00 	ldrex	r3, [r3]
 800fca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fcac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fcb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3314      	adds	r3, #20
 800fcbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fcc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fcc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fcce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fcd2:	e841 2300 	strex	r3, r2, [r1]
 800fcd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fcda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1d9      	bne.n	800fc96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d013      	beq.n	800fd12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcee:	4a7d      	ldr	r2, [pc, #500]	; (800fee4 <HAL_UART_IRQHandler+0x3dc>)
 800fcf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fa fdea 	bl	800a8d0 <HAL_DMA_Abort_IT>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d016      	beq.n	800fd30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fd0c:	4610      	mov	r0, r2
 800fd0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd10:	e00e      	b.n	800fd30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 f9a4 	bl	8010060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd18:	e00a      	b.n	800fd30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 f9a0 	bl	8010060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd20:	e006      	b.n	800fd30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f99c 	bl	8010060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fd2e:	e170      	b.n	8010012 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd30:	bf00      	nop
    return;
 800fd32:	e16e      	b.n	8010012 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	f040 814a 	bne.w	800ffd2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fd3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd42:	f003 0310 	and.w	r3, r3, #16
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 8143 	beq.w	800ffd2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd50:	f003 0310 	and.w	r3, r3, #16
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f000 813c 	beq.w	800ffd2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60bb      	str	r3, [r7, #8]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	60bb      	str	r3, [r7, #8]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	60bb      	str	r3, [r7, #8]
 800fd6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	695b      	ldr	r3, [r3, #20]
 800fd76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd7a:	2b40      	cmp	r3, #64	; 0x40
 800fd7c:	f040 80b4 	bne.w	800fee8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fd8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f000 8140 	beq.w	8010016 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fd9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	f080 8139 	bcs.w	8010016 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fdaa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb0:	69db      	ldr	r3, [r3, #28]
 800fdb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdb6:	f000 8088 	beq.w	800feca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	330c      	adds	r3, #12
 800fdc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fdc8:	e853 3f00 	ldrex	r3, [r3]
 800fdcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fdd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	330c      	adds	r3, #12
 800fde2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fde6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fdea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fdf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fdf6:	e841 2300 	strex	r3, r2, [r1]
 800fdfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fdfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1d9      	bne.n	800fdba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	3314      	adds	r3, #20
 800fe0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe10:	e853 3f00 	ldrex	r3, [r3]
 800fe14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fe16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe18:	f023 0301 	bic.w	r3, r3, #1
 800fe1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	3314      	adds	r3, #20
 800fe26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fe2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fe32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe36:	e841 2300 	strex	r3, r2, [r1]
 800fe3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fe3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1e1      	bne.n	800fe06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3314      	adds	r3, #20
 800fe48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe4c:	e853 3f00 	ldrex	r3, [r3]
 800fe50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fe52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	3314      	adds	r3, #20
 800fe62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fe66:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fe68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fe6e:	e841 2300 	strex	r3, r2, [r1]
 800fe72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fe74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1e3      	bne.n	800fe42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2220      	movs	r2, #32
 800fe7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	330c      	adds	r3, #12
 800fe8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe92:	e853 3f00 	ldrex	r3, [r3]
 800fe96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe9a:	f023 0310 	bic.w	r3, r3, #16
 800fe9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	330c      	adds	r3, #12
 800fea8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800feac:	65ba      	str	r2, [r7, #88]	; 0x58
 800feae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800feb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800feb4:	e841 2300 	strex	r3, r2, [r1]
 800feb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800feba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1e3      	bne.n	800fe88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7fa fc93 	bl	800a7f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	4619      	mov	r1, r3
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7f1 fee6 	bl	8001cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fee0:	e099      	b.n	8010016 <HAL_UART_IRQHandler+0x50e>
 800fee2:	bf00      	nop
 800fee4:	08010593 	.word	0x08010593
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f000 808b 	beq.w	801001a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ff04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f000 8086 	beq.w	801001a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	330c      	adds	r3, #12
 800ff14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff18:	e853 3f00 	ldrex	r3, [r3]
 800ff1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	330c      	adds	r3, #12
 800ff2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ff32:	647a      	str	r2, [r7, #68]	; 0x44
 800ff34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff3a:	e841 2300 	strex	r3, r2, [r1]
 800ff3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1e3      	bne.n	800ff0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	3314      	adds	r3, #20
 800ff4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	e853 3f00 	ldrex	r3, [r3]
 800ff54:	623b      	str	r3, [r7, #32]
   return(result);
 800ff56:	6a3b      	ldr	r3, [r7, #32]
 800ff58:	f023 0301 	bic.w	r3, r3, #1
 800ff5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3314      	adds	r3, #20
 800ff66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ff6a:	633a      	str	r2, [r7, #48]	; 0x30
 800ff6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff72:	e841 2300 	strex	r3, r2, [r1]
 800ff76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d1e3      	bne.n	800ff46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2220      	movs	r2, #32
 800ff82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	330c      	adds	r3, #12
 800ff92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	e853 3f00 	ldrex	r3, [r3]
 800ff9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f023 0310 	bic.w	r3, r3, #16
 800ffa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	330c      	adds	r3, #12
 800ffac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ffb0:	61fa      	str	r2, [r7, #28]
 800ffb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb4:	69b9      	ldr	r1, [r7, #24]
 800ffb6:	69fa      	ldr	r2, [r7, #28]
 800ffb8:	e841 2300 	strex	r3, r2, [r1]
 800ffbc:	617b      	str	r3, [r7, #20]
   return(result);
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1e3      	bne.n	800ff8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ffc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ffc8:	4619      	mov	r1, r3
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f7f1 fe6e 	bl	8001cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ffd0:	e023      	b.n	801001a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ffd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d009      	beq.n	800fff2 <HAL_UART_IRQHandler+0x4ea>
 800ffde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d003      	beq.n	800fff2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 fae5 	bl	80105ba <UART_Transmit_IT>
    return;
 800fff0:	e014      	b.n	801001c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00e      	beq.n	801001c <HAL_UART_IRQHandler+0x514>
 800fffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010006:	2b00      	cmp	r3, #0
 8010008:	d008      	beq.n	801001c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 fb25 	bl	801065a <UART_EndTransmit_IT>
    return;
 8010010:	e004      	b.n	801001c <HAL_UART_IRQHandler+0x514>
    return;
 8010012:	bf00      	nop
 8010014:	e002      	b.n	801001c <HAL_UART_IRQHandler+0x514>
      return;
 8010016:	bf00      	nop
 8010018:	e000      	b.n	801001c <HAL_UART_IRQHandler+0x514>
      return;
 801001a:	bf00      	nop
  }
}
 801001c:	37e8      	adds	r7, #232	; 0xe8
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop

08010024 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010068:	bf00      	nop
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b09c      	sub	sp, #112	; 0x70
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010080:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801008c:	2b00      	cmp	r3, #0
 801008e:	d172      	bne.n	8010176 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010092:	2200      	movs	r2, #0
 8010094:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	330c      	adds	r3, #12
 801009c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801009e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100a0:	e853 3f00 	ldrex	r3, [r3]
 80100a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80100a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80100ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	330c      	adds	r3, #12
 80100b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80100b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80100b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80100bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100be:	e841 2300 	strex	r3, r2, [r1]
 80100c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80100c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1e5      	bne.n	8010096 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	3314      	adds	r3, #20
 80100d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d4:	e853 3f00 	ldrex	r3, [r3]
 80100d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80100da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100dc:	f023 0301 	bic.w	r3, r3, #1
 80100e0:	667b      	str	r3, [r7, #100]	; 0x64
 80100e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	3314      	adds	r3, #20
 80100e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80100ea:	647a      	str	r2, [r7, #68]	; 0x44
 80100ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100f2:	e841 2300 	strex	r3, r2, [r1]
 80100f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80100f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d1e5      	bne.n	80100ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	3314      	adds	r3, #20
 8010104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010108:	e853 3f00 	ldrex	r3, [r3]
 801010c:	623b      	str	r3, [r7, #32]
   return(result);
 801010e:	6a3b      	ldr	r3, [r7, #32]
 8010110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010114:	663b      	str	r3, [r7, #96]	; 0x60
 8010116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	3314      	adds	r3, #20
 801011c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801011e:	633a      	str	r2, [r7, #48]	; 0x30
 8010120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010126:	e841 2300 	strex	r3, r2, [r1]
 801012a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801012c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012e:	2b00      	cmp	r3, #0
 8010130:	d1e5      	bne.n	80100fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010134:	2220      	movs	r2, #32
 8010136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801013a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801013c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801013e:	2b01      	cmp	r3, #1
 8010140:	d119      	bne.n	8010176 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	330c      	adds	r3, #12
 8010148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	e853 3f00 	ldrex	r3, [r3]
 8010150:	60fb      	str	r3, [r7, #12]
   return(result);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f023 0310 	bic.w	r3, r3, #16
 8010158:	65fb      	str	r3, [r7, #92]	; 0x5c
 801015a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	330c      	adds	r3, #12
 8010160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010162:	61fa      	str	r2, [r7, #28]
 8010164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010166:	69b9      	ldr	r1, [r7, #24]
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	e841 2300 	strex	r3, r2, [r1]
 801016e:	617b      	str	r3, [r7, #20]
   return(result);
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1e5      	bne.n	8010142 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017a:	2b01      	cmp	r3, #1
 801017c:	d106      	bne.n	801018c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801017e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010182:	4619      	mov	r1, r3
 8010184:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010186:	f7f1 fd91 	bl	8001cac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801018a:	e002      	b.n	8010192 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801018c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801018e:	f7ff ff53 	bl	8010038 <HAL_UART_RxCpltCallback>
}
 8010192:	bf00      	nop
 8010194:	3770      	adds	r7, #112	; 0x70
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d108      	bne.n	80101c2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80101b4:	085b      	lsrs	r3, r3, #1
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	4619      	mov	r1, r3
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7f1 fd76 	bl	8001cac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80101c0:	e002      	b.n	80101c8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f7ff ff42 	bl	801004c <HAL_UART_RxHalfCpltCallback>
}
 80101c8:	bf00      	nop
 80101ca:	3710      	adds	r7, #16
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80101d8:	2300      	movs	r3, #0
 80101da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ec:	2b80      	cmp	r3, #128	; 0x80
 80101ee:	bf0c      	ite	eq
 80101f0:	2301      	moveq	r3, #1
 80101f2:	2300      	movne	r3, #0
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	2b21      	cmp	r3, #33	; 0x21
 8010202:	d108      	bne.n	8010216 <UART_DMAError+0x46>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d005      	beq.n	8010216 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	2200      	movs	r2, #0
 801020e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010210:	68b8      	ldr	r0, [r7, #8]
 8010212:	f000 f933 	bl	801047c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	695b      	ldr	r3, [r3, #20]
 801021c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010220:	2b40      	cmp	r3, #64	; 0x40
 8010222:	bf0c      	ite	eq
 8010224:	2301      	moveq	r3, #1
 8010226:	2300      	movne	r3, #0
 8010228:	b2db      	uxtb	r3, r3
 801022a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010232:	b2db      	uxtb	r3, r3
 8010234:	2b22      	cmp	r3, #34	; 0x22
 8010236:	d108      	bne.n	801024a <UART_DMAError+0x7a>
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d005      	beq.n	801024a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	2200      	movs	r2, #0
 8010242:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010244:	68b8      	ldr	r0, [r7, #8]
 8010246:	f000 f941 	bl	80104cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801024e:	f043 0210 	orr.w	r2, r3, #16
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010256:	68b8      	ldr	r0, [r7, #8]
 8010258:	f7ff ff02 	bl	8010060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801025c:	bf00      	nop
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b090      	sub	sp, #64	; 0x40
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	603b      	str	r3, [r7, #0]
 8010270:	4613      	mov	r3, r2
 8010272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010274:	e050      	b.n	8010318 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801027c:	d04c      	beq.n	8010318 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801027e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010280:	2b00      	cmp	r3, #0
 8010282:	d007      	beq.n	8010294 <UART_WaitOnFlagUntilTimeout+0x30>
 8010284:	f7fa f86c 	bl	800a360 <HAL_GetTick>
 8010288:	4602      	mov	r2, r0
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010290:	429a      	cmp	r2, r3
 8010292:	d241      	bcs.n	8010318 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	330c      	adds	r3, #12
 801029a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029e:	e853 3f00 	ldrex	r3, [r3]
 80102a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80102aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	330c      	adds	r3, #12
 80102b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80102b4:	637a      	str	r2, [r7, #52]	; 0x34
 80102b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102bc:	e841 2300 	strex	r3, r2, [r1]
 80102c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80102c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d1e5      	bne.n	8010294 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	3314      	adds	r3, #20
 80102ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	e853 3f00 	ldrex	r3, [r3]
 80102d6:	613b      	str	r3, [r7, #16]
   return(result);
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	f023 0301 	bic.w	r3, r3, #1
 80102de:	63bb      	str	r3, [r7, #56]	; 0x38
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	3314      	adds	r3, #20
 80102e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102e8:	623a      	str	r2, [r7, #32]
 80102ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ec:	69f9      	ldr	r1, [r7, #28]
 80102ee:	6a3a      	ldr	r2, [r7, #32]
 80102f0:	e841 2300 	strex	r3, r2, [r1]
 80102f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1e5      	bne.n	80102c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2220      	movs	r2, #32
 8010300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2220      	movs	r2, #32
 8010308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2200      	movs	r2, #0
 8010310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8010314:	2303      	movs	r3, #3
 8010316:	e00f      	b.n	8010338 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	4013      	ands	r3, r2
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	429a      	cmp	r2, r3
 8010326:	bf0c      	ite	eq
 8010328:	2301      	moveq	r3, #1
 801032a:	2300      	movne	r3, #0
 801032c:	b2db      	uxtb	r3, r3
 801032e:	461a      	mov	r2, r3
 8010330:	79fb      	ldrb	r3, [r7, #7]
 8010332:	429a      	cmp	r2, r3
 8010334:	d09f      	beq.n	8010276 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3740      	adds	r7, #64	; 0x40
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b098      	sub	sp, #96	; 0x60
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	4613      	mov	r3, r2
 801034c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801034e:	68ba      	ldr	r2, [r7, #8]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	88fa      	ldrh	r2, [r7, #6]
 8010358:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2200      	movs	r2, #0
 801035e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2222      	movs	r2, #34	; 0x22
 8010364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036c:	4a40      	ldr	r2, [pc, #256]	; (8010470 <UART_Start_Receive_DMA+0x130>)
 801036e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010374:	4a3f      	ldr	r2, [pc, #252]	; (8010474 <UART_Start_Receive_DMA+0x134>)
 8010376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801037c:	4a3e      	ldr	r2, [pc, #248]	; (8010478 <UART_Start_Receive_DMA+0x138>)
 801037e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010384:	2200      	movs	r2, #0
 8010386:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010388:	f107 0308 	add.w	r3, r7, #8
 801038c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3304      	adds	r3, #4
 8010398:	4619      	mov	r1, r3
 801039a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	88fb      	ldrh	r3, [r7, #6]
 80103a0:	f7fa f9ce 	bl	800a740 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80103a4:	2300      	movs	r3, #0
 80103a6:	613b      	str	r3, [r7, #16]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	613b      	str	r3, [r7, #16]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	613b      	str	r3, [r7, #16]
 80103b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	691b      	ldr	r3, [r3, #16]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d019      	beq.n	80103fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	330c      	adds	r3, #12
 80103d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103d4:	e853 3f00 	ldrex	r3, [r3]
 80103d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80103da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	330c      	adds	r3, #12
 80103e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80103ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80103f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103f2:	e841 2300 	strex	r3, r2, [r1]
 80103f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80103f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d1e5      	bne.n	80103ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	3314      	adds	r3, #20
 8010404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010408:	e853 3f00 	ldrex	r3, [r3]
 801040c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801040e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010410:	f043 0301 	orr.w	r3, r3, #1
 8010414:	657b      	str	r3, [r7, #84]	; 0x54
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	3314      	adds	r3, #20
 801041c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801041e:	63ba      	str	r2, [r7, #56]	; 0x38
 8010420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010422:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010426:	e841 2300 	strex	r3, r2, [r1]
 801042a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1e5      	bne.n	80103fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3314      	adds	r3, #20
 8010438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	e853 3f00 	ldrex	r3, [r3]
 8010440:	617b      	str	r3, [r7, #20]
   return(result);
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010448:	653b      	str	r3, [r7, #80]	; 0x50
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3314      	adds	r3, #20
 8010450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010452:	627a      	str	r2, [r7, #36]	; 0x24
 8010454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010456:	6a39      	ldr	r1, [r7, #32]
 8010458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801045a:	e841 2300 	strex	r3, r2, [r1]
 801045e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1e5      	bne.n	8010432 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8010466:	2300      	movs	r3, #0
}
 8010468:	4618      	mov	r0, r3
 801046a:	3760      	adds	r7, #96	; 0x60
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	08010075 	.word	0x08010075
 8010474:	0801019b 	.word	0x0801019b
 8010478:	080101d1 	.word	0x080101d1

0801047c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801047c:	b480      	push	{r7}
 801047e:	b089      	sub	sp, #36	; 0x24
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	330c      	adds	r3, #12
 801048a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	e853 3f00 	ldrex	r3, [r3]
 8010492:	60bb      	str	r3, [r7, #8]
   return(result);
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801049a:	61fb      	str	r3, [r7, #28]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	330c      	adds	r3, #12
 80104a2:	69fa      	ldr	r2, [r7, #28]
 80104a4:	61ba      	str	r2, [r7, #24]
 80104a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	6979      	ldr	r1, [r7, #20]
 80104aa:	69ba      	ldr	r2, [r7, #24]
 80104ac:	e841 2300 	strex	r3, r2, [r1]
 80104b0:	613b      	str	r3, [r7, #16]
   return(result);
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e5      	bne.n	8010484 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2220      	movs	r2, #32
 80104bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80104c0:	bf00      	nop
 80104c2:	3724      	adds	r7, #36	; 0x24
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b095      	sub	sp, #84	; 0x54
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	330c      	adds	r3, #12
 80104da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104de:	e853 3f00 	ldrex	r3, [r3]
 80104e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80104ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	330c      	adds	r3, #12
 80104f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104f4:	643a      	str	r2, [r7, #64]	; 0x40
 80104f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80104fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104fc:	e841 2300 	strex	r3, r2, [r1]
 8010500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010504:	2b00      	cmp	r3, #0
 8010506:	d1e5      	bne.n	80104d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3314      	adds	r3, #20
 801050e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010510:	6a3b      	ldr	r3, [r7, #32]
 8010512:	e853 3f00 	ldrex	r3, [r3]
 8010516:	61fb      	str	r3, [r7, #28]
   return(result);
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	f023 0301 	bic.w	r3, r3, #1
 801051e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3314      	adds	r3, #20
 8010526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010528:	62fa      	str	r2, [r7, #44]	; 0x2c
 801052a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801052c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801052e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010530:	e841 2300 	strex	r3, r2, [r1]
 8010534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1e5      	bne.n	8010508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010540:	2b01      	cmp	r3, #1
 8010542:	d119      	bne.n	8010578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	330c      	adds	r3, #12
 801054a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	e853 3f00 	ldrex	r3, [r3]
 8010552:	60bb      	str	r3, [r7, #8]
   return(result);
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	f023 0310 	bic.w	r3, r3, #16
 801055a:	647b      	str	r3, [r7, #68]	; 0x44
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	330c      	adds	r3, #12
 8010562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010564:	61ba      	str	r2, [r7, #24]
 8010566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010568:	6979      	ldr	r1, [r7, #20]
 801056a:	69ba      	ldr	r2, [r7, #24]
 801056c:	e841 2300 	strex	r3, r2, [r1]
 8010570:	613b      	str	r3, [r7, #16]
   return(result);
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1e5      	bne.n	8010544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2220      	movs	r2, #32
 801057c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010586:	bf00      	nop
 8010588:	3754      	adds	r7, #84	; 0x54
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr

08010592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b084      	sub	sp, #16
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2200      	movs	r2, #0
 80105aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105ac:	68f8      	ldr	r0, [r7, #12]
 80105ae:	f7ff fd57 	bl	8010060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105b2:	bf00      	nop
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80105ba:	b480      	push	{r7}
 80105bc:	b085      	sub	sp, #20
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b21      	cmp	r3, #33	; 0x21
 80105cc:	d13e      	bne.n	801064c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105d6:	d114      	bne.n	8010602 <UART_Transmit_IT+0x48>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	691b      	ldr	r3, [r3, #16]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d110      	bne.n	8010602 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	461a      	mov	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80105f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a1b      	ldr	r3, [r3, #32]
 80105fa:	1c9a      	adds	r2, r3, #2
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	621a      	str	r2, [r3, #32]
 8010600:	e008      	b.n	8010614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	1c59      	adds	r1, r3, #1
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	6211      	str	r1, [r2, #32]
 801060c:	781a      	ldrb	r2, [r3, #0]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010618:	b29b      	uxth	r3, r3
 801061a:	3b01      	subs	r3, #1
 801061c:	b29b      	uxth	r3, r3
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	4619      	mov	r1, r3
 8010622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010624:	2b00      	cmp	r3, #0
 8010626:	d10f      	bne.n	8010648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68da      	ldr	r2, [r3, #12]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	68da      	ldr	r2, [r3, #12]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	e000      	b.n	801064e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801064c:	2302      	movs	r3, #2
  }
}
 801064e:	4618      	mov	r0, r3
 8010650:	3714      	adds	r7, #20
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b082      	sub	sp, #8
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	68da      	ldr	r2, [r3, #12]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2220      	movs	r2, #32
 8010676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7ff fcd2 	bl	8010024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801068a:	b580      	push	{r7, lr}
 801068c:	b08c      	sub	sp, #48	; 0x30
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010698:	b2db      	uxtb	r3, r3
 801069a:	2b22      	cmp	r3, #34	; 0x22
 801069c:	f040 80ab 	bne.w	80107f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106a8:	d117      	bne.n	80106da <UART_Receive_IT+0x50>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d113      	bne.n	80106da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80106b2:	2300      	movs	r3, #0
 80106b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106d2:	1c9a      	adds	r2, r3, #2
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	629a      	str	r2, [r3, #40]	; 0x28
 80106d8:	e026      	b.n	8010728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80106e0:	2300      	movs	r3, #0
 80106e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106ec:	d007      	beq.n	80106fe <UART_Receive_IT+0x74>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	689b      	ldr	r3, [r3, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d10a      	bne.n	801070c <UART_Receive_IT+0x82>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	691b      	ldr	r3, [r3, #16]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d106      	bne.n	801070c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	b2da      	uxtb	r2, r3
 8010706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010708:	701a      	strb	r2, [r3, #0]
 801070a:	e008      	b.n	801071e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010718:	b2da      	uxtb	r2, r3
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010722:	1c5a      	adds	r2, r3, #1
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801072c:	b29b      	uxth	r3, r3
 801072e:	3b01      	subs	r3, #1
 8010730:	b29b      	uxth	r3, r3
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	4619      	mov	r1, r3
 8010736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010738:	2b00      	cmp	r3, #0
 801073a:	d15a      	bne.n	80107f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	68da      	ldr	r2, [r3, #12]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f022 0220 	bic.w	r2, r2, #32
 801074a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	68da      	ldr	r2, [r3, #12]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801075a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	695a      	ldr	r2, [r3, #20]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f022 0201 	bic.w	r2, r2, #1
 801076a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2220      	movs	r2, #32
 8010770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010778:	2b01      	cmp	r3, #1
 801077a:	d135      	bne.n	80107e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	330c      	adds	r3, #12
 8010788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	e853 3f00 	ldrex	r3, [r3]
 8010790:	613b      	str	r3, [r7, #16]
   return(result);
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	f023 0310 	bic.w	r3, r3, #16
 8010798:	627b      	str	r3, [r7, #36]	; 0x24
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	330c      	adds	r3, #12
 80107a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107a2:	623a      	str	r2, [r7, #32]
 80107a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a6:	69f9      	ldr	r1, [r7, #28]
 80107a8:	6a3a      	ldr	r2, [r7, #32]
 80107aa:	e841 2300 	strex	r3, r2, [r1]
 80107ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1e5      	bne.n	8010782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f003 0310 	and.w	r3, r3, #16
 80107c0:	2b10      	cmp	r3, #16
 80107c2:	d10a      	bne.n	80107da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80107c4:	2300      	movs	r3, #0
 80107c6:	60fb      	str	r3, [r7, #12]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	60fb      	str	r3, [r7, #12]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	60fb      	str	r3, [r7, #12]
 80107d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7f1 fa63 	bl	8001cac <HAL_UARTEx_RxEventCallback>
 80107e6:	e002      	b.n	80107ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f7ff fc25 	bl	8010038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80107ee:	2300      	movs	r3, #0
 80107f0:	e002      	b.n	80107f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	e000      	b.n	80107f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80107f6:	2302      	movs	r3, #2
  }
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3730      	adds	r7, #48	; 0x30
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010804:	b0c0      	sub	sp, #256	; 0x100
 8010806:	af00      	add	r7, sp, #0
 8010808:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801080c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801081c:	68d9      	ldr	r1, [r3, #12]
 801081e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	ea40 0301 	orr.w	r3, r0, r1
 8010828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801082a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801082e:	689a      	ldr	r2, [r3, #8]
 8010830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010834:	691b      	ldr	r3, [r3, #16]
 8010836:	431a      	orrs	r2, r3
 8010838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801083c:	695b      	ldr	r3, [r3, #20]
 801083e:	431a      	orrs	r2, r3
 8010840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010844:	69db      	ldr	r3, [r3, #28]
 8010846:	4313      	orrs	r3, r2
 8010848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801084c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010858:	f021 010c 	bic.w	r1, r1, #12
 801085c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010860:	681a      	ldr	r2, [r3, #0]
 8010862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010866:	430b      	orrs	r3, r1
 8010868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801086a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	695b      	ldr	r3, [r3, #20]
 8010872:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801087a:	6999      	ldr	r1, [r3, #24]
 801087c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	ea40 0301 	orr.w	r3, r0, r1
 8010886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	4b8f      	ldr	r3, [pc, #572]	; (8010acc <UART_SetConfig+0x2cc>)
 8010890:	429a      	cmp	r2, r3
 8010892:	d005      	beq.n	80108a0 <UART_SetConfig+0xa0>
 8010894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	4b8d      	ldr	r3, [pc, #564]	; (8010ad0 <UART_SetConfig+0x2d0>)
 801089c:	429a      	cmp	r2, r3
 801089e:	d104      	bne.n	80108aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80108a0:	f7fe f816 	bl	800e8d0 <HAL_RCC_GetPCLK2Freq>
 80108a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80108a8:	e003      	b.n	80108b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80108aa:	f7fd fffd 	bl	800e8a8 <HAL_RCC_GetPCLK1Freq>
 80108ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80108b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108b6:	69db      	ldr	r3, [r3, #28]
 80108b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108bc:	f040 810c 	bne.w	8010ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80108c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108c4:	2200      	movs	r2, #0
 80108c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80108ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80108ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80108d2:	4622      	mov	r2, r4
 80108d4:	462b      	mov	r3, r5
 80108d6:	1891      	adds	r1, r2, r2
 80108d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80108da:	415b      	adcs	r3, r3
 80108dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80108de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80108e2:	4621      	mov	r1, r4
 80108e4:	eb12 0801 	adds.w	r8, r2, r1
 80108e8:	4629      	mov	r1, r5
 80108ea:	eb43 0901 	adc.w	r9, r3, r1
 80108ee:	f04f 0200 	mov.w	r2, #0
 80108f2:	f04f 0300 	mov.w	r3, #0
 80108f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80108fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80108fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010902:	4690      	mov	r8, r2
 8010904:	4699      	mov	r9, r3
 8010906:	4623      	mov	r3, r4
 8010908:	eb18 0303 	adds.w	r3, r8, r3
 801090c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010910:	462b      	mov	r3, r5
 8010912:	eb49 0303 	adc.w	r3, r9, r3
 8010916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801091a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801092a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801092e:	460b      	mov	r3, r1
 8010930:	18db      	adds	r3, r3, r3
 8010932:	653b      	str	r3, [r7, #80]	; 0x50
 8010934:	4613      	mov	r3, r2
 8010936:	eb42 0303 	adc.w	r3, r2, r3
 801093a:	657b      	str	r3, [r7, #84]	; 0x54
 801093c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010944:	f7f0 f9d2 	bl	8000cec <__aeabi_uldivmod>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	4b61      	ldr	r3, [pc, #388]	; (8010ad4 <UART_SetConfig+0x2d4>)
 801094e:	fba3 2302 	umull	r2, r3, r3, r2
 8010952:	095b      	lsrs	r3, r3, #5
 8010954:	011c      	lsls	r4, r3, #4
 8010956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801095a:	2200      	movs	r2, #0
 801095c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010960:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010968:	4642      	mov	r2, r8
 801096a:	464b      	mov	r3, r9
 801096c:	1891      	adds	r1, r2, r2
 801096e:	64b9      	str	r1, [r7, #72]	; 0x48
 8010970:	415b      	adcs	r3, r3
 8010972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010978:	4641      	mov	r1, r8
 801097a:	eb12 0a01 	adds.w	sl, r2, r1
 801097e:	4649      	mov	r1, r9
 8010980:	eb43 0b01 	adc.w	fp, r3, r1
 8010984:	f04f 0200 	mov.w	r2, #0
 8010988:	f04f 0300 	mov.w	r3, #0
 801098c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010998:	4692      	mov	sl, r2
 801099a:	469b      	mov	fp, r3
 801099c:	4643      	mov	r3, r8
 801099e:	eb1a 0303 	adds.w	r3, sl, r3
 80109a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80109a6:	464b      	mov	r3, r9
 80109a8:	eb4b 0303 	adc.w	r3, fp, r3
 80109ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80109b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80109bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80109c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80109c4:	460b      	mov	r3, r1
 80109c6:	18db      	adds	r3, r3, r3
 80109c8:	643b      	str	r3, [r7, #64]	; 0x40
 80109ca:	4613      	mov	r3, r2
 80109cc:	eb42 0303 	adc.w	r3, r2, r3
 80109d0:	647b      	str	r3, [r7, #68]	; 0x44
 80109d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80109d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80109da:	f7f0 f987 	bl	8000cec <__aeabi_uldivmod>
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
 80109e2:	4611      	mov	r1, r2
 80109e4:	4b3b      	ldr	r3, [pc, #236]	; (8010ad4 <UART_SetConfig+0x2d4>)
 80109e6:	fba3 2301 	umull	r2, r3, r3, r1
 80109ea:	095b      	lsrs	r3, r3, #5
 80109ec:	2264      	movs	r2, #100	; 0x64
 80109ee:	fb02 f303 	mul.w	r3, r2, r3
 80109f2:	1acb      	subs	r3, r1, r3
 80109f4:	00db      	lsls	r3, r3, #3
 80109f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80109fa:	4b36      	ldr	r3, [pc, #216]	; (8010ad4 <UART_SetConfig+0x2d4>)
 80109fc:	fba3 2302 	umull	r2, r3, r3, r2
 8010a00:	095b      	lsrs	r3, r3, #5
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010a08:	441c      	add	r4, r3
 8010a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010a14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010a1c:	4642      	mov	r2, r8
 8010a1e:	464b      	mov	r3, r9
 8010a20:	1891      	adds	r1, r2, r2
 8010a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8010a24:	415b      	adcs	r3, r3
 8010a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010a2c:	4641      	mov	r1, r8
 8010a2e:	1851      	adds	r1, r2, r1
 8010a30:	6339      	str	r1, [r7, #48]	; 0x30
 8010a32:	4649      	mov	r1, r9
 8010a34:	414b      	adcs	r3, r1
 8010a36:	637b      	str	r3, [r7, #52]	; 0x34
 8010a38:	f04f 0200 	mov.w	r2, #0
 8010a3c:	f04f 0300 	mov.w	r3, #0
 8010a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010a44:	4659      	mov	r1, fp
 8010a46:	00cb      	lsls	r3, r1, #3
 8010a48:	4651      	mov	r1, sl
 8010a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010a4e:	4651      	mov	r1, sl
 8010a50:	00ca      	lsls	r2, r1, #3
 8010a52:	4610      	mov	r0, r2
 8010a54:	4619      	mov	r1, r3
 8010a56:	4603      	mov	r3, r0
 8010a58:	4642      	mov	r2, r8
 8010a5a:	189b      	adds	r3, r3, r2
 8010a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010a60:	464b      	mov	r3, r9
 8010a62:	460a      	mov	r2, r1
 8010a64:	eb42 0303 	adc.w	r3, r2, r3
 8010a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010a78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010a80:	460b      	mov	r3, r1
 8010a82:	18db      	adds	r3, r3, r3
 8010a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a86:	4613      	mov	r3, r2
 8010a88:	eb42 0303 	adc.w	r3, r2, r3
 8010a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010a96:	f7f0 f929 	bl	8000cec <__aeabi_uldivmod>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	4b0d      	ldr	r3, [pc, #52]	; (8010ad4 <UART_SetConfig+0x2d4>)
 8010aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8010aa4:	095b      	lsrs	r3, r3, #5
 8010aa6:	2164      	movs	r1, #100	; 0x64
 8010aa8:	fb01 f303 	mul.w	r3, r1, r3
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	00db      	lsls	r3, r3, #3
 8010ab0:	3332      	adds	r3, #50	; 0x32
 8010ab2:	4a08      	ldr	r2, [pc, #32]	; (8010ad4 <UART_SetConfig+0x2d4>)
 8010ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ab8:	095b      	lsrs	r3, r3, #5
 8010aba:	f003 0207 	and.w	r2, r3, #7
 8010abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4422      	add	r2, r4
 8010ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010ac8:	e105      	b.n	8010cd6 <UART_SetConfig+0x4d6>
 8010aca:	bf00      	nop
 8010acc:	40011000 	.word	0x40011000
 8010ad0:	40011400 	.word	0x40011400
 8010ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010adc:	2200      	movs	r2, #0
 8010ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8010aea:	4642      	mov	r2, r8
 8010aec:	464b      	mov	r3, r9
 8010aee:	1891      	adds	r1, r2, r2
 8010af0:	6239      	str	r1, [r7, #32]
 8010af2:	415b      	adcs	r3, r3
 8010af4:	627b      	str	r3, [r7, #36]	; 0x24
 8010af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010afa:	4641      	mov	r1, r8
 8010afc:	1854      	adds	r4, r2, r1
 8010afe:	4649      	mov	r1, r9
 8010b00:	eb43 0501 	adc.w	r5, r3, r1
 8010b04:	f04f 0200 	mov.w	r2, #0
 8010b08:	f04f 0300 	mov.w	r3, #0
 8010b0c:	00eb      	lsls	r3, r5, #3
 8010b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010b12:	00e2      	lsls	r2, r4, #3
 8010b14:	4614      	mov	r4, r2
 8010b16:	461d      	mov	r5, r3
 8010b18:	4643      	mov	r3, r8
 8010b1a:	18e3      	adds	r3, r4, r3
 8010b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010b20:	464b      	mov	r3, r9
 8010b22:	eb45 0303 	adc.w	r3, r5, r3
 8010b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010b3a:	f04f 0200 	mov.w	r2, #0
 8010b3e:	f04f 0300 	mov.w	r3, #0
 8010b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010b46:	4629      	mov	r1, r5
 8010b48:	008b      	lsls	r3, r1, #2
 8010b4a:	4621      	mov	r1, r4
 8010b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010b50:	4621      	mov	r1, r4
 8010b52:	008a      	lsls	r2, r1, #2
 8010b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010b58:	f7f0 f8c8 	bl	8000cec <__aeabi_uldivmod>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	460b      	mov	r3, r1
 8010b60:	4b60      	ldr	r3, [pc, #384]	; (8010ce4 <UART_SetConfig+0x4e4>)
 8010b62:	fba3 2302 	umull	r2, r3, r3, r2
 8010b66:	095b      	lsrs	r3, r3, #5
 8010b68:	011c      	lsls	r4, r3, #4
 8010b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010b7c:	4642      	mov	r2, r8
 8010b7e:	464b      	mov	r3, r9
 8010b80:	1891      	adds	r1, r2, r2
 8010b82:	61b9      	str	r1, [r7, #24]
 8010b84:	415b      	adcs	r3, r3
 8010b86:	61fb      	str	r3, [r7, #28]
 8010b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010b8c:	4641      	mov	r1, r8
 8010b8e:	1851      	adds	r1, r2, r1
 8010b90:	6139      	str	r1, [r7, #16]
 8010b92:	4649      	mov	r1, r9
 8010b94:	414b      	adcs	r3, r1
 8010b96:	617b      	str	r3, [r7, #20]
 8010b98:	f04f 0200 	mov.w	r2, #0
 8010b9c:	f04f 0300 	mov.w	r3, #0
 8010ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010ba4:	4659      	mov	r1, fp
 8010ba6:	00cb      	lsls	r3, r1, #3
 8010ba8:	4651      	mov	r1, sl
 8010baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010bae:	4651      	mov	r1, sl
 8010bb0:	00ca      	lsls	r2, r1, #3
 8010bb2:	4610      	mov	r0, r2
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	4642      	mov	r2, r8
 8010bba:	189b      	adds	r3, r3, r2
 8010bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010bc0:	464b      	mov	r3, r9
 8010bc2:	460a      	mov	r2, r1
 8010bc4:	eb42 0303 	adc.w	r3, r2, r3
 8010bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8010bd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010bd8:	f04f 0200 	mov.w	r2, #0
 8010bdc:	f04f 0300 	mov.w	r3, #0
 8010be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8010be4:	4649      	mov	r1, r9
 8010be6:	008b      	lsls	r3, r1, #2
 8010be8:	4641      	mov	r1, r8
 8010bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010bee:	4641      	mov	r1, r8
 8010bf0:	008a      	lsls	r2, r1, #2
 8010bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010bf6:	f7f0 f879 	bl	8000cec <__aeabi_uldivmod>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	4b39      	ldr	r3, [pc, #228]	; (8010ce4 <UART_SetConfig+0x4e4>)
 8010c00:	fba3 1302 	umull	r1, r3, r3, r2
 8010c04:	095b      	lsrs	r3, r3, #5
 8010c06:	2164      	movs	r1, #100	; 0x64
 8010c08:	fb01 f303 	mul.w	r3, r1, r3
 8010c0c:	1ad3      	subs	r3, r2, r3
 8010c0e:	011b      	lsls	r3, r3, #4
 8010c10:	3332      	adds	r3, #50	; 0x32
 8010c12:	4a34      	ldr	r2, [pc, #208]	; (8010ce4 <UART_SetConfig+0x4e4>)
 8010c14:	fba2 2303 	umull	r2, r3, r2, r3
 8010c18:	095b      	lsrs	r3, r3, #5
 8010c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c1e:	441c      	add	r4, r3
 8010c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010c24:	2200      	movs	r2, #0
 8010c26:	673b      	str	r3, [r7, #112]	; 0x70
 8010c28:	677a      	str	r2, [r7, #116]	; 0x74
 8010c2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010c2e:	4642      	mov	r2, r8
 8010c30:	464b      	mov	r3, r9
 8010c32:	1891      	adds	r1, r2, r2
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	415b      	adcs	r3, r3
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010c3e:	4641      	mov	r1, r8
 8010c40:	1851      	adds	r1, r2, r1
 8010c42:	6039      	str	r1, [r7, #0]
 8010c44:	4649      	mov	r1, r9
 8010c46:	414b      	adcs	r3, r1
 8010c48:	607b      	str	r3, [r7, #4]
 8010c4a:	f04f 0200 	mov.w	r2, #0
 8010c4e:	f04f 0300 	mov.w	r3, #0
 8010c52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010c56:	4659      	mov	r1, fp
 8010c58:	00cb      	lsls	r3, r1, #3
 8010c5a:	4651      	mov	r1, sl
 8010c5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010c60:	4651      	mov	r1, sl
 8010c62:	00ca      	lsls	r2, r1, #3
 8010c64:	4610      	mov	r0, r2
 8010c66:	4619      	mov	r1, r3
 8010c68:	4603      	mov	r3, r0
 8010c6a:	4642      	mov	r2, r8
 8010c6c:	189b      	adds	r3, r3, r2
 8010c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c70:	464b      	mov	r3, r9
 8010c72:	460a      	mov	r2, r1
 8010c74:	eb42 0303 	adc.w	r3, r2, r3
 8010c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	2200      	movs	r2, #0
 8010c82:	663b      	str	r3, [r7, #96]	; 0x60
 8010c84:	667a      	str	r2, [r7, #100]	; 0x64
 8010c86:	f04f 0200 	mov.w	r2, #0
 8010c8a:	f04f 0300 	mov.w	r3, #0
 8010c8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8010c92:	4649      	mov	r1, r9
 8010c94:	008b      	lsls	r3, r1, #2
 8010c96:	4641      	mov	r1, r8
 8010c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010c9c:	4641      	mov	r1, r8
 8010c9e:	008a      	lsls	r2, r1, #2
 8010ca0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010ca4:	f7f0 f822 	bl	8000cec <__aeabi_uldivmod>
 8010ca8:	4602      	mov	r2, r0
 8010caa:	460b      	mov	r3, r1
 8010cac:	4b0d      	ldr	r3, [pc, #52]	; (8010ce4 <UART_SetConfig+0x4e4>)
 8010cae:	fba3 1302 	umull	r1, r3, r3, r2
 8010cb2:	095b      	lsrs	r3, r3, #5
 8010cb4:	2164      	movs	r1, #100	; 0x64
 8010cb6:	fb01 f303 	mul.w	r3, r1, r3
 8010cba:	1ad3      	subs	r3, r2, r3
 8010cbc:	011b      	lsls	r3, r3, #4
 8010cbe:	3332      	adds	r3, #50	; 0x32
 8010cc0:	4a08      	ldr	r2, [pc, #32]	; (8010ce4 <UART_SetConfig+0x4e4>)
 8010cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc6:	095b      	lsrs	r3, r3, #5
 8010cc8:	f003 020f 	and.w	r2, r3, #15
 8010ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4422      	add	r2, r4
 8010cd4:	609a      	str	r2, [r3, #8]
}
 8010cd6:	bf00      	nop
 8010cd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010ce2:	bf00      	nop
 8010ce4:	51eb851f 	.word	0x51eb851f

08010ce8 <__errno>:
 8010ce8:	4b01      	ldr	r3, [pc, #4]	; (8010cf0 <__errno+0x8>)
 8010cea:	6818      	ldr	r0, [r3, #0]
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop
 8010cf0:	2000153c 	.word	0x2000153c

08010cf4 <__libc_init_array>:
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	4d0d      	ldr	r5, [pc, #52]	; (8010d2c <__libc_init_array+0x38>)
 8010cf8:	4c0d      	ldr	r4, [pc, #52]	; (8010d30 <__libc_init_array+0x3c>)
 8010cfa:	1b64      	subs	r4, r4, r5
 8010cfc:	10a4      	asrs	r4, r4, #2
 8010cfe:	2600      	movs	r6, #0
 8010d00:	42a6      	cmp	r6, r4
 8010d02:	d109      	bne.n	8010d18 <__libc_init_array+0x24>
 8010d04:	4d0b      	ldr	r5, [pc, #44]	; (8010d34 <__libc_init_array+0x40>)
 8010d06:	4c0c      	ldr	r4, [pc, #48]	; (8010d38 <__libc_init_array+0x44>)
 8010d08:	f003 ff0c 	bl	8014b24 <_init>
 8010d0c:	1b64      	subs	r4, r4, r5
 8010d0e:	10a4      	asrs	r4, r4, #2
 8010d10:	2600      	movs	r6, #0
 8010d12:	42a6      	cmp	r6, r4
 8010d14:	d105      	bne.n	8010d22 <__libc_init_array+0x2e>
 8010d16:	bd70      	pop	{r4, r5, r6, pc}
 8010d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d1c:	4798      	blx	r3
 8010d1e:	3601      	adds	r6, #1
 8010d20:	e7ee      	b.n	8010d00 <__libc_init_array+0xc>
 8010d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d26:	4798      	blx	r3
 8010d28:	3601      	adds	r6, #1
 8010d2a:	e7f2      	b.n	8010d12 <__libc_init_array+0x1e>
 8010d2c:	080251c0 	.word	0x080251c0
 8010d30:	080251c0 	.word	0x080251c0
 8010d34:	080251c0 	.word	0x080251c0
 8010d38:	080251c4 	.word	0x080251c4

08010d3c <localtime>:
 8010d3c:	b538      	push	{r3, r4, r5, lr}
 8010d3e:	4b0b      	ldr	r3, [pc, #44]	; (8010d6c <localtime+0x30>)
 8010d40:	681d      	ldr	r5, [r3, #0]
 8010d42:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010d44:	4604      	mov	r4, r0
 8010d46:	b953      	cbnz	r3, 8010d5e <localtime+0x22>
 8010d48:	2024      	movs	r0, #36	; 0x24
 8010d4a:	f000 f909 	bl	8010f60 <malloc>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	63e8      	str	r0, [r5, #60]	; 0x3c
 8010d52:	b920      	cbnz	r0, 8010d5e <localtime+0x22>
 8010d54:	4b06      	ldr	r3, [pc, #24]	; (8010d70 <localtime+0x34>)
 8010d56:	4807      	ldr	r0, [pc, #28]	; (8010d74 <localtime+0x38>)
 8010d58:	2132      	movs	r1, #50	; 0x32
 8010d5a:	f000 ff51 	bl	8011c00 <__assert_func>
 8010d5e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8010d60:	4620      	mov	r0, r4
 8010d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d66:	f000 b807 	b.w	8010d78 <localtime_r>
 8010d6a:	bf00      	nop
 8010d6c:	2000153c 	.word	0x2000153c
 8010d70:	08024c24 	.word	0x08024c24
 8010d74:	08024c3b 	.word	0x08024c3b

08010d78 <localtime_r>:
 8010d78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010d7c:	4680      	mov	r8, r0
 8010d7e:	9101      	str	r1, [sp, #4]
 8010d80:	f000 ffc6 	bl	8011d10 <__gettzinfo>
 8010d84:	9901      	ldr	r1, [sp, #4]
 8010d86:	4605      	mov	r5, r0
 8010d88:	4640      	mov	r0, r8
 8010d8a:	f000 ffc5 	bl	8011d18 <gmtime_r>
 8010d8e:	6943      	ldr	r3, [r0, #20]
 8010d90:	0799      	lsls	r1, r3, #30
 8010d92:	4604      	mov	r4, r0
 8010d94:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8010d98:	d105      	bne.n	8010da6 <localtime_r+0x2e>
 8010d9a:	2264      	movs	r2, #100	; 0x64
 8010d9c:	fb97 f3f2 	sdiv	r3, r7, r2
 8010da0:	fb02 7313 	mls	r3, r2, r3, r7
 8010da4:	bb73      	cbnz	r3, 8010e04 <localtime_r+0x8c>
 8010da6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010daa:	fb97 f6f3 	sdiv	r6, r7, r3
 8010dae:	fb03 7616 	mls	r6, r3, r6, r7
 8010db2:	fab6 f386 	clz	r3, r6
 8010db6:	095b      	lsrs	r3, r3, #5
 8010db8:	4e67      	ldr	r6, [pc, #412]	; (8010f58 <localtime_r+0x1e0>)
 8010dba:	2230      	movs	r2, #48	; 0x30
 8010dbc:	fb02 6603 	mla	r6, r2, r3, r6
 8010dc0:	f000 fd8c 	bl	80118dc <__tz_lock>
 8010dc4:	f000 fd96 	bl	80118f4 <_tzset_unlocked>
 8010dc8:	4b64      	ldr	r3, [pc, #400]	; (8010f5c <localtime_r+0x1e4>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	b34b      	cbz	r3, 8010e22 <localtime_r+0xaa>
 8010dce:	686b      	ldr	r3, [r5, #4]
 8010dd0:	42bb      	cmp	r3, r7
 8010dd2:	d119      	bne.n	8010e08 <localtime_r+0x90>
 8010dd4:	682f      	ldr	r7, [r5, #0]
 8010dd6:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010dda:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8010dde:	b9df      	cbnz	r7, 8010e18 <localtime_r+0xa0>
 8010de0:	4282      	cmp	r2, r0
 8010de2:	eb73 0101 	sbcs.w	r1, r3, r1
 8010de6:	da23      	bge.n	8010e30 <localtime_r+0xb8>
 8010de8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8010dec:	4282      	cmp	r2, r0
 8010dee:	eb73 0701 	sbcs.w	r7, r3, r1
 8010df2:	bfb4      	ite	lt
 8010df4:	2701      	movlt	r7, #1
 8010df6:	2700      	movge	r7, #0
 8010df8:	4282      	cmp	r2, r0
 8010dfa:	418b      	sbcs	r3, r1
 8010dfc:	6227      	str	r7, [r4, #32]
 8010dfe:	db19      	blt.n	8010e34 <localtime_r+0xbc>
 8010e00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010e02:	e018      	b.n	8010e36 <localtime_r+0xbe>
 8010e04:	2301      	movs	r3, #1
 8010e06:	e7d7      	b.n	8010db8 <localtime_r+0x40>
 8010e08:	4638      	mov	r0, r7
 8010e0a:	f000 fcbd 	bl	8011788 <__tzcalc_limits>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d1e0      	bne.n	8010dd4 <localtime_r+0x5c>
 8010e12:	f04f 33ff 	mov.w	r3, #4294967295
 8010e16:	e004      	b.n	8010e22 <localtime_r+0xaa>
 8010e18:	4282      	cmp	r2, r0
 8010e1a:	eb73 0101 	sbcs.w	r1, r3, r1
 8010e1e:	da02      	bge.n	8010e26 <localtime_r+0xae>
 8010e20:	2300      	movs	r3, #0
 8010e22:	6223      	str	r3, [r4, #32]
 8010e24:	e7ec      	b.n	8010e00 <localtime_r+0x88>
 8010e26:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8010e2a:	4282      	cmp	r2, r0
 8010e2c:	418b      	sbcs	r3, r1
 8010e2e:	daf7      	bge.n	8010e20 <localtime_r+0xa8>
 8010e30:	2301      	movs	r3, #1
 8010e32:	6223      	str	r3, [r4, #32]
 8010e34:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010e36:	6861      	ldr	r1, [r4, #4]
 8010e38:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8010e3c:	203c      	movs	r0, #60	; 0x3c
 8010e3e:	fb93 f5f2 	sdiv	r5, r3, r2
 8010e42:	fb02 3315 	mls	r3, r2, r5, r3
 8010e46:	fb93 f2f0 	sdiv	r2, r3, r0
 8010e4a:	fb00 3012 	mls	r0, r0, r2, r3
 8010e4e:	6823      	ldr	r3, [r4, #0]
 8010e50:	1a89      	subs	r1, r1, r2
 8010e52:	68a2      	ldr	r2, [r4, #8]
 8010e54:	6061      	str	r1, [r4, #4]
 8010e56:	1a1b      	subs	r3, r3, r0
 8010e58:	1b52      	subs	r2, r2, r5
 8010e5a:	2b3b      	cmp	r3, #59	; 0x3b
 8010e5c:	6023      	str	r3, [r4, #0]
 8010e5e:	60a2      	str	r2, [r4, #8]
 8010e60:	dd35      	ble.n	8010ece <localtime_r+0x156>
 8010e62:	3101      	adds	r1, #1
 8010e64:	6061      	str	r1, [r4, #4]
 8010e66:	3b3c      	subs	r3, #60	; 0x3c
 8010e68:	6023      	str	r3, [r4, #0]
 8010e6a:	6863      	ldr	r3, [r4, #4]
 8010e6c:	2b3b      	cmp	r3, #59	; 0x3b
 8010e6e:	dd34      	ble.n	8010eda <localtime_r+0x162>
 8010e70:	3201      	adds	r2, #1
 8010e72:	60a2      	str	r2, [r4, #8]
 8010e74:	3b3c      	subs	r3, #60	; 0x3c
 8010e76:	6063      	str	r3, [r4, #4]
 8010e78:	68a3      	ldr	r3, [r4, #8]
 8010e7a:	2b17      	cmp	r3, #23
 8010e7c:	dd33      	ble.n	8010ee6 <localtime_r+0x16e>
 8010e7e:	69e2      	ldr	r2, [r4, #28]
 8010e80:	3201      	adds	r2, #1
 8010e82:	61e2      	str	r2, [r4, #28]
 8010e84:	69a2      	ldr	r2, [r4, #24]
 8010e86:	3201      	adds	r2, #1
 8010e88:	2a06      	cmp	r2, #6
 8010e8a:	bfc8      	it	gt
 8010e8c:	2200      	movgt	r2, #0
 8010e8e:	61a2      	str	r2, [r4, #24]
 8010e90:	68e2      	ldr	r2, [r4, #12]
 8010e92:	3b18      	subs	r3, #24
 8010e94:	3201      	adds	r2, #1
 8010e96:	60a3      	str	r3, [r4, #8]
 8010e98:	6923      	ldr	r3, [r4, #16]
 8010e9a:	60e2      	str	r2, [r4, #12]
 8010e9c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8010ea0:	428a      	cmp	r2, r1
 8010ea2:	dd0e      	ble.n	8010ec2 <localtime_r+0x14a>
 8010ea4:	2b0b      	cmp	r3, #11
 8010ea6:	eba2 0201 	sub.w	r2, r2, r1
 8010eaa:	60e2      	str	r2, [r4, #12]
 8010eac:	f103 0201 	add.w	r2, r3, #1
 8010eb0:	bf09      	itett	eq
 8010eb2:	6963      	ldreq	r3, [r4, #20]
 8010eb4:	6122      	strne	r2, [r4, #16]
 8010eb6:	2200      	moveq	r2, #0
 8010eb8:	3301      	addeq	r3, #1
 8010eba:	bf02      	ittt	eq
 8010ebc:	6122      	streq	r2, [r4, #16]
 8010ebe:	6163      	streq	r3, [r4, #20]
 8010ec0:	61e2      	streq	r2, [r4, #28]
 8010ec2:	f000 fd11 	bl	80118e8 <__tz_unlock>
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	b002      	add	sp, #8
 8010eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	dacb      	bge.n	8010e6a <localtime_r+0xf2>
 8010ed2:	3901      	subs	r1, #1
 8010ed4:	6061      	str	r1, [r4, #4]
 8010ed6:	333c      	adds	r3, #60	; 0x3c
 8010ed8:	e7c6      	b.n	8010e68 <localtime_r+0xf0>
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	dacc      	bge.n	8010e78 <localtime_r+0x100>
 8010ede:	3a01      	subs	r2, #1
 8010ee0:	60a2      	str	r2, [r4, #8]
 8010ee2:	333c      	adds	r3, #60	; 0x3c
 8010ee4:	e7c7      	b.n	8010e76 <localtime_r+0xfe>
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	daeb      	bge.n	8010ec2 <localtime_r+0x14a>
 8010eea:	69e2      	ldr	r2, [r4, #28]
 8010eec:	3a01      	subs	r2, #1
 8010eee:	61e2      	str	r2, [r4, #28]
 8010ef0:	69a2      	ldr	r2, [r4, #24]
 8010ef2:	3a01      	subs	r2, #1
 8010ef4:	bf48      	it	mi
 8010ef6:	2206      	movmi	r2, #6
 8010ef8:	61a2      	str	r2, [r4, #24]
 8010efa:	68e2      	ldr	r2, [r4, #12]
 8010efc:	3318      	adds	r3, #24
 8010efe:	3a01      	subs	r2, #1
 8010f00:	60e2      	str	r2, [r4, #12]
 8010f02:	60a3      	str	r3, [r4, #8]
 8010f04:	2a00      	cmp	r2, #0
 8010f06:	d1dc      	bne.n	8010ec2 <localtime_r+0x14a>
 8010f08:	6923      	ldr	r3, [r4, #16]
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	d405      	bmi.n	8010f1a <localtime_r+0x1a2>
 8010f0e:	6123      	str	r3, [r4, #16]
 8010f10:	6923      	ldr	r3, [r4, #16]
 8010f12:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8010f16:	60e3      	str	r3, [r4, #12]
 8010f18:	e7d3      	b.n	8010ec2 <localtime_r+0x14a>
 8010f1a:	230b      	movs	r3, #11
 8010f1c:	6123      	str	r3, [r4, #16]
 8010f1e:	6963      	ldr	r3, [r4, #20]
 8010f20:	1e5a      	subs	r2, r3, #1
 8010f22:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8010f26:	6162      	str	r2, [r4, #20]
 8010f28:	079a      	lsls	r2, r3, #30
 8010f2a:	d105      	bne.n	8010f38 <localtime_r+0x1c0>
 8010f2c:	2164      	movs	r1, #100	; 0x64
 8010f2e:	fb93 f2f1 	sdiv	r2, r3, r1
 8010f32:	fb01 3212 	mls	r2, r1, r2, r3
 8010f36:	b962      	cbnz	r2, 8010f52 <localtime_r+0x1da>
 8010f38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010f3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8010f40:	fb02 3311 	mls	r3, r2, r1, r3
 8010f44:	fab3 f383 	clz	r3, r3
 8010f48:	095b      	lsrs	r3, r3, #5
 8010f4a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8010f4e:	61e3      	str	r3, [r4, #28]
 8010f50:	e7de      	b.n	8010f10 <localtime_r+0x198>
 8010f52:	2301      	movs	r3, #1
 8010f54:	e7f9      	b.n	8010f4a <localtime_r+0x1d2>
 8010f56:	bf00      	nop
 8010f58:	08024cf8 	.word	0x08024cf8
 8010f5c:	200050a8 	.word	0x200050a8

08010f60 <malloc>:
 8010f60:	4b02      	ldr	r3, [pc, #8]	; (8010f6c <malloc+0xc>)
 8010f62:	4601      	mov	r1, r0
 8010f64:	6818      	ldr	r0, [r3, #0]
 8010f66:	f000 baff 	b.w	8011568 <_malloc_r>
 8010f6a:	bf00      	nop
 8010f6c:	2000153c 	.word	0x2000153c

08010f70 <free>:
 8010f70:	4b02      	ldr	r3, [pc, #8]	; (8010f7c <free+0xc>)
 8010f72:	4601      	mov	r1, r0
 8010f74:	6818      	ldr	r0, [r3, #0]
 8010f76:	f000 ba8b 	b.w	8011490 <_free_r>
 8010f7a:	bf00      	nop
 8010f7c:	2000153c 	.word	0x2000153c

08010f80 <memcpy>:
 8010f80:	440a      	add	r2, r1
 8010f82:	4291      	cmp	r1, r2
 8010f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f88:	d100      	bne.n	8010f8c <memcpy+0xc>
 8010f8a:	4770      	bx	lr
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f96:	4291      	cmp	r1, r2
 8010f98:	d1f9      	bne.n	8010f8e <memcpy+0xe>
 8010f9a:	bd10      	pop	{r4, pc}

08010f9c <memset>:
 8010f9c:	4402      	add	r2, r0
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d100      	bne.n	8010fa6 <memset+0xa>
 8010fa4:	4770      	bx	lr
 8010fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8010faa:	e7f9      	b.n	8010fa0 <memset+0x4>

08010fac <validate_structure>:
 8010fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fae:	6801      	ldr	r1, [r0, #0]
 8010fb0:	293b      	cmp	r1, #59	; 0x3b
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	d911      	bls.n	8010fda <validate_structure+0x2e>
 8010fb6:	223c      	movs	r2, #60	; 0x3c
 8010fb8:	4668      	mov	r0, sp
 8010fba:	f000 fe3f 	bl	8011c3c <div>
 8010fbe:	9a01      	ldr	r2, [sp, #4]
 8010fc0:	6863      	ldr	r3, [r4, #4]
 8010fc2:	9900      	ldr	r1, [sp, #0]
 8010fc4:	2a00      	cmp	r2, #0
 8010fc6:	440b      	add	r3, r1
 8010fc8:	6063      	str	r3, [r4, #4]
 8010fca:	bfbb      	ittet	lt
 8010fcc:	323c      	addlt	r2, #60	; 0x3c
 8010fce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010fd2:	6022      	strge	r2, [r4, #0]
 8010fd4:	6022      	strlt	r2, [r4, #0]
 8010fd6:	bfb8      	it	lt
 8010fd8:	6063      	strlt	r3, [r4, #4]
 8010fda:	6861      	ldr	r1, [r4, #4]
 8010fdc:	293b      	cmp	r1, #59	; 0x3b
 8010fde:	d911      	bls.n	8011004 <validate_structure+0x58>
 8010fe0:	223c      	movs	r2, #60	; 0x3c
 8010fe2:	4668      	mov	r0, sp
 8010fe4:	f000 fe2a 	bl	8011c3c <div>
 8010fe8:	9a01      	ldr	r2, [sp, #4]
 8010fea:	68a3      	ldr	r3, [r4, #8]
 8010fec:	9900      	ldr	r1, [sp, #0]
 8010fee:	2a00      	cmp	r2, #0
 8010ff0:	440b      	add	r3, r1
 8010ff2:	60a3      	str	r3, [r4, #8]
 8010ff4:	bfbb      	ittet	lt
 8010ff6:	323c      	addlt	r2, #60	; 0x3c
 8010ff8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010ffc:	6062      	strge	r2, [r4, #4]
 8010ffe:	6062      	strlt	r2, [r4, #4]
 8011000:	bfb8      	it	lt
 8011002:	60a3      	strlt	r3, [r4, #8]
 8011004:	68a1      	ldr	r1, [r4, #8]
 8011006:	2917      	cmp	r1, #23
 8011008:	d911      	bls.n	801102e <validate_structure+0x82>
 801100a:	2218      	movs	r2, #24
 801100c:	4668      	mov	r0, sp
 801100e:	f000 fe15 	bl	8011c3c <div>
 8011012:	9a01      	ldr	r2, [sp, #4]
 8011014:	68e3      	ldr	r3, [r4, #12]
 8011016:	9900      	ldr	r1, [sp, #0]
 8011018:	2a00      	cmp	r2, #0
 801101a:	440b      	add	r3, r1
 801101c:	60e3      	str	r3, [r4, #12]
 801101e:	bfbb      	ittet	lt
 8011020:	3218      	addlt	r2, #24
 8011022:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011026:	60a2      	strge	r2, [r4, #8]
 8011028:	60a2      	strlt	r2, [r4, #8]
 801102a:	bfb8      	it	lt
 801102c:	60e3      	strlt	r3, [r4, #12]
 801102e:	6921      	ldr	r1, [r4, #16]
 8011030:	290b      	cmp	r1, #11
 8011032:	d911      	bls.n	8011058 <validate_structure+0xac>
 8011034:	220c      	movs	r2, #12
 8011036:	4668      	mov	r0, sp
 8011038:	f000 fe00 	bl	8011c3c <div>
 801103c:	9a01      	ldr	r2, [sp, #4]
 801103e:	6963      	ldr	r3, [r4, #20]
 8011040:	9900      	ldr	r1, [sp, #0]
 8011042:	2a00      	cmp	r2, #0
 8011044:	440b      	add	r3, r1
 8011046:	6163      	str	r3, [r4, #20]
 8011048:	bfbb      	ittet	lt
 801104a:	320c      	addlt	r2, #12
 801104c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011050:	6122      	strge	r2, [r4, #16]
 8011052:	6122      	strlt	r2, [r4, #16]
 8011054:	bfb8      	it	lt
 8011056:	6163      	strlt	r3, [r4, #20]
 8011058:	6963      	ldr	r3, [r4, #20]
 801105a:	0798      	lsls	r0, r3, #30
 801105c:	d120      	bne.n	80110a0 <validate_structure+0xf4>
 801105e:	2164      	movs	r1, #100	; 0x64
 8011060:	fb93 f2f1 	sdiv	r2, r3, r1
 8011064:	fb01 3212 	mls	r2, r1, r2, r3
 8011068:	b9e2      	cbnz	r2, 80110a4 <validate_structure+0xf8>
 801106a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801106e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011072:	fb93 f1f2 	sdiv	r1, r3, r2
 8011076:	fb02 3311 	mls	r3, r2, r1, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	bf14      	ite	ne
 801107e:	231c      	movne	r3, #28
 8011080:	231d      	moveq	r3, #29
 8011082:	68e2      	ldr	r2, [r4, #12]
 8011084:	2a00      	cmp	r2, #0
 8011086:	dc0f      	bgt.n	80110a8 <validate_structure+0xfc>
 8011088:	4f33      	ldr	r7, [pc, #204]	; (8011158 <validate_structure+0x1ac>)
 801108a:	260b      	movs	r6, #11
 801108c:	2064      	movs	r0, #100	; 0x64
 801108e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8011092:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8011096:	f1bc 0f00 	cmp.w	ip, #0
 801109a:	dd31      	ble.n	8011100 <validate_structure+0x154>
 801109c:	b003      	add	sp, #12
 801109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110a0:	231c      	movs	r3, #28
 80110a2:	e7ee      	b.n	8011082 <validate_structure+0xd6>
 80110a4:	231d      	movs	r3, #29
 80110a6:	e7ec      	b.n	8011082 <validate_structure+0xd6>
 80110a8:	4e2b      	ldr	r6, [pc, #172]	; (8011158 <validate_structure+0x1ac>)
 80110aa:	2700      	movs	r7, #0
 80110ac:	2064      	movs	r0, #100	; 0x64
 80110ae:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80110b2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80110b6:	2a01      	cmp	r2, #1
 80110b8:	bf14      	ite	ne
 80110ba:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80110be:	469c      	moveq	ip, r3
 80110c0:	4561      	cmp	r1, ip
 80110c2:	ddeb      	ble.n	801109c <validate_structure+0xf0>
 80110c4:	3201      	adds	r2, #1
 80110c6:	eba1 010c 	sub.w	r1, r1, ip
 80110ca:	2a0c      	cmp	r2, #12
 80110cc:	60e1      	str	r1, [r4, #12]
 80110ce:	6122      	str	r2, [r4, #16]
 80110d0:	d1ef      	bne.n	80110b2 <validate_structure+0x106>
 80110d2:	6963      	ldr	r3, [r4, #20]
 80110d4:	1c5a      	adds	r2, r3, #1
 80110d6:	0791      	lsls	r1, r2, #30
 80110d8:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80110dc:	d137      	bne.n	801114e <validate_structure+0x1a2>
 80110de:	fb92 f1f0 	sdiv	r1, r2, r0
 80110e2:	fb00 2211 	mls	r2, r0, r1, r2
 80110e6:	2a00      	cmp	r2, #0
 80110e8:	d133      	bne.n	8011152 <validate_structure+0x1a6>
 80110ea:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80110ee:	fb93 f2f5 	sdiv	r2, r3, r5
 80110f2:	fb05 3312 	mls	r3, r5, r2, r3
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	bf14      	ite	ne
 80110fa:	231c      	movne	r3, #28
 80110fc:	231d      	moveq	r3, #29
 80110fe:	e7d8      	b.n	80110b2 <validate_structure+0x106>
 8011100:	6921      	ldr	r1, [r4, #16]
 8011102:	3901      	subs	r1, #1
 8011104:	6121      	str	r1, [r4, #16]
 8011106:	3101      	adds	r1, #1
 8011108:	d114      	bne.n	8011134 <validate_structure+0x188>
 801110a:	6963      	ldr	r3, [r4, #20]
 801110c:	1e5a      	subs	r2, r3, #1
 801110e:	0791      	lsls	r1, r2, #30
 8011110:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8011114:	d117      	bne.n	8011146 <validate_structure+0x19a>
 8011116:	fb92 f1f0 	sdiv	r1, r2, r0
 801111a:	fb00 2211 	mls	r2, r0, r1, r2
 801111e:	b9a2      	cbnz	r2, 801114a <validate_structure+0x19e>
 8011120:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8011124:	fb93 f2f5 	sdiv	r2, r3, r5
 8011128:	fb05 3312 	mls	r3, r5, r2, r3
 801112c:	2b00      	cmp	r3, #0
 801112e:	bf14      	ite	ne
 8011130:	231c      	movne	r3, #28
 8011132:	231d      	moveq	r3, #29
 8011134:	6922      	ldr	r2, [r4, #16]
 8011136:	2a01      	cmp	r2, #1
 8011138:	bf14      	ite	ne
 801113a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801113e:	461a      	moveq	r2, r3
 8011140:	4462      	add	r2, ip
 8011142:	60e2      	str	r2, [r4, #12]
 8011144:	e7a5      	b.n	8011092 <validate_structure+0xe6>
 8011146:	231c      	movs	r3, #28
 8011148:	e7f4      	b.n	8011134 <validate_structure+0x188>
 801114a:	231d      	movs	r3, #29
 801114c:	e7f2      	b.n	8011134 <validate_structure+0x188>
 801114e:	231c      	movs	r3, #28
 8011150:	e7af      	b.n	80110b2 <validate_structure+0x106>
 8011152:	231d      	movs	r3, #29
 8011154:	e7ad      	b.n	80110b2 <validate_structure+0x106>
 8011156:	bf00      	nop
 8011158:	08024c98 	.word	0x08024c98

0801115c <mktime>:
 801115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011160:	b085      	sub	sp, #20
 8011162:	4607      	mov	r7, r0
 8011164:	f000 fdd4 	bl	8011d10 <__gettzinfo>
 8011168:	4681      	mov	r9, r0
 801116a:	4638      	mov	r0, r7
 801116c:	f7ff ff1e 	bl	8010fac <validate_structure>
 8011170:	e9d7 4000 	ldrd	r4, r0, [r7]
 8011174:	233c      	movs	r3, #60	; 0x3c
 8011176:	fb03 4400 	mla	r4, r3, r0, r4
 801117a:	68b8      	ldr	r0, [r7, #8]
 801117c:	4abc      	ldr	r2, [pc, #752]	; (8011470 <mktime+0x314>)
 801117e:	697e      	ldr	r6, [r7, #20]
 8011180:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011184:	fb03 4400 	mla	r4, r3, r0, r4
 8011188:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 801118c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011190:	3d01      	subs	r5, #1
 8011192:	2b01      	cmp	r3, #1
 8011194:	4415      	add	r5, r2
 8011196:	dd11      	ble.n	80111bc <mktime+0x60>
 8011198:	07b1      	lsls	r1, r6, #30
 801119a:	d10f      	bne.n	80111bc <mktime+0x60>
 801119c:	2264      	movs	r2, #100	; 0x64
 801119e:	fb96 f3f2 	sdiv	r3, r6, r2
 80111a2:	fb02 6313 	mls	r3, r2, r3, r6
 80111a6:	b943      	cbnz	r3, 80111ba <mktime+0x5e>
 80111a8:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80111ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80111b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80111b4:	fb02 3311 	mls	r3, r2, r1, r3
 80111b8:	b903      	cbnz	r3, 80111bc <mktime+0x60>
 80111ba:	3501      	adds	r5, #1
 80111bc:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80111c0:	3310      	adds	r3, #16
 80111c2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80111c6:	4293      	cmp	r3, r2
 80111c8:	61fd      	str	r5, [r7, #28]
 80111ca:	f200 815d 	bhi.w	8011488 <mktime+0x32c>
 80111ce:	2e46      	cmp	r6, #70	; 0x46
 80111d0:	dd71      	ble.n	80112b6 <mktime+0x15a>
 80111d2:	2346      	movs	r3, #70	; 0x46
 80111d4:	f240 1c6d 	movw	ip, #365	; 0x16d
 80111d8:	2164      	movs	r1, #100	; 0x64
 80111da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80111de:	079a      	lsls	r2, r3, #30
 80111e0:	d163      	bne.n	80112aa <mktime+0x14e>
 80111e2:	fb93 f2f1 	sdiv	r2, r3, r1
 80111e6:	fb01 3212 	mls	r2, r1, r2, r3
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	d160      	bne.n	80112b0 <mktime+0x154>
 80111ee:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80111f2:	fb92 fef0 	sdiv	lr, r2, r0
 80111f6:	fb00 221e 	mls	r2, r0, lr, r2
 80111fa:	2a00      	cmp	r2, #0
 80111fc:	bf14      	ite	ne
 80111fe:	4662      	movne	r2, ip
 8011200:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011204:	3301      	adds	r3, #1
 8011206:	429e      	cmp	r6, r3
 8011208:	4415      	add	r5, r2
 801120a:	d1e8      	bne.n	80111de <mktime+0x82>
 801120c:	4b99      	ldr	r3, [pc, #612]	; (8011474 <mktime+0x318>)
 801120e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8011212:	fbc5 4803 	smlal	r4, r8, r5, r3
 8011216:	f000 fb61 	bl	80118dc <__tz_lock>
 801121a:	f000 fb6b 	bl	80118f4 <_tzset_unlocked>
 801121e:	4b96      	ldr	r3, [pc, #600]	; (8011478 <mktime+0x31c>)
 8011220:	f8d3 b000 	ldr.w	fp, [r3]
 8011224:	f1bb 0f00 	cmp.w	fp, #0
 8011228:	d039      	beq.n	801129e <mktime+0x142>
 801122a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 801122e:	6978      	ldr	r0, [r7, #20]
 8011230:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011234:	f1bb 0f01 	cmp.w	fp, #1
 8011238:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801123c:	46da      	mov	sl, fp
 801123e:	bfa8      	it	ge
 8011240:	f04f 0a01 	movge.w	sl, #1
 8011244:	4283      	cmp	r3, r0
 8011246:	d178      	bne.n	801133a <mktime+0x1de>
 8011248:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 801124c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8011250:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8011254:	1a5b      	subs	r3, r3, r1
 8011256:	9302      	str	r3, [sp, #8]
 8011258:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 801125c:	9303      	str	r3, [sp, #12]
 801125e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8011262:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8011266:	9301      	str	r3, [sp, #4]
 8011268:	ebb3 0c02 	subs.w	ip, r3, r2
 801126c:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8011270:	4564      	cmp	r4, ip
 8011272:	eb78 0300 	sbcs.w	r3, r8, r0
 8011276:	da66      	bge.n	8011346 <mktime+0x1ea>
 8011278:	f8d9 3000 	ldr.w	r3, [r9]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d06f      	beq.n	8011360 <mktime+0x204>
 8011280:	9b02      	ldr	r3, [sp, #8]
 8011282:	429c      	cmp	r4, r3
 8011284:	9b03      	ldr	r3, [sp, #12]
 8011286:	eb78 0303 	sbcs.w	r3, r8, r3
 801128a:	db03      	blt.n	8011294 <mktime+0x138>
 801128c:	4564      	cmp	r4, ip
 801128e:	eb78 0300 	sbcs.w	r3, r8, r0
 8011292:	db6b      	blt.n	801136c <mktime+0x210>
 8011294:	f1bb 0f00 	cmp.w	fp, #0
 8011298:	f04f 0b00 	mov.w	fp, #0
 801129c:	da6b      	bge.n	8011376 <mktime+0x21a>
 801129e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 80112a2:	190c      	adds	r4, r1, r4
 80112a4:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80112a8:	e0a9      	b.n	80113fe <mktime+0x2a2>
 80112aa:	f240 126d 	movw	r2, #365	; 0x16d
 80112ae:	e7a9      	b.n	8011204 <mktime+0xa8>
 80112b0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80112b4:	e7a6      	b.n	8011204 <mktime+0xa8>
 80112b6:	d0a9      	beq.n	801120c <mktime+0xb0>
 80112b8:	2345      	movs	r3, #69	; 0x45
 80112ba:	f240 1c6d 	movw	ip, #365	; 0x16d
 80112be:	2164      	movs	r1, #100	; 0x64
 80112c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80112c4:	e012      	b.n	80112ec <mktime+0x190>
 80112c6:	bb62      	cbnz	r2, 8011322 <mktime+0x1c6>
 80112c8:	fb93 f2f1 	sdiv	r2, r3, r1
 80112cc:	fb01 3212 	mls	r2, r1, r2, r3
 80112d0:	bb52      	cbnz	r2, 8011328 <mktime+0x1cc>
 80112d2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80112d6:	fb92 fef0 	sdiv	lr, r2, r0
 80112da:	fb00 221e 	mls	r2, r0, lr, r2
 80112de:	2a00      	cmp	r2, #0
 80112e0:	bf14      	ite	ne
 80112e2:	4662      	movne	r2, ip
 80112e4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80112e8:	1aad      	subs	r5, r5, r2
 80112ea:	3b01      	subs	r3, #1
 80112ec:	429e      	cmp	r6, r3
 80112ee:	f003 0203 	and.w	r2, r3, #3
 80112f2:	dbe8      	blt.n	80112c6 <mktime+0x16a>
 80112f4:	b9da      	cbnz	r2, 801132e <mktime+0x1d2>
 80112f6:	2264      	movs	r2, #100	; 0x64
 80112f8:	fb96 f3f2 	sdiv	r3, r6, r2
 80112fc:	fb02 6313 	mls	r3, r2, r3, r6
 8011300:	b9c3      	cbnz	r3, 8011334 <mktime+0x1d8>
 8011302:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8011306:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801130a:	fb93 f1f2 	sdiv	r1, r3, r2
 801130e:	fb02 3311 	mls	r3, r2, r1, r3
 8011312:	2b00      	cmp	r3, #0
 8011314:	f240 136d 	movw	r3, #365	; 0x16d
 8011318:	bf08      	it	eq
 801131a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801131e:	1aed      	subs	r5, r5, r3
 8011320:	e774      	b.n	801120c <mktime+0xb0>
 8011322:	f240 126d 	movw	r2, #365	; 0x16d
 8011326:	e7df      	b.n	80112e8 <mktime+0x18c>
 8011328:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801132c:	e7dc      	b.n	80112e8 <mktime+0x18c>
 801132e:	f240 136d 	movw	r3, #365	; 0x16d
 8011332:	e7f4      	b.n	801131e <mktime+0x1c2>
 8011334:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8011338:	e7f1      	b.n	801131e <mktime+0x1c2>
 801133a:	f000 fa25 	bl	8011788 <__tzcalc_limits>
 801133e:	2800      	cmp	r0, #0
 8011340:	d182      	bne.n	8011248 <mktime+0xec>
 8011342:	46d3      	mov	fp, sl
 8011344:	e050      	b.n	80113e8 <mktime+0x28c>
 8011346:	9b01      	ldr	r3, [sp, #4]
 8011348:	1a5b      	subs	r3, r3, r1
 801134a:	9301      	str	r3, [sp, #4]
 801134c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8011350:	eb6e 0e03 	sbc.w	lr, lr, r3
 8011354:	9b01      	ldr	r3, [sp, #4]
 8011356:	429c      	cmp	r4, r3
 8011358:	eb78 030e 	sbcs.w	r3, r8, lr
 801135c:	dbf1      	blt.n	8011342 <mktime+0x1e6>
 801135e:	e78b      	b.n	8011278 <mktime+0x11c>
 8011360:	9b02      	ldr	r3, [sp, #8]
 8011362:	429c      	cmp	r4, r3
 8011364:	9b03      	ldr	r3, [sp, #12]
 8011366:	eb78 0303 	sbcs.w	r3, r8, r3
 801136a:	db8f      	blt.n	801128c <mktime+0x130>
 801136c:	f1bb 0f00 	cmp.w	fp, #0
 8011370:	db3e      	blt.n	80113f0 <mktime+0x294>
 8011372:	f04f 0b01 	mov.w	fp, #1
 8011376:	ea8a 0a0b 	eor.w	sl, sl, fp
 801137a:	f1ba 0f01 	cmp.w	sl, #1
 801137e:	d133      	bne.n	80113e8 <mktime+0x28c>
 8011380:	f1bb 0f00 	cmp.w	fp, #0
 8011384:	d04e      	beq.n	8011424 <mktime+0x2c8>
 8011386:	1a52      	subs	r2, r2, r1
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801138e:	4413      	add	r3, r2
 8011390:	1914      	adds	r4, r2, r4
 8011392:	603b      	str	r3, [r7, #0]
 8011394:	4638      	mov	r0, r7
 8011396:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 801139a:	f7ff fe07 	bl	8010fac <validate_structure>
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	ebb2 020a 	subs.w	r2, r2, sl
 80113a4:	d020      	beq.n	80113e8 <mktime+0x28c>
 80113a6:	2a01      	cmp	r2, #1
 80113a8:	dc3e      	bgt.n	8011428 <mktime+0x2cc>
 80113aa:	1c90      	adds	r0, r2, #2
 80113ac:	bfd8      	it	le
 80113ae:	2201      	movle	r2, #1
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	18d3      	adds	r3, r2, r3
 80113b4:	4415      	add	r5, r2
 80113b6:	d540      	bpl.n	801143a <mktime+0x2de>
 80113b8:	1e73      	subs	r3, r6, #1
 80113ba:	0799      	lsls	r1, r3, #30
 80113bc:	d137      	bne.n	801142e <mktime+0x2d2>
 80113be:	2264      	movs	r2, #100	; 0x64
 80113c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80113c4:	fb02 3311 	mls	r3, r2, r1, r3
 80113c8:	bba3      	cbnz	r3, 8011434 <mktime+0x2d8>
 80113ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80113ce:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80113d2:	fb96 f2f3 	sdiv	r2, r6, r3
 80113d6:	fb03 6612 	mls	r6, r3, r2, r6
 80113da:	2e00      	cmp	r6, #0
 80113dc:	f240 136d 	movw	r3, #365	; 0x16d
 80113e0:	bf18      	it	ne
 80113e2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80113e6:	61fb      	str	r3, [r7, #28]
 80113e8:	f1bb 0f01 	cmp.w	fp, #1
 80113ec:	f47f af57 	bne.w	801129e <mktime+0x142>
 80113f0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80113f4:	190c      	adds	r4, r1, r4
 80113f6:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80113fa:	f04f 0b01 	mov.w	fp, #1
 80113fe:	f000 fa73 	bl	80118e8 <__tz_unlock>
 8011402:	3504      	adds	r5, #4
 8011404:	2307      	movs	r3, #7
 8011406:	fb95 f3f3 	sdiv	r3, r5, r3
 801140a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801140e:	1aed      	subs	r5, r5, r3
 8011410:	bf48      	it	mi
 8011412:	3507      	addmi	r5, #7
 8011414:	f8c7 b020 	str.w	fp, [r7, #32]
 8011418:	61bd      	str	r5, [r7, #24]
 801141a:	4620      	mov	r0, r4
 801141c:	4641      	mov	r1, r8
 801141e:	b005      	add	sp, #20
 8011420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011424:	1a8a      	subs	r2, r1, r2
 8011426:	e7af      	b.n	8011388 <mktime+0x22c>
 8011428:	f04f 32ff 	mov.w	r2, #4294967295
 801142c:	e7c0      	b.n	80113b0 <mktime+0x254>
 801142e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8011432:	e7d8      	b.n	80113e6 <mktime+0x28a>
 8011434:	f240 136d 	movw	r3, #365	; 0x16d
 8011438:	e7d5      	b.n	80113e6 <mktime+0x28a>
 801143a:	07b2      	lsls	r2, r6, #30
 801143c:	d11e      	bne.n	801147c <mktime+0x320>
 801143e:	2164      	movs	r1, #100	; 0x64
 8011440:	fb96 f2f1 	sdiv	r2, r6, r1
 8011444:	fb01 6212 	mls	r2, r1, r2, r6
 8011448:	b9da      	cbnz	r2, 8011482 <mktime+0x326>
 801144a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801144e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8011452:	fb96 f1f2 	sdiv	r1, r6, r2
 8011456:	fb02 6611 	mls	r6, r2, r1, r6
 801145a:	2e00      	cmp	r6, #0
 801145c:	f240 126d 	movw	r2, #365	; 0x16d
 8011460:	bf08      	it	eq
 8011462:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011466:	4293      	cmp	r3, r2
 8011468:	bfa8      	it	ge
 801146a:	1a9b      	subge	r3, r3, r2
 801146c:	e7bb      	b.n	80113e6 <mktime+0x28a>
 801146e:	bf00      	nop
 8011470:	08024cc8 	.word	0x08024cc8
 8011474:	00015180 	.word	0x00015180
 8011478:	200050a8 	.word	0x200050a8
 801147c:	f240 126d 	movw	r2, #365	; 0x16d
 8011480:	e7f1      	b.n	8011466 <mktime+0x30a>
 8011482:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011486:	e7ee      	b.n	8011466 <mktime+0x30a>
 8011488:	f04f 34ff 	mov.w	r4, #4294967295
 801148c:	46a0      	mov	r8, r4
 801148e:	e7c4      	b.n	801141a <mktime+0x2be>

08011490 <_free_r>:
 8011490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011492:	2900      	cmp	r1, #0
 8011494:	d044      	beq.n	8011520 <_free_r+0x90>
 8011496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801149a:	9001      	str	r0, [sp, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	f1a1 0404 	sub.w	r4, r1, #4
 80114a2:	bfb8      	it	lt
 80114a4:	18e4      	addlt	r4, r4, r3
 80114a6:	f000 fce9 	bl	8011e7c <__malloc_lock>
 80114aa:	4a1e      	ldr	r2, [pc, #120]	; (8011524 <_free_r+0x94>)
 80114ac:	9801      	ldr	r0, [sp, #4]
 80114ae:	6813      	ldr	r3, [r2, #0]
 80114b0:	b933      	cbnz	r3, 80114c0 <_free_r+0x30>
 80114b2:	6063      	str	r3, [r4, #4]
 80114b4:	6014      	str	r4, [r2, #0]
 80114b6:	b003      	add	sp, #12
 80114b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114bc:	f000 bce4 	b.w	8011e88 <__malloc_unlock>
 80114c0:	42a3      	cmp	r3, r4
 80114c2:	d908      	bls.n	80114d6 <_free_r+0x46>
 80114c4:	6825      	ldr	r5, [r4, #0]
 80114c6:	1961      	adds	r1, r4, r5
 80114c8:	428b      	cmp	r3, r1
 80114ca:	bf01      	itttt	eq
 80114cc:	6819      	ldreq	r1, [r3, #0]
 80114ce:	685b      	ldreq	r3, [r3, #4]
 80114d0:	1949      	addeq	r1, r1, r5
 80114d2:	6021      	streq	r1, [r4, #0]
 80114d4:	e7ed      	b.n	80114b2 <_free_r+0x22>
 80114d6:	461a      	mov	r2, r3
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	b10b      	cbz	r3, 80114e0 <_free_r+0x50>
 80114dc:	42a3      	cmp	r3, r4
 80114de:	d9fa      	bls.n	80114d6 <_free_r+0x46>
 80114e0:	6811      	ldr	r1, [r2, #0]
 80114e2:	1855      	adds	r5, r2, r1
 80114e4:	42a5      	cmp	r5, r4
 80114e6:	d10b      	bne.n	8011500 <_free_r+0x70>
 80114e8:	6824      	ldr	r4, [r4, #0]
 80114ea:	4421      	add	r1, r4
 80114ec:	1854      	adds	r4, r2, r1
 80114ee:	42a3      	cmp	r3, r4
 80114f0:	6011      	str	r1, [r2, #0]
 80114f2:	d1e0      	bne.n	80114b6 <_free_r+0x26>
 80114f4:	681c      	ldr	r4, [r3, #0]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	6053      	str	r3, [r2, #4]
 80114fa:	4421      	add	r1, r4
 80114fc:	6011      	str	r1, [r2, #0]
 80114fe:	e7da      	b.n	80114b6 <_free_r+0x26>
 8011500:	d902      	bls.n	8011508 <_free_r+0x78>
 8011502:	230c      	movs	r3, #12
 8011504:	6003      	str	r3, [r0, #0]
 8011506:	e7d6      	b.n	80114b6 <_free_r+0x26>
 8011508:	6825      	ldr	r5, [r4, #0]
 801150a:	1961      	adds	r1, r4, r5
 801150c:	428b      	cmp	r3, r1
 801150e:	bf04      	itt	eq
 8011510:	6819      	ldreq	r1, [r3, #0]
 8011512:	685b      	ldreq	r3, [r3, #4]
 8011514:	6063      	str	r3, [r4, #4]
 8011516:	bf04      	itt	eq
 8011518:	1949      	addeq	r1, r1, r5
 801151a:	6021      	streq	r1, [r4, #0]
 801151c:	6054      	str	r4, [r2, #4]
 801151e:	e7ca      	b.n	80114b6 <_free_r+0x26>
 8011520:	b003      	add	sp, #12
 8011522:	bd30      	pop	{r4, r5, pc}
 8011524:	20005084 	.word	0x20005084

08011528 <sbrk_aligned>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	4e0e      	ldr	r6, [pc, #56]	; (8011564 <sbrk_aligned+0x3c>)
 801152c:	460c      	mov	r4, r1
 801152e:	6831      	ldr	r1, [r6, #0]
 8011530:	4605      	mov	r5, r0
 8011532:	b911      	cbnz	r1, 801153a <sbrk_aligned+0x12>
 8011534:	f000 f8f8 	bl	8011728 <_sbrk_r>
 8011538:	6030      	str	r0, [r6, #0]
 801153a:	4621      	mov	r1, r4
 801153c:	4628      	mov	r0, r5
 801153e:	f000 f8f3 	bl	8011728 <_sbrk_r>
 8011542:	1c43      	adds	r3, r0, #1
 8011544:	d00a      	beq.n	801155c <sbrk_aligned+0x34>
 8011546:	1cc4      	adds	r4, r0, #3
 8011548:	f024 0403 	bic.w	r4, r4, #3
 801154c:	42a0      	cmp	r0, r4
 801154e:	d007      	beq.n	8011560 <sbrk_aligned+0x38>
 8011550:	1a21      	subs	r1, r4, r0
 8011552:	4628      	mov	r0, r5
 8011554:	f000 f8e8 	bl	8011728 <_sbrk_r>
 8011558:	3001      	adds	r0, #1
 801155a:	d101      	bne.n	8011560 <sbrk_aligned+0x38>
 801155c:	f04f 34ff 	mov.w	r4, #4294967295
 8011560:	4620      	mov	r0, r4
 8011562:	bd70      	pop	{r4, r5, r6, pc}
 8011564:	20005088 	.word	0x20005088

08011568 <_malloc_r>:
 8011568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801156c:	1ccd      	adds	r5, r1, #3
 801156e:	f025 0503 	bic.w	r5, r5, #3
 8011572:	3508      	adds	r5, #8
 8011574:	2d0c      	cmp	r5, #12
 8011576:	bf38      	it	cc
 8011578:	250c      	movcc	r5, #12
 801157a:	2d00      	cmp	r5, #0
 801157c:	4607      	mov	r7, r0
 801157e:	db01      	blt.n	8011584 <_malloc_r+0x1c>
 8011580:	42a9      	cmp	r1, r5
 8011582:	d905      	bls.n	8011590 <_malloc_r+0x28>
 8011584:	230c      	movs	r3, #12
 8011586:	603b      	str	r3, [r7, #0]
 8011588:	2600      	movs	r6, #0
 801158a:	4630      	mov	r0, r6
 801158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011590:	4e2e      	ldr	r6, [pc, #184]	; (801164c <_malloc_r+0xe4>)
 8011592:	f000 fc73 	bl	8011e7c <__malloc_lock>
 8011596:	6833      	ldr	r3, [r6, #0]
 8011598:	461c      	mov	r4, r3
 801159a:	bb34      	cbnz	r4, 80115ea <_malloc_r+0x82>
 801159c:	4629      	mov	r1, r5
 801159e:	4638      	mov	r0, r7
 80115a0:	f7ff ffc2 	bl	8011528 <sbrk_aligned>
 80115a4:	1c43      	adds	r3, r0, #1
 80115a6:	4604      	mov	r4, r0
 80115a8:	d14d      	bne.n	8011646 <_malloc_r+0xde>
 80115aa:	6834      	ldr	r4, [r6, #0]
 80115ac:	4626      	mov	r6, r4
 80115ae:	2e00      	cmp	r6, #0
 80115b0:	d140      	bne.n	8011634 <_malloc_r+0xcc>
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	4631      	mov	r1, r6
 80115b6:	4638      	mov	r0, r7
 80115b8:	eb04 0803 	add.w	r8, r4, r3
 80115bc:	f000 f8b4 	bl	8011728 <_sbrk_r>
 80115c0:	4580      	cmp	r8, r0
 80115c2:	d13a      	bne.n	801163a <_malloc_r+0xd2>
 80115c4:	6821      	ldr	r1, [r4, #0]
 80115c6:	3503      	adds	r5, #3
 80115c8:	1a6d      	subs	r5, r5, r1
 80115ca:	f025 0503 	bic.w	r5, r5, #3
 80115ce:	3508      	adds	r5, #8
 80115d0:	2d0c      	cmp	r5, #12
 80115d2:	bf38      	it	cc
 80115d4:	250c      	movcc	r5, #12
 80115d6:	4629      	mov	r1, r5
 80115d8:	4638      	mov	r0, r7
 80115da:	f7ff ffa5 	bl	8011528 <sbrk_aligned>
 80115de:	3001      	adds	r0, #1
 80115e0:	d02b      	beq.n	801163a <_malloc_r+0xd2>
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	442b      	add	r3, r5
 80115e6:	6023      	str	r3, [r4, #0]
 80115e8:	e00e      	b.n	8011608 <_malloc_r+0xa0>
 80115ea:	6822      	ldr	r2, [r4, #0]
 80115ec:	1b52      	subs	r2, r2, r5
 80115ee:	d41e      	bmi.n	801162e <_malloc_r+0xc6>
 80115f0:	2a0b      	cmp	r2, #11
 80115f2:	d916      	bls.n	8011622 <_malloc_r+0xba>
 80115f4:	1961      	adds	r1, r4, r5
 80115f6:	42a3      	cmp	r3, r4
 80115f8:	6025      	str	r5, [r4, #0]
 80115fa:	bf18      	it	ne
 80115fc:	6059      	strne	r1, [r3, #4]
 80115fe:	6863      	ldr	r3, [r4, #4]
 8011600:	bf08      	it	eq
 8011602:	6031      	streq	r1, [r6, #0]
 8011604:	5162      	str	r2, [r4, r5]
 8011606:	604b      	str	r3, [r1, #4]
 8011608:	4638      	mov	r0, r7
 801160a:	f104 060b 	add.w	r6, r4, #11
 801160e:	f000 fc3b 	bl	8011e88 <__malloc_unlock>
 8011612:	f026 0607 	bic.w	r6, r6, #7
 8011616:	1d23      	adds	r3, r4, #4
 8011618:	1af2      	subs	r2, r6, r3
 801161a:	d0b6      	beq.n	801158a <_malloc_r+0x22>
 801161c:	1b9b      	subs	r3, r3, r6
 801161e:	50a3      	str	r3, [r4, r2]
 8011620:	e7b3      	b.n	801158a <_malloc_r+0x22>
 8011622:	6862      	ldr	r2, [r4, #4]
 8011624:	42a3      	cmp	r3, r4
 8011626:	bf0c      	ite	eq
 8011628:	6032      	streq	r2, [r6, #0]
 801162a:	605a      	strne	r2, [r3, #4]
 801162c:	e7ec      	b.n	8011608 <_malloc_r+0xa0>
 801162e:	4623      	mov	r3, r4
 8011630:	6864      	ldr	r4, [r4, #4]
 8011632:	e7b2      	b.n	801159a <_malloc_r+0x32>
 8011634:	4634      	mov	r4, r6
 8011636:	6876      	ldr	r6, [r6, #4]
 8011638:	e7b9      	b.n	80115ae <_malloc_r+0x46>
 801163a:	230c      	movs	r3, #12
 801163c:	603b      	str	r3, [r7, #0]
 801163e:	4638      	mov	r0, r7
 8011640:	f000 fc22 	bl	8011e88 <__malloc_unlock>
 8011644:	e7a1      	b.n	801158a <_malloc_r+0x22>
 8011646:	6025      	str	r5, [r4, #0]
 8011648:	e7de      	b.n	8011608 <_malloc_r+0xa0>
 801164a:	bf00      	nop
 801164c:	20005084 	.word	0x20005084

08011650 <srand>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	4b10      	ldr	r3, [pc, #64]	; (8011694 <srand+0x44>)
 8011654:	681d      	ldr	r5, [r3, #0]
 8011656:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011658:	4604      	mov	r4, r0
 801165a:	b9b3      	cbnz	r3, 801168a <srand+0x3a>
 801165c:	2018      	movs	r0, #24
 801165e:	f7ff fc7f 	bl	8010f60 <malloc>
 8011662:	4602      	mov	r2, r0
 8011664:	63a8      	str	r0, [r5, #56]	; 0x38
 8011666:	b920      	cbnz	r0, 8011672 <srand+0x22>
 8011668:	4b0b      	ldr	r3, [pc, #44]	; (8011698 <srand+0x48>)
 801166a:	480c      	ldr	r0, [pc, #48]	; (801169c <srand+0x4c>)
 801166c:	2142      	movs	r1, #66	; 0x42
 801166e:	f000 fac7 	bl	8011c00 <__assert_func>
 8011672:	490b      	ldr	r1, [pc, #44]	; (80116a0 <srand+0x50>)
 8011674:	4b0b      	ldr	r3, [pc, #44]	; (80116a4 <srand+0x54>)
 8011676:	e9c0 1300 	strd	r1, r3, [r0]
 801167a:	4b0b      	ldr	r3, [pc, #44]	; (80116a8 <srand+0x58>)
 801167c:	6083      	str	r3, [r0, #8]
 801167e:	230b      	movs	r3, #11
 8011680:	8183      	strh	r3, [r0, #12]
 8011682:	2100      	movs	r1, #0
 8011684:	2001      	movs	r0, #1
 8011686:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801168a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801168c:	2200      	movs	r2, #0
 801168e:	611c      	str	r4, [r3, #16]
 8011690:	615a      	str	r2, [r3, #20]
 8011692:	bd38      	pop	{r3, r4, r5, pc}
 8011694:	2000153c 	.word	0x2000153c
 8011698:	08024c24 	.word	0x08024c24
 801169c:	08024d58 	.word	0x08024d58
 80116a0:	abcd330e 	.word	0xabcd330e
 80116a4:	e66d1234 	.word	0xe66d1234
 80116a8:	0005deec 	.word	0x0005deec

080116ac <rand>:
 80116ac:	4b16      	ldr	r3, [pc, #88]	; (8011708 <rand+0x5c>)
 80116ae:	b510      	push	{r4, lr}
 80116b0:	681c      	ldr	r4, [r3, #0]
 80116b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80116b4:	b9b3      	cbnz	r3, 80116e4 <rand+0x38>
 80116b6:	2018      	movs	r0, #24
 80116b8:	f7ff fc52 	bl	8010f60 <malloc>
 80116bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80116be:	b928      	cbnz	r0, 80116cc <rand+0x20>
 80116c0:	4602      	mov	r2, r0
 80116c2:	4b12      	ldr	r3, [pc, #72]	; (801170c <rand+0x60>)
 80116c4:	4812      	ldr	r0, [pc, #72]	; (8011710 <rand+0x64>)
 80116c6:	214e      	movs	r1, #78	; 0x4e
 80116c8:	f000 fa9a 	bl	8011c00 <__assert_func>
 80116cc:	4a11      	ldr	r2, [pc, #68]	; (8011714 <rand+0x68>)
 80116ce:	4b12      	ldr	r3, [pc, #72]	; (8011718 <rand+0x6c>)
 80116d0:	e9c0 2300 	strd	r2, r3, [r0]
 80116d4:	4b11      	ldr	r3, [pc, #68]	; (801171c <rand+0x70>)
 80116d6:	6083      	str	r3, [r0, #8]
 80116d8:	230b      	movs	r3, #11
 80116da:	8183      	strh	r3, [r0, #12]
 80116dc:	2201      	movs	r2, #1
 80116de:	2300      	movs	r3, #0
 80116e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80116e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80116e6:	4a0e      	ldr	r2, [pc, #56]	; (8011720 <rand+0x74>)
 80116e8:	6920      	ldr	r0, [r4, #16]
 80116ea:	6963      	ldr	r3, [r4, #20]
 80116ec:	490d      	ldr	r1, [pc, #52]	; (8011724 <rand+0x78>)
 80116ee:	4342      	muls	r2, r0
 80116f0:	fb01 2203 	mla	r2, r1, r3, r2
 80116f4:	fba0 0101 	umull	r0, r1, r0, r1
 80116f8:	1c43      	adds	r3, r0, #1
 80116fa:	eb42 0001 	adc.w	r0, r2, r1
 80116fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011702:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011706:	bd10      	pop	{r4, pc}
 8011708:	2000153c 	.word	0x2000153c
 801170c:	08024c24 	.word	0x08024c24
 8011710:	08024d58 	.word	0x08024d58
 8011714:	abcd330e 	.word	0xabcd330e
 8011718:	e66d1234 	.word	0xe66d1234
 801171c:	0005deec 	.word	0x0005deec
 8011720:	5851f42d 	.word	0x5851f42d
 8011724:	4c957f2d 	.word	0x4c957f2d

08011728 <_sbrk_r>:
 8011728:	b538      	push	{r3, r4, r5, lr}
 801172a:	4d06      	ldr	r5, [pc, #24]	; (8011744 <_sbrk_r+0x1c>)
 801172c:	2300      	movs	r3, #0
 801172e:	4604      	mov	r4, r0
 8011730:	4608      	mov	r0, r1
 8011732:	602b      	str	r3, [r5, #0]
 8011734:	f7f3 ff8c 	bl	8005650 <_sbrk>
 8011738:	1c43      	adds	r3, r0, #1
 801173a:	d102      	bne.n	8011742 <_sbrk_r+0x1a>
 801173c:	682b      	ldr	r3, [r5, #0]
 801173e:	b103      	cbz	r3, 8011742 <_sbrk_r+0x1a>
 8011740:	6023      	str	r3, [r4, #0]
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	200050b8 	.word	0x200050b8

08011748 <siprintf>:
 8011748:	b40e      	push	{r1, r2, r3}
 801174a:	b500      	push	{lr}
 801174c:	b09c      	sub	sp, #112	; 0x70
 801174e:	ab1d      	add	r3, sp, #116	; 0x74
 8011750:	9002      	str	r0, [sp, #8]
 8011752:	9006      	str	r0, [sp, #24]
 8011754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011758:	4809      	ldr	r0, [pc, #36]	; (8011780 <siprintf+0x38>)
 801175a:	9107      	str	r1, [sp, #28]
 801175c:	9104      	str	r1, [sp, #16]
 801175e:	4909      	ldr	r1, [pc, #36]	; (8011784 <siprintf+0x3c>)
 8011760:	f853 2b04 	ldr.w	r2, [r3], #4
 8011764:	9105      	str	r1, [sp, #20]
 8011766:	6800      	ldr	r0, [r0, #0]
 8011768:	9301      	str	r3, [sp, #4]
 801176a:	a902      	add	r1, sp, #8
 801176c:	f000 fbee 	bl	8011f4c <_svfiprintf_r>
 8011770:	9b02      	ldr	r3, [sp, #8]
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	b01c      	add	sp, #112	; 0x70
 8011778:	f85d eb04 	ldr.w	lr, [sp], #4
 801177c:	b003      	add	sp, #12
 801177e:	4770      	bx	lr
 8011780:	2000153c 	.word	0x2000153c
 8011784:	ffff0208 	.word	0xffff0208

08011788 <__tzcalc_limits>:
 8011788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	4605      	mov	r5, r0
 801178e:	f000 fabf 	bl	8011d10 <__gettzinfo>
 8011792:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8011796:	429d      	cmp	r5, r3
 8011798:	f340 8099 	ble.w	80118ce <__tzcalc_limits+0x146>
 801179c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80117a0:	18ac      	adds	r4, r5, r2
 80117a2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80117a6:	f240 126d 	movw	r2, #365	; 0x16d
 80117aa:	10a4      	asrs	r4, r4, #2
 80117ac:	fb02 4403 	mla	r4, r2, r3, r4
 80117b0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80117b4:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80117b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80117bc:	441c      	add	r4, r3
 80117be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80117c2:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80117c6:	fb95 fcf3 	sdiv	ip, r5, r3
 80117ca:	fb03 5c1c 	mls	ip, r3, ip, r5
 80117ce:	186a      	adds	r2, r5, r1
 80117d0:	fabc f68c 	clz	r6, ip
 80117d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80117d8:	f005 0303 	and.w	r3, r5, #3
 80117dc:	4414      	add	r4, r2
 80117de:	2264      	movs	r2, #100	; 0x64
 80117e0:	6045      	str	r5, [r0, #4]
 80117e2:	fb95 f7f2 	sdiv	r7, r5, r2
 80117e6:	0976      	lsrs	r6, r6, #5
 80117e8:	fb02 5717 	mls	r7, r2, r7, r5
 80117ec:	4601      	mov	r1, r0
 80117ee:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	f04f 0a07 	mov.w	sl, #7
 80117f8:	7a0d      	ldrb	r5, [r1, #8]
 80117fa:	694b      	ldr	r3, [r1, #20]
 80117fc:	2d4a      	cmp	r5, #74	; 0x4a
 80117fe:	d12d      	bne.n	801185c <__tzcalc_limits+0xd4>
 8011800:	9a00      	ldr	r2, [sp, #0]
 8011802:	eb04 0e03 	add.w	lr, r4, r3
 8011806:	b902      	cbnz	r2, 801180a <__tzcalc_limits+0x82>
 8011808:	b917      	cbnz	r7, 8011810 <__tzcalc_limits+0x88>
 801180a:	f1bc 0f00 	cmp.w	ip, #0
 801180e:	d123      	bne.n	8011858 <__tzcalc_limits+0xd0>
 8011810:	2b3b      	cmp	r3, #59	; 0x3b
 8011812:	bfd4      	ite	le
 8011814:	2300      	movle	r3, #0
 8011816:	2301      	movgt	r3, #1
 8011818:	4473      	add	r3, lr
 801181a:	3b01      	subs	r3, #1
 801181c:	698d      	ldr	r5, [r1, #24]
 801181e:	4a2d      	ldr	r2, [pc, #180]	; (80118d4 <__tzcalc_limits+0x14c>)
 8011820:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8011824:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8011828:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801182a:	18ed      	adds	r5, r5, r3
 801182c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8011830:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8011834:	3128      	adds	r1, #40	; 0x28
 8011836:	458b      	cmp	fp, r1
 8011838:	d1de      	bne.n	80117f8 <__tzcalc_limits+0x70>
 801183a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 801183e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8011842:	428c      	cmp	r4, r1
 8011844:	eb72 0303 	sbcs.w	r3, r2, r3
 8011848:	bfb4      	ite	lt
 801184a:	2301      	movlt	r3, #1
 801184c:	2300      	movge	r3, #0
 801184e:	6003      	str	r3, [r0, #0]
 8011850:	2001      	movs	r0, #1
 8011852:	b003      	add	sp, #12
 8011854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011858:	2300      	movs	r3, #0
 801185a:	e7dd      	b.n	8011818 <__tzcalc_limits+0x90>
 801185c:	2d44      	cmp	r5, #68	; 0x44
 801185e:	d101      	bne.n	8011864 <__tzcalc_limits+0xdc>
 8011860:	4423      	add	r3, r4
 8011862:	e7db      	b.n	801181c <__tzcalc_limits+0x94>
 8011864:	9a00      	ldr	r2, [sp, #0]
 8011866:	bb62      	cbnz	r2, 80118c2 <__tzcalc_limits+0x13a>
 8011868:	2f00      	cmp	r7, #0
 801186a:	bf0c      	ite	eq
 801186c:	4635      	moveq	r5, r6
 801186e:	2501      	movne	r5, #1
 8011870:	68ca      	ldr	r2, [r1, #12]
 8011872:	9201      	str	r2, [sp, #4]
 8011874:	4a18      	ldr	r2, [pc, #96]	; (80118d8 <__tzcalc_limits+0x150>)
 8011876:	f04f 0930 	mov.w	r9, #48	; 0x30
 801187a:	fb09 2505 	mla	r5, r9, r5, r2
 801187e:	46a6      	mov	lr, r4
 8011880:	f04f 0800 	mov.w	r8, #0
 8011884:	3d04      	subs	r5, #4
 8011886:	9a01      	ldr	r2, [sp, #4]
 8011888:	f108 0801 	add.w	r8, r8, #1
 801188c:	4542      	cmp	r2, r8
 801188e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8011892:	dc18      	bgt.n	80118c6 <__tzcalc_limits+0x13e>
 8011894:	f10e 0504 	add.w	r5, lr, #4
 8011898:	fb95 f8fa 	sdiv	r8, r5, sl
 801189c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80118a0:	eba5 0808 	sub.w	r8, r5, r8
 80118a4:	ebb3 0808 	subs.w	r8, r3, r8
 80118a8:	690b      	ldr	r3, [r1, #16]
 80118aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80118ae:	bf48      	it	mi
 80118b0:	f108 0807 	addmi.w	r8, r8, #7
 80118b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80118b8:	4443      	add	r3, r8
 80118ba:	454b      	cmp	r3, r9
 80118bc:	da05      	bge.n	80118ca <__tzcalc_limits+0x142>
 80118be:	4473      	add	r3, lr
 80118c0:	e7ac      	b.n	801181c <__tzcalc_limits+0x94>
 80118c2:	4635      	mov	r5, r6
 80118c4:	e7d4      	b.n	8011870 <__tzcalc_limits+0xe8>
 80118c6:	44ce      	add	lr, r9
 80118c8:	e7dd      	b.n	8011886 <__tzcalc_limits+0xfe>
 80118ca:	3b07      	subs	r3, #7
 80118cc:	e7f5      	b.n	80118ba <__tzcalc_limits+0x132>
 80118ce:	2000      	movs	r0, #0
 80118d0:	e7bf      	b.n	8011852 <__tzcalc_limits+0xca>
 80118d2:	bf00      	nop
 80118d4:	00015180 	.word	0x00015180
 80118d8:	08024cf8 	.word	0x08024cf8

080118dc <__tz_lock>:
 80118dc:	4801      	ldr	r0, [pc, #4]	; (80118e4 <__tz_lock+0x8>)
 80118de:	f000 bac8 	b.w	8011e72 <__retarget_lock_acquire>
 80118e2:	bf00      	nop
 80118e4:	200050b4 	.word	0x200050b4

080118e8 <__tz_unlock>:
 80118e8:	4801      	ldr	r0, [pc, #4]	; (80118f0 <__tz_unlock+0x8>)
 80118ea:	f000 bac4 	b.w	8011e76 <__retarget_lock_release>
 80118ee:	bf00      	nop
 80118f0:	200050b4 	.word	0x200050b4

080118f4 <_tzset_unlocked>:
 80118f4:	4b01      	ldr	r3, [pc, #4]	; (80118fc <_tzset_unlocked+0x8>)
 80118f6:	6818      	ldr	r0, [r3, #0]
 80118f8:	f000 b802 	b.w	8011900 <_tzset_unlocked_r>
 80118fc:	2000153c 	.word	0x2000153c

08011900 <_tzset_unlocked_r>:
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	b08d      	sub	sp, #52	; 0x34
 8011906:	4607      	mov	r7, r0
 8011908:	f000 fa02 	bl	8011d10 <__gettzinfo>
 801190c:	49b0      	ldr	r1, [pc, #704]	; (8011bd0 <_tzset_unlocked_r+0x2d0>)
 801190e:	4eb1      	ldr	r6, [pc, #708]	; (8011bd4 <_tzset_unlocked_r+0x2d4>)
 8011910:	4605      	mov	r5, r0
 8011912:	4638      	mov	r0, r7
 8011914:	f000 f9f4 	bl	8011d00 <_getenv_r>
 8011918:	4604      	mov	r4, r0
 801191a:	b970      	cbnz	r0, 801193a <_tzset_unlocked_r+0x3a>
 801191c:	4bae      	ldr	r3, [pc, #696]	; (8011bd8 <_tzset_unlocked_r+0x2d8>)
 801191e:	4aaf      	ldr	r2, [pc, #700]	; (8011bdc <_tzset_unlocked_r+0x2dc>)
 8011920:	6018      	str	r0, [r3, #0]
 8011922:	4baf      	ldr	r3, [pc, #700]	; (8011be0 <_tzset_unlocked_r+0x2e0>)
 8011924:	6018      	str	r0, [r3, #0]
 8011926:	4baf      	ldr	r3, [pc, #700]	; (8011be4 <_tzset_unlocked_r+0x2e4>)
 8011928:	6830      	ldr	r0, [r6, #0]
 801192a:	e9c3 2200 	strd	r2, r2, [r3]
 801192e:	f7ff fb1f 	bl	8010f70 <free>
 8011932:	6034      	str	r4, [r6, #0]
 8011934:	b00d      	add	sp, #52	; 0x34
 8011936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193a:	6831      	ldr	r1, [r6, #0]
 801193c:	2900      	cmp	r1, #0
 801193e:	d162      	bne.n	8011a06 <_tzset_unlocked_r+0x106>
 8011940:	6830      	ldr	r0, [r6, #0]
 8011942:	f7ff fb15 	bl	8010f70 <free>
 8011946:	4620      	mov	r0, r4
 8011948:	f7ee fc4a 	bl	80001e0 <strlen>
 801194c:	1c41      	adds	r1, r0, #1
 801194e:	4638      	mov	r0, r7
 8011950:	f7ff fe0a 	bl	8011568 <_malloc_r>
 8011954:	6030      	str	r0, [r6, #0]
 8011956:	2800      	cmp	r0, #0
 8011958:	d15a      	bne.n	8011a10 <_tzset_unlocked_r+0x110>
 801195a:	7823      	ldrb	r3, [r4, #0]
 801195c:	4aa2      	ldr	r2, [pc, #648]	; (8011be8 <_tzset_unlocked_r+0x2e8>)
 801195e:	49a3      	ldr	r1, [pc, #652]	; (8011bec <_tzset_unlocked_r+0x2ec>)
 8011960:	2b3a      	cmp	r3, #58	; 0x3a
 8011962:	bf08      	it	eq
 8011964:	3401      	addeq	r4, #1
 8011966:	ae0a      	add	r6, sp, #40	; 0x28
 8011968:	4633      	mov	r3, r6
 801196a:	4620      	mov	r0, r4
 801196c:	f000 fedc 	bl	8012728 <siscanf>
 8011970:	2800      	cmp	r0, #0
 8011972:	dddf      	ble.n	8011934 <_tzset_unlocked_r+0x34>
 8011974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011976:	18e7      	adds	r7, r4, r3
 8011978:	5ce3      	ldrb	r3, [r4, r3]
 801197a:	2b2d      	cmp	r3, #45	; 0x2d
 801197c:	d14c      	bne.n	8011a18 <_tzset_unlocked_r+0x118>
 801197e:	3701      	adds	r7, #1
 8011980:	f04f 38ff 	mov.w	r8, #4294967295
 8011984:	f10d 0a20 	add.w	sl, sp, #32
 8011988:	f10d 0b1e 	add.w	fp, sp, #30
 801198c:	2400      	movs	r4, #0
 801198e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8011992:	4997      	ldr	r1, [pc, #604]	; (8011bf0 <_tzset_unlocked_r+0x2f0>)
 8011994:	9603      	str	r6, [sp, #12]
 8011996:	f8cd b000 	str.w	fp, [sp]
 801199a:	4633      	mov	r3, r6
 801199c:	aa07      	add	r2, sp, #28
 801199e:	4638      	mov	r0, r7
 80119a0:	f8ad 401e 	strh.w	r4, [sp, #30]
 80119a4:	f8ad 4020 	strh.w	r4, [sp, #32]
 80119a8:	f000 febe 	bl	8012728 <siscanf>
 80119ac:	42a0      	cmp	r0, r4
 80119ae:	ddc1      	ble.n	8011934 <_tzset_unlocked_r+0x34>
 80119b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80119b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80119b8:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8011bfc <_tzset_unlocked_r+0x2fc>
 80119bc:	213c      	movs	r1, #60	; 0x3c
 80119be:	fb01 3302 	mla	r3, r1, r2, r3
 80119c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80119c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80119ca:	fb01 3302 	mla	r3, r1, r2, r3
 80119ce:	fb08 f303 	mul.w	r3, r8, r3
 80119d2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8011be4 <_tzset_unlocked_r+0x2e4>
 80119d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80119d8:	4b83      	ldr	r3, [pc, #524]	; (8011be8 <_tzset_unlocked_r+0x2e8>)
 80119da:	f8c8 3000 	str.w	r3, [r8]
 80119de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119e0:	4982      	ldr	r1, [pc, #520]	; (8011bec <_tzset_unlocked_r+0x2ec>)
 80119e2:	441f      	add	r7, r3
 80119e4:	464a      	mov	r2, r9
 80119e6:	4633      	mov	r3, r6
 80119e8:	4638      	mov	r0, r7
 80119ea:	f000 fe9d 	bl	8012728 <siscanf>
 80119ee:	42a0      	cmp	r0, r4
 80119f0:	dc18      	bgt.n	8011a24 <_tzset_unlocked_r+0x124>
 80119f2:	f8d8 3000 	ldr.w	r3, [r8]
 80119f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80119fa:	4b77      	ldr	r3, [pc, #476]	; (8011bd8 <_tzset_unlocked_r+0x2d8>)
 80119fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80119fe:	601a      	str	r2, [r3, #0]
 8011a00:	4b77      	ldr	r3, [pc, #476]	; (8011be0 <_tzset_unlocked_r+0x2e0>)
 8011a02:	601c      	str	r4, [r3, #0]
 8011a04:	e796      	b.n	8011934 <_tzset_unlocked_r+0x34>
 8011a06:	f7ee fbf3 	bl	80001f0 <strcmp>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	d198      	bne.n	8011940 <_tzset_unlocked_r+0x40>
 8011a0e:	e791      	b.n	8011934 <_tzset_unlocked_r+0x34>
 8011a10:	4621      	mov	r1, r4
 8011a12:	f000 fefa 	bl	801280a <strcpy>
 8011a16:	e7a0      	b.n	801195a <_tzset_unlocked_r+0x5a>
 8011a18:	2b2b      	cmp	r3, #43	; 0x2b
 8011a1a:	bf08      	it	eq
 8011a1c:	3701      	addeq	r7, #1
 8011a1e:	f04f 0801 	mov.w	r8, #1
 8011a22:	e7af      	b.n	8011984 <_tzset_unlocked_r+0x84>
 8011a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a26:	f8c8 9004 	str.w	r9, [r8, #4]
 8011a2a:	18fc      	adds	r4, r7, r3
 8011a2c:	5cfb      	ldrb	r3, [r7, r3]
 8011a2e:	2b2d      	cmp	r3, #45	; 0x2d
 8011a30:	f040 808b 	bne.w	8011b4a <_tzset_unlocked_r+0x24a>
 8011a34:	3401      	adds	r4, #1
 8011a36:	f04f 37ff 	mov.w	r7, #4294967295
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011a40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011a44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011a48:	930a      	str	r3, [sp, #40]	; 0x28
 8011a4a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8011a4e:	e9cd b600 	strd	fp, r6, [sp]
 8011a52:	4967      	ldr	r1, [pc, #412]	; (8011bf0 <_tzset_unlocked_r+0x2f0>)
 8011a54:	4633      	mov	r3, r6
 8011a56:	aa07      	add	r2, sp, #28
 8011a58:	4620      	mov	r0, r4
 8011a5a:	f000 fe65 	bl	8012728 <siscanf>
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	dc78      	bgt.n	8011b54 <_tzset_unlocked_r+0x254>
 8011a62:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8011a64:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8011a68:	652b      	str	r3, [r5, #80]	; 0x50
 8011a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a6c:	462f      	mov	r7, r5
 8011a6e:	441c      	add	r4, r3
 8011a70:	f04f 0900 	mov.w	r9, #0
 8011a74:	7823      	ldrb	r3, [r4, #0]
 8011a76:	2b2c      	cmp	r3, #44	; 0x2c
 8011a78:	bf08      	it	eq
 8011a7a:	3401      	addeq	r4, #1
 8011a7c:	f894 8000 	ldrb.w	r8, [r4]
 8011a80:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8011a84:	d178      	bne.n	8011b78 <_tzset_unlocked_r+0x278>
 8011a86:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8011a8a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8011a8e:	ab09      	add	r3, sp, #36	; 0x24
 8011a90:	9300      	str	r3, [sp, #0]
 8011a92:	4958      	ldr	r1, [pc, #352]	; (8011bf4 <_tzset_unlocked_r+0x2f4>)
 8011a94:	9603      	str	r6, [sp, #12]
 8011a96:	4633      	mov	r3, r6
 8011a98:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f000 fe43 	bl	8012728 <siscanf>
 8011aa2:	2803      	cmp	r0, #3
 8011aa4:	f47f af46 	bne.w	8011934 <_tzset_unlocked_r+0x34>
 8011aa8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8011aac:	1e4b      	subs	r3, r1, #1
 8011aae:	2b0b      	cmp	r3, #11
 8011ab0:	f63f af40 	bhi.w	8011934 <_tzset_unlocked_r+0x34>
 8011ab4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8011ab8:	1e53      	subs	r3, r2, #1
 8011aba:	2b04      	cmp	r3, #4
 8011abc:	f63f af3a 	bhi.w	8011934 <_tzset_unlocked_r+0x34>
 8011ac0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8011ac4:	2b06      	cmp	r3, #6
 8011ac6:	f63f af35 	bhi.w	8011934 <_tzset_unlocked_r+0x34>
 8011aca:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8011ace:	f887 8008 	strb.w	r8, [r7, #8]
 8011ad2:	617b      	str	r3, [r7, #20]
 8011ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ad6:	eb04 0803 	add.w	r8, r4, r3
 8011ada:	2302      	movs	r3, #2
 8011adc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011ae6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011aea:	930a      	str	r3, [sp, #40]	; 0x28
 8011aec:	f898 3000 	ldrb.w	r3, [r8]
 8011af0:	2b2f      	cmp	r3, #47	; 0x2f
 8011af2:	d109      	bne.n	8011b08 <_tzset_unlocked_r+0x208>
 8011af4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8011af8:	e9cd b600 	strd	fp, r6, [sp]
 8011afc:	493e      	ldr	r1, [pc, #248]	; (8011bf8 <_tzset_unlocked_r+0x2f8>)
 8011afe:	4633      	mov	r3, r6
 8011b00:	aa07      	add	r2, sp, #28
 8011b02:	4640      	mov	r0, r8
 8011b04:	f000 fe10 	bl	8012728 <siscanf>
 8011b08:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8011b0c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011b10:	213c      	movs	r1, #60	; 0x3c
 8011b12:	fb01 3302 	mla	r3, r1, r2, r3
 8011b16:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8011b1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8011b1e:	fb01 3302 	mla	r3, r1, r2, r3
 8011b22:	61bb      	str	r3, [r7, #24]
 8011b24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011b26:	3728      	adds	r7, #40	; 0x28
 8011b28:	4444      	add	r4, r8
 8011b2a:	f1b9 0f00 	cmp.w	r9, #0
 8011b2e:	d020      	beq.n	8011b72 <_tzset_unlocked_r+0x272>
 8011b30:	6868      	ldr	r0, [r5, #4]
 8011b32:	f7ff fe29 	bl	8011788 <__tzcalc_limits>
 8011b36:	4b28      	ldr	r3, [pc, #160]	; (8011bd8 <_tzset_unlocked_r+0x2d8>)
 8011b38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8011b3a:	601a      	str	r2, [r3, #0]
 8011b3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8011b3e:	1a9b      	subs	r3, r3, r2
 8011b40:	4a27      	ldr	r2, [pc, #156]	; (8011be0 <_tzset_unlocked_r+0x2e0>)
 8011b42:	bf18      	it	ne
 8011b44:	2301      	movne	r3, #1
 8011b46:	6013      	str	r3, [r2, #0]
 8011b48:	e6f4      	b.n	8011934 <_tzset_unlocked_r+0x34>
 8011b4a:	2b2b      	cmp	r3, #43	; 0x2b
 8011b4c:	bf08      	it	eq
 8011b4e:	3401      	addeq	r4, #1
 8011b50:	2701      	movs	r7, #1
 8011b52:	e772      	b.n	8011a3a <_tzset_unlocked_r+0x13a>
 8011b54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8011b58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011b5c:	213c      	movs	r1, #60	; 0x3c
 8011b5e:	fb01 3302 	mla	r3, r1, r2, r3
 8011b62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8011b66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8011b6a:	fb01 3302 	mla	r3, r1, r2, r3
 8011b6e:	437b      	muls	r3, r7
 8011b70:	e77a      	b.n	8011a68 <_tzset_unlocked_r+0x168>
 8011b72:	f04f 0901 	mov.w	r9, #1
 8011b76:	e77d      	b.n	8011a74 <_tzset_unlocked_r+0x174>
 8011b78:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8011b7c:	bf06      	itte	eq
 8011b7e:	3401      	addeq	r4, #1
 8011b80:	4643      	moveq	r3, r8
 8011b82:	2344      	movne	r3, #68	; 0x44
 8011b84:	220a      	movs	r2, #10
 8011b86:	a90b      	add	r1, sp, #44	; 0x2c
 8011b88:	4620      	mov	r0, r4
 8011b8a:	9305      	str	r3, [sp, #20]
 8011b8c:	f000 fece 	bl	801292c <strtoul>
 8011b90:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8011b94:	9b05      	ldr	r3, [sp, #20]
 8011b96:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8011b9a:	45a0      	cmp	r8, r4
 8011b9c:	d114      	bne.n	8011bc8 <_tzset_unlocked_r+0x2c8>
 8011b9e:	234d      	movs	r3, #77	; 0x4d
 8011ba0:	f1b9 0f00 	cmp.w	r9, #0
 8011ba4:	d107      	bne.n	8011bb6 <_tzset_unlocked_r+0x2b6>
 8011ba6:	722b      	strb	r3, [r5, #8]
 8011ba8:	2103      	movs	r1, #3
 8011baa:	2302      	movs	r3, #2
 8011bac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8011bb0:	f8c5 9014 	str.w	r9, [r5, #20]
 8011bb4:	e791      	b.n	8011ada <_tzset_unlocked_r+0x1da>
 8011bb6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8011bba:	220b      	movs	r2, #11
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	63eb      	str	r3, [r5, #60]	; 0x3c
 8011bc6:	e788      	b.n	8011ada <_tzset_unlocked_r+0x1da>
 8011bc8:	b280      	uxth	r0, r0
 8011bca:	723b      	strb	r3, [r7, #8]
 8011bcc:	6178      	str	r0, [r7, #20]
 8011bce:	e784      	b.n	8011ada <_tzset_unlocked_r+0x1da>
 8011bd0:	08024db3 	.word	0x08024db3
 8011bd4:	200050a4 	.word	0x200050a4
 8011bd8:	200050ac 	.word	0x200050ac
 8011bdc:	08024db6 	.word	0x08024db6
 8011be0:	200050a8 	.word	0x200050a8
 8011be4:	200015a0 	.word	0x200015a0
 8011be8:	20005097 	.word	0x20005097
 8011bec:	08024dba 	.word	0x08024dba
 8011bf0:	08024ddd 	.word	0x08024ddd
 8011bf4:	08024dc9 	.word	0x08024dc9
 8011bf8:	08024ddc 	.word	0x08024ddc
 8011bfc:	2000508c 	.word	0x2000508c

08011c00 <__assert_func>:
 8011c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c02:	4614      	mov	r4, r2
 8011c04:	461a      	mov	r2, r3
 8011c06:	4b09      	ldr	r3, [pc, #36]	; (8011c2c <__assert_func+0x2c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	68d8      	ldr	r0, [r3, #12]
 8011c0e:	b14c      	cbz	r4, 8011c24 <__assert_func+0x24>
 8011c10:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <__assert_func+0x30>)
 8011c12:	9100      	str	r1, [sp, #0]
 8011c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c18:	4906      	ldr	r1, [pc, #24]	; (8011c34 <__assert_func+0x34>)
 8011c1a:	462b      	mov	r3, r5
 8011c1c:	f000 f822 	bl	8011c64 <fiprintf>
 8011c20:	f000 ff60 	bl	8012ae4 <abort>
 8011c24:	4b04      	ldr	r3, [pc, #16]	; (8011c38 <__assert_func+0x38>)
 8011c26:	461c      	mov	r4, r3
 8011c28:	e7f3      	b.n	8011c12 <__assert_func+0x12>
 8011c2a:	bf00      	nop
 8011c2c:	2000153c 	.word	0x2000153c
 8011c30:	08024def 	.word	0x08024def
 8011c34:	08024dfc 	.word	0x08024dfc
 8011c38:	08024e2a 	.word	0x08024e2a

08011c3c <div>:
 8011c3c:	2900      	cmp	r1, #0
 8011c3e:	b510      	push	{r4, lr}
 8011c40:	fb91 f4f2 	sdiv	r4, r1, r2
 8011c44:	fb02 1314 	mls	r3, r2, r4, r1
 8011c48:	db06      	blt.n	8011c58 <div+0x1c>
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	da01      	bge.n	8011c52 <div+0x16>
 8011c4e:	3401      	adds	r4, #1
 8011c50:	1a9b      	subs	r3, r3, r2
 8011c52:	e9c0 4300 	strd	r4, r3, [r0]
 8011c56:	bd10      	pop	{r4, pc}
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	bfc4      	itt	gt
 8011c5c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8011c60:	189b      	addgt	r3, r3, r2
 8011c62:	e7f6      	b.n	8011c52 <div+0x16>

08011c64 <fiprintf>:
 8011c64:	b40e      	push	{r1, r2, r3}
 8011c66:	b503      	push	{r0, r1, lr}
 8011c68:	4601      	mov	r1, r0
 8011c6a:	ab03      	add	r3, sp, #12
 8011c6c:	4805      	ldr	r0, [pc, #20]	; (8011c84 <fiprintf+0x20>)
 8011c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c72:	6800      	ldr	r0, [r0, #0]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	f000 fa93 	bl	80121a0 <_vfiprintf_r>
 8011c7a:	b002      	add	sp, #8
 8011c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c80:	b003      	add	sp, #12
 8011c82:	4770      	bx	lr
 8011c84:	2000153c 	.word	0x2000153c

08011c88 <_findenv_r>:
 8011c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c8c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8011cfc <_findenv_r+0x74>
 8011c90:	4607      	mov	r7, r0
 8011c92:	4689      	mov	r9, r1
 8011c94:	4616      	mov	r6, r2
 8011c96:	f000 ff3d 	bl	8012b14 <__env_lock>
 8011c9a:	f8da 4000 	ldr.w	r4, [sl]
 8011c9e:	b134      	cbz	r4, 8011cae <_findenv_r+0x26>
 8011ca0:	464b      	mov	r3, r9
 8011ca2:	4698      	mov	r8, r3
 8011ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ca8:	b13a      	cbz	r2, 8011cba <_findenv_r+0x32>
 8011caa:	2a3d      	cmp	r2, #61	; 0x3d
 8011cac:	d1f9      	bne.n	8011ca2 <_findenv_r+0x1a>
 8011cae:	4638      	mov	r0, r7
 8011cb0:	f000 ff36 	bl	8012b20 <__env_unlock>
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cba:	eba8 0809 	sub.w	r8, r8, r9
 8011cbe:	46a3      	mov	fp, r4
 8011cc0:	f854 0b04 	ldr.w	r0, [r4], #4
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	d0f2      	beq.n	8011cae <_findenv_r+0x26>
 8011cc8:	4642      	mov	r2, r8
 8011cca:	4649      	mov	r1, r9
 8011ccc:	f000 fda5 	bl	801281a <strncmp>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d1f4      	bne.n	8011cbe <_findenv_r+0x36>
 8011cd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011cd8:	eb03 0508 	add.w	r5, r3, r8
 8011cdc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011ce0:	2b3d      	cmp	r3, #61	; 0x3d
 8011ce2:	d1ec      	bne.n	8011cbe <_findenv_r+0x36>
 8011ce4:	f8da 3000 	ldr.w	r3, [sl]
 8011ce8:	ebab 0303 	sub.w	r3, fp, r3
 8011cec:	109b      	asrs	r3, r3, #2
 8011cee:	4638      	mov	r0, r7
 8011cf0:	6033      	str	r3, [r6, #0]
 8011cf2:	f000 ff15 	bl	8012b20 <__env_unlock>
 8011cf6:	1c68      	adds	r0, r5, #1
 8011cf8:	e7dd      	b.n	8011cb6 <_findenv_r+0x2e>
 8011cfa:	bf00      	nop
 8011cfc:	200011d8 	.word	0x200011d8

08011d00 <_getenv_r>:
 8011d00:	b507      	push	{r0, r1, r2, lr}
 8011d02:	aa01      	add	r2, sp, #4
 8011d04:	f7ff ffc0 	bl	8011c88 <_findenv_r>
 8011d08:	b003      	add	sp, #12
 8011d0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011d10 <__gettzinfo>:
 8011d10:	4800      	ldr	r0, [pc, #0]	; (8011d14 <__gettzinfo+0x4>)
 8011d12:	4770      	bx	lr
 8011d14:	200015a8 	.word	0x200015a8

08011d18 <gmtime_r>:
 8011d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d1c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011d20:	460c      	mov	r4, r1
 8011d22:	4a4f      	ldr	r2, [pc, #316]	; (8011e60 <gmtime_r+0x148>)
 8011d24:	2300      	movs	r3, #0
 8011d26:	4630      	mov	r0, r6
 8011d28:	4639      	mov	r1, r7
 8011d2a:	f7ee ff8f 	bl	8000c4c <__aeabi_ldivmod>
 8011d2e:	4639      	mov	r1, r7
 8011d30:	4605      	mov	r5, r0
 8011d32:	4a4b      	ldr	r2, [pc, #300]	; (8011e60 <gmtime_r+0x148>)
 8011d34:	4630      	mov	r0, r6
 8011d36:	2300      	movs	r3, #0
 8011d38:	f7ee ff88 	bl	8000c4c <__aeabi_ldivmod>
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8011d42:	bfb7      	itett	lt
 8011d44:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8011d48:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8011d4c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8011d50:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8011d54:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8011d58:	fbb2 f1f0 	udiv	r1, r2, r0
 8011d5c:	fb00 2211 	mls	r2, r0, r1, r2
 8011d60:	203c      	movs	r0, #60	; 0x3c
 8011d62:	60a1      	str	r1, [r4, #8]
 8011d64:	fbb2 f1f0 	udiv	r1, r2, r0
 8011d68:	fb00 2211 	mls	r2, r0, r1, r2
 8011d6c:	6061      	str	r1, [r4, #4]
 8011d6e:	6022      	str	r2, [r4, #0]
 8011d70:	2107      	movs	r1, #7
 8011d72:	1cda      	adds	r2, r3, #3
 8011d74:	fb92 f1f1 	sdiv	r1, r2, r1
 8011d78:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8011d7c:	1a52      	subs	r2, r2, r1
 8011d7e:	bf48      	it	mi
 8011d80:	3207      	addmi	r2, #7
 8011d82:	4d38      	ldr	r5, [pc, #224]	; (8011e64 <gmtime_r+0x14c>)
 8011d84:	4838      	ldr	r0, [pc, #224]	; (8011e68 <gmtime_r+0x150>)
 8011d86:	61a2      	str	r2, [r4, #24]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	bfb7      	itett	lt
 8011d8c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8011d90:	fb93 f5f5 	sdivge	r5, r3, r5
 8011d94:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8011d98:	fb92 f5f5 	sdivlt	r5, r2, r5
 8011d9c:	fb00 3005 	mla	r0, r0, r5, r3
 8011da0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8011da4:	fbb0 f2f2 	udiv	r2, r0, r2
 8011da8:	4402      	add	r2, r0
 8011daa:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8011dae:	fbb0 f1f3 	udiv	r1, r0, r3
 8011db2:	1a52      	subs	r2, r2, r1
 8011db4:	f240 1c6d 	movw	ip, #365	; 0x16d
 8011db8:	492c      	ldr	r1, [pc, #176]	; (8011e6c <gmtime_r+0x154>)
 8011dba:	fbb0 f1f1 	udiv	r1, r0, r1
 8011dbe:	2764      	movs	r7, #100	; 0x64
 8011dc0:	1a52      	subs	r2, r2, r1
 8011dc2:	fbb2 f1fc 	udiv	r1, r2, ip
 8011dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dca:	fbb1 f6f7 	udiv	r6, r1, r7
 8011dce:	1af3      	subs	r3, r6, r3
 8011dd0:	4403      	add	r3, r0
 8011dd2:	fb0c 3311 	mls	r3, ip, r1, r3
 8011dd6:	2299      	movs	r2, #153	; 0x99
 8011dd8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8011ddc:	f10e 0e02 	add.w	lr, lr, #2
 8011de0:	f103 0c01 	add.w	ip, r3, #1
 8011de4:	fbbe f0f2 	udiv	r0, lr, r2
 8011de8:	4342      	muls	r2, r0
 8011dea:	3202      	adds	r2, #2
 8011dec:	f04f 0805 	mov.w	r8, #5
 8011df0:	fbb2 f2f8 	udiv	r2, r2, r8
 8011df4:	ebac 0c02 	sub.w	ip, ip, r2
 8011df8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8011dfc:	4596      	cmp	lr, r2
 8011dfe:	bf94      	ite	ls
 8011e00:	2202      	movls	r2, #2
 8011e02:	f06f 0209 	mvnhi.w	r2, #9
 8011e06:	4410      	add	r0, r2
 8011e08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011e0c:	fb02 1505 	mla	r5, r2, r5, r1
 8011e10:	2801      	cmp	r0, #1
 8011e12:	bf98      	it	ls
 8011e14:	3501      	addls	r5, #1
 8011e16:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8011e1a:	d30d      	bcc.n	8011e38 <gmtime_r+0x120>
 8011e1c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8011e20:	61e3      	str	r3, [r4, #28]
 8011e22:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8011e26:	2300      	movs	r3, #0
 8011e28:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8011e2c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8011e30:	6223      	str	r3, [r4, #32]
 8011e32:	4620      	mov	r0, r4
 8011e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e38:	078a      	lsls	r2, r1, #30
 8011e3a:	d102      	bne.n	8011e42 <gmtime_r+0x12a>
 8011e3c:	fb07 1616 	mls	r6, r7, r6, r1
 8011e40:	b95e      	cbnz	r6, 8011e5a <gmtime_r+0x142>
 8011e42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011e46:	fbb1 f6f2 	udiv	r6, r1, r2
 8011e4a:	fb02 1216 	mls	r2, r2, r6, r1
 8011e4e:	fab2 f282 	clz	r2, r2
 8011e52:	0952      	lsrs	r2, r2, #5
 8011e54:	333b      	adds	r3, #59	; 0x3b
 8011e56:	4413      	add	r3, r2
 8011e58:	e7e2      	b.n	8011e20 <gmtime_r+0x108>
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	e7fa      	b.n	8011e54 <gmtime_r+0x13c>
 8011e5e:	bf00      	nop
 8011e60:	00015180 	.word	0x00015180
 8011e64:	00023ab1 	.word	0x00023ab1
 8011e68:	fffdc54f 	.word	0xfffdc54f
 8011e6c:	00023ab0 	.word	0x00023ab0

08011e70 <__retarget_lock_init_recursive>:
 8011e70:	4770      	bx	lr

08011e72 <__retarget_lock_acquire>:
 8011e72:	4770      	bx	lr

08011e74 <__retarget_lock_acquire_recursive>:
 8011e74:	4770      	bx	lr

08011e76 <__retarget_lock_release>:
 8011e76:	4770      	bx	lr

08011e78 <__retarget_lock_release_recursive>:
 8011e78:	4770      	bx	lr
	...

08011e7c <__malloc_lock>:
 8011e7c:	4801      	ldr	r0, [pc, #4]	; (8011e84 <__malloc_lock+0x8>)
 8011e7e:	f7ff bff9 	b.w	8011e74 <__retarget_lock_acquire_recursive>
 8011e82:	bf00      	nop
 8011e84:	200050b1 	.word	0x200050b1

08011e88 <__malloc_unlock>:
 8011e88:	4801      	ldr	r0, [pc, #4]	; (8011e90 <__malloc_unlock+0x8>)
 8011e8a:	f7ff bff5 	b.w	8011e78 <__retarget_lock_release_recursive>
 8011e8e:	bf00      	nop
 8011e90:	200050b1 	.word	0x200050b1

08011e94 <__ssputs_r>:
 8011e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e98:	688e      	ldr	r6, [r1, #8]
 8011e9a:	429e      	cmp	r6, r3
 8011e9c:	4682      	mov	sl, r0
 8011e9e:	460c      	mov	r4, r1
 8011ea0:	4690      	mov	r8, r2
 8011ea2:	461f      	mov	r7, r3
 8011ea4:	d838      	bhi.n	8011f18 <__ssputs_r+0x84>
 8011ea6:	898a      	ldrh	r2, [r1, #12]
 8011ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011eac:	d032      	beq.n	8011f14 <__ssputs_r+0x80>
 8011eae:	6825      	ldr	r5, [r4, #0]
 8011eb0:	6909      	ldr	r1, [r1, #16]
 8011eb2:	eba5 0901 	sub.w	r9, r5, r1
 8011eb6:	6965      	ldr	r5, [r4, #20]
 8011eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	444b      	add	r3, r9
 8011ec4:	106d      	asrs	r5, r5, #1
 8011ec6:	429d      	cmp	r5, r3
 8011ec8:	bf38      	it	cc
 8011eca:	461d      	movcc	r5, r3
 8011ecc:	0553      	lsls	r3, r2, #21
 8011ece:	d531      	bpl.n	8011f34 <__ssputs_r+0xa0>
 8011ed0:	4629      	mov	r1, r5
 8011ed2:	f7ff fb49 	bl	8011568 <_malloc_r>
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	b950      	cbnz	r0, 8011ef0 <__ssputs_r+0x5c>
 8011eda:	230c      	movs	r3, #12
 8011edc:	f8ca 3000 	str.w	r3, [sl]
 8011ee0:	89a3      	ldrh	r3, [r4, #12]
 8011ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ee6:	81a3      	strh	r3, [r4, #12]
 8011ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8011eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef0:	6921      	ldr	r1, [r4, #16]
 8011ef2:	464a      	mov	r2, r9
 8011ef4:	f7ff f844 	bl	8010f80 <memcpy>
 8011ef8:	89a3      	ldrh	r3, [r4, #12]
 8011efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f02:	81a3      	strh	r3, [r4, #12]
 8011f04:	6126      	str	r6, [r4, #16]
 8011f06:	6165      	str	r5, [r4, #20]
 8011f08:	444e      	add	r6, r9
 8011f0a:	eba5 0509 	sub.w	r5, r5, r9
 8011f0e:	6026      	str	r6, [r4, #0]
 8011f10:	60a5      	str	r5, [r4, #8]
 8011f12:	463e      	mov	r6, r7
 8011f14:	42be      	cmp	r6, r7
 8011f16:	d900      	bls.n	8011f1a <__ssputs_r+0x86>
 8011f18:	463e      	mov	r6, r7
 8011f1a:	6820      	ldr	r0, [r4, #0]
 8011f1c:	4632      	mov	r2, r6
 8011f1e:	4641      	mov	r1, r8
 8011f20:	f001 f834 	bl	8012f8c <memmove>
 8011f24:	68a3      	ldr	r3, [r4, #8]
 8011f26:	1b9b      	subs	r3, r3, r6
 8011f28:	60a3      	str	r3, [r4, #8]
 8011f2a:	6823      	ldr	r3, [r4, #0]
 8011f2c:	4433      	add	r3, r6
 8011f2e:	6023      	str	r3, [r4, #0]
 8011f30:	2000      	movs	r0, #0
 8011f32:	e7db      	b.n	8011eec <__ssputs_r+0x58>
 8011f34:	462a      	mov	r2, r5
 8011f36:	f001 f843 	bl	8012fc0 <_realloc_r>
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d1e1      	bne.n	8011f04 <__ssputs_r+0x70>
 8011f40:	6921      	ldr	r1, [r4, #16]
 8011f42:	4650      	mov	r0, sl
 8011f44:	f7ff faa4 	bl	8011490 <_free_r>
 8011f48:	e7c7      	b.n	8011eda <__ssputs_r+0x46>
	...

08011f4c <_svfiprintf_r>:
 8011f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f50:	4698      	mov	r8, r3
 8011f52:	898b      	ldrh	r3, [r1, #12]
 8011f54:	061b      	lsls	r3, r3, #24
 8011f56:	b09d      	sub	sp, #116	; 0x74
 8011f58:	4607      	mov	r7, r0
 8011f5a:	460d      	mov	r5, r1
 8011f5c:	4614      	mov	r4, r2
 8011f5e:	d50e      	bpl.n	8011f7e <_svfiprintf_r+0x32>
 8011f60:	690b      	ldr	r3, [r1, #16]
 8011f62:	b963      	cbnz	r3, 8011f7e <_svfiprintf_r+0x32>
 8011f64:	2140      	movs	r1, #64	; 0x40
 8011f66:	f7ff faff 	bl	8011568 <_malloc_r>
 8011f6a:	6028      	str	r0, [r5, #0]
 8011f6c:	6128      	str	r0, [r5, #16]
 8011f6e:	b920      	cbnz	r0, 8011f7a <_svfiprintf_r+0x2e>
 8011f70:	230c      	movs	r3, #12
 8011f72:	603b      	str	r3, [r7, #0]
 8011f74:	f04f 30ff 	mov.w	r0, #4294967295
 8011f78:	e0d1      	b.n	801211e <_svfiprintf_r+0x1d2>
 8011f7a:	2340      	movs	r3, #64	; 0x40
 8011f7c:	616b      	str	r3, [r5, #20]
 8011f7e:	2300      	movs	r3, #0
 8011f80:	9309      	str	r3, [sp, #36]	; 0x24
 8011f82:	2320      	movs	r3, #32
 8011f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f8c:	2330      	movs	r3, #48	; 0x30
 8011f8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012138 <_svfiprintf_r+0x1ec>
 8011f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f96:	f04f 0901 	mov.w	r9, #1
 8011f9a:	4623      	mov	r3, r4
 8011f9c:	469a      	mov	sl, r3
 8011f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fa2:	b10a      	cbz	r2, 8011fa8 <_svfiprintf_r+0x5c>
 8011fa4:	2a25      	cmp	r2, #37	; 0x25
 8011fa6:	d1f9      	bne.n	8011f9c <_svfiprintf_r+0x50>
 8011fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8011fac:	d00b      	beq.n	8011fc6 <_svfiprintf_r+0x7a>
 8011fae:	465b      	mov	r3, fp
 8011fb0:	4622      	mov	r2, r4
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	4638      	mov	r0, r7
 8011fb6:	f7ff ff6d 	bl	8011e94 <__ssputs_r>
 8011fba:	3001      	adds	r0, #1
 8011fbc:	f000 80aa 	beq.w	8012114 <_svfiprintf_r+0x1c8>
 8011fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fc2:	445a      	add	r2, fp
 8011fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8011fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 80a2 	beq.w	8012114 <_svfiprintf_r+0x1c8>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fda:	f10a 0a01 	add.w	sl, sl, #1
 8011fde:	9304      	str	r3, [sp, #16]
 8011fe0:	9307      	str	r3, [sp, #28]
 8011fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8011fe8:	4654      	mov	r4, sl
 8011fea:	2205      	movs	r2, #5
 8011fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ff0:	4851      	ldr	r0, [pc, #324]	; (8012138 <_svfiprintf_r+0x1ec>)
 8011ff2:	f7ee f90d 	bl	8000210 <memchr>
 8011ff6:	9a04      	ldr	r2, [sp, #16]
 8011ff8:	b9d8      	cbnz	r0, 8012032 <_svfiprintf_r+0xe6>
 8011ffa:	06d0      	lsls	r0, r2, #27
 8011ffc:	bf44      	itt	mi
 8011ffe:	2320      	movmi	r3, #32
 8012000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012004:	0711      	lsls	r1, r2, #28
 8012006:	bf44      	itt	mi
 8012008:	232b      	movmi	r3, #43	; 0x2b
 801200a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801200e:	f89a 3000 	ldrb.w	r3, [sl]
 8012012:	2b2a      	cmp	r3, #42	; 0x2a
 8012014:	d015      	beq.n	8012042 <_svfiprintf_r+0xf6>
 8012016:	9a07      	ldr	r2, [sp, #28]
 8012018:	4654      	mov	r4, sl
 801201a:	2000      	movs	r0, #0
 801201c:	f04f 0c0a 	mov.w	ip, #10
 8012020:	4621      	mov	r1, r4
 8012022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012026:	3b30      	subs	r3, #48	; 0x30
 8012028:	2b09      	cmp	r3, #9
 801202a:	d94e      	bls.n	80120ca <_svfiprintf_r+0x17e>
 801202c:	b1b0      	cbz	r0, 801205c <_svfiprintf_r+0x110>
 801202e:	9207      	str	r2, [sp, #28]
 8012030:	e014      	b.n	801205c <_svfiprintf_r+0x110>
 8012032:	eba0 0308 	sub.w	r3, r0, r8
 8012036:	fa09 f303 	lsl.w	r3, r9, r3
 801203a:	4313      	orrs	r3, r2
 801203c:	9304      	str	r3, [sp, #16]
 801203e:	46a2      	mov	sl, r4
 8012040:	e7d2      	b.n	8011fe8 <_svfiprintf_r+0x9c>
 8012042:	9b03      	ldr	r3, [sp, #12]
 8012044:	1d19      	adds	r1, r3, #4
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	9103      	str	r1, [sp, #12]
 801204a:	2b00      	cmp	r3, #0
 801204c:	bfbb      	ittet	lt
 801204e:	425b      	neglt	r3, r3
 8012050:	f042 0202 	orrlt.w	r2, r2, #2
 8012054:	9307      	strge	r3, [sp, #28]
 8012056:	9307      	strlt	r3, [sp, #28]
 8012058:	bfb8      	it	lt
 801205a:	9204      	strlt	r2, [sp, #16]
 801205c:	7823      	ldrb	r3, [r4, #0]
 801205e:	2b2e      	cmp	r3, #46	; 0x2e
 8012060:	d10c      	bne.n	801207c <_svfiprintf_r+0x130>
 8012062:	7863      	ldrb	r3, [r4, #1]
 8012064:	2b2a      	cmp	r3, #42	; 0x2a
 8012066:	d135      	bne.n	80120d4 <_svfiprintf_r+0x188>
 8012068:	9b03      	ldr	r3, [sp, #12]
 801206a:	1d1a      	adds	r2, r3, #4
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	9203      	str	r2, [sp, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	bfb8      	it	lt
 8012074:	f04f 33ff 	movlt.w	r3, #4294967295
 8012078:	3402      	adds	r4, #2
 801207a:	9305      	str	r3, [sp, #20]
 801207c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012148 <_svfiprintf_r+0x1fc>
 8012080:	7821      	ldrb	r1, [r4, #0]
 8012082:	2203      	movs	r2, #3
 8012084:	4650      	mov	r0, sl
 8012086:	f7ee f8c3 	bl	8000210 <memchr>
 801208a:	b140      	cbz	r0, 801209e <_svfiprintf_r+0x152>
 801208c:	2340      	movs	r3, #64	; 0x40
 801208e:	eba0 000a 	sub.w	r0, r0, sl
 8012092:	fa03 f000 	lsl.w	r0, r3, r0
 8012096:	9b04      	ldr	r3, [sp, #16]
 8012098:	4303      	orrs	r3, r0
 801209a:	3401      	adds	r4, #1
 801209c:	9304      	str	r3, [sp, #16]
 801209e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120a2:	4826      	ldr	r0, [pc, #152]	; (801213c <_svfiprintf_r+0x1f0>)
 80120a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120a8:	2206      	movs	r2, #6
 80120aa:	f7ee f8b1 	bl	8000210 <memchr>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d038      	beq.n	8012124 <_svfiprintf_r+0x1d8>
 80120b2:	4b23      	ldr	r3, [pc, #140]	; (8012140 <_svfiprintf_r+0x1f4>)
 80120b4:	bb1b      	cbnz	r3, 80120fe <_svfiprintf_r+0x1b2>
 80120b6:	9b03      	ldr	r3, [sp, #12]
 80120b8:	3307      	adds	r3, #7
 80120ba:	f023 0307 	bic.w	r3, r3, #7
 80120be:	3308      	adds	r3, #8
 80120c0:	9303      	str	r3, [sp, #12]
 80120c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c4:	4433      	add	r3, r6
 80120c6:	9309      	str	r3, [sp, #36]	; 0x24
 80120c8:	e767      	b.n	8011f9a <_svfiprintf_r+0x4e>
 80120ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80120ce:	460c      	mov	r4, r1
 80120d0:	2001      	movs	r0, #1
 80120d2:	e7a5      	b.n	8012020 <_svfiprintf_r+0xd4>
 80120d4:	2300      	movs	r3, #0
 80120d6:	3401      	adds	r4, #1
 80120d8:	9305      	str	r3, [sp, #20]
 80120da:	4619      	mov	r1, r3
 80120dc:	f04f 0c0a 	mov.w	ip, #10
 80120e0:	4620      	mov	r0, r4
 80120e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120e6:	3a30      	subs	r2, #48	; 0x30
 80120e8:	2a09      	cmp	r2, #9
 80120ea:	d903      	bls.n	80120f4 <_svfiprintf_r+0x1a8>
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d0c5      	beq.n	801207c <_svfiprintf_r+0x130>
 80120f0:	9105      	str	r1, [sp, #20]
 80120f2:	e7c3      	b.n	801207c <_svfiprintf_r+0x130>
 80120f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80120f8:	4604      	mov	r4, r0
 80120fa:	2301      	movs	r3, #1
 80120fc:	e7f0      	b.n	80120e0 <_svfiprintf_r+0x194>
 80120fe:	ab03      	add	r3, sp, #12
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	462a      	mov	r2, r5
 8012104:	4b0f      	ldr	r3, [pc, #60]	; (8012144 <_svfiprintf_r+0x1f8>)
 8012106:	a904      	add	r1, sp, #16
 8012108:	4638      	mov	r0, r7
 801210a:	f3af 8000 	nop.w
 801210e:	1c42      	adds	r2, r0, #1
 8012110:	4606      	mov	r6, r0
 8012112:	d1d6      	bne.n	80120c2 <_svfiprintf_r+0x176>
 8012114:	89ab      	ldrh	r3, [r5, #12]
 8012116:	065b      	lsls	r3, r3, #25
 8012118:	f53f af2c 	bmi.w	8011f74 <_svfiprintf_r+0x28>
 801211c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801211e:	b01d      	add	sp, #116	; 0x74
 8012120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012124:	ab03      	add	r3, sp, #12
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	462a      	mov	r2, r5
 801212a:	4b06      	ldr	r3, [pc, #24]	; (8012144 <_svfiprintf_r+0x1f8>)
 801212c:	a904      	add	r1, sp, #16
 801212e:	4638      	mov	r0, r7
 8012130:	f000 f9d4 	bl	80124dc <_printf_i>
 8012134:	e7eb      	b.n	801210e <_svfiprintf_r+0x1c2>
 8012136:	bf00      	nop
 8012138:	08024e2b 	.word	0x08024e2b
 801213c:	08024e35 	.word	0x08024e35
 8012140:	00000000 	.word	0x00000000
 8012144:	08011e95 	.word	0x08011e95
 8012148:	08024e31 	.word	0x08024e31

0801214c <__sfputc_r>:
 801214c:	6893      	ldr	r3, [r2, #8]
 801214e:	3b01      	subs	r3, #1
 8012150:	2b00      	cmp	r3, #0
 8012152:	b410      	push	{r4}
 8012154:	6093      	str	r3, [r2, #8]
 8012156:	da08      	bge.n	801216a <__sfputc_r+0x1e>
 8012158:	6994      	ldr	r4, [r2, #24]
 801215a:	42a3      	cmp	r3, r4
 801215c:	db01      	blt.n	8012162 <__sfputc_r+0x16>
 801215e:	290a      	cmp	r1, #10
 8012160:	d103      	bne.n	801216a <__sfputc_r+0x1e>
 8012162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012166:	f000 bbeb 	b.w	8012940 <__swbuf_r>
 801216a:	6813      	ldr	r3, [r2, #0]
 801216c:	1c58      	adds	r0, r3, #1
 801216e:	6010      	str	r0, [r2, #0]
 8012170:	7019      	strb	r1, [r3, #0]
 8012172:	4608      	mov	r0, r1
 8012174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012178:	4770      	bx	lr

0801217a <__sfputs_r>:
 801217a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801217c:	4606      	mov	r6, r0
 801217e:	460f      	mov	r7, r1
 8012180:	4614      	mov	r4, r2
 8012182:	18d5      	adds	r5, r2, r3
 8012184:	42ac      	cmp	r4, r5
 8012186:	d101      	bne.n	801218c <__sfputs_r+0x12>
 8012188:	2000      	movs	r0, #0
 801218a:	e007      	b.n	801219c <__sfputs_r+0x22>
 801218c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012190:	463a      	mov	r2, r7
 8012192:	4630      	mov	r0, r6
 8012194:	f7ff ffda 	bl	801214c <__sfputc_r>
 8012198:	1c43      	adds	r3, r0, #1
 801219a:	d1f3      	bne.n	8012184 <__sfputs_r+0xa>
 801219c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121a0 <_vfiprintf_r>:
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	460d      	mov	r5, r1
 80121a6:	b09d      	sub	sp, #116	; 0x74
 80121a8:	4614      	mov	r4, r2
 80121aa:	4698      	mov	r8, r3
 80121ac:	4606      	mov	r6, r0
 80121ae:	b118      	cbz	r0, 80121b8 <_vfiprintf_r+0x18>
 80121b0:	6983      	ldr	r3, [r0, #24]
 80121b2:	b90b      	cbnz	r3, 80121b8 <_vfiprintf_r+0x18>
 80121b4:	f000 fdd4 	bl	8012d60 <__sinit>
 80121b8:	4b89      	ldr	r3, [pc, #548]	; (80123e0 <_vfiprintf_r+0x240>)
 80121ba:	429d      	cmp	r5, r3
 80121bc:	d11b      	bne.n	80121f6 <_vfiprintf_r+0x56>
 80121be:	6875      	ldr	r5, [r6, #4]
 80121c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121c2:	07d9      	lsls	r1, r3, #31
 80121c4:	d405      	bmi.n	80121d2 <_vfiprintf_r+0x32>
 80121c6:	89ab      	ldrh	r3, [r5, #12]
 80121c8:	059a      	lsls	r2, r3, #22
 80121ca:	d402      	bmi.n	80121d2 <_vfiprintf_r+0x32>
 80121cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121ce:	f7ff fe51 	bl	8011e74 <__retarget_lock_acquire_recursive>
 80121d2:	89ab      	ldrh	r3, [r5, #12]
 80121d4:	071b      	lsls	r3, r3, #28
 80121d6:	d501      	bpl.n	80121dc <_vfiprintf_r+0x3c>
 80121d8:	692b      	ldr	r3, [r5, #16]
 80121da:	b9eb      	cbnz	r3, 8012218 <_vfiprintf_r+0x78>
 80121dc:	4629      	mov	r1, r5
 80121de:	4630      	mov	r0, r6
 80121e0:	f000 fc12 	bl	8012a08 <__swsetup_r>
 80121e4:	b1c0      	cbz	r0, 8012218 <_vfiprintf_r+0x78>
 80121e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121e8:	07dc      	lsls	r4, r3, #31
 80121ea:	d50e      	bpl.n	801220a <_vfiprintf_r+0x6a>
 80121ec:	f04f 30ff 	mov.w	r0, #4294967295
 80121f0:	b01d      	add	sp, #116	; 0x74
 80121f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f6:	4b7b      	ldr	r3, [pc, #492]	; (80123e4 <_vfiprintf_r+0x244>)
 80121f8:	429d      	cmp	r5, r3
 80121fa:	d101      	bne.n	8012200 <_vfiprintf_r+0x60>
 80121fc:	68b5      	ldr	r5, [r6, #8]
 80121fe:	e7df      	b.n	80121c0 <_vfiprintf_r+0x20>
 8012200:	4b79      	ldr	r3, [pc, #484]	; (80123e8 <_vfiprintf_r+0x248>)
 8012202:	429d      	cmp	r5, r3
 8012204:	bf08      	it	eq
 8012206:	68f5      	ldreq	r5, [r6, #12]
 8012208:	e7da      	b.n	80121c0 <_vfiprintf_r+0x20>
 801220a:	89ab      	ldrh	r3, [r5, #12]
 801220c:	0598      	lsls	r0, r3, #22
 801220e:	d4ed      	bmi.n	80121ec <_vfiprintf_r+0x4c>
 8012210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012212:	f7ff fe31 	bl	8011e78 <__retarget_lock_release_recursive>
 8012216:	e7e9      	b.n	80121ec <_vfiprintf_r+0x4c>
 8012218:	2300      	movs	r3, #0
 801221a:	9309      	str	r3, [sp, #36]	; 0x24
 801221c:	2320      	movs	r3, #32
 801221e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012222:	f8cd 800c 	str.w	r8, [sp, #12]
 8012226:	2330      	movs	r3, #48	; 0x30
 8012228:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80123ec <_vfiprintf_r+0x24c>
 801222c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012230:	f04f 0901 	mov.w	r9, #1
 8012234:	4623      	mov	r3, r4
 8012236:	469a      	mov	sl, r3
 8012238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801223c:	b10a      	cbz	r2, 8012242 <_vfiprintf_r+0xa2>
 801223e:	2a25      	cmp	r2, #37	; 0x25
 8012240:	d1f9      	bne.n	8012236 <_vfiprintf_r+0x96>
 8012242:	ebba 0b04 	subs.w	fp, sl, r4
 8012246:	d00b      	beq.n	8012260 <_vfiprintf_r+0xc0>
 8012248:	465b      	mov	r3, fp
 801224a:	4622      	mov	r2, r4
 801224c:	4629      	mov	r1, r5
 801224e:	4630      	mov	r0, r6
 8012250:	f7ff ff93 	bl	801217a <__sfputs_r>
 8012254:	3001      	adds	r0, #1
 8012256:	f000 80aa 	beq.w	80123ae <_vfiprintf_r+0x20e>
 801225a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801225c:	445a      	add	r2, fp
 801225e:	9209      	str	r2, [sp, #36]	; 0x24
 8012260:	f89a 3000 	ldrb.w	r3, [sl]
 8012264:	2b00      	cmp	r3, #0
 8012266:	f000 80a2 	beq.w	80123ae <_vfiprintf_r+0x20e>
 801226a:	2300      	movs	r3, #0
 801226c:	f04f 32ff 	mov.w	r2, #4294967295
 8012270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012274:	f10a 0a01 	add.w	sl, sl, #1
 8012278:	9304      	str	r3, [sp, #16]
 801227a:	9307      	str	r3, [sp, #28]
 801227c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012280:	931a      	str	r3, [sp, #104]	; 0x68
 8012282:	4654      	mov	r4, sl
 8012284:	2205      	movs	r2, #5
 8012286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801228a:	4858      	ldr	r0, [pc, #352]	; (80123ec <_vfiprintf_r+0x24c>)
 801228c:	f7ed ffc0 	bl	8000210 <memchr>
 8012290:	9a04      	ldr	r2, [sp, #16]
 8012292:	b9d8      	cbnz	r0, 80122cc <_vfiprintf_r+0x12c>
 8012294:	06d1      	lsls	r1, r2, #27
 8012296:	bf44      	itt	mi
 8012298:	2320      	movmi	r3, #32
 801229a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801229e:	0713      	lsls	r3, r2, #28
 80122a0:	bf44      	itt	mi
 80122a2:	232b      	movmi	r3, #43	; 0x2b
 80122a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122a8:	f89a 3000 	ldrb.w	r3, [sl]
 80122ac:	2b2a      	cmp	r3, #42	; 0x2a
 80122ae:	d015      	beq.n	80122dc <_vfiprintf_r+0x13c>
 80122b0:	9a07      	ldr	r2, [sp, #28]
 80122b2:	4654      	mov	r4, sl
 80122b4:	2000      	movs	r0, #0
 80122b6:	f04f 0c0a 	mov.w	ip, #10
 80122ba:	4621      	mov	r1, r4
 80122bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122c0:	3b30      	subs	r3, #48	; 0x30
 80122c2:	2b09      	cmp	r3, #9
 80122c4:	d94e      	bls.n	8012364 <_vfiprintf_r+0x1c4>
 80122c6:	b1b0      	cbz	r0, 80122f6 <_vfiprintf_r+0x156>
 80122c8:	9207      	str	r2, [sp, #28]
 80122ca:	e014      	b.n	80122f6 <_vfiprintf_r+0x156>
 80122cc:	eba0 0308 	sub.w	r3, r0, r8
 80122d0:	fa09 f303 	lsl.w	r3, r9, r3
 80122d4:	4313      	orrs	r3, r2
 80122d6:	9304      	str	r3, [sp, #16]
 80122d8:	46a2      	mov	sl, r4
 80122da:	e7d2      	b.n	8012282 <_vfiprintf_r+0xe2>
 80122dc:	9b03      	ldr	r3, [sp, #12]
 80122de:	1d19      	adds	r1, r3, #4
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	9103      	str	r1, [sp, #12]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	bfbb      	ittet	lt
 80122e8:	425b      	neglt	r3, r3
 80122ea:	f042 0202 	orrlt.w	r2, r2, #2
 80122ee:	9307      	strge	r3, [sp, #28]
 80122f0:	9307      	strlt	r3, [sp, #28]
 80122f2:	bfb8      	it	lt
 80122f4:	9204      	strlt	r2, [sp, #16]
 80122f6:	7823      	ldrb	r3, [r4, #0]
 80122f8:	2b2e      	cmp	r3, #46	; 0x2e
 80122fa:	d10c      	bne.n	8012316 <_vfiprintf_r+0x176>
 80122fc:	7863      	ldrb	r3, [r4, #1]
 80122fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012300:	d135      	bne.n	801236e <_vfiprintf_r+0x1ce>
 8012302:	9b03      	ldr	r3, [sp, #12]
 8012304:	1d1a      	adds	r2, r3, #4
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	9203      	str	r2, [sp, #12]
 801230a:	2b00      	cmp	r3, #0
 801230c:	bfb8      	it	lt
 801230e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012312:	3402      	adds	r4, #2
 8012314:	9305      	str	r3, [sp, #20]
 8012316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80123fc <_vfiprintf_r+0x25c>
 801231a:	7821      	ldrb	r1, [r4, #0]
 801231c:	2203      	movs	r2, #3
 801231e:	4650      	mov	r0, sl
 8012320:	f7ed ff76 	bl	8000210 <memchr>
 8012324:	b140      	cbz	r0, 8012338 <_vfiprintf_r+0x198>
 8012326:	2340      	movs	r3, #64	; 0x40
 8012328:	eba0 000a 	sub.w	r0, r0, sl
 801232c:	fa03 f000 	lsl.w	r0, r3, r0
 8012330:	9b04      	ldr	r3, [sp, #16]
 8012332:	4303      	orrs	r3, r0
 8012334:	3401      	adds	r4, #1
 8012336:	9304      	str	r3, [sp, #16]
 8012338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801233c:	482c      	ldr	r0, [pc, #176]	; (80123f0 <_vfiprintf_r+0x250>)
 801233e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012342:	2206      	movs	r2, #6
 8012344:	f7ed ff64 	bl	8000210 <memchr>
 8012348:	2800      	cmp	r0, #0
 801234a:	d03f      	beq.n	80123cc <_vfiprintf_r+0x22c>
 801234c:	4b29      	ldr	r3, [pc, #164]	; (80123f4 <_vfiprintf_r+0x254>)
 801234e:	bb1b      	cbnz	r3, 8012398 <_vfiprintf_r+0x1f8>
 8012350:	9b03      	ldr	r3, [sp, #12]
 8012352:	3307      	adds	r3, #7
 8012354:	f023 0307 	bic.w	r3, r3, #7
 8012358:	3308      	adds	r3, #8
 801235a:	9303      	str	r3, [sp, #12]
 801235c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801235e:	443b      	add	r3, r7
 8012360:	9309      	str	r3, [sp, #36]	; 0x24
 8012362:	e767      	b.n	8012234 <_vfiprintf_r+0x94>
 8012364:	fb0c 3202 	mla	r2, ip, r2, r3
 8012368:	460c      	mov	r4, r1
 801236a:	2001      	movs	r0, #1
 801236c:	e7a5      	b.n	80122ba <_vfiprintf_r+0x11a>
 801236e:	2300      	movs	r3, #0
 8012370:	3401      	adds	r4, #1
 8012372:	9305      	str	r3, [sp, #20]
 8012374:	4619      	mov	r1, r3
 8012376:	f04f 0c0a 	mov.w	ip, #10
 801237a:	4620      	mov	r0, r4
 801237c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012380:	3a30      	subs	r2, #48	; 0x30
 8012382:	2a09      	cmp	r2, #9
 8012384:	d903      	bls.n	801238e <_vfiprintf_r+0x1ee>
 8012386:	2b00      	cmp	r3, #0
 8012388:	d0c5      	beq.n	8012316 <_vfiprintf_r+0x176>
 801238a:	9105      	str	r1, [sp, #20]
 801238c:	e7c3      	b.n	8012316 <_vfiprintf_r+0x176>
 801238e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012392:	4604      	mov	r4, r0
 8012394:	2301      	movs	r3, #1
 8012396:	e7f0      	b.n	801237a <_vfiprintf_r+0x1da>
 8012398:	ab03      	add	r3, sp, #12
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	462a      	mov	r2, r5
 801239e:	4b16      	ldr	r3, [pc, #88]	; (80123f8 <_vfiprintf_r+0x258>)
 80123a0:	a904      	add	r1, sp, #16
 80123a2:	4630      	mov	r0, r6
 80123a4:	f3af 8000 	nop.w
 80123a8:	4607      	mov	r7, r0
 80123aa:	1c78      	adds	r0, r7, #1
 80123ac:	d1d6      	bne.n	801235c <_vfiprintf_r+0x1bc>
 80123ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123b0:	07d9      	lsls	r1, r3, #31
 80123b2:	d405      	bmi.n	80123c0 <_vfiprintf_r+0x220>
 80123b4:	89ab      	ldrh	r3, [r5, #12]
 80123b6:	059a      	lsls	r2, r3, #22
 80123b8:	d402      	bmi.n	80123c0 <_vfiprintf_r+0x220>
 80123ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123bc:	f7ff fd5c 	bl	8011e78 <__retarget_lock_release_recursive>
 80123c0:	89ab      	ldrh	r3, [r5, #12]
 80123c2:	065b      	lsls	r3, r3, #25
 80123c4:	f53f af12 	bmi.w	80121ec <_vfiprintf_r+0x4c>
 80123c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123ca:	e711      	b.n	80121f0 <_vfiprintf_r+0x50>
 80123cc:	ab03      	add	r3, sp, #12
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	462a      	mov	r2, r5
 80123d2:	4b09      	ldr	r3, [pc, #36]	; (80123f8 <_vfiprintf_r+0x258>)
 80123d4:	a904      	add	r1, sp, #16
 80123d6:	4630      	mov	r0, r6
 80123d8:	f000 f880 	bl	80124dc <_printf_i>
 80123dc:	e7e4      	b.n	80123a8 <_vfiprintf_r+0x208>
 80123de:	bf00      	nop
 80123e0:	08024f80 	.word	0x08024f80
 80123e4:	08024fa0 	.word	0x08024fa0
 80123e8:	08024f60 	.word	0x08024f60
 80123ec:	08024e2b 	.word	0x08024e2b
 80123f0:	08024e35 	.word	0x08024e35
 80123f4:	00000000 	.word	0x00000000
 80123f8:	0801217b 	.word	0x0801217b
 80123fc:	08024e31 	.word	0x08024e31

08012400 <_printf_common>:
 8012400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012404:	4616      	mov	r6, r2
 8012406:	4699      	mov	r9, r3
 8012408:	688a      	ldr	r2, [r1, #8]
 801240a:	690b      	ldr	r3, [r1, #16]
 801240c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012410:	4293      	cmp	r3, r2
 8012412:	bfb8      	it	lt
 8012414:	4613      	movlt	r3, r2
 8012416:	6033      	str	r3, [r6, #0]
 8012418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801241c:	4607      	mov	r7, r0
 801241e:	460c      	mov	r4, r1
 8012420:	b10a      	cbz	r2, 8012426 <_printf_common+0x26>
 8012422:	3301      	adds	r3, #1
 8012424:	6033      	str	r3, [r6, #0]
 8012426:	6823      	ldr	r3, [r4, #0]
 8012428:	0699      	lsls	r1, r3, #26
 801242a:	bf42      	ittt	mi
 801242c:	6833      	ldrmi	r3, [r6, #0]
 801242e:	3302      	addmi	r3, #2
 8012430:	6033      	strmi	r3, [r6, #0]
 8012432:	6825      	ldr	r5, [r4, #0]
 8012434:	f015 0506 	ands.w	r5, r5, #6
 8012438:	d106      	bne.n	8012448 <_printf_common+0x48>
 801243a:	f104 0a19 	add.w	sl, r4, #25
 801243e:	68e3      	ldr	r3, [r4, #12]
 8012440:	6832      	ldr	r2, [r6, #0]
 8012442:	1a9b      	subs	r3, r3, r2
 8012444:	42ab      	cmp	r3, r5
 8012446:	dc26      	bgt.n	8012496 <_printf_common+0x96>
 8012448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801244c:	1e13      	subs	r3, r2, #0
 801244e:	6822      	ldr	r2, [r4, #0]
 8012450:	bf18      	it	ne
 8012452:	2301      	movne	r3, #1
 8012454:	0692      	lsls	r2, r2, #26
 8012456:	d42b      	bmi.n	80124b0 <_printf_common+0xb0>
 8012458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801245c:	4649      	mov	r1, r9
 801245e:	4638      	mov	r0, r7
 8012460:	47c0      	blx	r8
 8012462:	3001      	adds	r0, #1
 8012464:	d01e      	beq.n	80124a4 <_printf_common+0xa4>
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	68e5      	ldr	r5, [r4, #12]
 801246a:	6832      	ldr	r2, [r6, #0]
 801246c:	f003 0306 	and.w	r3, r3, #6
 8012470:	2b04      	cmp	r3, #4
 8012472:	bf08      	it	eq
 8012474:	1aad      	subeq	r5, r5, r2
 8012476:	68a3      	ldr	r3, [r4, #8]
 8012478:	6922      	ldr	r2, [r4, #16]
 801247a:	bf0c      	ite	eq
 801247c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012480:	2500      	movne	r5, #0
 8012482:	4293      	cmp	r3, r2
 8012484:	bfc4      	itt	gt
 8012486:	1a9b      	subgt	r3, r3, r2
 8012488:	18ed      	addgt	r5, r5, r3
 801248a:	2600      	movs	r6, #0
 801248c:	341a      	adds	r4, #26
 801248e:	42b5      	cmp	r5, r6
 8012490:	d11a      	bne.n	80124c8 <_printf_common+0xc8>
 8012492:	2000      	movs	r0, #0
 8012494:	e008      	b.n	80124a8 <_printf_common+0xa8>
 8012496:	2301      	movs	r3, #1
 8012498:	4652      	mov	r2, sl
 801249a:	4649      	mov	r1, r9
 801249c:	4638      	mov	r0, r7
 801249e:	47c0      	blx	r8
 80124a0:	3001      	adds	r0, #1
 80124a2:	d103      	bne.n	80124ac <_printf_common+0xac>
 80124a4:	f04f 30ff 	mov.w	r0, #4294967295
 80124a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ac:	3501      	adds	r5, #1
 80124ae:	e7c6      	b.n	801243e <_printf_common+0x3e>
 80124b0:	18e1      	adds	r1, r4, r3
 80124b2:	1c5a      	adds	r2, r3, #1
 80124b4:	2030      	movs	r0, #48	; 0x30
 80124b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80124ba:	4422      	add	r2, r4
 80124bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80124c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80124c4:	3302      	adds	r3, #2
 80124c6:	e7c7      	b.n	8012458 <_printf_common+0x58>
 80124c8:	2301      	movs	r3, #1
 80124ca:	4622      	mov	r2, r4
 80124cc:	4649      	mov	r1, r9
 80124ce:	4638      	mov	r0, r7
 80124d0:	47c0      	blx	r8
 80124d2:	3001      	adds	r0, #1
 80124d4:	d0e6      	beq.n	80124a4 <_printf_common+0xa4>
 80124d6:	3601      	adds	r6, #1
 80124d8:	e7d9      	b.n	801248e <_printf_common+0x8e>
	...

080124dc <_printf_i>:
 80124dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124e0:	7e0f      	ldrb	r7, [r1, #24]
 80124e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80124e4:	2f78      	cmp	r7, #120	; 0x78
 80124e6:	4691      	mov	r9, r2
 80124e8:	4680      	mov	r8, r0
 80124ea:	460c      	mov	r4, r1
 80124ec:	469a      	mov	sl, r3
 80124ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80124f2:	d807      	bhi.n	8012504 <_printf_i+0x28>
 80124f4:	2f62      	cmp	r7, #98	; 0x62
 80124f6:	d80a      	bhi.n	801250e <_printf_i+0x32>
 80124f8:	2f00      	cmp	r7, #0
 80124fa:	f000 80d8 	beq.w	80126ae <_printf_i+0x1d2>
 80124fe:	2f58      	cmp	r7, #88	; 0x58
 8012500:	f000 80a3 	beq.w	801264a <_printf_i+0x16e>
 8012504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801250c:	e03a      	b.n	8012584 <_printf_i+0xa8>
 801250e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012512:	2b15      	cmp	r3, #21
 8012514:	d8f6      	bhi.n	8012504 <_printf_i+0x28>
 8012516:	a101      	add	r1, pc, #4	; (adr r1, 801251c <_printf_i+0x40>)
 8012518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801251c:	08012575 	.word	0x08012575
 8012520:	08012589 	.word	0x08012589
 8012524:	08012505 	.word	0x08012505
 8012528:	08012505 	.word	0x08012505
 801252c:	08012505 	.word	0x08012505
 8012530:	08012505 	.word	0x08012505
 8012534:	08012589 	.word	0x08012589
 8012538:	08012505 	.word	0x08012505
 801253c:	08012505 	.word	0x08012505
 8012540:	08012505 	.word	0x08012505
 8012544:	08012505 	.word	0x08012505
 8012548:	08012695 	.word	0x08012695
 801254c:	080125b9 	.word	0x080125b9
 8012550:	08012677 	.word	0x08012677
 8012554:	08012505 	.word	0x08012505
 8012558:	08012505 	.word	0x08012505
 801255c:	080126b7 	.word	0x080126b7
 8012560:	08012505 	.word	0x08012505
 8012564:	080125b9 	.word	0x080125b9
 8012568:	08012505 	.word	0x08012505
 801256c:	08012505 	.word	0x08012505
 8012570:	0801267f 	.word	0x0801267f
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	1d1a      	adds	r2, r3, #4
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	602a      	str	r2, [r5, #0]
 801257c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012584:	2301      	movs	r3, #1
 8012586:	e0a3      	b.n	80126d0 <_printf_i+0x1f4>
 8012588:	6820      	ldr	r0, [r4, #0]
 801258a:	6829      	ldr	r1, [r5, #0]
 801258c:	0606      	lsls	r6, r0, #24
 801258e:	f101 0304 	add.w	r3, r1, #4
 8012592:	d50a      	bpl.n	80125aa <_printf_i+0xce>
 8012594:	680e      	ldr	r6, [r1, #0]
 8012596:	602b      	str	r3, [r5, #0]
 8012598:	2e00      	cmp	r6, #0
 801259a:	da03      	bge.n	80125a4 <_printf_i+0xc8>
 801259c:	232d      	movs	r3, #45	; 0x2d
 801259e:	4276      	negs	r6, r6
 80125a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125a4:	485e      	ldr	r0, [pc, #376]	; (8012720 <_printf_i+0x244>)
 80125a6:	230a      	movs	r3, #10
 80125a8:	e019      	b.n	80125de <_printf_i+0x102>
 80125aa:	680e      	ldr	r6, [r1, #0]
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80125b2:	bf18      	it	ne
 80125b4:	b236      	sxthne	r6, r6
 80125b6:	e7ef      	b.n	8012598 <_printf_i+0xbc>
 80125b8:	682b      	ldr	r3, [r5, #0]
 80125ba:	6820      	ldr	r0, [r4, #0]
 80125bc:	1d19      	adds	r1, r3, #4
 80125be:	6029      	str	r1, [r5, #0]
 80125c0:	0601      	lsls	r1, r0, #24
 80125c2:	d501      	bpl.n	80125c8 <_printf_i+0xec>
 80125c4:	681e      	ldr	r6, [r3, #0]
 80125c6:	e002      	b.n	80125ce <_printf_i+0xf2>
 80125c8:	0646      	lsls	r6, r0, #25
 80125ca:	d5fb      	bpl.n	80125c4 <_printf_i+0xe8>
 80125cc:	881e      	ldrh	r6, [r3, #0]
 80125ce:	4854      	ldr	r0, [pc, #336]	; (8012720 <_printf_i+0x244>)
 80125d0:	2f6f      	cmp	r7, #111	; 0x6f
 80125d2:	bf0c      	ite	eq
 80125d4:	2308      	moveq	r3, #8
 80125d6:	230a      	movne	r3, #10
 80125d8:	2100      	movs	r1, #0
 80125da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80125de:	6865      	ldr	r5, [r4, #4]
 80125e0:	60a5      	str	r5, [r4, #8]
 80125e2:	2d00      	cmp	r5, #0
 80125e4:	bfa2      	ittt	ge
 80125e6:	6821      	ldrge	r1, [r4, #0]
 80125e8:	f021 0104 	bicge.w	r1, r1, #4
 80125ec:	6021      	strge	r1, [r4, #0]
 80125ee:	b90e      	cbnz	r6, 80125f4 <_printf_i+0x118>
 80125f0:	2d00      	cmp	r5, #0
 80125f2:	d04d      	beq.n	8012690 <_printf_i+0x1b4>
 80125f4:	4615      	mov	r5, r2
 80125f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80125fa:	fb03 6711 	mls	r7, r3, r1, r6
 80125fe:	5dc7      	ldrb	r7, [r0, r7]
 8012600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012604:	4637      	mov	r7, r6
 8012606:	42bb      	cmp	r3, r7
 8012608:	460e      	mov	r6, r1
 801260a:	d9f4      	bls.n	80125f6 <_printf_i+0x11a>
 801260c:	2b08      	cmp	r3, #8
 801260e:	d10b      	bne.n	8012628 <_printf_i+0x14c>
 8012610:	6823      	ldr	r3, [r4, #0]
 8012612:	07de      	lsls	r6, r3, #31
 8012614:	d508      	bpl.n	8012628 <_printf_i+0x14c>
 8012616:	6923      	ldr	r3, [r4, #16]
 8012618:	6861      	ldr	r1, [r4, #4]
 801261a:	4299      	cmp	r1, r3
 801261c:	bfde      	ittt	le
 801261e:	2330      	movle	r3, #48	; 0x30
 8012620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012624:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012628:	1b52      	subs	r2, r2, r5
 801262a:	6122      	str	r2, [r4, #16]
 801262c:	f8cd a000 	str.w	sl, [sp]
 8012630:	464b      	mov	r3, r9
 8012632:	aa03      	add	r2, sp, #12
 8012634:	4621      	mov	r1, r4
 8012636:	4640      	mov	r0, r8
 8012638:	f7ff fee2 	bl	8012400 <_printf_common>
 801263c:	3001      	adds	r0, #1
 801263e:	d14c      	bne.n	80126da <_printf_i+0x1fe>
 8012640:	f04f 30ff 	mov.w	r0, #4294967295
 8012644:	b004      	add	sp, #16
 8012646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801264a:	4835      	ldr	r0, [pc, #212]	; (8012720 <_printf_i+0x244>)
 801264c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012650:	6829      	ldr	r1, [r5, #0]
 8012652:	6823      	ldr	r3, [r4, #0]
 8012654:	f851 6b04 	ldr.w	r6, [r1], #4
 8012658:	6029      	str	r1, [r5, #0]
 801265a:	061d      	lsls	r5, r3, #24
 801265c:	d514      	bpl.n	8012688 <_printf_i+0x1ac>
 801265e:	07df      	lsls	r7, r3, #31
 8012660:	bf44      	itt	mi
 8012662:	f043 0320 	orrmi.w	r3, r3, #32
 8012666:	6023      	strmi	r3, [r4, #0]
 8012668:	b91e      	cbnz	r6, 8012672 <_printf_i+0x196>
 801266a:	6823      	ldr	r3, [r4, #0]
 801266c:	f023 0320 	bic.w	r3, r3, #32
 8012670:	6023      	str	r3, [r4, #0]
 8012672:	2310      	movs	r3, #16
 8012674:	e7b0      	b.n	80125d8 <_printf_i+0xfc>
 8012676:	6823      	ldr	r3, [r4, #0]
 8012678:	f043 0320 	orr.w	r3, r3, #32
 801267c:	6023      	str	r3, [r4, #0]
 801267e:	2378      	movs	r3, #120	; 0x78
 8012680:	4828      	ldr	r0, [pc, #160]	; (8012724 <_printf_i+0x248>)
 8012682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012686:	e7e3      	b.n	8012650 <_printf_i+0x174>
 8012688:	0659      	lsls	r1, r3, #25
 801268a:	bf48      	it	mi
 801268c:	b2b6      	uxthmi	r6, r6
 801268e:	e7e6      	b.n	801265e <_printf_i+0x182>
 8012690:	4615      	mov	r5, r2
 8012692:	e7bb      	b.n	801260c <_printf_i+0x130>
 8012694:	682b      	ldr	r3, [r5, #0]
 8012696:	6826      	ldr	r6, [r4, #0]
 8012698:	6961      	ldr	r1, [r4, #20]
 801269a:	1d18      	adds	r0, r3, #4
 801269c:	6028      	str	r0, [r5, #0]
 801269e:	0635      	lsls	r5, r6, #24
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	d501      	bpl.n	80126a8 <_printf_i+0x1cc>
 80126a4:	6019      	str	r1, [r3, #0]
 80126a6:	e002      	b.n	80126ae <_printf_i+0x1d2>
 80126a8:	0670      	lsls	r0, r6, #25
 80126aa:	d5fb      	bpl.n	80126a4 <_printf_i+0x1c8>
 80126ac:	8019      	strh	r1, [r3, #0]
 80126ae:	2300      	movs	r3, #0
 80126b0:	6123      	str	r3, [r4, #16]
 80126b2:	4615      	mov	r5, r2
 80126b4:	e7ba      	b.n	801262c <_printf_i+0x150>
 80126b6:	682b      	ldr	r3, [r5, #0]
 80126b8:	1d1a      	adds	r2, r3, #4
 80126ba:	602a      	str	r2, [r5, #0]
 80126bc:	681d      	ldr	r5, [r3, #0]
 80126be:	6862      	ldr	r2, [r4, #4]
 80126c0:	2100      	movs	r1, #0
 80126c2:	4628      	mov	r0, r5
 80126c4:	f7ed fda4 	bl	8000210 <memchr>
 80126c8:	b108      	cbz	r0, 80126ce <_printf_i+0x1f2>
 80126ca:	1b40      	subs	r0, r0, r5
 80126cc:	6060      	str	r0, [r4, #4]
 80126ce:	6863      	ldr	r3, [r4, #4]
 80126d0:	6123      	str	r3, [r4, #16]
 80126d2:	2300      	movs	r3, #0
 80126d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126d8:	e7a8      	b.n	801262c <_printf_i+0x150>
 80126da:	6923      	ldr	r3, [r4, #16]
 80126dc:	462a      	mov	r2, r5
 80126de:	4649      	mov	r1, r9
 80126e0:	4640      	mov	r0, r8
 80126e2:	47d0      	blx	sl
 80126e4:	3001      	adds	r0, #1
 80126e6:	d0ab      	beq.n	8012640 <_printf_i+0x164>
 80126e8:	6823      	ldr	r3, [r4, #0]
 80126ea:	079b      	lsls	r3, r3, #30
 80126ec:	d413      	bmi.n	8012716 <_printf_i+0x23a>
 80126ee:	68e0      	ldr	r0, [r4, #12]
 80126f0:	9b03      	ldr	r3, [sp, #12]
 80126f2:	4298      	cmp	r0, r3
 80126f4:	bfb8      	it	lt
 80126f6:	4618      	movlt	r0, r3
 80126f8:	e7a4      	b.n	8012644 <_printf_i+0x168>
 80126fa:	2301      	movs	r3, #1
 80126fc:	4632      	mov	r2, r6
 80126fe:	4649      	mov	r1, r9
 8012700:	4640      	mov	r0, r8
 8012702:	47d0      	blx	sl
 8012704:	3001      	adds	r0, #1
 8012706:	d09b      	beq.n	8012640 <_printf_i+0x164>
 8012708:	3501      	adds	r5, #1
 801270a:	68e3      	ldr	r3, [r4, #12]
 801270c:	9903      	ldr	r1, [sp, #12]
 801270e:	1a5b      	subs	r3, r3, r1
 8012710:	42ab      	cmp	r3, r5
 8012712:	dcf2      	bgt.n	80126fa <_printf_i+0x21e>
 8012714:	e7eb      	b.n	80126ee <_printf_i+0x212>
 8012716:	2500      	movs	r5, #0
 8012718:	f104 0619 	add.w	r6, r4, #25
 801271c:	e7f5      	b.n	801270a <_printf_i+0x22e>
 801271e:	bf00      	nop
 8012720:	08024e3c 	.word	0x08024e3c
 8012724:	08024e4d 	.word	0x08024e4d

08012728 <siscanf>:
 8012728:	b40e      	push	{r1, r2, r3}
 801272a:	b510      	push	{r4, lr}
 801272c:	b09f      	sub	sp, #124	; 0x7c
 801272e:	ac21      	add	r4, sp, #132	; 0x84
 8012730:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012734:	f854 2b04 	ldr.w	r2, [r4], #4
 8012738:	9201      	str	r2, [sp, #4]
 801273a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801273e:	9004      	str	r0, [sp, #16]
 8012740:	9008      	str	r0, [sp, #32]
 8012742:	f7ed fd4d 	bl	80001e0 <strlen>
 8012746:	4b0c      	ldr	r3, [pc, #48]	; (8012778 <siscanf+0x50>)
 8012748:	9005      	str	r0, [sp, #20]
 801274a:	9009      	str	r0, [sp, #36]	; 0x24
 801274c:	930d      	str	r3, [sp, #52]	; 0x34
 801274e:	480b      	ldr	r0, [pc, #44]	; (801277c <siscanf+0x54>)
 8012750:	9a01      	ldr	r2, [sp, #4]
 8012752:	6800      	ldr	r0, [r0, #0]
 8012754:	9403      	str	r4, [sp, #12]
 8012756:	2300      	movs	r3, #0
 8012758:	9311      	str	r3, [sp, #68]	; 0x44
 801275a:	9316      	str	r3, [sp, #88]	; 0x58
 801275c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012760:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012764:	a904      	add	r1, sp, #16
 8012766:	4623      	mov	r3, r4
 8012768:	f000 fcb4 	bl	80130d4 <__ssvfiscanf_r>
 801276c:	b01f      	add	sp, #124	; 0x7c
 801276e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012772:	b003      	add	sp, #12
 8012774:	4770      	bx	lr
 8012776:	bf00      	nop
 8012778:	080127a3 	.word	0x080127a3
 801277c:	2000153c 	.word	0x2000153c

08012780 <__sread>:
 8012780:	b510      	push	{r4, lr}
 8012782:	460c      	mov	r4, r1
 8012784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012788:	f000 ff6e 	bl	8013668 <_read_r>
 801278c:	2800      	cmp	r0, #0
 801278e:	bfab      	itete	ge
 8012790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012792:	89a3      	ldrhlt	r3, [r4, #12]
 8012794:	181b      	addge	r3, r3, r0
 8012796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801279a:	bfac      	ite	ge
 801279c:	6563      	strge	r3, [r4, #84]	; 0x54
 801279e:	81a3      	strhlt	r3, [r4, #12]
 80127a0:	bd10      	pop	{r4, pc}

080127a2 <__seofread>:
 80127a2:	2000      	movs	r0, #0
 80127a4:	4770      	bx	lr

080127a6 <__swrite>:
 80127a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127aa:	461f      	mov	r7, r3
 80127ac:	898b      	ldrh	r3, [r1, #12]
 80127ae:	05db      	lsls	r3, r3, #23
 80127b0:	4605      	mov	r5, r0
 80127b2:	460c      	mov	r4, r1
 80127b4:	4616      	mov	r6, r2
 80127b6:	d505      	bpl.n	80127c4 <__swrite+0x1e>
 80127b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127bc:	2302      	movs	r3, #2
 80127be:	2200      	movs	r2, #0
 80127c0:	f000 fb6c 	bl	8012e9c <_lseek_r>
 80127c4:	89a3      	ldrh	r3, [r4, #12]
 80127c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127ce:	81a3      	strh	r3, [r4, #12]
 80127d0:	4632      	mov	r2, r6
 80127d2:	463b      	mov	r3, r7
 80127d4:	4628      	mov	r0, r5
 80127d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127da:	f000 b903 	b.w	80129e4 <_write_r>

080127de <__sseek>:
 80127de:	b510      	push	{r4, lr}
 80127e0:	460c      	mov	r4, r1
 80127e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127e6:	f000 fb59 	bl	8012e9c <_lseek_r>
 80127ea:	1c43      	adds	r3, r0, #1
 80127ec:	89a3      	ldrh	r3, [r4, #12]
 80127ee:	bf15      	itete	ne
 80127f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80127f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80127f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80127fa:	81a3      	strheq	r3, [r4, #12]
 80127fc:	bf18      	it	ne
 80127fe:	81a3      	strhne	r3, [r4, #12]
 8012800:	bd10      	pop	{r4, pc}

08012802 <__sclose>:
 8012802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012806:	f000 b975 	b.w	8012af4 <_close_r>

0801280a <strcpy>:
 801280a:	4603      	mov	r3, r0
 801280c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012810:	f803 2b01 	strb.w	r2, [r3], #1
 8012814:	2a00      	cmp	r2, #0
 8012816:	d1f9      	bne.n	801280c <strcpy+0x2>
 8012818:	4770      	bx	lr

0801281a <strncmp>:
 801281a:	b510      	push	{r4, lr}
 801281c:	b17a      	cbz	r2, 801283e <strncmp+0x24>
 801281e:	4603      	mov	r3, r0
 8012820:	3901      	subs	r1, #1
 8012822:	1884      	adds	r4, r0, r2
 8012824:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012828:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801282c:	4290      	cmp	r0, r2
 801282e:	d101      	bne.n	8012834 <strncmp+0x1a>
 8012830:	42a3      	cmp	r3, r4
 8012832:	d101      	bne.n	8012838 <strncmp+0x1e>
 8012834:	1a80      	subs	r0, r0, r2
 8012836:	bd10      	pop	{r4, pc}
 8012838:	2800      	cmp	r0, #0
 801283a:	d1f3      	bne.n	8012824 <strncmp+0xa>
 801283c:	e7fa      	b.n	8012834 <strncmp+0x1a>
 801283e:	4610      	mov	r0, r2
 8012840:	e7f9      	b.n	8012836 <strncmp+0x1c>
	...

08012844 <_strtoul_l.constprop.0>:
 8012844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012848:	4f36      	ldr	r7, [pc, #216]	; (8012924 <_strtoul_l.constprop.0+0xe0>)
 801284a:	4686      	mov	lr, r0
 801284c:	460d      	mov	r5, r1
 801284e:	4628      	mov	r0, r5
 8012850:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012854:	5de6      	ldrb	r6, [r4, r7]
 8012856:	f016 0608 	ands.w	r6, r6, #8
 801285a:	d1f8      	bne.n	801284e <_strtoul_l.constprop.0+0xa>
 801285c:	2c2d      	cmp	r4, #45	; 0x2d
 801285e:	d12f      	bne.n	80128c0 <_strtoul_l.constprop.0+0x7c>
 8012860:	782c      	ldrb	r4, [r5, #0]
 8012862:	2601      	movs	r6, #1
 8012864:	1c85      	adds	r5, r0, #2
 8012866:	2b00      	cmp	r3, #0
 8012868:	d057      	beq.n	801291a <_strtoul_l.constprop.0+0xd6>
 801286a:	2b10      	cmp	r3, #16
 801286c:	d109      	bne.n	8012882 <_strtoul_l.constprop.0+0x3e>
 801286e:	2c30      	cmp	r4, #48	; 0x30
 8012870:	d107      	bne.n	8012882 <_strtoul_l.constprop.0+0x3e>
 8012872:	7828      	ldrb	r0, [r5, #0]
 8012874:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012878:	2858      	cmp	r0, #88	; 0x58
 801287a:	d149      	bne.n	8012910 <_strtoul_l.constprop.0+0xcc>
 801287c:	786c      	ldrb	r4, [r5, #1]
 801287e:	2310      	movs	r3, #16
 8012880:	3502      	adds	r5, #2
 8012882:	f04f 38ff 	mov.w	r8, #4294967295
 8012886:	2700      	movs	r7, #0
 8012888:	fbb8 f8f3 	udiv	r8, r8, r3
 801288c:	fb03 f908 	mul.w	r9, r3, r8
 8012890:	ea6f 0909 	mvn.w	r9, r9
 8012894:	4638      	mov	r0, r7
 8012896:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801289a:	f1bc 0f09 	cmp.w	ip, #9
 801289e:	d814      	bhi.n	80128ca <_strtoul_l.constprop.0+0x86>
 80128a0:	4664      	mov	r4, ip
 80128a2:	42a3      	cmp	r3, r4
 80128a4:	dd22      	ble.n	80128ec <_strtoul_l.constprop.0+0xa8>
 80128a6:	2f00      	cmp	r7, #0
 80128a8:	db1d      	blt.n	80128e6 <_strtoul_l.constprop.0+0xa2>
 80128aa:	4580      	cmp	r8, r0
 80128ac:	d31b      	bcc.n	80128e6 <_strtoul_l.constprop.0+0xa2>
 80128ae:	d101      	bne.n	80128b4 <_strtoul_l.constprop.0+0x70>
 80128b0:	45a1      	cmp	r9, r4
 80128b2:	db18      	blt.n	80128e6 <_strtoul_l.constprop.0+0xa2>
 80128b4:	fb00 4003 	mla	r0, r0, r3, r4
 80128b8:	2701      	movs	r7, #1
 80128ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128be:	e7ea      	b.n	8012896 <_strtoul_l.constprop.0+0x52>
 80128c0:	2c2b      	cmp	r4, #43	; 0x2b
 80128c2:	bf04      	itt	eq
 80128c4:	782c      	ldrbeq	r4, [r5, #0]
 80128c6:	1c85      	addeq	r5, r0, #2
 80128c8:	e7cd      	b.n	8012866 <_strtoul_l.constprop.0+0x22>
 80128ca:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80128ce:	f1bc 0f19 	cmp.w	ip, #25
 80128d2:	d801      	bhi.n	80128d8 <_strtoul_l.constprop.0+0x94>
 80128d4:	3c37      	subs	r4, #55	; 0x37
 80128d6:	e7e4      	b.n	80128a2 <_strtoul_l.constprop.0+0x5e>
 80128d8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80128dc:	f1bc 0f19 	cmp.w	ip, #25
 80128e0:	d804      	bhi.n	80128ec <_strtoul_l.constprop.0+0xa8>
 80128e2:	3c57      	subs	r4, #87	; 0x57
 80128e4:	e7dd      	b.n	80128a2 <_strtoul_l.constprop.0+0x5e>
 80128e6:	f04f 37ff 	mov.w	r7, #4294967295
 80128ea:	e7e6      	b.n	80128ba <_strtoul_l.constprop.0+0x76>
 80128ec:	2f00      	cmp	r7, #0
 80128ee:	da07      	bge.n	8012900 <_strtoul_l.constprop.0+0xbc>
 80128f0:	2322      	movs	r3, #34	; 0x22
 80128f2:	f8ce 3000 	str.w	r3, [lr]
 80128f6:	f04f 30ff 	mov.w	r0, #4294967295
 80128fa:	b932      	cbnz	r2, 801290a <_strtoul_l.constprop.0+0xc6>
 80128fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012900:	b106      	cbz	r6, 8012904 <_strtoul_l.constprop.0+0xc0>
 8012902:	4240      	negs	r0, r0
 8012904:	2a00      	cmp	r2, #0
 8012906:	d0f9      	beq.n	80128fc <_strtoul_l.constprop.0+0xb8>
 8012908:	b107      	cbz	r7, 801290c <_strtoul_l.constprop.0+0xc8>
 801290a:	1e69      	subs	r1, r5, #1
 801290c:	6011      	str	r1, [r2, #0]
 801290e:	e7f5      	b.n	80128fc <_strtoul_l.constprop.0+0xb8>
 8012910:	2430      	movs	r4, #48	; 0x30
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1b5      	bne.n	8012882 <_strtoul_l.constprop.0+0x3e>
 8012916:	2308      	movs	r3, #8
 8012918:	e7b3      	b.n	8012882 <_strtoul_l.constprop.0+0x3e>
 801291a:	2c30      	cmp	r4, #48	; 0x30
 801291c:	d0a9      	beq.n	8012872 <_strtoul_l.constprop.0+0x2e>
 801291e:	230a      	movs	r3, #10
 8012920:	e7af      	b.n	8012882 <_strtoul_l.constprop.0+0x3e>
 8012922:	bf00      	nop
 8012924:	08024e5f 	.word	0x08024e5f

08012928 <_strtoul_r>:
 8012928:	f7ff bf8c 	b.w	8012844 <_strtoul_l.constprop.0>

0801292c <strtoul>:
 801292c:	4613      	mov	r3, r2
 801292e:	460a      	mov	r2, r1
 8012930:	4601      	mov	r1, r0
 8012932:	4802      	ldr	r0, [pc, #8]	; (801293c <strtoul+0x10>)
 8012934:	6800      	ldr	r0, [r0, #0]
 8012936:	f7ff bf85 	b.w	8012844 <_strtoul_l.constprop.0>
 801293a:	bf00      	nop
 801293c:	2000153c 	.word	0x2000153c

08012940 <__swbuf_r>:
 8012940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012942:	460e      	mov	r6, r1
 8012944:	4614      	mov	r4, r2
 8012946:	4605      	mov	r5, r0
 8012948:	b118      	cbz	r0, 8012952 <__swbuf_r+0x12>
 801294a:	6983      	ldr	r3, [r0, #24]
 801294c:	b90b      	cbnz	r3, 8012952 <__swbuf_r+0x12>
 801294e:	f000 fa07 	bl	8012d60 <__sinit>
 8012952:	4b21      	ldr	r3, [pc, #132]	; (80129d8 <__swbuf_r+0x98>)
 8012954:	429c      	cmp	r4, r3
 8012956:	d12b      	bne.n	80129b0 <__swbuf_r+0x70>
 8012958:	686c      	ldr	r4, [r5, #4]
 801295a:	69a3      	ldr	r3, [r4, #24]
 801295c:	60a3      	str	r3, [r4, #8]
 801295e:	89a3      	ldrh	r3, [r4, #12]
 8012960:	071a      	lsls	r2, r3, #28
 8012962:	d52f      	bpl.n	80129c4 <__swbuf_r+0x84>
 8012964:	6923      	ldr	r3, [r4, #16]
 8012966:	b36b      	cbz	r3, 80129c4 <__swbuf_r+0x84>
 8012968:	6923      	ldr	r3, [r4, #16]
 801296a:	6820      	ldr	r0, [r4, #0]
 801296c:	1ac0      	subs	r0, r0, r3
 801296e:	6963      	ldr	r3, [r4, #20]
 8012970:	b2f6      	uxtb	r6, r6
 8012972:	4283      	cmp	r3, r0
 8012974:	4637      	mov	r7, r6
 8012976:	dc04      	bgt.n	8012982 <__swbuf_r+0x42>
 8012978:	4621      	mov	r1, r4
 801297a:	4628      	mov	r0, r5
 801297c:	f000 f95c 	bl	8012c38 <_fflush_r>
 8012980:	bb30      	cbnz	r0, 80129d0 <__swbuf_r+0x90>
 8012982:	68a3      	ldr	r3, [r4, #8]
 8012984:	3b01      	subs	r3, #1
 8012986:	60a3      	str	r3, [r4, #8]
 8012988:	6823      	ldr	r3, [r4, #0]
 801298a:	1c5a      	adds	r2, r3, #1
 801298c:	6022      	str	r2, [r4, #0]
 801298e:	701e      	strb	r6, [r3, #0]
 8012990:	6963      	ldr	r3, [r4, #20]
 8012992:	3001      	adds	r0, #1
 8012994:	4283      	cmp	r3, r0
 8012996:	d004      	beq.n	80129a2 <__swbuf_r+0x62>
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	07db      	lsls	r3, r3, #31
 801299c:	d506      	bpl.n	80129ac <__swbuf_r+0x6c>
 801299e:	2e0a      	cmp	r6, #10
 80129a0:	d104      	bne.n	80129ac <__swbuf_r+0x6c>
 80129a2:	4621      	mov	r1, r4
 80129a4:	4628      	mov	r0, r5
 80129a6:	f000 f947 	bl	8012c38 <_fflush_r>
 80129aa:	b988      	cbnz	r0, 80129d0 <__swbuf_r+0x90>
 80129ac:	4638      	mov	r0, r7
 80129ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129b0:	4b0a      	ldr	r3, [pc, #40]	; (80129dc <__swbuf_r+0x9c>)
 80129b2:	429c      	cmp	r4, r3
 80129b4:	d101      	bne.n	80129ba <__swbuf_r+0x7a>
 80129b6:	68ac      	ldr	r4, [r5, #8]
 80129b8:	e7cf      	b.n	801295a <__swbuf_r+0x1a>
 80129ba:	4b09      	ldr	r3, [pc, #36]	; (80129e0 <__swbuf_r+0xa0>)
 80129bc:	429c      	cmp	r4, r3
 80129be:	bf08      	it	eq
 80129c0:	68ec      	ldreq	r4, [r5, #12]
 80129c2:	e7ca      	b.n	801295a <__swbuf_r+0x1a>
 80129c4:	4621      	mov	r1, r4
 80129c6:	4628      	mov	r0, r5
 80129c8:	f000 f81e 	bl	8012a08 <__swsetup_r>
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d0cb      	beq.n	8012968 <__swbuf_r+0x28>
 80129d0:	f04f 37ff 	mov.w	r7, #4294967295
 80129d4:	e7ea      	b.n	80129ac <__swbuf_r+0x6c>
 80129d6:	bf00      	nop
 80129d8:	08024f80 	.word	0x08024f80
 80129dc:	08024fa0 	.word	0x08024fa0
 80129e0:	08024f60 	.word	0x08024f60

080129e4 <_write_r>:
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	4d07      	ldr	r5, [pc, #28]	; (8012a04 <_write_r+0x20>)
 80129e8:	4604      	mov	r4, r0
 80129ea:	4608      	mov	r0, r1
 80129ec:	4611      	mov	r1, r2
 80129ee:	2200      	movs	r2, #0
 80129f0:	602a      	str	r2, [r5, #0]
 80129f2:	461a      	mov	r2, r3
 80129f4:	f7f2 fddb 	bl	80055ae <_write>
 80129f8:	1c43      	adds	r3, r0, #1
 80129fa:	d102      	bne.n	8012a02 <_write_r+0x1e>
 80129fc:	682b      	ldr	r3, [r5, #0]
 80129fe:	b103      	cbz	r3, 8012a02 <_write_r+0x1e>
 8012a00:	6023      	str	r3, [r4, #0]
 8012a02:	bd38      	pop	{r3, r4, r5, pc}
 8012a04:	200050b8 	.word	0x200050b8

08012a08 <__swsetup_r>:
 8012a08:	4b32      	ldr	r3, [pc, #200]	; (8012ad4 <__swsetup_r+0xcc>)
 8012a0a:	b570      	push	{r4, r5, r6, lr}
 8012a0c:	681d      	ldr	r5, [r3, #0]
 8012a0e:	4606      	mov	r6, r0
 8012a10:	460c      	mov	r4, r1
 8012a12:	b125      	cbz	r5, 8012a1e <__swsetup_r+0x16>
 8012a14:	69ab      	ldr	r3, [r5, #24]
 8012a16:	b913      	cbnz	r3, 8012a1e <__swsetup_r+0x16>
 8012a18:	4628      	mov	r0, r5
 8012a1a:	f000 f9a1 	bl	8012d60 <__sinit>
 8012a1e:	4b2e      	ldr	r3, [pc, #184]	; (8012ad8 <__swsetup_r+0xd0>)
 8012a20:	429c      	cmp	r4, r3
 8012a22:	d10f      	bne.n	8012a44 <__swsetup_r+0x3c>
 8012a24:	686c      	ldr	r4, [r5, #4]
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a2c:	0719      	lsls	r1, r3, #28
 8012a2e:	d42c      	bmi.n	8012a8a <__swsetup_r+0x82>
 8012a30:	06dd      	lsls	r5, r3, #27
 8012a32:	d411      	bmi.n	8012a58 <__swsetup_r+0x50>
 8012a34:	2309      	movs	r3, #9
 8012a36:	6033      	str	r3, [r6, #0]
 8012a38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012a3c:	81a3      	strh	r3, [r4, #12]
 8012a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a42:	e03e      	b.n	8012ac2 <__swsetup_r+0xba>
 8012a44:	4b25      	ldr	r3, [pc, #148]	; (8012adc <__swsetup_r+0xd4>)
 8012a46:	429c      	cmp	r4, r3
 8012a48:	d101      	bne.n	8012a4e <__swsetup_r+0x46>
 8012a4a:	68ac      	ldr	r4, [r5, #8]
 8012a4c:	e7eb      	b.n	8012a26 <__swsetup_r+0x1e>
 8012a4e:	4b24      	ldr	r3, [pc, #144]	; (8012ae0 <__swsetup_r+0xd8>)
 8012a50:	429c      	cmp	r4, r3
 8012a52:	bf08      	it	eq
 8012a54:	68ec      	ldreq	r4, [r5, #12]
 8012a56:	e7e6      	b.n	8012a26 <__swsetup_r+0x1e>
 8012a58:	0758      	lsls	r0, r3, #29
 8012a5a:	d512      	bpl.n	8012a82 <__swsetup_r+0x7a>
 8012a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a5e:	b141      	cbz	r1, 8012a72 <__swsetup_r+0x6a>
 8012a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a64:	4299      	cmp	r1, r3
 8012a66:	d002      	beq.n	8012a6e <__swsetup_r+0x66>
 8012a68:	4630      	mov	r0, r6
 8012a6a:	f7fe fd11 	bl	8011490 <_free_r>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	6363      	str	r3, [r4, #52]	; 0x34
 8012a72:	89a3      	ldrh	r3, [r4, #12]
 8012a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a78:	81a3      	strh	r3, [r4, #12]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	6063      	str	r3, [r4, #4]
 8012a7e:	6923      	ldr	r3, [r4, #16]
 8012a80:	6023      	str	r3, [r4, #0]
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	f043 0308 	orr.w	r3, r3, #8
 8012a88:	81a3      	strh	r3, [r4, #12]
 8012a8a:	6923      	ldr	r3, [r4, #16]
 8012a8c:	b94b      	cbnz	r3, 8012aa2 <__swsetup_r+0x9a>
 8012a8e:	89a3      	ldrh	r3, [r4, #12]
 8012a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a98:	d003      	beq.n	8012aa2 <__swsetup_r+0x9a>
 8012a9a:	4621      	mov	r1, r4
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	f000 fa35 	bl	8012f0c <__smakebuf_r>
 8012aa2:	89a0      	ldrh	r0, [r4, #12]
 8012aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012aa8:	f010 0301 	ands.w	r3, r0, #1
 8012aac:	d00a      	beq.n	8012ac4 <__swsetup_r+0xbc>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	60a3      	str	r3, [r4, #8]
 8012ab2:	6963      	ldr	r3, [r4, #20]
 8012ab4:	425b      	negs	r3, r3
 8012ab6:	61a3      	str	r3, [r4, #24]
 8012ab8:	6923      	ldr	r3, [r4, #16]
 8012aba:	b943      	cbnz	r3, 8012ace <__swsetup_r+0xc6>
 8012abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012ac0:	d1ba      	bne.n	8012a38 <__swsetup_r+0x30>
 8012ac2:	bd70      	pop	{r4, r5, r6, pc}
 8012ac4:	0781      	lsls	r1, r0, #30
 8012ac6:	bf58      	it	pl
 8012ac8:	6963      	ldrpl	r3, [r4, #20]
 8012aca:	60a3      	str	r3, [r4, #8]
 8012acc:	e7f4      	b.n	8012ab8 <__swsetup_r+0xb0>
 8012ace:	2000      	movs	r0, #0
 8012ad0:	e7f7      	b.n	8012ac2 <__swsetup_r+0xba>
 8012ad2:	bf00      	nop
 8012ad4:	2000153c 	.word	0x2000153c
 8012ad8:	08024f80 	.word	0x08024f80
 8012adc:	08024fa0 	.word	0x08024fa0
 8012ae0:	08024f60 	.word	0x08024f60

08012ae4 <abort>:
 8012ae4:	b508      	push	{r3, lr}
 8012ae6:	2006      	movs	r0, #6
 8012ae8:	f000 fe30 	bl	801374c <raise>
 8012aec:	2001      	movs	r0, #1
 8012aee:	f7f2 fd37 	bl	8005560 <_exit>
	...

08012af4 <_close_r>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	4d06      	ldr	r5, [pc, #24]	; (8012b10 <_close_r+0x1c>)
 8012af8:	2300      	movs	r3, #0
 8012afa:	4604      	mov	r4, r0
 8012afc:	4608      	mov	r0, r1
 8012afe:	602b      	str	r3, [r5, #0]
 8012b00:	f7f2 fd71 	bl	80055e6 <_close>
 8012b04:	1c43      	adds	r3, r0, #1
 8012b06:	d102      	bne.n	8012b0e <_close_r+0x1a>
 8012b08:	682b      	ldr	r3, [r5, #0]
 8012b0a:	b103      	cbz	r3, 8012b0e <_close_r+0x1a>
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	bd38      	pop	{r3, r4, r5, pc}
 8012b10:	200050b8 	.word	0x200050b8

08012b14 <__env_lock>:
 8012b14:	4801      	ldr	r0, [pc, #4]	; (8012b1c <__env_lock+0x8>)
 8012b16:	f7ff b9ad 	b.w	8011e74 <__retarget_lock_acquire_recursive>
 8012b1a:	bf00      	nop
 8012b1c:	200050b0 	.word	0x200050b0

08012b20 <__env_unlock>:
 8012b20:	4801      	ldr	r0, [pc, #4]	; (8012b28 <__env_unlock+0x8>)
 8012b22:	f7ff b9a9 	b.w	8011e78 <__retarget_lock_release_recursive>
 8012b26:	bf00      	nop
 8012b28:	200050b0 	.word	0x200050b0

08012b2c <__sflush_r>:
 8012b2c:	898a      	ldrh	r2, [r1, #12]
 8012b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b32:	4605      	mov	r5, r0
 8012b34:	0710      	lsls	r0, r2, #28
 8012b36:	460c      	mov	r4, r1
 8012b38:	d458      	bmi.n	8012bec <__sflush_r+0xc0>
 8012b3a:	684b      	ldr	r3, [r1, #4]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	dc05      	bgt.n	8012b4c <__sflush_r+0x20>
 8012b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	dc02      	bgt.n	8012b4c <__sflush_r+0x20>
 8012b46:	2000      	movs	r0, #0
 8012b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b4e:	2e00      	cmp	r6, #0
 8012b50:	d0f9      	beq.n	8012b46 <__sflush_r+0x1a>
 8012b52:	2300      	movs	r3, #0
 8012b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012b58:	682f      	ldr	r7, [r5, #0]
 8012b5a:	602b      	str	r3, [r5, #0]
 8012b5c:	d032      	beq.n	8012bc4 <__sflush_r+0x98>
 8012b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012b60:	89a3      	ldrh	r3, [r4, #12]
 8012b62:	075a      	lsls	r2, r3, #29
 8012b64:	d505      	bpl.n	8012b72 <__sflush_r+0x46>
 8012b66:	6863      	ldr	r3, [r4, #4]
 8012b68:	1ac0      	subs	r0, r0, r3
 8012b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b6c:	b10b      	cbz	r3, 8012b72 <__sflush_r+0x46>
 8012b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b70:	1ac0      	subs	r0, r0, r3
 8012b72:	2300      	movs	r3, #0
 8012b74:	4602      	mov	r2, r0
 8012b76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b78:	6a21      	ldr	r1, [r4, #32]
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	47b0      	blx	r6
 8012b7e:	1c43      	adds	r3, r0, #1
 8012b80:	89a3      	ldrh	r3, [r4, #12]
 8012b82:	d106      	bne.n	8012b92 <__sflush_r+0x66>
 8012b84:	6829      	ldr	r1, [r5, #0]
 8012b86:	291d      	cmp	r1, #29
 8012b88:	d82c      	bhi.n	8012be4 <__sflush_r+0xb8>
 8012b8a:	4a2a      	ldr	r2, [pc, #168]	; (8012c34 <__sflush_r+0x108>)
 8012b8c:	40ca      	lsrs	r2, r1
 8012b8e:	07d6      	lsls	r6, r2, #31
 8012b90:	d528      	bpl.n	8012be4 <__sflush_r+0xb8>
 8012b92:	2200      	movs	r2, #0
 8012b94:	6062      	str	r2, [r4, #4]
 8012b96:	04d9      	lsls	r1, r3, #19
 8012b98:	6922      	ldr	r2, [r4, #16]
 8012b9a:	6022      	str	r2, [r4, #0]
 8012b9c:	d504      	bpl.n	8012ba8 <__sflush_r+0x7c>
 8012b9e:	1c42      	adds	r2, r0, #1
 8012ba0:	d101      	bne.n	8012ba6 <__sflush_r+0x7a>
 8012ba2:	682b      	ldr	r3, [r5, #0]
 8012ba4:	b903      	cbnz	r3, 8012ba8 <__sflush_r+0x7c>
 8012ba6:	6560      	str	r0, [r4, #84]	; 0x54
 8012ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012baa:	602f      	str	r7, [r5, #0]
 8012bac:	2900      	cmp	r1, #0
 8012bae:	d0ca      	beq.n	8012b46 <__sflush_r+0x1a>
 8012bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bb4:	4299      	cmp	r1, r3
 8012bb6:	d002      	beq.n	8012bbe <__sflush_r+0x92>
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f7fe fc69 	bl	8011490 <_free_r>
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	6360      	str	r0, [r4, #52]	; 0x34
 8012bc2:	e7c1      	b.n	8012b48 <__sflush_r+0x1c>
 8012bc4:	6a21      	ldr	r1, [r4, #32]
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	4628      	mov	r0, r5
 8012bca:	47b0      	blx	r6
 8012bcc:	1c41      	adds	r1, r0, #1
 8012bce:	d1c7      	bne.n	8012b60 <__sflush_r+0x34>
 8012bd0:	682b      	ldr	r3, [r5, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d0c4      	beq.n	8012b60 <__sflush_r+0x34>
 8012bd6:	2b1d      	cmp	r3, #29
 8012bd8:	d001      	beq.n	8012bde <__sflush_r+0xb2>
 8012bda:	2b16      	cmp	r3, #22
 8012bdc:	d101      	bne.n	8012be2 <__sflush_r+0xb6>
 8012bde:	602f      	str	r7, [r5, #0]
 8012be0:	e7b1      	b.n	8012b46 <__sflush_r+0x1a>
 8012be2:	89a3      	ldrh	r3, [r4, #12]
 8012be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012be8:	81a3      	strh	r3, [r4, #12]
 8012bea:	e7ad      	b.n	8012b48 <__sflush_r+0x1c>
 8012bec:	690f      	ldr	r7, [r1, #16]
 8012bee:	2f00      	cmp	r7, #0
 8012bf0:	d0a9      	beq.n	8012b46 <__sflush_r+0x1a>
 8012bf2:	0793      	lsls	r3, r2, #30
 8012bf4:	680e      	ldr	r6, [r1, #0]
 8012bf6:	bf08      	it	eq
 8012bf8:	694b      	ldreq	r3, [r1, #20]
 8012bfa:	600f      	str	r7, [r1, #0]
 8012bfc:	bf18      	it	ne
 8012bfe:	2300      	movne	r3, #0
 8012c00:	eba6 0807 	sub.w	r8, r6, r7
 8012c04:	608b      	str	r3, [r1, #8]
 8012c06:	f1b8 0f00 	cmp.w	r8, #0
 8012c0a:	dd9c      	ble.n	8012b46 <__sflush_r+0x1a>
 8012c0c:	6a21      	ldr	r1, [r4, #32]
 8012c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c10:	4643      	mov	r3, r8
 8012c12:	463a      	mov	r2, r7
 8012c14:	4628      	mov	r0, r5
 8012c16:	47b0      	blx	r6
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	dc06      	bgt.n	8012c2a <__sflush_r+0xfe>
 8012c1c:	89a3      	ldrh	r3, [r4, #12]
 8012c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c22:	81a3      	strh	r3, [r4, #12]
 8012c24:	f04f 30ff 	mov.w	r0, #4294967295
 8012c28:	e78e      	b.n	8012b48 <__sflush_r+0x1c>
 8012c2a:	4407      	add	r7, r0
 8012c2c:	eba8 0800 	sub.w	r8, r8, r0
 8012c30:	e7e9      	b.n	8012c06 <__sflush_r+0xda>
 8012c32:	bf00      	nop
 8012c34:	20400001 	.word	0x20400001

08012c38 <_fflush_r>:
 8012c38:	b538      	push	{r3, r4, r5, lr}
 8012c3a:	690b      	ldr	r3, [r1, #16]
 8012c3c:	4605      	mov	r5, r0
 8012c3e:	460c      	mov	r4, r1
 8012c40:	b913      	cbnz	r3, 8012c48 <_fflush_r+0x10>
 8012c42:	2500      	movs	r5, #0
 8012c44:	4628      	mov	r0, r5
 8012c46:	bd38      	pop	{r3, r4, r5, pc}
 8012c48:	b118      	cbz	r0, 8012c52 <_fflush_r+0x1a>
 8012c4a:	6983      	ldr	r3, [r0, #24]
 8012c4c:	b90b      	cbnz	r3, 8012c52 <_fflush_r+0x1a>
 8012c4e:	f000 f887 	bl	8012d60 <__sinit>
 8012c52:	4b14      	ldr	r3, [pc, #80]	; (8012ca4 <_fflush_r+0x6c>)
 8012c54:	429c      	cmp	r4, r3
 8012c56:	d11b      	bne.n	8012c90 <_fflush_r+0x58>
 8012c58:	686c      	ldr	r4, [r5, #4]
 8012c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d0ef      	beq.n	8012c42 <_fflush_r+0xa>
 8012c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012c64:	07d0      	lsls	r0, r2, #31
 8012c66:	d404      	bmi.n	8012c72 <_fflush_r+0x3a>
 8012c68:	0599      	lsls	r1, r3, #22
 8012c6a:	d402      	bmi.n	8012c72 <_fflush_r+0x3a>
 8012c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c6e:	f7ff f901 	bl	8011e74 <__retarget_lock_acquire_recursive>
 8012c72:	4628      	mov	r0, r5
 8012c74:	4621      	mov	r1, r4
 8012c76:	f7ff ff59 	bl	8012b2c <__sflush_r>
 8012c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c7c:	07da      	lsls	r2, r3, #31
 8012c7e:	4605      	mov	r5, r0
 8012c80:	d4e0      	bmi.n	8012c44 <_fflush_r+0xc>
 8012c82:	89a3      	ldrh	r3, [r4, #12]
 8012c84:	059b      	lsls	r3, r3, #22
 8012c86:	d4dd      	bmi.n	8012c44 <_fflush_r+0xc>
 8012c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c8a:	f7ff f8f5 	bl	8011e78 <__retarget_lock_release_recursive>
 8012c8e:	e7d9      	b.n	8012c44 <_fflush_r+0xc>
 8012c90:	4b05      	ldr	r3, [pc, #20]	; (8012ca8 <_fflush_r+0x70>)
 8012c92:	429c      	cmp	r4, r3
 8012c94:	d101      	bne.n	8012c9a <_fflush_r+0x62>
 8012c96:	68ac      	ldr	r4, [r5, #8]
 8012c98:	e7df      	b.n	8012c5a <_fflush_r+0x22>
 8012c9a:	4b04      	ldr	r3, [pc, #16]	; (8012cac <_fflush_r+0x74>)
 8012c9c:	429c      	cmp	r4, r3
 8012c9e:	bf08      	it	eq
 8012ca0:	68ec      	ldreq	r4, [r5, #12]
 8012ca2:	e7da      	b.n	8012c5a <_fflush_r+0x22>
 8012ca4:	08024f80 	.word	0x08024f80
 8012ca8:	08024fa0 	.word	0x08024fa0
 8012cac:	08024f60 	.word	0x08024f60

08012cb0 <std>:
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	b510      	push	{r4, lr}
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8012cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012cbe:	6083      	str	r3, [r0, #8]
 8012cc0:	8181      	strh	r1, [r0, #12]
 8012cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8012cc4:	81c2      	strh	r2, [r0, #14]
 8012cc6:	6183      	str	r3, [r0, #24]
 8012cc8:	4619      	mov	r1, r3
 8012cca:	2208      	movs	r2, #8
 8012ccc:	305c      	adds	r0, #92	; 0x5c
 8012cce:	f7fe f965 	bl	8010f9c <memset>
 8012cd2:	4b05      	ldr	r3, [pc, #20]	; (8012ce8 <std+0x38>)
 8012cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8012cd6:	4b05      	ldr	r3, [pc, #20]	; (8012cec <std+0x3c>)
 8012cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012cda:	4b05      	ldr	r3, [pc, #20]	; (8012cf0 <std+0x40>)
 8012cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012cde:	4b05      	ldr	r3, [pc, #20]	; (8012cf4 <std+0x44>)
 8012ce0:	6224      	str	r4, [r4, #32]
 8012ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8012ce4:	bd10      	pop	{r4, pc}
 8012ce6:	bf00      	nop
 8012ce8:	08012781 	.word	0x08012781
 8012cec:	080127a7 	.word	0x080127a7
 8012cf0:	080127df 	.word	0x080127df
 8012cf4:	08012803 	.word	0x08012803

08012cf8 <_cleanup_r>:
 8012cf8:	4901      	ldr	r1, [pc, #4]	; (8012d00 <_cleanup_r+0x8>)
 8012cfa:	f000 b8af 	b.w	8012e5c <_fwalk_reent>
 8012cfe:	bf00      	nop
 8012d00:	08012c39 	.word	0x08012c39

08012d04 <__sfmoreglue>:
 8012d04:	b570      	push	{r4, r5, r6, lr}
 8012d06:	2268      	movs	r2, #104	; 0x68
 8012d08:	1e4d      	subs	r5, r1, #1
 8012d0a:	4355      	muls	r5, r2
 8012d0c:	460e      	mov	r6, r1
 8012d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d12:	f7fe fc29 	bl	8011568 <_malloc_r>
 8012d16:	4604      	mov	r4, r0
 8012d18:	b140      	cbz	r0, 8012d2c <__sfmoreglue+0x28>
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8012d20:	300c      	adds	r0, #12
 8012d22:	60a0      	str	r0, [r4, #8]
 8012d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d28:	f7fe f938 	bl	8010f9c <memset>
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	bd70      	pop	{r4, r5, r6, pc}

08012d30 <__sfp_lock_acquire>:
 8012d30:	4801      	ldr	r0, [pc, #4]	; (8012d38 <__sfp_lock_acquire+0x8>)
 8012d32:	f7ff b89f 	b.w	8011e74 <__retarget_lock_acquire_recursive>
 8012d36:	bf00      	nop
 8012d38:	200050b2 	.word	0x200050b2

08012d3c <__sfp_lock_release>:
 8012d3c:	4801      	ldr	r0, [pc, #4]	; (8012d44 <__sfp_lock_release+0x8>)
 8012d3e:	f7ff b89b 	b.w	8011e78 <__retarget_lock_release_recursive>
 8012d42:	bf00      	nop
 8012d44:	200050b2 	.word	0x200050b2

08012d48 <__sinit_lock_acquire>:
 8012d48:	4801      	ldr	r0, [pc, #4]	; (8012d50 <__sinit_lock_acquire+0x8>)
 8012d4a:	f7ff b893 	b.w	8011e74 <__retarget_lock_acquire_recursive>
 8012d4e:	bf00      	nop
 8012d50:	200050b3 	.word	0x200050b3

08012d54 <__sinit_lock_release>:
 8012d54:	4801      	ldr	r0, [pc, #4]	; (8012d5c <__sinit_lock_release+0x8>)
 8012d56:	f7ff b88f 	b.w	8011e78 <__retarget_lock_release_recursive>
 8012d5a:	bf00      	nop
 8012d5c:	200050b3 	.word	0x200050b3

08012d60 <__sinit>:
 8012d60:	b510      	push	{r4, lr}
 8012d62:	4604      	mov	r4, r0
 8012d64:	f7ff fff0 	bl	8012d48 <__sinit_lock_acquire>
 8012d68:	69a3      	ldr	r3, [r4, #24]
 8012d6a:	b11b      	cbz	r3, 8012d74 <__sinit+0x14>
 8012d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d70:	f7ff bff0 	b.w	8012d54 <__sinit_lock_release>
 8012d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012d78:	6523      	str	r3, [r4, #80]	; 0x50
 8012d7a:	4b13      	ldr	r3, [pc, #76]	; (8012dc8 <__sinit+0x68>)
 8012d7c:	4a13      	ldr	r2, [pc, #76]	; (8012dcc <__sinit+0x6c>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8012d82:	42a3      	cmp	r3, r4
 8012d84:	bf04      	itt	eq
 8012d86:	2301      	moveq	r3, #1
 8012d88:	61a3      	streq	r3, [r4, #24]
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f000 f820 	bl	8012dd0 <__sfp>
 8012d90:	6060      	str	r0, [r4, #4]
 8012d92:	4620      	mov	r0, r4
 8012d94:	f000 f81c 	bl	8012dd0 <__sfp>
 8012d98:	60a0      	str	r0, [r4, #8]
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f000 f818 	bl	8012dd0 <__sfp>
 8012da0:	2200      	movs	r2, #0
 8012da2:	60e0      	str	r0, [r4, #12]
 8012da4:	2104      	movs	r1, #4
 8012da6:	6860      	ldr	r0, [r4, #4]
 8012da8:	f7ff ff82 	bl	8012cb0 <std>
 8012dac:	68a0      	ldr	r0, [r4, #8]
 8012dae:	2201      	movs	r2, #1
 8012db0:	2109      	movs	r1, #9
 8012db2:	f7ff ff7d 	bl	8012cb0 <std>
 8012db6:	68e0      	ldr	r0, [r4, #12]
 8012db8:	2202      	movs	r2, #2
 8012dba:	2112      	movs	r1, #18
 8012dbc:	f7ff ff78 	bl	8012cb0 <std>
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	61a3      	str	r3, [r4, #24]
 8012dc4:	e7d2      	b.n	8012d6c <__sinit+0xc>
 8012dc6:	bf00      	nop
 8012dc8:	08024c20 	.word	0x08024c20
 8012dcc:	08012cf9 	.word	0x08012cf9

08012dd0 <__sfp>:
 8012dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dd2:	4607      	mov	r7, r0
 8012dd4:	f7ff ffac 	bl	8012d30 <__sfp_lock_acquire>
 8012dd8:	4b1e      	ldr	r3, [pc, #120]	; (8012e54 <__sfp+0x84>)
 8012dda:	681e      	ldr	r6, [r3, #0]
 8012ddc:	69b3      	ldr	r3, [r6, #24]
 8012dde:	b913      	cbnz	r3, 8012de6 <__sfp+0x16>
 8012de0:	4630      	mov	r0, r6
 8012de2:	f7ff ffbd 	bl	8012d60 <__sinit>
 8012de6:	3648      	adds	r6, #72	; 0x48
 8012de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012dec:	3b01      	subs	r3, #1
 8012dee:	d503      	bpl.n	8012df8 <__sfp+0x28>
 8012df0:	6833      	ldr	r3, [r6, #0]
 8012df2:	b30b      	cbz	r3, 8012e38 <__sfp+0x68>
 8012df4:	6836      	ldr	r6, [r6, #0]
 8012df6:	e7f7      	b.n	8012de8 <__sfp+0x18>
 8012df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012dfc:	b9d5      	cbnz	r5, 8012e34 <__sfp+0x64>
 8012dfe:	4b16      	ldr	r3, [pc, #88]	; (8012e58 <__sfp+0x88>)
 8012e00:	60e3      	str	r3, [r4, #12]
 8012e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e06:	6665      	str	r5, [r4, #100]	; 0x64
 8012e08:	f7ff f832 	bl	8011e70 <__retarget_lock_init_recursive>
 8012e0c:	f7ff ff96 	bl	8012d3c <__sfp_lock_release>
 8012e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012e18:	6025      	str	r5, [r4, #0]
 8012e1a:	61a5      	str	r5, [r4, #24]
 8012e1c:	2208      	movs	r2, #8
 8012e1e:	4629      	mov	r1, r5
 8012e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e24:	f7fe f8ba 	bl	8010f9c <memset>
 8012e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e30:	4620      	mov	r0, r4
 8012e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e34:	3468      	adds	r4, #104	; 0x68
 8012e36:	e7d9      	b.n	8012dec <__sfp+0x1c>
 8012e38:	2104      	movs	r1, #4
 8012e3a:	4638      	mov	r0, r7
 8012e3c:	f7ff ff62 	bl	8012d04 <__sfmoreglue>
 8012e40:	4604      	mov	r4, r0
 8012e42:	6030      	str	r0, [r6, #0]
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d1d5      	bne.n	8012df4 <__sfp+0x24>
 8012e48:	f7ff ff78 	bl	8012d3c <__sfp_lock_release>
 8012e4c:	230c      	movs	r3, #12
 8012e4e:	603b      	str	r3, [r7, #0]
 8012e50:	e7ee      	b.n	8012e30 <__sfp+0x60>
 8012e52:	bf00      	nop
 8012e54:	08024c20 	.word	0x08024c20
 8012e58:	ffff0001 	.word	0xffff0001

08012e5c <_fwalk_reent>:
 8012e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e60:	4606      	mov	r6, r0
 8012e62:	4688      	mov	r8, r1
 8012e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012e68:	2700      	movs	r7, #0
 8012e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8012e72:	d505      	bpl.n	8012e80 <_fwalk_reent+0x24>
 8012e74:	6824      	ldr	r4, [r4, #0]
 8012e76:	2c00      	cmp	r4, #0
 8012e78:	d1f7      	bne.n	8012e6a <_fwalk_reent+0xe>
 8012e7a:	4638      	mov	r0, r7
 8012e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e80:	89ab      	ldrh	r3, [r5, #12]
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	d907      	bls.n	8012e96 <_fwalk_reent+0x3a>
 8012e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	d003      	beq.n	8012e96 <_fwalk_reent+0x3a>
 8012e8e:	4629      	mov	r1, r5
 8012e90:	4630      	mov	r0, r6
 8012e92:	47c0      	blx	r8
 8012e94:	4307      	orrs	r7, r0
 8012e96:	3568      	adds	r5, #104	; 0x68
 8012e98:	e7e9      	b.n	8012e6e <_fwalk_reent+0x12>
	...

08012e9c <_lseek_r>:
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4d07      	ldr	r5, [pc, #28]	; (8012ebc <_lseek_r+0x20>)
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	4608      	mov	r0, r1
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	602a      	str	r2, [r5, #0]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	f7f2 fbc2 	bl	8005634 <_lseek>
 8012eb0:	1c43      	adds	r3, r0, #1
 8012eb2:	d102      	bne.n	8012eba <_lseek_r+0x1e>
 8012eb4:	682b      	ldr	r3, [r5, #0]
 8012eb6:	b103      	cbz	r3, 8012eba <_lseek_r+0x1e>
 8012eb8:	6023      	str	r3, [r4, #0]
 8012eba:	bd38      	pop	{r3, r4, r5, pc}
 8012ebc:	200050b8 	.word	0x200050b8

08012ec0 <__swhatbuf_r>:
 8012ec0:	b570      	push	{r4, r5, r6, lr}
 8012ec2:	460e      	mov	r6, r1
 8012ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec8:	2900      	cmp	r1, #0
 8012eca:	b096      	sub	sp, #88	; 0x58
 8012ecc:	4614      	mov	r4, r2
 8012ece:	461d      	mov	r5, r3
 8012ed0:	da08      	bge.n	8012ee4 <__swhatbuf_r+0x24>
 8012ed2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	602a      	str	r2, [r5, #0]
 8012eda:	061a      	lsls	r2, r3, #24
 8012edc:	d410      	bmi.n	8012f00 <__swhatbuf_r+0x40>
 8012ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ee2:	e00e      	b.n	8012f02 <__swhatbuf_r+0x42>
 8012ee4:	466a      	mov	r2, sp
 8012ee6:	f000 fd0b 	bl	8013900 <_fstat_r>
 8012eea:	2800      	cmp	r0, #0
 8012eec:	dbf1      	blt.n	8012ed2 <__swhatbuf_r+0x12>
 8012eee:	9a01      	ldr	r2, [sp, #4]
 8012ef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012ef8:	425a      	negs	r2, r3
 8012efa:	415a      	adcs	r2, r3
 8012efc:	602a      	str	r2, [r5, #0]
 8012efe:	e7ee      	b.n	8012ede <__swhatbuf_r+0x1e>
 8012f00:	2340      	movs	r3, #64	; 0x40
 8012f02:	2000      	movs	r0, #0
 8012f04:	6023      	str	r3, [r4, #0]
 8012f06:	b016      	add	sp, #88	; 0x58
 8012f08:	bd70      	pop	{r4, r5, r6, pc}
	...

08012f0c <__smakebuf_r>:
 8012f0c:	898b      	ldrh	r3, [r1, #12]
 8012f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f10:	079d      	lsls	r5, r3, #30
 8012f12:	4606      	mov	r6, r0
 8012f14:	460c      	mov	r4, r1
 8012f16:	d507      	bpl.n	8012f28 <__smakebuf_r+0x1c>
 8012f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f1c:	6023      	str	r3, [r4, #0]
 8012f1e:	6123      	str	r3, [r4, #16]
 8012f20:	2301      	movs	r3, #1
 8012f22:	6163      	str	r3, [r4, #20]
 8012f24:	b002      	add	sp, #8
 8012f26:	bd70      	pop	{r4, r5, r6, pc}
 8012f28:	ab01      	add	r3, sp, #4
 8012f2a:	466a      	mov	r2, sp
 8012f2c:	f7ff ffc8 	bl	8012ec0 <__swhatbuf_r>
 8012f30:	9900      	ldr	r1, [sp, #0]
 8012f32:	4605      	mov	r5, r0
 8012f34:	4630      	mov	r0, r6
 8012f36:	f7fe fb17 	bl	8011568 <_malloc_r>
 8012f3a:	b948      	cbnz	r0, 8012f50 <__smakebuf_r+0x44>
 8012f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f40:	059a      	lsls	r2, r3, #22
 8012f42:	d4ef      	bmi.n	8012f24 <__smakebuf_r+0x18>
 8012f44:	f023 0303 	bic.w	r3, r3, #3
 8012f48:	f043 0302 	orr.w	r3, r3, #2
 8012f4c:	81a3      	strh	r3, [r4, #12]
 8012f4e:	e7e3      	b.n	8012f18 <__smakebuf_r+0xc>
 8012f50:	4b0d      	ldr	r3, [pc, #52]	; (8012f88 <__smakebuf_r+0x7c>)
 8012f52:	62b3      	str	r3, [r6, #40]	; 0x28
 8012f54:	89a3      	ldrh	r3, [r4, #12]
 8012f56:	6020      	str	r0, [r4, #0]
 8012f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f5c:	81a3      	strh	r3, [r4, #12]
 8012f5e:	9b00      	ldr	r3, [sp, #0]
 8012f60:	6163      	str	r3, [r4, #20]
 8012f62:	9b01      	ldr	r3, [sp, #4]
 8012f64:	6120      	str	r0, [r4, #16]
 8012f66:	b15b      	cbz	r3, 8012f80 <__smakebuf_r+0x74>
 8012f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f000 fcd9 	bl	8013924 <_isatty_r>
 8012f72:	b128      	cbz	r0, 8012f80 <__smakebuf_r+0x74>
 8012f74:	89a3      	ldrh	r3, [r4, #12]
 8012f76:	f023 0303 	bic.w	r3, r3, #3
 8012f7a:	f043 0301 	orr.w	r3, r3, #1
 8012f7e:	81a3      	strh	r3, [r4, #12]
 8012f80:	89a0      	ldrh	r0, [r4, #12]
 8012f82:	4305      	orrs	r5, r0
 8012f84:	81a5      	strh	r5, [r4, #12]
 8012f86:	e7cd      	b.n	8012f24 <__smakebuf_r+0x18>
 8012f88:	08012cf9 	.word	0x08012cf9

08012f8c <memmove>:
 8012f8c:	4288      	cmp	r0, r1
 8012f8e:	b510      	push	{r4, lr}
 8012f90:	eb01 0402 	add.w	r4, r1, r2
 8012f94:	d902      	bls.n	8012f9c <memmove+0x10>
 8012f96:	4284      	cmp	r4, r0
 8012f98:	4623      	mov	r3, r4
 8012f9a:	d807      	bhi.n	8012fac <memmove+0x20>
 8012f9c:	1e43      	subs	r3, r0, #1
 8012f9e:	42a1      	cmp	r1, r4
 8012fa0:	d008      	beq.n	8012fb4 <memmove+0x28>
 8012fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012faa:	e7f8      	b.n	8012f9e <memmove+0x12>
 8012fac:	4402      	add	r2, r0
 8012fae:	4601      	mov	r1, r0
 8012fb0:	428a      	cmp	r2, r1
 8012fb2:	d100      	bne.n	8012fb6 <memmove+0x2a>
 8012fb4:	bd10      	pop	{r4, pc}
 8012fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012fbe:	e7f7      	b.n	8012fb0 <memmove+0x24>

08012fc0 <_realloc_r>:
 8012fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc4:	4680      	mov	r8, r0
 8012fc6:	4614      	mov	r4, r2
 8012fc8:	460e      	mov	r6, r1
 8012fca:	b921      	cbnz	r1, 8012fd6 <_realloc_r+0x16>
 8012fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd0:	4611      	mov	r1, r2
 8012fd2:	f7fe bac9 	b.w	8011568 <_malloc_r>
 8012fd6:	b92a      	cbnz	r2, 8012fe4 <_realloc_r+0x24>
 8012fd8:	f7fe fa5a 	bl	8011490 <_free_r>
 8012fdc:	4625      	mov	r5, r4
 8012fde:	4628      	mov	r0, r5
 8012fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe4:	f000 fcae 	bl	8013944 <_malloc_usable_size_r>
 8012fe8:	4284      	cmp	r4, r0
 8012fea:	4607      	mov	r7, r0
 8012fec:	d802      	bhi.n	8012ff4 <_realloc_r+0x34>
 8012fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012ff2:	d812      	bhi.n	801301a <_realloc_r+0x5a>
 8012ff4:	4621      	mov	r1, r4
 8012ff6:	4640      	mov	r0, r8
 8012ff8:	f7fe fab6 	bl	8011568 <_malloc_r>
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	2800      	cmp	r0, #0
 8013000:	d0ed      	beq.n	8012fde <_realloc_r+0x1e>
 8013002:	42bc      	cmp	r4, r7
 8013004:	4622      	mov	r2, r4
 8013006:	4631      	mov	r1, r6
 8013008:	bf28      	it	cs
 801300a:	463a      	movcs	r2, r7
 801300c:	f7fd ffb8 	bl	8010f80 <memcpy>
 8013010:	4631      	mov	r1, r6
 8013012:	4640      	mov	r0, r8
 8013014:	f7fe fa3c 	bl	8011490 <_free_r>
 8013018:	e7e1      	b.n	8012fde <_realloc_r+0x1e>
 801301a:	4635      	mov	r5, r6
 801301c:	e7df      	b.n	8012fde <_realloc_r+0x1e>

0801301e <_sungetc_r>:
 801301e:	b538      	push	{r3, r4, r5, lr}
 8013020:	1c4b      	adds	r3, r1, #1
 8013022:	4614      	mov	r4, r2
 8013024:	d103      	bne.n	801302e <_sungetc_r+0x10>
 8013026:	f04f 35ff 	mov.w	r5, #4294967295
 801302a:	4628      	mov	r0, r5
 801302c:	bd38      	pop	{r3, r4, r5, pc}
 801302e:	8993      	ldrh	r3, [r2, #12]
 8013030:	f023 0320 	bic.w	r3, r3, #32
 8013034:	8193      	strh	r3, [r2, #12]
 8013036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013038:	6852      	ldr	r2, [r2, #4]
 801303a:	b2cd      	uxtb	r5, r1
 801303c:	b18b      	cbz	r3, 8013062 <_sungetc_r+0x44>
 801303e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013040:	4293      	cmp	r3, r2
 8013042:	dd08      	ble.n	8013056 <_sungetc_r+0x38>
 8013044:	6823      	ldr	r3, [r4, #0]
 8013046:	1e5a      	subs	r2, r3, #1
 8013048:	6022      	str	r2, [r4, #0]
 801304a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801304e:	6863      	ldr	r3, [r4, #4]
 8013050:	3301      	adds	r3, #1
 8013052:	6063      	str	r3, [r4, #4]
 8013054:	e7e9      	b.n	801302a <_sungetc_r+0xc>
 8013056:	4621      	mov	r1, r4
 8013058:	f000 fc18 	bl	801388c <__submore>
 801305c:	2800      	cmp	r0, #0
 801305e:	d0f1      	beq.n	8013044 <_sungetc_r+0x26>
 8013060:	e7e1      	b.n	8013026 <_sungetc_r+0x8>
 8013062:	6921      	ldr	r1, [r4, #16]
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	b151      	cbz	r1, 801307e <_sungetc_r+0x60>
 8013068:	4299      	cmp	r1, r3
 801306a:	d208      	bcs.n	801307e <_sungetc_r+0x60>
 801306c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013070:	42a9      	cmp	r1, r5
 8013072:	d104      	bne.n	801307e <_sungetc_r+0x60>
 8013074:	3b01      	subs	r3, #1
 8013076:	3201      	adds	r2, #1
 8013078:	6023      	str	r3, [r4, #0]
 801307a:	6062      	str	r2, [r4, #4]
 801307c:	e7d5      	b.n	801302a <_sungetc_r+0xc>
 801307e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013086:	6363      	str	r3, [r4, #52]	; 0x34
 8013088:	2303      	movs	r3, #3
 801308a:	63a3      	str	r3, [r4, #56]	; 0x38
 801308c:	4623      	mov	r3, r4
 801308e:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013092:	6023      	str	r3, [r4, #0]
 8013094:	2301      	movs	r3, #1
 8013096:	e7dc      	b.n	8013052 <_sungetc_r+0x34>

08013098 <__ssrefill_r>:
 8013098:	b510      	push	{r4, lr}
 801309a:	460c      	mov	r4, r1
 801309c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801309e:	b169      	cbz	r1, 80130bc <__ssrefill_r+0x24>
 80130a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130a4:	4299      	cmp	r1, r3
 80130a6:	d001      	beq.n	80130ac <__ssrefill_r+0x14>
 80130a8:	f7fe f9f2 	bl	8011490 <_free_r>
 80130ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130ae:	6063      	str	r3, [r4, #4]
 80130b0:	2000      	movs	r0, #0
 80130b2:	6360      	str	r0, [r4, #52]	; 0x34
 80130b4:	b113      	cbz	r3, 80130bc <__ssrefill_r+0x24>
 80130b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80130b8:	6023      	str	r3, [r4, #0]
 80130ba:	bd10      	pop	{r4, pc}
 80130bc:	6923      	ldr	r3, [r4, #16]
 80130be:	6023      	str	r3, [r4, #0]
 80130c0:	2300      	movs	r3, #0
 80130c2:	6063      	str	r3, [r4, #4]
 80130c4:	89a3      	ldrh	r3, [r4, #12]
 80130c6:	f043 0320 	orr.w	r3, r3, #32
 80130ca:	81a3      	strh	r3, [r4, #12]
 80130cc:	f04f 30ff 	mov.w	r0, #4294967295
 80130d0:	e7f3      	b.n	80130ba <__ssrefill_r+0x22>
	...

080130d4 <__ssvfiscanf_r>:
 80130d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130d8:	460c      	mov	r4, r1
 80130da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80130de:	2100      	movs	r1, #0
 80130e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80130e4:	49a6      	ldr	r1, [pc, #664]	; (8013380 <__ssvfiscanf_r+0x2ac>)
 80130e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80130e8:	f10d 0804 	add.w	r8, sp, #4
 80130ec:	49a5      	ldr	r1, [pc, #660]	; (8013384 <__ssvfiscanf_r+0x2b0>)
 80130ee:	4fa6      	ldr	r7, [pc, #664]	; (8013388 <__ssvfiscanf_r+0x2b4>)
 80130f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801338c <__ssvfiscanf_r+0x2b8>
 80130f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80130f8:	4606      	mov	r6, r0
 80130fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80130fc:	9300      	str	r3, [sp, #0]
 80130fe:	7813      	ldrb	r3, [r2, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	f000 815a 	beq.w	80133ba <__ssvfiscanf_r+0x2e6>
 8013106:	5dd9      	ldrb	r1, [r3, r7]
 8013108:	f011 0108 	ands.w	r1, r1, #8
 801310c:	f102 0501 	add.w	r5, r2, #1
 8013110:	d019      	beq.n	8013146 <__ssvfiscanf_r+0x72>
 8013112:	6863      	ldr	r3, [r4, #4]
 8013114:	2b00      	cmp	r3, #0
 8013116:	dd0f      	ble.n	8013138 <__ssvfiscanf_r+0x64>
 8013118:	6823      	ldr	r3, [r4, #0]
 801311a:	781a      	ldrb	r2, [r3, #0]
 801311c:	5cba      	ldrb	r2, [r7, r2]
 801311e:	0712      	lsls	r2, r2, #28
 8013120:	d401      	bmi.n	8013126 <__ssvfiscanf_r+0x52>
 8013122:	462a      	mov	r2, r5
 8013124:	e7eb      	b.n	80130fe <__ssvfiscanf_r+0x2a>
 8013126:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013128:	3201      	adds	r2, #1
 801312a:	9245      	str	r2, [sp, #276]	; 0x114
 801312c:	6862      	ldr	r2, [r4, #4]
 801312e:	3301      	adds	r3, #1
 8013130:	3a01      	subs	r2, #1
 8013132:	6062      	str	r2, [r4, #4]
 8013134:	6023      	str	r3, [r4, #0]
 8013136:	e7ec      	b.n	8013112 <__ssvfiscanf_r+0x3e>
 8013138:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801313a:	4621      	mov	r1, r4
 801313c:	4630      	mov	r0, r6
 801313e:	4798      	blx	r3
 8013140:	2800      	cmp	r0, #0
 8013142:	d0e9      	beq.n	8013118 <__ssvfiscanf_r+0x44>
 8013144:	e7ed      	b.n	8013122 <__ssvfiscanf_r+0x4e>
 8013146:	2b25      	cmp	r3, #37	; 0x25
 8013148:	d012      	beq.n	8013170 <__ssvfiscanf_r+0x9c>
 801314a:	469a      	mov	sl, r3
 801314c:	6863      	ldr	r3, [r4, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	f340 8091 	ble.w	8013276 <__ssvfiscanf_r+0x1a2>
 8013154:	6822      	ldr	r2, [r4, #0]
 8013156:	7813      	ldrb	r3, [r2, #0]
 8013158:	4553      	cmp	r3, sl
 801315a:	f040 812e 	bne.w	80133ba <__ssvfiscanf_r+0x2e6>
 801315e:	6863      	ldr	r3, [r4, #4]
 8013160:	3b01      	subs	r3, #1
 8013162:	6063      	str	r3, [r4, #4]
 8013164:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013166:	3201      	adds	r2, #1
 8013168:	3301      	adds	r3, #1
 801316a:	6022      	str	r2, [r4, #0]
 801316c:	9345      	str	r3, [sp, #276]	; 0x114
 801316e:	e7d8      	b.n	8013122 <__ssvfiscanf_r+0x4e>
 8013170:	9141      	str	r1, [sp, #260]	; 0x104
 8013172:	9143      	str	r1, [sp, #268]	; 0x10c
 8013174:	7853      	ldrb	r3, [r2, #1]
 8013176:	2b2a      	cmp	r3, #42	; 0x2a
 8013178:	bf02      	ittt	eq
 801317a:	2310      	moveq	r3, #16
 801317c:	1c95      	addeq	r5, r2, #2
 801317e:	9341      	streq	r3, [sp, #260]	; 0x104
 8013180:	220a      	movs	r2, #10
 8013182:	46aa      	mov	sl, r5
 8013184:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013188:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801318c:	2b09      	cmp	r3, #9
 801318e:	d91d      	bls.n	80131cc <__ssvfiscanf_r+0xf8>
 8013190:	487e      	ldr	r0, [pc, #504]	; (801338c <__ssvfiscanf_r+0x2b8>)
 8013192:	2203      	movs	r2, #3
 8013194:	f7ed f83c 	bl	8000210 <memchr>
 8013198:	b140      	cbz	r0, 80131ac <__ssvfiscanf_r+0xd8>
 801319a:	2301      	movs	r3, #1
 801319c:	eba0 0009 	sub.w	r0, r0, r9
 80131a0:	fa03 f000 	lsl.w	r0, r3, r0
 80131a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80131a6:	4318      	orrs	r0, r3
 80131a8:	9041      	str	r0, [sp, #260]	; 0x104
 80131aa:	4655      	mov	r5, sl
 80131ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80131b0:	2b78      	cmp	r3, #120	; 0x78
 80131b2:	d806      	bhi.n	80131c2 <__ssvfiscanf_r+0xee>
 80131b4:	2b57      	cmp	r3, #87	; 0x57
 80131b6:	d810      	bhi.n	80131da <__ssvfiscanf_r+0x106>
 80131b8:	2b25      	cmp	r3, #37	; 0x25
 80131ba:	d0c6      	beq.n	801314a <__ssvfiscanf_r+0x76>
 80131bc:	d856      	bhi.n	801326c <__ssvfiscanf_r+0x198>
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d064      	beq.n	801328c <__ssvfiscanf_r+0x1b8>
 80131c2:	2303      	movs	r3, #3
 80131c4:	9347      	str	r3, [sp, #284]	; 0x11c
 80131c6:	230a      	movs	r3, #10
 80131c8:	9342      	str	r3, [sp, #264]	; 0x108
 80131ca:	e071      	b.n	80132b0 <__ssvfiscanf_r+0x1dc>
 80131cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80131ce:	fb02 1103 	mla	r1, r2, r3, r1
 80131d2:	3930      	subs	r1, #48	; 0x30
 80131d4:	9143      	str	r1, [sp, #268]	; 0x10c
 80131d6:	4655      	mov	r5, sl
 80131d8:	e7d3      	b.n	8013182 <__ssvfiscanf_r+0xae>
 80131da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80131de:	2a20      	cmp	r2, #32
 80131e0:	d8ef      	bhi.n	80131c2 <__ssvfiscanf_r+0xee>
 80131e2:	a101      	add	r1, pc, #4	; (adr r1, 80131e8 <__ssvfiscanf_r+0x114>)
 80131e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80131e8:	0801329b 	.word	0x0801329b
 80131ec:	080131c3 	.word	0x080131c3
 80131f0:	080131c3 	.word	0x080131c3
 80131f4:	080132f9 	.word	0x080132f9
 80131f8:	080131c3 	.word	0x080131c3
 80131fc:	080131c3 	.word	0x080131c3
 8013200:	080131c3 	.word	0x080131c3
 8013204:	080131c3 	.word	0x080131c3
 8013208:	080131c3 	.word	0x080131c3
 801320c:	080131c3 	.word	0x080131c3
 8013210:	080131c3 	.word	0x080131c3
 8013214:	0801330f 	.word	0x0801330f
 8013218:	080132e5 	.word	0x080132e5
 801321c:	08013273 	.word	0x08013273
 8013220:	08013273 	.word	0x08013273
 8013224:	08013273 	.word	0x08013273
 8013228:	080131c3 	.word	0x080131c3
 801322c:	080132e9 	.word	0x080132e9
 8013230:	080131c3 	.word	0x080131c3
 8013234:	080131c3 	.word	0x080131c3
 8013238:	080131c3 	.word	0x080131c3
 801323c:	080131c3 	.word	0x080131c3
 8013240:	0801331f 	.word	0x0801331f
 8013244:	080132f1 	.word	0x080132f1
 8013248:	08013293 	.word	0x08013293
 801324c:	080131c3 	.word	0x080131c3
 8013250:	080131c3 	.word	0x080131c3
 8013254:	0801331b 	.word	0x0801331b
 8013258:	080131c3 	.word	0x080131c3
 801325c:	080132e5 	.word	0x080132e5
 8013260:	080131c3 	.word	0x080131c3
 8013264:	080131c3 	.word	0x080131c3
 8013268:	0801329b 	.word	0x0801329b
 801326c:	3b45      	subs	r3, #69	; 0x45
 801326e:	2b02      	cmp	r3, #2
 8013270:	d8a7      	bhi.n	80131c2 <__ssvfiscanf_r+0xee>
 8013272:	2305      	movs	r3, #5
 8013274:	e01b      	b.n	80132ae <__ssvfiscanf_r+0x1da>
 8013276:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013278:	4621      	mov	r1, r4
 801327a:	4630      	mov	r0, r6
 801327c:	4798      	blx	r3
 801327e:	2800      	cmp	r0, #0
 8013280:	f43f af68 	beq.w	8013154 <__ssvfiscanf_r+0x80>
 8013284:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013286:	2800      	cmp	r0, #0
 8013288:	f040 808d 	bne.w	80133a6 <__ssvfiscanf_r+0x2d2>
 801328c:	f04f 30ff 	mov.w	r0, #4294967295
 8013290:	e08f      	b.n	80133b2 <__ssvfiscanf_r+0x2de>
 8013292:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013294:	f042 0220 	orr.w	r2, r2, #32
 8013298:	9241      	str	r2, [sp, #260]	; 0x104
 801329a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801329c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80132a0:	9241      	str	r2, [sp, #260]	; 0x104
 80132a2:	2210      	movs	r2, #16
 80132a4:	2b6f      	cmp	r3, #111	; 0x6f
 80132a6:	9242      	str	r2, [sp, #264]	; 0x108
 80132a8:	bf34      	ite	cc
 80132aa:	2303      	movcc	r3, #3
 80132ac:	2304      	movcs	r3, #4
 80132ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80132b0:	6863      	ldr	r3, [r4, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	dd42      	ble.n	801333c <__ssvfiscanf_r+0x268>
 80132b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80132b8:	0659      	lsls	r1, r3, #25
 80132ba:	d404      	bmi.n	80132c6 <__ssvfiscanf_r+0x1f2>
 80132bc:	6823      	ldr	r3, [r4, #0]
 80132be:	781a      	ldrb	r2, [r3, #0]
 80132c0:	5cba      	ldrb	r2, [r7, r2]
 80132c2:	0712      	lsls	r2, r2, #28
 80132c4:	d441      	bmi.n	801334a <__ssvfiscanf_r+0x276>
 80132c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80132c8:	2b02      	cmp	r3, #2
 80132ca:	dc50      	bgt.n	801336e <__ssvfiscanf_r+0x29a>
 80132cc:	466b      	mov	r3, sp
 80132ce:	4622      	mov	r2, r4
 80132d0:	a941      	add	r1, sp, #260	; 0x104
 80132d2:	4630      	mov	r0, r6
 80132d4:	f000 f876 	bl	80133c4 <_scanf_chars>
 80132d8:	2801      	cmp	r0, #1
 80132da:	d06e      	beq.n	80133ba <__ssvfiscanf_r+0x2e6>
 80132dc:	2802      	cmp	r0, #2
 80132de:	f47f af20 	bne.w	8013122 <__ssvfiscanf_r+0x4e>
 80132e2:	e7cf      	b.n	8013284 <__ssvfiscanf_r+0x1b0>
 80132e4:	220a      	movs	r2, #10
 80132e6:	e7dd      	b.n	80132a4 <__ssvfiscanf_r+0x1d0>
 80132e8:	2300      	movs	r3, #0
 80132ea:	9342      	str	r3, [sp, #264]	; 0x108
 80132ec:	2303      	movs	r3, #3
 80132ee:	e7de      	b.n	80132ae <__ssvfiscanf_r+0x1da>
 80132f0:	2308      	movs	r3, #8
 80132f2:	9342      	str	r3, [sp, #264]	; 0x108
 80132f4:	2304      	movs	r3, #4
 80132f6:	e7da      	b.n	80132ae <__ssvfiscanf_r+0x1da>
 80132f8:	4629      	mov	r1, r5
 80132fa:	4640      	mov	r0, r8
 80132fc:	f000 f9c6 	bl	801368c <__sccl>
 8013300:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013306:	9341      	str	r3, [sp, #260]	; 0x104
 8013308:	4605      	mov	r5, r0
 801330a:	2301      	movs	r3, #1
 801330c:	e7cf      	b.n	80132ae <__ssvfiscanf_r+0x1da>
 801330e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013314:	9341      	str	r3, [sp, #260]	; 0x104
 8013316:	2300      	movs	r3, #0
 8013318:	e7c9      	b.n	80132ae <__ssvfiscanf_r+0x1da>
 801331a:	2302      	movs	r3, #2
 801331c:	e7c7      	b.n	80132ae <__ssvfiscanf_r+0x1da>
 801331e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013320:	06c3      	lsls	r3, r0, #27
 8013322:	f53f aefe 	bmi.w	8013122 <__ssvfiscanf_r+0x4e>
 8013326:	9b00      	ldr	r3, [sp, #0]
 8013328:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801332a:	1d19      	adds	r1, r3, #4
 801332c:	9100      	str	r1, [sp, #0]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	f010 0f01 	tst.w	r0, #1
 8013334:	bf14      	ite	ne
 8013336:	801a      	strhne	r2, [r3, #0]
 8013338:	601a      	streq	r2, [r3, #0]
 801333a:	e6f2      	b.n	8013122 <__ssvfiscanf_r+0x4e>
 801333c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801333e:	4621      	mov	r1, r4
 8013340:	4630      	mov	r0, r6
 8013342:	4798      	blx	r3
 8013344:	2800      	cmp	r0, #0
 8013346:	d0b6      	beq.n	80132b6 <__ssvfiscanf_r+0x1e2>
 8013348:	e79c      	b.n	8013284 <__ssvfiscanf_r+0x1b0>
 801334a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801334c:	3201      	adds	r2, #1
 801334e:	9245      	str	r2, [sp, #276]	; 0x114
 8013350:	6862      	ldr	r2, [r4, #4]
 8013352:	3a01      	subs	r2, #1
 8013354:	2a00      	cmp	r2, #0
 8013356:	6062      	str	r2, [r4, #4]
 8013358:	dd02      	ble.n	8013360 <__ssvfiscanf_r+0x28c>
 801335a:	3301      	adds	r3, #1
 801335c:	6023      	str	r3, [r4, #0]
 801335e:	e7ad      	b.n	80132bc <__ssvfiscanf_r+0x1e8>
 8013360:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013362:	4621      	mov	r1, r4
 8013364:	4630      	mov	r0, r6
 8013366:	4798      	blx	r3
 8013368:	2800      	cmp	r0, #0
 801336a:	d0a7      	beq.n	80132bc <__ssvfiscanf_r+0x1e8>
 801336c:	e78a      	b.n	8013284 <__ssvfiscanf_r+0x1b0>
 801336e:	2b04      	cmp	r3, #4
 8013370:	dc0e      	bgt.n	8013390 <__ssvfiscanf_r+0x2bc>
 8013372:	466b      	mov	r3, sp
 8013374:	4622      	mov	r2, r4
 8013376:	a941      	add	r1, sp, #260	; 0x104
 8013378:	4630      	mov	r0, r6
 801337a:	f000 f87d 	bl	8013478 <_scanf_i>
 801337e:	e7ab      	b.n	80132d8 <__ssvfiscanf_r+0x204>
 8013380:	0801301f 	.word	0x0801301f
 8013384:	08013099 	.word	0x08013099
 8013388:	08024e5f 	.word	0x08024e5f
 801338c:	08024e31 	.word	0x08024e31
 8013390:	4b0b      	ldr	r3, [pc, #44]	; (80133c0 <__ssvfiscanf_r+0x2ec>)
 8013392:	2b00      	cmp	r3, #0
 8013394:	f43f aec5 	beq.w	8013122 <__ssvfiscanf_r+0x4e>
 8013398:	466b      	mov	r3, sp
 801339a:	4622      	mov	r2, r4
 801339c:	a941      	add	r1, sp, #260	; 0x104
 801339e:	4630      	mov	r0, r6
 80133a0:	f3af 8000 	nop.w
 80133a4:	e798      	b.n	80132d8 <__ssvfiscanf_r+0x204>
 80133a6:	89a3      	ldrh	r3, [r4, #12]
 80133a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80133ac:	bf18      	it	ne
 80133ae:	f04f 30ff 	movne.w	r0, #4294967295
 80133b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80133b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 80133bc:	e7f9      	b.n	80133b2 <__ssvfiscanf_r+0x2de>
 80133be:	bf00      	nop
 80133c0:	00000000 	.word	0x00000000

080133c4 <_scanf_chars>:
 80133c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133c8:	4615      	mov	r5, r2
 80133ca:	688a      	ldr	r2, [r1, #8]
 80133cc:	4680      	mov	r8, r0
 80133ce:	460c      	mov	r4, r1
 80133d0:	b932      	cbnz	r2, 80133e0 <_scanf_chars+0x1c>
 80133d2:	698a      	ldr	r2, [r1, #24]
 80133d4:	2a00      	cmp	r2, #0
 80133d6:	bf0c      	ite	eq
 80133d8:	2201      	moveq	r2, #1
 80133da:	f04f 32ff 	movne.w	r2, #4294967295
 80133de:	608a      	str	r2, [r1, #8]
 80133e0:	6822      	ldr	r2, [r4, #0]
 80133e2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013474 <_scanf_chars+0xb0>
 80133e6:	06d1      	lsls	r1, r2, #27
 80133e8:	bf5f      	itttt	pl
 80133ea:	681a      	ldrpl	r2, [r3, #0]
 80133ec:	1d11      	addpl	r1, r2, #4
 80133ee:	6019      	strpl	r1, [r3, #0]
 80133f0:	6816      	ldrpl	r6, [r2, #0]
 80133f2:	2700      	movs	r7, #0
 80133f4:	69a0      	ldr	r0, [r4, #24]
 80133f6:	b188      	cbz	r0, 801341c <_scanf_chars+0x58>
 80133f8:	2801      	cmp	r0, #1
 80133fa:	d107      	bne.n	801340c <_scanf_chars+0x48>
 80133fc:	682a      	ldr	r2, [r5, #0]
 80133fe:	7811      	ldrb	r1, [r2, #0]
 8013400:	6962      	ldr	r2, [r4, #20]
 8013402:	5c52      	ldrb	r2, [r2, r1]
 8013404:	b952      	cbnz	r2, 801341c <_scanf_chars+0x58>
 8013406:	2f00      	cmp	r7, #0
 8013408:	d031      	beq.n	801346e <_scanf_chars+0xaa>
 801340a:	e022      	b.n	8013452 <_scanf_chars+0x8e>
 801340c:	2802      	cmp	r0, #2
 801340e:	d120      	bne.n	8013452 <_scanf_chars+0x8e>
 8013410:	682b      	ldr	r3, [r5, #0]
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013418:	071b      	lsls	r3, r3, #28
 801341a:	d41a      	bmi.n	8013452 <_scanf_chars+0x8e>
 801341c:	6823      	ldr	r3, [r4, #0]
 801341e:	06da      	lsls	r2, r3, #27
 8013420:	bf5e      	ittt	pl
 8013422:	682b      	ldrpl	r3, [r5, #0]
 8013424:	781b      	ldrbpl	r3, [r3, #0]
 8013426:	f806 3b01 	strbpl.w	r3, [r6], #1
 801342a:	682a      	ldr	r2, [r5, #0]
 801342c:	686b      	ldr	r3, [r5, #4]
 801342e:	3201      	adds	r2, #1
 8013430:	602a      	str	r2, [r5, #0]
 8013432:	68a2      	ldr	r2, [r4, #8]
 8013434:	3b01      	subs	r3, #1
 8013436:	3a01      	subs	r2, #1
 8013438:	606b      	str	r3, [r5, #4]
 801343a:	3701      	adds	r7, #1
 801343c:	60a2      	str	r2, [r4, #8]
 801343e:	b142      	cbz	r2, 8013452 <_scanf_chars+0x8e>
 8013440:	2b00      	cmp	r3, #0
 8013442:	dcd7      	bgt.n	80133f4 <_scanf_chars+0x30>
 8013444:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013448:	4629      	mov	r1, r5
 801344a:	4640      	mov	r0, r8
 801344c:	4798      	blx	r3
 801344e:	2800      	cmp	r0, #0
 8013450:	d0d0      	beq.n	80133f4 <_scanf_chars+0x30>
 8013452:	6823      	ldr	r3, [r4, #0]
 8013454:	f013 0310 	ands.w	r3, r3, #16
 8013458:	d105      	bne.n	8013466 <_scanf_chars+0xa2>
 801345a:	68e2      	ldr	r2, [r4, #12]
 801345c:	3201      	adds	r2, #1
 801345e:	60e2      	str	r2, [r4, #12]
 8013460:	69a2      	ldr	r2, [r4, #24]
 8013462:	b102      	cbz	r2, 8013466 <_scanf_chars+0xa2>
 8013464:	7033      	strb	r3, [r6, #0]
 8013466:	6923      	ldr	r3, [r4, #16]
 8013468:	443b      	add	r3, r7
 801346a:	6123      	str	r3, [r4, #16]
 801346c:	2000      	movs	r0, #0
 801346e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013472:	bf00      	nop
 8013474:	08024e5f 	.word	0x08024e5f

08013478 <_scanf_i>:
 8013478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347c:	4698      	mov	r8, r3
 801347e:	4b76      	ldr	r3, [pc, #472]	; (8013658 <_scanf_i+0x1e0>)
 8013480:	460c      	mov	r4, r1
 8013482:	4682      	mov	sl, r0
 8013484:	4616      	mov	r6, r2
 8013486:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801348a:	b087      	sub	sp, #28
 801348c:	ab03      	add	r3, sp, #12
 801348e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013492:	4b72      	ldr	r3, [pc, #456]	; (801365c <_scanf_i+0x1e4>)
 8013494:	69a1      	ldr	r1, [r4, #24]
 8013496:	4a72      	ldr	r2, [pc, #456]	; (8013660 <_scanf_i+0x1e8>)
 8013498:	2903      	cmp	r1, #3
 801349a:	bf18      	it	ne
 801349c:	461a      	movne	r2, r3
 801349e:	68a3      	ldr	r3, [r4, #8]
 80134a0:	9201      	str	r2, [sp, #4]
 80134a2:	1e5a      	subs	r2, r3, #1
 80134a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80134a8:	bf88      	it	hi
 80134aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80134ae:	4627      	mov	r7, r4
 80134b0:	bf82      	ittt	hi
 80134b2:	eb03 0905 	addhi.w	r9, r3, r5
 80134b6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80134ba:	60a3      	strhi	r3, [r4, #8]
 80134bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80134c0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80134c4:	bf98      	it	ls
 80134c6:	f04f 0900 	movls.w	r9, #0
 80134ca:	6023      	str	r3, [r4, #0]
 80134cc:	463d      	mov	r5, r7
 80134ce:	f04f 0b00 	mov.w	fp, #0
 80134d2:	6831      	ldr	r1, [r6, #0]
 80134d4:	ab03      	add	r3, sp, #12
 80134d6:	7809      	ldrb	r1, [r1, #0]
 80134d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80134dc:	2202      	movs	r2, #2
 80134de:	f7ec fe97 	bl	8000210 <memchr>
 80134e2:	b328      	cbz	r0, 8013530 <_scanf_i+0xb8>
 80134e4:	f1bb 0f01 	cmp.w	fp, #1
 80134e8:	d159      	bne.n	801359e <_scanf_i+0x126>
 80134ea:	6862      	ldr	r2, [r4, #4]
 80134ec:	b92a      	cbnz	r2, 80134fa <_scanf_i+0x82>
 80134ee:	6822      	ldr	r2, [r4, #0]
 80134f0:	2308      	movs	r3, #8
 80134f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80134f6:	6063      	str	r3, [r4, #4]
 80134f8:	6022      	str	r2, [r4, #0]
 80134fa:	6822      	ldr	r2, [r4, #0]
 80134fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013500:	6022      	str	r2, [r4, #0]
 8013502:	68a2      	ldr	r2, [r4, #8]
 8013504:	1e51      	subs	r1, r2, #1
 8013506:	60a1      	str	r1, [r4, #8]
 8013508:	b192      	cbz	r2, 8013530 <_scanf_i+0xb8>
 801350a:	6832      	ldr	r2, [r6, #0]
 801350c:	1c51      	adds	r1, r2, #1
 801350e:	6031      	str	r1, [r6, #0]
 8013510:	7812      	ldrb	r2, [r2, #0]
 8013512:	f805 2b01 	strb.w	r2, [r5], #1
 8013516:	6872      	ldr	r2, [r6, #4]
 8013518:	3a01      	subs	r2, #1
 801351a:	2a00      	cmp	r2, #0
 801351c:	6072      	str	r2, [r6, #4]
 801351e:	dc07      	bgt.n	8013530 <_scanf_i+0xb8>
 8013520:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013524:	4631      	mov	r1, r6
 8013526:	4650      	mov	r0, sl
 8013528:	4790      	blx	r2
 801352a:	2800      	cmp	r0, #0
 801352c:	f040 8085 	bne.w	801363a <_scanf_i+0x1c2>
 8013530:	f10b 0b01 	add.w	fp, fp, #1
 8013534:	f1bb 0f03 	cmp.w	fp, #3
 8013538:	d1cb      	bne.n	80134d2 <_scanf_i+0x5a>
 801353a:	6863      	ldr	r3, [r4, #4]
 801353c:	b90b      	cbnz	r3, 8013542 <_scanf_i+0xca>
 801353e:	230a      	movs	r3, #10
 8013540:	6063      	str	r3, [r4, #4]
 8013542:	6863      	ldr	r3, [r4, #4]
 8013544:	4947      	ldr	r1, [pc, #284]	; (8013664 <_scanf_i+0x1ec>)
 8013546:	6960      	ldr	r0, [r4, #20]
 8013548:	1ac9      	subs	r1, r1, r3
 801354a:	f000 f89f 	bl	801368c <__sccl>
 801354e:	f04f 0b00 	mov.w	fp, #0
 8013552:	68a3      	ldr	r3, [r4, #8]
 8013554:	6822      	ldr	r2, [r4, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d03d      	beq.n	80135d6 <_scanf_i+0x15e>
 801355a:	6831      	ldr	r1, [r6, #0]
 801355c:	6960      	ldr	r0, [r4, #20]
 801355e:	f891 c000 	ldrb.w	ip, [r1]
 8013562:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013566:	2800      	cmp	r0, #0
 8013568:	d035      	beq.n	80135d6 <_scanf_i+0x15e>
 801356a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801356e:	d124      	bne.n	80135ba <_scanf_i+0x142>
 8013570:	0510      	lsls	r0, r2, #20
 8013572:	d522      	bpl.n	80135ba <_scanf_i+0x142>
 8013574:	f10b 0b01 	add.w	fp, fp, #1
 8013578:	f1b9 0f00 	cmp.w	r9, #0
 801357c:	d003      	beq.n	8013586 <_scanf_i+0x10e>
 801357e:	3301      	adds	r3, #1
 8013580:	f109 39ff 	add.w	r9, r9, #4294967295
 8013584:	60a3      	str	r3, [r4, #8]
 8013586:	6873      	ldr	r3, [r6, #4]
 8013588:	3b01      	subs	r3, #1
 801358a:	2b00      	cmp	r3, #0
 801358c:	6073      	str	r3, [r6, #4]
 801358e:	dd1b      	ble.n	80135c8 <_scanf_i+0x150>
 8013590:	6833      	ldr	r3, [r6, #0]
 8013592:	3301      	adds	r3, #1
 8013594:	6033      	str	r3, [r6, #0]
 8013596:	68a3      	ldr	r3, [r4, #8]
 8013598:	3b01      	subs	r3, #1
 801359a:	60a3      	str	r3, [r4, #8]
 801359c:	e7d9      	b.n	8013552 <_scanf_i+0xda>
 801359e:	f1bb 0f02 	cmp.w	fp, #2
 80135a2:	d1ae      	bne.n	8013502 <_scanf_i+0x8a>
 80135a4:	6822      	ldr	r2, [r4, #0]
 80135a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80135aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80135ae:	d1bf      	bne.n	8013530 <_scanf_i+0xb8>
 80135b0:	2310      	movs	r3, #16
 80135b2:	6063      	str	r3, [r4, #4]
 80135b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80135b8:	e7a2      	b.n	8013500 <_scanf_i+0x88>
 80135ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80135be:	6022      	str	r2, [r4, #0]
 80135c0:	780b      	ldrb	r3, [r1, #0]
 80135c2:	f805 3b01 	strb.w	r3, [r5], #1
 80135c6:	e7de      	b.n	8013586 <_scanf_i+0x10e>
 80135c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80135cc:	4631      	mov	r1, r6
 80135ce:	4650      	mov	r0, sl
 80135d0:	4798      	blx	r3
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d0df      	beq.n	8013596 <_scanf_i+0x11e>
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	05db      	lsls	r3, r3, #23
 80135da:	d50d      	bpl.n	80135f8 <_scanf_i+0x180>
 80135dc:	42bd      	cmp	r5, r7
 80135de:	d909      	bls.n	80135f4 <_scanf_i+0x17c>
 80135e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80135e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135e8:	4632      	mov	r2, r6
 80135ea:	4650      	mov	r0, sl
 80135ec:	4798      	blx	r3
 80135ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80135f2:	464d      	mov	r5, r9
 80135f4:	42bd      	cmp	r5, r7
 80135f6:	d02d      	beq.n	8013654 <_scanf_i+0x1dc>
 80135f8:	6822      	ldr	r2, [r4, #0]
 80135fa:	f012 0210 	ands.w	r2, r2, #16
 80135fe:	d113      	bne.n	8013628 <_scanf_i+0x1b0>
 8013600:	702a      	strb	r2, [r5, #0]
 8013602:	6863      	ldr	r3, [r4, #4]
 8013604:	9e01      	ldr	r6, [sp, #4]
 8013606:	4639      	mov	r1, r7
 8013608:	4650      	mov	r0, sl
 801360a:	47b0      	blx	r6
 801360c:	6821      	ldr	r1, [r4, #0]
 801360e:	f8d8 3000 	ldr.w	r3, [r8]
 8013612:	f011 0f20 	tst.w	r1, #32
 8013616:	d013      	beq.n	8013640 <_scanf_i+0x1c8>
 8013618:	1d1a      	adds	r2, r3, #4
 801361a:	f8c8 2000 	str.w	r2, [r8]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	6018      	str	r0, [r3, #0]
 8013622:	68e3      	ldr	r3, [r4, #12]
 8013624:	3301      	adds	r3, #1
 8013626:	60e3      	str	r3, [r4, #12]
 8013628:	1bed      	subs	r5, r5, r7
 801362a:	44ab      	add	fp, r5
 801362c:	6925      	ldr	r5, [r4, #16]
 801362e:	445d      	add	r5, fp
 8013630:	6125      	str	r5, [r4, #16]
 8013632:	2000      	movs	r0, #0
 8013634:	b007      	add	sp, #28
 8013636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801363a:	f04f 0b00 	mov.w	fp, #0
 801363e:	e7ca      	b.n	80135d6 <_scanf_i+0x15e>
 8013640:	1d1a      	adds	r2, r3, #4
 8013642:	f8c8 2000 	str.w	r2, [r8]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f011 0f01 	tst.w	r1, #1
 801364c:	bf14      	ite	ne
 801364e:	8018      	strhne	r0, [r3, #0]
 8013650:	6018      	streq	r0, [r3, #0]
 8013652:	e7e6      	b.n	8013622 <_scanf_i+0x1aa>
 8013654:	2001      	movs	r0, #1
 8013656:	e7ed      	b.n	8013634 <_scanf_i+0x1bc>
 8013658:	08015098 	.word	0x08015098
 801365c:	08012929 	.word	0x08012929
 8013660:	08013889 	.word	0x08013889
 8013664:	08024fd9 	.word	0x08024fd9

08013668 <_read_r>:
 8013668:	b538      	push	{r3, r4, r5, lr}
 801366a:	4d07      	ldr	r5, [pc, #28]	; (8013688 <_read_r+0x20>)
 801366c:	4604      	mov	r4, r0
 801366e:	4608      	mov	r0, r1
 8013670:	4611      	mov	r1, r2
 8013672:	2200      	movs	r2, #0
 8013674:	602a      	str	r2, [r5, #0]
 8013676:	461a      	mov	r2, r3
 8013678:	f7f1 ff7c 	bl	8005574 <_read>
 801367c:	1c43      	adds	r3, r0, #1
 801367e:	d102      	bne.n	8013686 <_read_r+0x1e>
 8013680:	682b      	ldr	r3, [r5, #0]
 8013682:	b103      	cbz	r3, 8013686 <_read_r+0x1e>
 8013684:	6023      	str	r3, [r4, #0]
 8013686:	bd38      	pop	{r3, r4, r5, pc}
 8013688:	200050b8 	.word	0x200050b8

0801368c <__sccl>:
 801368c:	b570      	push	{r4, r5, r6, lr}
 801368e:	780b      	ldrb	r3, [r1, #0]
 8013690:	4604      	mov	r4, r0
 8013692:	2b5e      	cmp	r3, #94	; 0x5e
 8013694:	bf0b      	itete	eq
 8013696:	784b      	ldrbeq	r3, [r1, #1]
 8013698:	1c48      	addne	r0, r1, #1
 801369a:	1c88      	addeq	r0, r1, #2
 801369c:	2200      	movne	r2, #0
 801369e:	bf08      	it	eq
 80136a0:	2201      	moveq	r2, #1
 80136a2:	1e61      	subs	r1, r4, #1
 80136a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80136a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80136ac:	42a9      	cmp	r1, r5
 80136ae:	d1fb      	bne.n	80136a8 <__sccl+0x1c>
 80136b0:	b90b      	cbnz	r3, 80136b6 <__sccl+0x2a>
 80136b2:	3801      	subs	r0, #1
 80136b4:	bd70      	pop	{r4, r5, r6, pc}
 80136b6:	f082 0201 	eor.w	r2, r2, #1
 80136ba:	54e2      	strb	r2, [r4, r3]
 80136bc:	4605      	mov	r5, r0
 80136be:	4628      	mov	r0, r5
 80136c0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80136c4:	292d      	cmp	r1, #45	; 0x2d
 80136c6:	d006      	beq.n	80136d6 <__sccl+0x4a>
 80136c8:	295d      	cmp	r1, #93	; 0x5d
 80136ca:	d0f3      	beq.n	80136b4 <__sccl+0x28>
 80136cc:	b909      	cbnz	r1, 80136d2 <__sccl+0x46>
 80136ce:	4628      	mov	r0, r5
 80136d0:	e7f0      	b.n	80136b4 <__sccl+0x28>
 80136d2:	460b      	mov	r3, r1
 80136d4:	e7f1      	b.n	80136ba <__sccl+0x2e>
 80136d6:	786e      	ldrb	r6, [r5, #1]
 80136d8:	2e5d      	cmp	r6, #93	; 0x5d
 80136da:	d0fa      	beq.n	80136d2 <__sccl+0x46>
 80136dc:	42b3      	cmp	r3, r6
 80136de:	dcf8      	bgt.n	80136d2 <__sccl+0x46>
 80136e0:	3502      	adds	r5, #2
 80136e2:	4619      	mov	r1, r3
 80136e4:	3101      	adds	r1, #1
 80136e6:	428e      	cmp	r6, r1
 80136e8:	5462      	strb	r2, [r4, r1]
 80136ea:	dcfb      	bgt.n	80136e4 <__sccl+0x58>
 80136ec:	1af1      	subs	r1, r6, r3
 80136ee:	3901      	subs	r1, #1
 80136f0:	1c58      	adds	r0, r3, #1
 80136f2:	42b3      	cmp	r3, r6
 80136f4:	bfa8      	it	ge
 80136f6:	2100      	movge	r1, #0
 80136f8:	1843      	adds	r3, r0, r1
 80136fa:	e7e0      	b.n	80136be <__sccl+0x32>

080136fc <_raise_r>:
 80136fc:	291f      	cmp	r1, #31
 80136fe:	b538      	push	{r3, r4, r5, lr}
 8013700:	4604      	mov	r4, r0
 8013702:	460d      	mov	r5, r1
 8013704:	d904      	bls.n	8013710 <_raise_r+0x14>
 8013706:	2316      	movs	r3, #22
 8013708:	6003      	str	r3, [r0, #0]
 801370a:	f04f 30ff 	mov.w	r0, #4294967295
 801370e:	bd38      	pop	{r3, r4, r5, pc}
 8013710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013712:	b112      	cbz	r2, 801371a <_raise_r+0x1e>
 8013714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013718:	b94b      	cbnz	r3, 801372e <_raise_r+0x32>
 801371a:	4620      	mov	r0, r4
 801371c:	f000 f830 	bl	8013780 <_getpid_r>
 8013720:	462a      	mov	r2, r5
 8013722:	4601      	mov	r1, r0
 8013724:	4620      	mov	r0, r4
 8013726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801372a:	f000 b817 	b.w	801375c <_kill_r>
 801372e:	2b01      	cmp	r3, #1
 8013730:	d00a      	beq.n	8013748 <_raise_r+0x4c>
 8013732:	1c59      	adds	r1, r3, #1
 8013734:	d103      	bne.n	801373e <_raise_r+0x42>
 8013736:	2316      	movs	r3, #22
 8013738:	6003      	str	r3, [r0, #0]
 801373a:	2001      	movs	r0, #1
 801373c:	e7e7      	b.n	801370e <_raise_r+0x12>
 801373e:	2400      	movs	r4, #0
 8013740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013744:	4628      	mov	r0, r5
 8013746:	4798      	blx	r3
 8013748:	2000      	movs	r0, #0
 801374a:	e7e0      	b.n	801370e <_raise_r+0x12>

0801374c <raise>:
 801374c:	4b02      	ldr	r3, [pc, #8]	; (8013758 <raise+0xc>)
 801374e:	4601      	mov	r1, r0
 8013750:	6818      	ldr	r0, [r3, #0]
 8013752:	f7ff bfd3 	b.w	80136fc <_raise_r>
 8013756:	bf00      	nop
 8013758:	2000153c 	.word	0x2000153c

0801375c <_kill_r>:
 801375c:	b538      	push	{r3, r4, r5, lr}
 801375e:	4d07      	ldr	r5, [pc, #28]	; (801377c <_kill_r+0x20>)
 8013760:	2300      	movs	r3, #0
 8013762:	4604      	mov	r4, r0
 8013764:	4608      	mov	r0, r1
 8013766:	4611      	mov	r1, r2
 8013768:	602b      	str	r3, [r5, #0]
 801376a:	f7f1 fee9 	bl	8005540 <_kill>
 801376e:	1c43      	adds	r3, r0, #1
 8013770:	d102      	bne.n	8013778 <_kill_r+0x1c>
 8013772:	682b      	ldr	r3, [r5, #0]
 8013774:	b103      	cbz	r3, 8013778 <_kill_r+0x1c>
 8013776:	6023      	str	r3, [r4, #0]
 8013778:	bd38      	pop	{r3, r4, r5, pc}
 801377a:	bf00      	nop
 801377c:	200050b8 	.word	0x200050b8

08013780 <_getpid_r>:
 8013780:	f7f1 bed6 	b.w	8005530 <_getpid>

08013784 <_strtol_l.constprop.0>:
 8013784:	2b01      	cmp	r3, #1
 8013786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801378a:	d001      	beq.n	8013790 <_strtol_l.constprop.0+0xc>
 801378c:	2b24      	cmp	r3, #36	; 0x24
 801378e:	d906      	bls.n	801379e <_strtol_l.constprop.0+0x1a>
 8013790:	f7fd faaa 	bl	8010ce8 <__errno>
 8013794:	2316      	movs	r3, #22
 8013796:	6003      	str	r3, [r0, #0]
 8013798:	2000      	movs	r0, #0
 801379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801379e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013884 <_strtol_l.constprop.0+0x100>
 80137a2:	460d      	mov	r5, r1
 80137a4:	462e      	mov	r6, r5
 80137a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80137ae:	f017 0708 	ands.w	r7, r7, #8
 80137b2:	d1f7      	bne.n	80137a4 <_strtol_l.constprop.0+0x20>
 80137b4:	2c2d      	cmp	r4, #45	; 0x2d
 80137b6:	d132      	bne.n	801381e <_strtol_l.constprop.0+0x9a>
 80137b8:	782c      	ldrb	r4, [r5, #0]
 80137ba:	2701      	movs	r7, #1
 80137bc:	1cb5      	adds	r5, r6, #2
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d05b      	beq.n	801387a <_strtol_l.constprop.0+0xf6>
 80137c2:	2b10      	cmp	r3, #16
 80137c4:	d109      	bne.n	80137da <_strtol_l.constprop.0+0x56>
 80137c6:	2c30      	cmp	r4, #48	; 0x30
 80137c8:	d107      	bne.n	80137da <_strtol_l.constprop.0+0x56>
 80137ca:	782c      	ldrb	r4, [r5, #0]
 80137cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80137d0:	2c58      	cmp	r4, #88	; 0x58
 80137d2:	d14d      	bne.n	8013870 <_strtol_l.constprop.0+0xec>
 80137d4:	786c      	ldrb	r4, [r5, #1]
 80137d6:	2310      	movs	r3, #16
 80137d8:	3502      	adds	r5, #2
 80137da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80137de:	f108 38ff 	add.w	r8, r8, #4294967295
 80137e2:	f04f 0c00 	mov.w	ip, #0
 80137e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80137ea:	4666      	mov	r6, ip
 80137ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80137f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80137f4:	f1be 0f09 	cmp.w	lr, #9
 80137f8:	d816      	bhi.n	8013828 <_strtol_l.constprop.0+0xa4>
 80137fa:	4674      	mov	r4, lr
 80137fc:	42a3      	cmp	r3, r4
 80137fe:	dd24      	ble.n	801384a <_strtol_l.constprop.0+0xc6>
 8013800:	f1bc 0f00 	cmp.w	ip, #0
 8013804:	db1e      	blt.n	8013844 <_strtol_l.constprop.0+0xc0>
 8013806:	45b1      	cmp	r9, r6
 8013808:	d31c      	bcc.n	8013844 <_strtol_l.constprop.0+0xc0>
 801380a:	d101      	bne.n	8013810 <_strtol_l.constprop.0+0x8c>
 801380c:	45a2      	cmp	sl, r4
 801380e:	db19      	blt.n	8013844 <_strtol_l.constprop.0+0xc0>
 8013810:	fb06 4603 	mla	r6, r6, r3, r4
 8013814:	f04f 0c01 	mov.w	ip, #1
 8013818:	f815 4b01 	ldrb.w	r4, [r5], #1
 801381c:	e7e8      	b.n	80137f0 <_strtol_l.constprop.0+0x6c>
 801381e:	2c2b      	cmp	r4, #43	; 0x2b
 8013820:	bf04      	itt	eq
 8013822:	782c      	ldrbeq	r4, [r5, #0]
 8013824:	1cb5      	addeq	r5, r6, #2
 8013826:	e7ca      	b.n	80137be <_strtol_l.constprop.0+0x3a>
 8013828:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801382c:	f1be 0f19 	cmp.w	lr, #25
 8013830:	d801      	bhi.n	8013836 <_strtol_l.constprop.0+0xb2>
 8013832:	3c37      	subs	r4, #55	; 0x37
 8013834:	e7e2      	b.n	80137fc <_strtol_l.constprop.0+0x78>
 8013836:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801383a:	f1be 0f19 	cmp.w	lr, #25
 801383e:	d804      	bhi.n	801384a <_strtol_l.constprop.0+0xc6>
 8013840:	3c57      	subs	r4, #87	; 0x57
 8013842:	e7db      	b.n	80137fc <_strtol_l.constprop.0+0x78>
 8013844:	f04f 3cff 	mov.w	ip, #4294967295
 8013848:	e7e6      	b.n	8013818 <_strtol_l.constprop.0+0x94>
 801384a:	f1bc 0f00 	cmp.w	ip, #0
 801384e:	da05      	bge.n	801385c <_strtol_l.constprop.0+0xd8>
 8013850:	2322      	movs	r3, #34	; 0x22
 8013852:	6003      	str	r3, [r0, #0]
 8013854:	4646      	mov	r6, r8
 8013856:	b942      	cbnz	r2, 801386a <_strtol_l.constprop.0+0xe6>
 8013858:	4630      	mov	r0, r6
 801385a:	e79e      	b.n	801379a <_strtol_l.constprop.0+0x16>
 801385c:	b107      	cbz	r7, 8013860 <_strtol_l.constprop.0+0xdc>
 801385e:	4276      	negs	r6, r6
 8013860:	2a00      	cmp	r2, #0
 8013862:	d0f9      	beq.n	8013858 <_strtol_l.constprop.0+0xd4>
 8013864:	f1bc 0f00 	cmp.w	ip, #0
 8013868:	d000      	beq.n	801386c <_strtol_l.constprop.0+0xe8>
 801386a:	1e69      	subs	r1, r5, #1
 801386c:	6011      	str	r1, [r2, #0]
 801386e:	e7f3      	b.n	8013858 <_strtol_l.constprop.0+0xd4>
 8013870:	2430      	movs	r4, #48	; 0x30
 8013872:	2b00      	cmp	r3, #0
 8013874:	d1b1      	bne.n	80137da <_strtol_l.constprop.0+0x56>
 8013876:	2308      	movs	r3, #8
 8013878:	e7af      	b.n	80137da <_strtol_l.constprop.0+0x56>
 801387a:	2c30      	cmp	r4, #48	; 0x30
 801387c:	d0a5      	beq.n	80137ca <_strtol_l.constprop.0+0x46>
 801387e:	230a      	movs	r3, #10
 8013880:	e7ab      	b.n	80137da <_strtol_l.constprop.0+0x56>
 8013882:	bf00      	nop
 8013884:	08024e5f 	.word	0x08024e5f

08013888 <_strtol_r>:
 8013888:	f7ff bf7c 	b.w	8013784 <_strtol_l.constprop.0>

0801388c <__submore>:
 801388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013890:	460c      	mov	r4, r1
 8013892:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013898:	4299      	cmp	r1, r3
 801389a:	d11d      	bne.n	80138d8 <__submore+0x4c>
 801389c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80138a0:	f7fd fe62 	bl	8011568 <_malloc_r>
 80138a4:	b918      	cbnz	r0, 80138ae <__submore+0x22>
 80138a6:	f04f 30ff 	mov.w	r0, #4294967295
 80138aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80138b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80138b8:	6360      	str	r0, [r4, #52]	; 0x34
 80138ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80138be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80138c2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80138c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80138ca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80138ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80138d2:	6020      	str	r0, [r4, #0]
 80138d4:	2000      	movs	r0, #0
 80138d6:	e7e8      	b.n	80138aa <__submore+0x1e>
 80138d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80138da:	0077      	lsls	r7, r6, #1
 80138dc:	463a      	mov	r2, r7
 80138de:	f7ff fb6f 	bl	8012fc0 <_realloc_r>
 80138e2:	4605      	mov	r5, r0
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d0de      	beq.n	80138a6 <__submore+0x1a>
 80138e8:	eb00 0806 	add.w	r8, r0, r6
 80138ec:	4601      	mov	r1, r0
 80138ee:	4632      	mov	r2, r6
 80138f0:	4640      	mov	r0, r8
 80138f2:	f7fd fb45 	bl	8010f80 <memcpy>
 80138f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80138fa:	f8c4 8000 	str.w	r8, [r4]
 80138fe:	e7e9      	b.n	80138d4 <__submore+0x48>

08013900 <_fstat_r>:
 8013900:	b538      	push	{r3, r4, r5, lr}
 8013902:	4d07      	ldr	r5, [pc, #28]	; (8013920 <_fstat_r+0x20>)
 8013904:	2300      	movs	r3, #0
 8013906:	4604      	mov	r4, r0
 8013908:	4608      	mov	r0, r1
 801390a:	4611      	mov	r1, r2
 801390c:	602b      	str	r3, [r5, #0]
 801390e:	f7f1 fe76 	bl	80055fe <_fstat>
 8013912:	1c43      	adds	r3, r0, #1
 8013914:	d102      	bne.n	801391c <_fstat_r+0x1c>
 8013916:	682b      	ldr	r3, [r5, #0]
 8013918:	b103      	cbz	r3, 801391c <_fstat_r+0x1c>
 801391a:	6023      	str	r3, [r4, #0]
 801391c:	bd38      	pop	{r3, r4, r5, pc}
 801391e:	bf00      	nop
 8013920:	200050b8 	.word	0x200050b8

08013924 <_isatty_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4d06      	ldr	r5, [pc, #24]	; (8013940 <_isatty_r+0x1c>)
 8013928:	2300      	movs	r3, #0
 801392a:	4604      	mov	r4, r0
 801392c:	4608      	mov	r0, r1
 801392e:	602b      	str	r3, [r5, #0]
 8013930:	f7f1 fe75 	bl	800561e <_isatty>
 8013934:	1c43      	adds	r3, r0, #1
 8013936:	d102      	bne.n	801393e <_isatty_r+0x1a>
 8013938:	682b      	ldr	r3, [r5, #0]
 801393a:	b103      	cbz	r3, 801393e <_isatty_r+0x1a>
 801393c:	6023      	str	r3, [r4, #0]
 801393e:	bd38      	pop	{r3, r4, r5, pc}
 8013940:	200050b8 	.word	0x200050b8

08013944 <_malloc_usable_size_r>:
 8013944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013948:	1f18      	subs	r0, r3, #4
 801394a:	2b00      	cmp	r3, #0
 801394c:	bfbc      	itt	lt
 801394e:	580b      	ldrlt	r3, [r1, r0]
 8013950:	18c0      	addlt	r0, r0, r3
 8013952:	4770      	bx	lr
 8013954:	0000      	movs	r0, r0
	...

08013958 <cos>:
 8013958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801395a:	ec53 2b10 	vmov	r2, r3, d0
 801395e:	4826      	ldr	r0, [pc, #152]	; (80139f8 <cos+0xa0>)
 8013960:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013964:	4281      	cmp	r1, r0
 8013966:	dc06      	bgt.n	8013976 <cos+0x1e>
 8013968:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80139f0 <cos+0x98>
 801396c:	b005      	add	sp, #20
 801396e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013972:	f000 baf1 	b.w	8013f58 <__kernel_cos>
 8013976:	4821      	ldr	r0, [pc, #132]	; (80139fc <cos+0xa4>)
 8013978:	4281      	cmp	r1, r0
 801397a:	dd09      	ble.n	8013990 <cos+0x38>
 801397c:	ee10 0a10 	vmov	r0, s0
 8013980:	4619      	mov	r1, r3
 8013982:	f7ec fc99 	bl	80002b8 <__aeabi_dsub>
 8013986:	ec41 0b10 	vmov	d0, r0, r1
 801398a:	b005      	add	sp, #20
 801398c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013990:	4668      	mov	r0, sp
 8013992:	f000 f8d5 	bl	8013b40 <__ieee754_rem_pio2>
 8013996:	f000 0003 	and.w	r0, r0, #3
 801399a:	2801      	cmp	r0, #1
 801399c:	d00b      	beq.n	80139b6 <cos+0x5e>
 801399e:	2802      	cmp	r0, #2
 80139a0:	d016      	beq.n	80139d0 <cos+0x78>
 80139a2:	b9e0      	cbnz	r0, 80139de <cos+0x86>
 80139a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139a8:	ed9d 0b00 	vldr	d0, [sp]
 80139ac:	f000 fad4 	bl	8013f58 <__kernel_cos>
 80139b0:	ec51 0b10 	vmov	r0, r1, d0
 80139b4:	e7e7      	b.n	8013986 <cos+0x2e>
 80139b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139ba:	ed9d 0b00 	vldr	d0, [sp]
 80139be:	f000 fee3 	bl	8014788 <__kernel_sin>
 80139c2:	ec53 2b10 	vmov	r2, r3, d0
 80139c6:	ee10 0a10 	vmov	r0, s0
 80139ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80139ce:	e7da      	b.n	8013986 <cos+0x2e>
 80139d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139d4:	ed9d 0b00 	vldr	d0, [sp]
 80139d8:	f000 fabe 	bl	8013f58 <__kernel_cos>
 80139dc:	e7f1      	b.n	80139c2 <cos+0x6a>
 80139de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139e2:	ed9d 0b00 	vldr	d0, [sp]
 80139e6:	2001      	movs	r0, #1
 80139e8:	f000 fece 	bl	8014788 <__kernel_sin>
 80139ec:	e7e0      	b.n	80139b0 <cos+0x58>
 80139ee:	bf00      	nop
	...
 80139f8:	3fe921fb 	.word	0x3fe921fb
 80139fc:	7fefffff 	.word	0x7fefffff

08013a00 <round>:
 8013a00:	ec51 0b10 	vmov	r0, r1, d0
 8013a04:	b570      	push	{r4, r5, r6, lr}
 8013a06:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8013a0a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8013a0e:	2c13      	cmp	r4, #19
 8013a10:	ee10 2a10 	vmov	r2, s0
 8013a14:	460b      	mov	r3, r1
 8013a16:	dc19      	bgt.n	8013a4c <round+0x4c>
 8013a18:	2c00      	cmp	r4, #0
 8013a1a:	da09      	bge.n	8013a30 <round+0x30>
 8013a1c:	3401      	adds	r4, #1
 8013a1e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8013a22:	d103      	bne.n	8013a2c <round+0x2c>
 8013a24:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013a28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	e028      	b.n	8013a82 <round+0x82>
 8013a30:	4d15      	ldr	r5, [pc, #84]	; (8013a88 <round+0x88>)
 8013a32:	4125      	asrs	r5, r4
 8013a34:	ea01 0605 	and.w	r6, r1, r5
 8013a38:	4332      	orrs	r2, r6
 8013a3a:	d00e      	beq.n	8013a5a <round+0x5a>
 8013a3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013a40:	fa42 f404 	asr.w	r4, r2, r4
 8013a44:	4423      	add	r3, r4
 8013a46:	ea23 0305 	bic.w	r3, r3, r5
 8013a4a:	e7ef      	b.n	8013a2c <round+0x2c>
 8013a4c:	2c33      	cmp	r4, #51	; 0x33
 8013a4e:	dd07      	ble.n	8013a60 <round+0x60>
 8013a50:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013a54:	d101      	bne.n	8013a5a <round+0x5a>
 8013a56:	f7ec fc31 	bl	80002bc <__adddf3>
 8013a5a:	ec41 0b10 	vmov	d0, r0, r1
 8013a5e:	bd70      	pop	{r4, r5, r6, pc}
 8013a60:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8013a64:	f04f 35ff 	mov.w	r5, #4294967295
 8013a68:	40f5      	lsrs	r5, r6
 8013a6a:	4228      	tst	r0, r5
 8013a6c:	d0f5      	beq.n	8013a5a <round+0x5a>
 8013a6e:	2101      	movs	r1, #1
 8013a70:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013a74:	fa01 f404 	lsl.w	r4, r1, r4
 8013a78:	1912      	adds	r2, r2, r4
 8013a7a:	bf28      	it	cs
 8013a7c:	185b      	addcs	r3, r3, r1
 8013a7e:	ea22 0205 	bic.w	r2, r2, r5
 8013a82:	4619      	mov	r1, r3
 8013a84:	4610      	mov	r0, r2
 8013a86:	e7e8      	b.n	8013a5a <round+0x5a>
 8013a88:	000fffff 	.word	0x000fffff
 8013a8c:	00000000 	.word	0x00000000

08013a90 <sin>:
 8013a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a92:	ec53 2b10 	vmov	r2, r3, d0
 8013a96:	4828      	ldr	r0, [pc, #160]	; (8013b38 <sin+0xa8>)
 8013a98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013a9c:	4281      	cmp	r1, r0
 8013a9e:	dc07      	bgt.n	8013ab0 <sin+0x20>
 8013aa0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8013b30 <sin+0xa0>
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	b005      	add	sp, #20
 8013aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013aac:	f000 be6c 	b.w	8014788 <__kernel_sin>
 8013ab0:	4822      	ldr	r0, [pc, #136]	; (8013b3c <sin+0xac>)
 8013ab2:	4281      	cmp	r1, r0
 8013ab4:	dd09      	ble.n	8013aca <sin+0x3a>
 8013ab6:	ee10 0a10 	vmov	r0, s0
 8013aba:	4619      	mov	r1, r3
 8013abc:	f7ec fbfc 	bl	80002b8 <__aeabi_dsub>
 8013ac0:	ec41 0b10 	vmov	d0, r0, r1
 8013ac4:	b005      	add	sp, #20
 8013ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013aca:	4668      	mov	r0, sp
 8013acc:	f000 f838 	bl	8013b40 <__ieee754_rem_pio2>
 8013ad0:	f000 0003 	and.w	r0, r0, #3
 8013ad4:	2801      	cmp	r0, #1
 8013ad6:	d00c      	beq.n	8013af2 <sin+0x62>
 8013ad8:	2802      	cmp	r0, #2
 8013ada:	d011      	beq.n	8013b00 <sin+0x70>
 8013adc:	b9f0      	cbnz	r0, 8013b1c <sin+0x8c>
 8013ade:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013ae2:	ed9d 0b00 	vldr	d0, [sp]
 8013ae6:	2001      	movs	r0, #1
 8013ae8:	f000 fe4e 	bl	8014788 <__kernel_sin>
 8013aec:	ec51 0b10 	vmov	r0, r1, d0
 8013af0:	e7e6      	b.n	8013ac0 <sin+0x30>
 8013af2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013af6:	ed9d 0b00 	vldr	d0, [sp]
 8013afa:	f000 fa2d 	bl	8013f58 <__kernel_cos>
 8013afe:	e7f5      	b.n	8013aec <sin+0x5c>
 8013b00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b04:	ed9d 0b00 	vldr	d0, [sp]
 8013b08:	2001      	movs	r0, #1
 8013b0a:	f000 fe3d 	bl	8014788 <__kernel_sin>
 8013b0e:	ec53 2b10 	vmov	r2, r3, d0
 8013b12:	ee10 0a10 	vmov	r0, s0
 8013b16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013b1a:	e7d1      	b.n	8013ac0 <sin+0x30>
 8013b1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b20:	ed9d 0b00 	vldr	d0, [sp]
 8013b24:	f000 fa18 	bl	8013f58 <__kernel_cos>
 8013b28:	e7f1      	b.n	8013b0e <sin+0x7e>
 8013b2a:	bf00      	nop
 8013b2c:	f3af 8000 	nop.w
	...
 8013b38:	3fe921fb 	.word	0x3fe921fb
 8013b3c:	7fefffff 	.word	0x7fefffff

08013b40 <__ieee754_rem_pio2>:
 8013b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b44:	ed2d 8b02 	vpush	{d8}
 8013b48:	ec55 4b10 	vmov	r4, r5, d0
 8013b4c:	4bca      	ldr	r3, [pc, #808]	; (8013e78 <__ieee754_rem_pio2+0x338>)
 8013b4e:	b08b      	sub	sp, #44	; 0x2c
 8013b50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8013b54:	4598      	cmp	r8, r3
 8013b56:	4682      	mov	sl, r0
 8013b58:	9502      	str	r5, [sp, #8]
 8013b5a:	dc08      	bgt.n	8013b6e <__ieee754_rem_pio2+0x2e>
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	2300      	movs	r3, #0
 8013b60:	ed80 0b00 	vstr	d0, [r0]
 8013b64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013b68:	f04f 0b00 	mov.w	fp, #0
 8013b6c:	e028      	b.n	8013bc0 <__ieee754_rem_pio2+0x80>
 8013b6e:	4bc3      	ldr	r3, [pc, #780]	; (8013e7c <__ieee754_rem_pio2+0x33c>)
 8013b70:	4598      	cmp	r8, r3
 8013b72:	dc78      	bgt.n	8013c66 <__ieee754_rem_pio2+0x126>
 8013b74:	9b02      	ldr	r3, [sp, #8]
 8013b76:	4ec2      	ldr	r6, [pc, #776]	; (8013e80 <__ieee754_rem_pio2+0x340>)
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	ee10 0a10 	vmov	r0, s0
 8013b7e:	a3b0      	add	r3, pc, #704	; (adr r3, 8013e40 <__ieee754_rem_pio2+0x300>)
 8013b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b84:	4629      	mov	r1, r5
 8013b86:	dd39      	ble.n	8013bfc <__ieee754_rem_pio2+0xbc>
 8013b88:	f7ec fb96 	bl	80002b8 <__aeabi_dsub>
 8013b8c:	45b0      	cmp	r8, r6
 8013b8e:	4604      	mov	r4, r0
 8013b90:	460d      	mov	r5, r1
 8013b92:	d01b      	beq.n	8013bcc <__ieee754_rem_pio2+0x8c>
 8013b94:	a3ac      	add	r3, pc, #688	; (adr r3, 8013e48 <__ieee754_rem_pio2+0x308>)
 8013b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9a:	f7ec fb8d 	bl	80002b8 <__aeabi_dsub>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	e9ca 2300 	strd	r2, r3, [sl]
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	4629      	mov	r1, r5
 8013baa:	f7ec fb85 	bl	80002b8 <__aeabi_dsub>
 8013bae:	a3a6      	add	r3, pc, #664	; (adr r3, 8013e48 <__ieee754_rem_pio2+0x308>)
 8013bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb4:	f7ec fb80 	bl	80002b8 <__aeabi_dsub>
 8013bb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013bbc:	f04f 0b01 	mov.w	fp, #1
 8013bc0:	4658      	mov	r0, fp
 8013bc2:	b00b      	add	sp, #44	; 0x2c
 8013bc4:	ecbd 8b02 	vpop	{d8}
 8013bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bcc:	a3a0      	add	r3, pc, #640	; (adr r3, 8013e50 <__ieee754_rem_pio2+0x310>)
 8013bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd2:	f7ec fb71 	bl	80002b8 <__aeabi_dsub>
 8013bd6:	a3a0      	add	r3, pc, #640	; (adr r3, 8013e58 <__ieee754_rem_pio2+0x318>)
 8013bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bdc:	4604      	mov	r4, r0
 8013bde:	460d      	mov	r5, r1
 8013be0:	f7ec fb6a 	bl	80002b8 <__aeabi_dsub>
 8013be4:	4602      	mov	r2, r0
 8013be6:	460b      	mov	r3, r1
 8013be8:	e9ca 2300 	strd	r2, r3, [sl]
 8013bec:	4620      	mov	r0, r4
 8013bee:	4629      	mov	r1, r5
 8013bf0:	f7ec fb62 	bl	80002b8 <__aeabi_dsub>
 8013bf4:	a398      	add	r3, pc, #608	; (adr r3, 8013e58 <__ieee754_rem_pio2+0x318>)
 8013bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfa:	e7db      	b.n	8013bb4 <__ieee754_rem_pio2+0x74>
 8013bfc:	f7ec fb5e 	bl	80002bc <__adddf3>
 8013c00:	45b0      	cmp	r8, r6
 8013c02:	4604      	mov	r4, r0
 8013c04:	460d      	mov	r5, r1
 8013c06:	d016      	beq.n	8013c36 <__ieee754_rem_pio2+0xf6>
 8013c08:	a38f      	add	r3, pc, #572	; (adr r3, 8013e48 <__ieee754_rem_pio2+0x308>)
 8013c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0e:	f7ec fb55 	bl	80002bc <__adddf3>
 8013c12:	4602      	mov	r2, r0
 8013c14:	460b      	mov	r3, r1
 8013c16:	e9ca 2300 	strd	r2, r3, [sl]
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	f7ec fb4b 	bl	80002b8 <__aeabi_dsub>
 8013c22:	a389      	add	r3, pc, #548	; (adr r3, 8013e48 <__ieee754_rem_pio2+0x308>)
 8013c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c28:	f7ec fb48 	bl	80002bc <__adddf3>
 8013c2c:	f04f 3bff 	mov.w	fp, #4294967295
 8013c30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013c34:	e7c4      	b.n	8013bc0 <__ieee754_rem_pio2+0x80>
 8013c36:	a386      	add	r3, pc, #536	; (adr r3, 8013e50 <__ieee754_rem_pio2+0x310>)
 8013c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c3c:	f7ec fb3e 	bl	80002bc <__adddf3>
 8013c40:	a385      	add	r3, pc, #532	; (adr r3, 8013e58 <__ieee754_rem_pio2+0x318>)
 8013c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c46:	4604      	mov	r4, r0
 8013c48:	460d      	mov	r5, r1
 8013c4a:	f7ec fb37 	bl	80002bc <__adddf3>
 8013c4e:	4602      	mov	r2, r0
 8013c50:	460b      	mov	r3, r1
 8013c52:	e9ca 2300 	strd	r2, r3, [sl]
 8013c56:	4620      	mov	r0, r4
 8013c58:	4629      	mov	r1, r5
 8013c5a:	f7ec fb2d 	bl	80002b8 <__aeabi_dsub>
 8013c5e:	a37e      	add	r3, pc, #504	; (adr r3, 8013e58 <__ieee754_rem_pio2+0x318>)
 8013c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c64:	e7e0      	b.n	8013c28 <__ieee754_rem_pio2+0xe8>
 8013c66:	4b87      	ldr	r3, [pc, #540]	; (8013e84 <__ieee754_rem_pio2+0x344>)
 8013c68:	4598      	cmp	r8, r3
 8013c6a:	f300 80d9 	bgt.w	8013e20 <__ieee754_rem_pio2+0x2e0>
 8013c6e:	f000 fe49 	bl	8014904 <fabs>
 8013c72:	ec55 4b10 	vmov	r4, r5, d0
 8013c76:	ee10 0a10 	vmov	r0, s0
 8013c7a:	a379      	add	r3, pc, #484	; (adr r3, 8013e60 <__ieee754_rem_pio2+0x320>)
 8013c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c80:	4629      	mov	r1, r5
 8013c82:	f7ec fcd1 	bl	8000628 <__aeabi_dmul>
 8013c86:	4b80      	ldr	r3, [pc, #512]	; (8013e88 <__ieee754_rem_pio2+0x348>)
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f7ec fb17 	bl	80002bc <__adddf3>
 8013c8e:	f7ec ff65 	bl	8000b5c <__aeabi_d2iz>
 8013c92:	4683      	mov	fp, r0
 8013c94:	f7ec fc5e 	bl	8000554 <__aeabi_i2d>
 8013c98:	4602      	mov	r2, r0
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	ec43 2b18 	vmov	d8, r2, r3
 8013ca0:	a367      	add	r3, pc, #412	; (adr r3, 8013e40 <__ieee754_rem_pio2+0x300>)
 8013ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca6:	f7ec fcbf 	bl	8000628 <__aeabi_dmul>
 8013caa:	4602      	mov	r2, r0
 8013cac:	460b      	mov	r3, r1
 8013cae:	4620      	mov	r0, r4
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	f7ec fb01 	bl	80002b8 <__aeabi_dsub>
 8013cb6:	a364      	add	r3, pc, #400	; (adr r3, 8013e48 <__ieee754_rem_pio2+0x308>)
 8013cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbc:	4606      	mov	r6, r0
 8013cbe:	460f      	mov	r7, r1
 8013cc0:	ec51 0b18 	vmov	r0, r1, d8
 8013cc4:	f7ec fcb0 	bl	8000628 <__aeabi_dmul>
 8013cc8:	f1bb 0f1f 	cmp.w	fp, #31
 8013ccc:	4604      	mov	r4, r0
 8013cce:	460d      	mov	r5, r1
 8013cd0:	dc0d      	bgt.n	8013cee <__ieee754_rem_pio2+0x1ae>
 8013cd2:	4b6e      	ldr	r3, [pc, #440]	; (8013e8c <__ieee754_rem_pio2+0x34c>)
 8013cd4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cdc:	4543      	cmp	r3, r8
 8013cde:	d006      	beq.n	8013cee <__ieee754_rem_pio2+0x1ae>
 8013ce0:	4622      	mov	r2, r4
 8013ce2:	462b      	mov	r3, r5
 8013ce4:	4630      	mov	r0, r6
 8013ce6:	4639      	mov	r1, r7
 8013ce8:	f7ec fae6 	bl	80002b8 <__aeabi_dsub>
 8013cec:	e00f      	b.n	8013d0e <__ieee754_rem_pio2+0x1ce>
 8013cee:	462b      	mov	r3, r5
 8013cf0:	4622      	mov	r2, r4
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	4639      	mov	r1, r7
 8013cf6:	f7ec fadf 	bl	80002b8 <__aeabi_dsub>
 8013cfa:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013cfe:	9303      	str	r3, [sp, #12]
 8013d00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013d04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013d08:	f1b8 0f10 	cmp.w	r8, #16
 8013d0c:	dc02      	bgt.n	8013d14 <__ieee754_rem_pio2+0x1d4>
 8013d0e:	e9ca 0100 	strd	r0, r1, [sl]
 8013d12:	e039      	b.n	8013d88 <__ieee754_rem_pio2+0x248>
 8013d14:	a34e      	add	r3, pc, #312	; (adr r3, 8013e50 <__ieee754_rem_pio2+0x310>)
 8013d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1a:	ec51 0b18 	vmov	r0, r1, d8
 8013d1e:	f7ec fc83 	bl	8000628 <__aeabi_dmul>
 8013d22:	4604      	mov	r4, r0
 8013d24:	460d      	mov	r5, r1
 8013d26:	4602      	mov	r2, r0
 8013d28:	460b      	mov	r3, r1
 8013d2a:	4630      	mov	r0, r6
 8013d2c:	4639      	mov	r1, r7
 8013d2e:	f7ec fac3 	bl	80002b8 <__aeabi_dsub>
 8013d32:	4602      	mov	r2, r0
 8013d34:	460b      	mov	r3, r1
 8013d36:	4680      	mov	r8, r0
 8013d38:	4689      	mov	r9, r1
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	4639      	mov	r1, r7
 8013d3e:	f7ec fabb 	bl	80002b8 <__aeabi_dsub>
 8013d42:	4622      	mov	r2, r4
 8013d44:	462b      	mov	r3, r5
 8013d46:	f7ec fab7 	bl	80002b8 <__aeabi_dsub>
 8013d4a:	a343      	add	r3, pc, #268	; (adr r3, 8013e58 <__ieee754_rem_pio2+0x318>)
 8013d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d50:	4604      	mov	r4, r0
 8013d52:	460d      	mov	r5, r1
 8013d54:	ec51 0b18 	vmov	r0, r1, d8
 8013d58:	f7ec fc66 	bl	8000628 <__aeabi_dmul>
 8013d5c:	4622      	mov	r2, r4
 8013d5e:	462b      	mov	r3, r5
 8013d60:	f7ec faaa 	bl	80002b8 <__aeabi_dsub>
 8013d64:	4602      	mov	r2, r0
 8013d66:	460b      	mov	r3, r1
 8013d68:	4604      	mov	r4, r0
 8013d6a:	460d      	mov	r5, r1
 8013d6c:	4640      	mov	r0, r8
 8013d6e:	4649      	mov	r1, r9
 8013d70:	f7ec faa2 	bl	80002b8 <__aeabi_dsub>
 8013d74:	9a03      	ldr	r2, [sp, #12]
 8013d76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013d7a:	1ad3      	subs	r3, r2, r3
 8013d7c:	2b31      	cmp	r3, #49	; 0x31
 8013d7e:	dc24      	bgt.n	8013dca <__ieee754_rem_pio2+0x28a>
 8013d80:	e9ca 0100 	strd	r0, r1, [sl]
 8013d84:	4646      	mov	r6, r8
 8013d86:	464f      	mov	r7, r9
 8013d88:	e9da 8900 	ldrd	r8, r9, [sl]
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	4642      	mov	r2, r8
 8013d90:	464b      	mov	r3, r9
 8013d92:	4639      	mov	r1, r7
 8013d94:	f7ec fa90 	bl	80002b8 <__aeabi_dsub>
 8013d98:	462b      	mov	r3, r5
 8013d9a:	4622      	mov	r2, r4
 8013d9c:	f7ec fa8c 	bl	80002b8 <__aeabi_dsub>
 8013da0:	9b02      	ldr	r3, [sp, #8]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013da8:	f6bf af0a 	bge.w	8013bc0 <__ieee754_rem_pio2+0x80>
 8013dac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013db0:	f8ca 3004 	str.w	r3, [sl, #4]
 8013db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013db8:	f8ca 8000 	str.w	r8, [sl]
 8013dbc:	f8ca 0008 	str.w	r0, [sl, #8]
 8013dc0:	f8ca 300c 	str.w	r3, [sl, #12]
 8013dc4:	f1cb 0b00 	rsb	fp, fp, #0
 8013dc8:	e6fa      	b.n	8013bc0 <__ieee754_rem_pio2+0x80>
 8013dca:	a327      	add	r3, pc, #156	; (adr r3, 8013e68 <__ieee754_rem_pio2+0x328>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	ec51 0b18 	vmov	r0, r1, d8
 8013dd4:	f7ec fc28 	bl	8000628 <__aeabi_dmul>
 8013dd8:	4604      	mov	r4, r0
 8013dda:	460d      	mov	r5, r1
 8013ddc:	4602      	mov	r2, r0
 8013dde:	460b      	mov	r3, r1
 8013de0:	4640      	mov	r0, r8
 8013de2:	4649      	mov	r1, r9
 8013de4:	f7ec fa68 	bl	80002b8 <__aeabi_dsub>
 8013de8:	4602      	mov	r2, r0
 8013dea:	460b      	mov	r3, r1
 8013dec:	4606      	mov	r6, r0
 8013dee:	460f      	mov	r7, r1
 8013df0:	4640      	mov	r0, r8
 8013df2:	4649      	mov	r1, r9
 8013df4:	f7ec fa60 	bl	80002b8 <__aeabi_dsub>
 8013df8:	4622      	mov	r2, r4
 8013dfa:	462b      	mov	r3, r5
 8013dfc:	f7ec fa5c 	bl	80002b8 <__aeabi_dsub>
 8013e00:	a31b      	add	r3, pc, #108	; (adr r3, 8013e70 <__ieee754_rem_pio2+0x330>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	4604      	mov	r4, r0
 8013e08:	460d      	mov	r5, r1
 8013e0a:	ec51 0b18 	vmov	r0, r1, d8
 8013e0e:	f7ec fc0b 	bl	8000628 <__aeabi_dmul>
 8013e12:	4622      	mov	r2, r4
 8013e14:	462b      	mov	r3, r5
 8013e16:	f7ec fa4f 	bl	80002b8 <__aeabi_dsub>
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	460d      	mov	r5, r1
 8013e1e:	e75f      	b.n	8013ce0 <__ieee754_rem_pio2+0x1a0>
 8013e20:	4b1b      	ldr	r3, [pc, #108]	; (8013e90 <__ieee754_rem_pio2+0x350>)
 8013e22:	4598      	cmp	r8, r3
 8013e24:	dd36      	ble.n	8013e94 <__ieee754_rem_pio2+0x354>
 8013e26:	ee10 2a10 	vmov	r2, s0
 8013e2a:	462b      	mov	r3, r5
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	4629      	mov	r1, r5
 8013e30:	f7ec fa42 	bl	80002b8 <__aeabi_dsub>
 8013e34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013e38:	e9ca 0100 	strd	r0, r1, [sl]
 8013e3c:	e694      	b.n	8013b68 <__ieee754_rem_pio2+0x28>
 8013e3e:	bf00      	nop
 8013e40:	54400000 	.word	0x54400000
 8013e44:	3ff921fb 	.word	0x3ff921fb
 8013e48:	1a626331 	.word	0x1a626331
 8013e4c:	3dd0b461 	.word	0x3dd0b461
 8013e50:	1a600000 	.word	0x1a600000
 8013e54:	3dd0b461 	.word	0x3dd0b461
 8013e58:	2e037073 	.word	0x2e037073
 8013e5c:	3ba3198a 	.word	0x3ba3198a
 8013e60:	6dc9c883 	.word	0x6dc9c883
 8013e64:	3fe45f30 	.word	0x3fe45f30
 8013e68:	2e000000 	.word	0x2e000000
 8013e6c:	3ba3198a 	.word	0x3ba3198a
 8013e70:	252049c1 	.word	0x252049c1
 8013e74:	397b839a 	.word	0x397b839a
 8013e78:	3fe921fb 	.word	0x3fe921fb
 8013e7c:	4002d97b 	.word	0x4002d97b
 8013e80:	3ff921fb 	.word	0x3ff921fb
 8013e84:	413921fb 	.word	0x413921fb
 8013e88:	3fe00000 	.word	0x3fe00000
 8013e8c:	08024fdc 	.word	0x08024fdc
 8013e90:	7fefffff 	.word	0x7fefffff
 8013e94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013e98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8013e9c:	ee10 0a10 	vmov	r0, s0
 8013ea0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8013ea4:	ee10 6a10 	vmov	r6, s0
 8013ea8:	460f      	mov	r7, r1
 8013eaa:	f7ec fe57 	bl	8000b5c <__aeabi_d2iz>
 8013eae:	f7ec fb51 	bl	8000554 <__aeabi_i2d>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	4639      	mov	r1, r7
 8013eba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013ebe:	f7ec f9fb 	bl	80002b8 <__aeabi_dsub>
 8013ec2:	4b23      	ldr	r3, [pc, #140]	; (8013f50 <__ieee754_rem_pio2+0x410>)
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	f7ec fbaf 	bl	8000628 <__aeabi_dmul>
 8013eca:	460f      	mov	r7, r1
 8013ecc:	4606      	mov	r6, r0
 8013ece:	f7ec fe45 	bl	8000b5c <__aeabi_d2iz>
 8013ed2:	f7ec fb3f 	bl	8000554 <__aeabi_i2d>
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	460b      	mov	r3, r1
 8013eda:	4630      	mov	r0, r6
 8013edc:	4639      	mov	r1, r7
 8013ede:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ee2:	f7ec f9e9 	bl	80002b8 <__aeabi_dsub>
 8013ee6:	4b1a      	ldr	r3, [pc, #104]	; (8013f50 <__ieee754_rem_pio2+0x410>)
 8013ee8:	2200      	movs	r2, #0
 8013eea:	f7ec fb9d 	bl	8000628 <__aeabi_dmul>
 8013eee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013ef2:	ad04      	add	r5, sp, #16
 8013ef4:	f04f 0803 	mov.w	r8, #3
 8013ef8:	46a9      	mov	r9, r5
 8013efa:	2600      	movs	r6, #0
 8013efc:	2700      	movs	r7, #0
 8013efe:	4632      	mov	r2, r6
 8013f00:	463b      	mov	r3, r7
 8013f02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8013f06:	46c3      	mov	fp, r8
 8013f08:	3d08      	subs	r5, #8
 8013f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f0e:	f7ec fdf3 	bl	8000af8 <__aeabi_dcmpeq>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d1f3      	bne.n	8013efe <__ieee754_rem_pio2+0x3be>
 8013f16:	4b0f      	ldr	r3, [pc, #60]	; (8013f54 <__ieee754_rem_pio2+0x414>)
 8013f18:	9301      	str	r3, [sp, #4]
 8013f1a:	2302      	movs	r3, #2
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	4622      	mov	r2, r4
 8013f20:	465b      	mov	r3, fp
 8013f22:	4651      	mov	r1, sl
 8013f24:	4648      	mov	r0, r9
 8013f26:	f000 f8df 	bl	80140e8 <__kernel_rem_pio2>
 8013f2a:	9b02      	ldr	r3, [sp, #8]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	4683      	mov	fp, r0
 8013f30:	f6bf ae46 	bge.w	8013bc0 <__ieee754_rem_pio2+0x80>
 8013f34:	e9da 2100 	ldrd	r2, r1, [sl]
 8013f38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f3c:	e9ca 2300 	strd	r2, r3, [sl]
 8013f40:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f48:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013f4c:	e73a      	b.n	8013dc4 <__ieee754_rem_pio2+0x284>
 8013f4e:	bf00      	nop
 8013f50:	41700000 	.word	0x41700000
 8013f54:	0802505c 	.word	0x0802505c

08013f58 <__kernel_cos>:
 8013f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5c:	ec57 6b10 	vmov	r6, r7, d0
 8013f60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013f64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013f68:	ed8d 1b00 	vstr	d1, [sp]
 8013f6c:	da07      	bge.n	8013f7e <__kernel_cos+0x26>
 8013f6e:	ee10 0a10 	vmov	r0, s0
 8013f72:	4639      	mov	r1, r7
 8013f74:	f7ec fdf2 	bl	8000b5c <__aeabi_d2iz>
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	f000 8088 	beq.w	801408e <__kernel_cos+0x136>
 8013f7e:	4632      	mov	r2, r6
 8013f80:	463b      	mov	r3, r7
 8013f82:	4630      	mov	r0, r6
 8013f84:	4639      	mov	r1, r7
 8013f86:	f7ec fb4f 	bl	8000628 <__aeabi_dmul>
 8013f8a:	4b51      	ldr	r3, [pc, #324]	; (80140d0 <__kernel_cos+0x178>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	4604      	mov	r4, r0
 8013f90:	460d      	mov	r5, r1
 8013f92:	f7ec fb49 	bl	8000628 <__aeabi_dmul>
 8013f96:	a340      	add	r3, pc, #256	; (adr r3, 8014098 <__kernel_cos+0x140>)
 8013f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9c:	4682      	mov	sl, r0
 8013f9e:	468b      	mov	fp, r1
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	4629      	mov	r1, r5
 8013fa4:	f7ec fb40 	bl	8000628 <__aeabi_dmul>
 8013fa8:	a33d      	add	r3, pc, #244	; (adr r3, 80140a0 <__kernel_cos+0x148>)
 8013faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fae:	f7ec f985 	bl	80002bc <__adddf3>
 8013fb2:	4622      	mov	r2, r4
 8013fb4:	462b      	mov	r3, r5
 8013fb6:	f7ec fb37 	bl	8000628 <__aeabi_dmul>
 8013fba:	a33b      	add	r3, pc, #236	; (adr r3, 80140a8 <__kernel_cos+0x150>)
 8013fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc0:	f7ec f97a 	bl	80002b8 <__aeabi_dsub>
 8013fc4:	4622      	mov	r2, r4
 8013fc6:	462b      	mov	r3, r5
 8013fc8:	f7ec fb2e 	bl	8000628 <__aeabi_dmul>
 8013fcc:	a338      	add	r3, pc, #224	; (adr r3, 80140b0 <__kernel_cos+0x158>)
 8013fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd2:	f7ec f973 	bl	80002bc <__adddf3>
 8013fd6:	4622      	mov	r2, r4
 8013fd8:	462b      	mov	r3, r5
 8013fda:	f7ec fb25 	bl	8000628 <__aeabi_dmul>
 8013fde:	a336      	add	r3, pc, #216	; (adr r3, 80140b8 <__kernel_cos+0x160>)
 8013fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe4:	f7ec f968 	bl	80002b8 <__aeabi_dsub>
 8013fe8:	4622      	mov	r2, r4
 8013fea:	462b      	mov	r3, r5
 8013fec:	f7ec fb1c 	bl	8000628 <__aeabi_dmul>
 8013ff0:	a333      	add	r3, pc, #204	; (adr r3, 80140c0 <__kernel_cos+0x168>)
 8013ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff6:	f7ec f961 	bl	80002bc <__adddf3>
 8013ffa:	4622      	mov	r2, r4
 8013ffc:	462b      	mov	r3, r5
 8013ffe:	f7ec fb13 	bl	8000628 <__aeabi_dmul>
 8014002:	4622      	mov	r2, r4
 8014004:	462b      	mov	r3, r5
 8014006:	f7ec fb0f 	bl	8000628 <__aeabi_dmul>
 801400a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801400e:	4604      	mov	r4, r0
 8014010:	460d      	mov	r5, r1
 8014012:	4630      	mov	r0, r6
 8014014:	4639      	mov	r1, r7
 8014016:	f7ec fb07 	bl	8000628 <__aeabi_dmul>
 801401a:	460b      	mov	r3, r1
 801401c:	4602      	mov	r2, r0
 801401e:	4629      	mov	r1, r5
 8014020:	4620      	mov	r0, r4
 8014022:	f7ec f949 	bl	80002b8 <__aeabi_dsub>
 8014026:	4b2b      	ldr	r3, [pc, #172]	; (80140d4 <__kernel_cos+0x17c>)
 8014028:	4598      	cmp	r8, r3
 801402a:	4606      	mov	r6, r0
 801402c:	460f      	mov	r7, r1
 801402e:	dc10      	bgt.n	8014052 <__kernel_cos+0xfa>
 8014030:	4602      	mov	r2, r0
 8014032:	460b      	mov	r3, r1
 8014034:	4650      	mov	r0, sl
 8014036:	4659      	mov	r1, fp
 8014038:	f7ec f93e 	bl	80002b8 <__aeabi_dsub>
 801403c:	460b      	mov	r3, r1
 801403e:	4926      	ldr	r1, [pc, #152]	; (80140d8 <__kernel_cos+0x180>)
 8014040:	4602      	mov	r2, r0
 8014042:	2000      	movs	r0, #0
 8014044:	f7ec f938 	bl	80002b8 <__aeabi_dsub>
 8014048:	ec41 0b10 	vmov	d0, r0, r1
 801404c:	b003      	add	sp, #12
 801404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014052:	4b22      	ldr	r3, [pc, #136]	; (80140dc <__kernel_cos+0x184>)
 8014054:	4920      	ldr	r1, [pc, #128]	; (80140d8 <__kernel_cos+0x180>)
 8014056:	4598      	cmp	r8, r3
 8014058:	bfcc      	ite	gt
 801405a:	4d21      	ldrgt	r5, [pc, #132]	; (80140e0 <__kernel_cos+0x188>)
 801405c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8014060:	2400      	movs	r4, #0
 8014062:	4622      	mov	r2, r4
 8014064:	462b      	mov	r3, r5
 8014066:	2000      	movs	r0, #0
 8014068:	f7ec f926 	bl	80002b8 <__aeabi_dsub>
 801406c:	4622      	mov	r2, r4
 801406e:	4680      	mov	r8, r0
 8014070:	4689      	mov	r9, r1
 8014072:	462b      	mov	r3, r5
 8014074:	4650      	mov	r0, sl
 8014076:	4659      	mov	r1, fp
 8014078:	f7ec f91e 	bl	80002b8 <__aeabi_dsub>
 801407c:	4632      	mov	r2, r6
 801407e:	463b      	mov	r3, r7
 8014080:	f7ec f91a 	bl	80002b8 <__aeabi_dsub>
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	4640      	mov	r0, r8
 801408a:	4649      	mov	r1, r9
 801408c:	e7da      	b.n	8014044 <__kernel_cos+0xec>
 801408e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80140c8 <__kernel_cos+0x170>
 8014092:	e7db      	b.n	801404c <__kernel_cos+0xf4>
 8014094:	f3af 8000 	nop.w
 8014098:	be8838d4 	.word	0xbe8838d4
 801409c:	bda8fae9 	.word	0xbda8fae9
 80140a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80140a4:	3e21ee9e 	.word	0x3e21ee9e
 80140a8:	809c52ad 	.word	0x809c52ad
 80140ac:	3e927e4f 	.word	0x3e927e4f
 80140b0:	19cb1590 	.word	0x19cb1590
 80140b4:	3efa01a0 	.word	0x3efa01a0
 80140b8:	16c15177 	.word	0x16c15177
 80140bc:	3f56c16c 	.word	0x3f56c16c
 80140c0:	5555554c 	.word	0x5555554c
 80140c4:	3fa55555 	.word	0x3fa55555
 80140c8:	00000000 	.word	0x00000000
 80140cc:	3ff00000 	.word	0x3ff00000
 80140d0:	3fe00000 	.word	0x3fe00000
 80140d4:	3fd33332 	.word	0x3fd33332
 80140d8:	3ff00000 	.word	0x3ff00000
 80140dc:	3fe90000 	.word	0x3fe90000
 80140e0:	3fd20000 	.word	0x3fd20000
 80140e4:	00000000 	.word	0x00000000

080140e8 <__kernel_rem_pio2>:
 80140e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ec:	ed2d 8b02 	vpush	{d8}
 80140f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80140f4:	f112 0f14 	cmn.w	r2, #20
 80140f8:	9308      	str	r3, [sp, #32]
 80140fa:	9101      	str	r1, [sp, #4]
 80140fc:	4bc4      	ldr	r3, [pc, #784]	; (8014410 <__kernel_rem_pio2+0x328>)
 80140fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014100:	900b      	str	r0, [sp, #44]	; 0x2c
 8014102:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014106:	9302      	str	r3, [sp, #8]
 8014108:	9b08      	ldr	r3, [sp, #32]
 801410a:	f103 33ff 	add.w	r3, r3, #4294967295
 801410e:	bfa8      	it	ge
 8014110:	1ed4      	subge	r4, r2, #3
 8014112:	9306      	str	r3, [sp, #24]
 8014114:	bfb2      	itee	lt
 8014116:	2400      	movlt	r4, #0
 8014118:	2318      	movge	r3, #24
 801411a:	fb94 f4f3 	sdivge	r4, r4, r3
 801411e:	f06f 0317 	mvn.w	r3, #23
 8014122:	fb04 3303 	mla	r3, r4, r3, r3
 8014126:	eb03 0a02 	add.w	sl, r3, r2
 801412a:	9b02      	ldr	r3, [sp, #8]
 801412c:	9a06      	ldr	r2, [sp, #24]
 801412e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8014400 <__kernel_rem_pio2+0x318>
 8014132:	eb03 0802 	add.w	r8, r3, r2
 8014136:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014138:	1aa7      	subs	r7, r4, r2
 801413a:	ae22      	add	r6, sp, #136	; 0x88
 801413c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014140:	2500      	movs	r5, #0
 8014142:	4545      	cmp	r5, r8
 8014144:	dd13      	ble.n	801416e <__kernel_rem_pio2+0x86>
 8014146:	9b08      	ldr	r3, [sp, #32]
 8014148:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8014400 <__kernel_rem_pio2+0x318>
 801414c:	aa22      	add	r2, sp, #136	; 0x88
 801414e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014152:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014156:	f04f 0800 	mov.w	r8, #0
 801415a:	9b02      	ldr	r3, [sp, #8]
 801415c:	4598      	cmp	r8, r3
 801415e:	dc2f      	bgt.n	80141c0 <__kernel_rem_pio2+0xd8>
 8014160:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014164:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8014168:	462f      	mov	r7, r5
 801416a:	2600      	movs	r6, #0
 801416c:	e01b      	b.n	80141a6 <__kernel_rem_pio2+0xbe>
 801416e:	42ef      	cmn	r7, r5
 8014170:	d407      	bmi.n	8014182 <__kernel_rem_pio2+0x9a>
 8014172:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014176:	f7ec f9ed 	bl	8000554 <__aeabi_i2d>
 801417a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801417e:	3501      	adds	r5, #1
 8014180:	e7df      	b.n	8014142 <__kernel_rem_pio2+0x5a>
 8014182:	ec51 0b18 	vmov	r0, r1, d8
 8014186:	e7f8      	b.n	801417a <__kernel_rem_pio2+0x92>
 8014188:	e9d7 2300 	ldrd	r2, r3, [r7]
 801418c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014190:	f7ec fa4a 	bl	8000628 <__aeabi_dmul>
 8014194:	4602      	mov	r2, r0
 8014196:	460b      	mov	r3, r1
 8014198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801419c:	f7ec f88e 	bl	80002bc <__adddf3>
 80141a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80141a4:	3601      	adds	r6, #1
 80141a6:	9b06      	ldr	r3, [sp, #24]
 80141a8:	429e      	cmp	r6, r3
 80141aa:	f1a7 0708 	sub.w	r7, r7, #8
 80141ae:	ddeb      	ble.n	8014188 <__kernel_rem_pio2+0xa0>
 80141b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80141b4:	f108 0801 	add.w	r8, r8, #1
 80141b8:	ecab 7b02 	vstmia	fp!, {d7}
 80141bc:	3508      	adds	r5, #8
 80141be:	e7cc      	b.n	801415a <__kernel_rem_pio2+0x72>
 80141c0:	9b02      	ldr	r3, [sp, #8]
 80141c2:	aa0e      	add	r2, sp, #56	; 0x38
 80141c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80141c8:	930d      	str	r3, [sp, #52]	; 0x34
 80141ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80141cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80141d0:	9c02      	ldr	r4, [sp, #8]
 80141d2:	930c      	str	r3, [sp, #48]	; 0x30
 80141d4:	00e3      	lsls	r3, r4, #3
 80141d6:	930a      	str	r3, [sp, #40]	; 0x28
 80141d8:	ab9a      	add	r3, sp, #616	; 0x268
 80141da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80141de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80141e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80141e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80141e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80141ec:	46c3      	mov	fp, r8
 80141ee:	46a1      	mov	r9, r4
 80141f0:	f1b9 0f00 	cmp.w	r9, #0
 80141f4:	f1a5 0508 	sub.w	r5, r5, #8
 80141f8:	dc77      	bgt.n	80142ea <__kernel_rem_pio2+0x202>
 80141fa:	ec47 6b10 	vmov	d0, r6, r7
 80141fe:	4650      	mov	r0, sl
 8014200:	f000 fc0a 	bl	8014a18 <scalbn>
 8014204:	ec57 6b10 	vmov	r6, r7, d0
 8014208:	2200      	movs	r2, #0
 801420a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801420e:	ee10 0a10 	vmov	r0, s0
 8014212:	4639      	mov	r1, r7
 8014214:	f7ec fa08 	bl	8000628 <__aeabi_dmul>
 8014218:	ec41 0b10 	vmov	d0, r0, r1
 801421c:	f000 fb7c 	bl	8014918 <floor>
 8014220:	4b7c      	ldr	r3, [pc, #496]	; (8014414 <__kernel_rem_pio2+0x32c>)
 8014222:	ec51 0b10 	vmov	r0, r1, d0
 8014226:	2200      	movs	r2, #0
 8014228:	f7ec f9fe 	bl	8000628 <__aeabi_dmul>
 801422c:	4602      	mov	r2, r0
 801422e:	460b      	mov	r3, r1
 8014230:	4630      	mov	r0, r6
 8014232:	4639      	mov	r1, r7
 8014234:	f7ec f840 	bl	80002b8 <__aeabi_dsub>
 8014238:	460f      	mov	r7, r1
 801423a:	4606      	mov	r6, r0
 801423c:	f7ec fc8e 	bl	8000b5c <__aeabi_d2iz>
 8014240:	9004      	str	r0, [sp, #16]
 8014242:	f7ec f987 	bl	8000554 <__aeabi_i2d>
 8014246:	4602      	mov	r2, r0
 8014248:	460b      	mov	r3, r1
 801424a:	4630      	mov	r0, r6
 801424c:	4639      	mov	r1, r7
 801424e:	f7ec f833 	bl	80002b8 <__aeabi_dsub>
 8014252:	f1ba 0f00 	cmp.w	sl, #0
 8014256:	4606      	mov	r6, r0
 8014258:	460f      	mov	r7, r1
 801425a:	dd6d      	ble.n	8014338 <__kernel_rem_pio2+0x250>
 801425c:	1e62      	subs	r2, r4, #1
 801425e:	ab0e      	add	r3, sp, #56	; 0x38
 8014260:	9d04      	ldr	r5, [sp, #16]
 8014262:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014266:	f1ca 0118 	rsb	r1, sl, #24
 801426a:	fa40 f301 	asr.w	r3, r0, r1
 801426e:	441d      	add	r5, r3
 8014270:	408b      	lsls	r3, r1
 8014272:	1ac0      	subs	r0, r0, r3
 8014274:	ab0e      	add	r3, sp, #56	; 0x38
 8014276:	9504      	str	r5, [sp, #16]
 8014278:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801427c:	f1ca 0317 	rsb	r3, sl, #23
 8014280:	fa40 fb03 	asr.w	fp, r0, r3
 8014284:	f1bb 0f00 	cmp.w	fp, #0
 8014288:	dd65      	ble.n	8014356 <__kernel_rem_pio2+0x26e>
 801428a:	9b04      	ldr	r3, [sp, #16]
 801428c:	2200      	movs	r2, #0
 801428e:	3301      	adds	r3, #1
 8014290:	9304      	str	r3, [sp, #16]
 8014292:	4615      	mov	r5, r2
 8014294:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014298:	4294      	cmp	r4, r2
 801429a:	f300 809c 	bgt.w	80143d6 <__kernel_rem_pio2+0x2ee>
 801429e:	f1ba 0f00 	cmp.w	sl, #0
 80142a2:	dd07      	ble.n	80142b4 <__kernel_rem_pio2+0x1cc>
 80142a4:	f1ba 0f01 	cmp.w	sl, #1
 80142a8:	f000 80c0 	beq.w	801442c <__kernel_rem_pio2+0x344>
 80142ac:	f1ba 0f02 	cmp.w	sl, #2
 80142b0:	f000 80c6 	beq.w	8014440 <__kernel_rem_pio2+0x358>
 80142b4:	f1bb 0f02 	cmp.w	fp, #2
 80142b8:	d14d      	bne.n	8014356 <__kernel_rem_pio2+0x26e>
 80142ba:	4632      	mov	r2, r6
 80142bc:	463b      	mov	r3, r7
 80142be:	4956      	ldr	r1, [pc, #344]	; (8014418 <__kernel_rem_pio2+0x330>)
 80142c0:	2000      	movs	r0, #0
 80142c2:	f7eb fff9 	bl	80002b8 <__aeabi_dsub>
 80142c6:	4606      	mov	r6, r0
 80142c8:	460f      	mov	r7, r1
 80142ca:	2d00      	cmp	r5, #0
 80142cc:	d043      	beq.n	8014356 <__kernel_rem_pio2+0x26e>
 80142ce:	4650      	mov	r0, sl
 80142d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8014408 <__kernel_rem_pio2+0x320>
 80142d4:	f000 fba0 	bl	8014a18 <scalbn>
 80142d8:	4630      	mov	r0, r6
 80142da:	4639      	mov	r1, r7
 80142dc:	ec53 2b10 	vmov	r2, r3, d0
 80142e0:	f7eb ffea 	bl	80002b8 <__aeabi_dsub>
 80142e4:	4606      	mov	r6, r0
 80142e6:	460f      	mov	r7, r1
 80142e8:	e035      	b.n	8014356 <__kernel_rem_pio2+0x26e>
 80142ea:	4b4c      	ldr	r3, [pc, #304]	; (801441c <__kernel_rem_pio2+0x334>)
 80142ec:	2200      	movs	r2, #0
 80142ee:	4630      	mov	r0, r6
 80142f0:	4639      	mov	r1, r7
 80142f2:	f7ec f999 	bl	8000628 <__aeabi_dmul>
 80142f6:	f7ec fc31 	bl	8000b5c <__aeabi_d2iz>
 80142fa:	f7ec f92b 	bl	8000554 <__aeabi_i2d>
 80142fe:	4602      	mov	r2, r0
 8014300:	460b      	mov	r3, r1
 8014302:	ec43 2b18 	vmov	d8, r2, r3
 8014306:	4b46      	ldr	r3, [pc, #280]	; (8014420 <__kernel_rem_pio2+0x338>)
 8014308:	2200      	movs	r2, #0
 801430a:	f7ec f98d 	bl	8000628 <__aeabi_dmul>
 801430e:	4602      	mov	r2, r0
 8014310:	460b      	mov	r3, r1
 8014312:	4630      	mov	r0, r6
 8014314:	4639      	mov	r1, r7
 8014316:	f7eb ffcf 	bl	80002b8 <__aeabi_dsub>
 801431a:	f7ec fc1f 	bl	8000b5c <__aeabi_d2iz>
 801431e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014322:	f84b 0b04 	str.w	r0, [fp], #4
 8014326:	ec51 0b18 	vmov	r0, r1, d8
 801432a:	f7eb ffc7 	bl	80002bc <__adddf3>
 801432e:	f109 39ff 	add.w	r9, r9, #4294967295
 8014332:	4606      	mov	r6, r0
 8014334:	460f      	mov	r7, r1
 8014336:	e75b      	b.n	80141f0 <__kernel_rem_pio2+0x108>
 8014338:	d106      	bne.n	8014348 <__kernel_rem_pio2+0x260>
 801433a:	1e63      	subs	r3, r4, #1
 801433c:	aa0e      	add	r2, sp, #56	; 0x38
 801433e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014342:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8014346:	e79d      	b.n	8014284 <__kernel_rem_pio2+0x19c>
 8014348:	4b36      	ldr	r3, [pc, #216]	; (8014424 <__kernel_rem_pio2+0x33c>)
 801434a:	2200      	movs	r2, #0
 801434c:	f7ec fbf2 	bl	8000b34 <__aeabi_dcmpge>
 8014350:	2800      	cmp	r0, #0
 8014352:	d13d      	bne.n	80143d0 <__kernel_rem_pio2+0x2e8>
 8014354:	4683      	mov	fp, r0
 8014356:	2200      	movs	r2, #0
 8014358:	2300      	movs	r3, #0
 801435a:	4630      	mov	r0, r6
 801435c:	4639      	mov	r1, r7
 801435e:	f7ec fbcb 	bl	8000af8 <__aeabi_dcmpeq>
 8014362:	2800      	cmp	r0, #0
 8014364:	f000 80c0 	beq.w	80144e8 <__kernel_rem_pio2+0x400>
 8014368:	1e65      	subs	r5, r4, #1
 801436a:	462b      	mov	r3, r5
 801436c:	2200      	movs	r2, #0
 801436e:	9902      	ldr	r1, [sp, #8]
 8014370:	428b      	cmp	r3, r1
 8014372:	da6c      	bge.n	801444e <__kernel_rem_pio2+0x366>
 8014374:	2a00      	cmp	r2, #0
 8014376:	f000 8089 	beq.w	801448c <__kernel_rem_pio2+0x3a4>
 801437a:	ab0e      	add	r3, sp, #56	; 0x38
 801437c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014380:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014384:	2b00      	cmp	r3, #0
 8014386:	f000 80ad 	beq.w	80144e4 <__kernel_rem_pio2+0x3fc>
 801438a:	4650      	mov	r0, sl
 801438c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8014408 <__kernel_rem_pio2+0x320>
 8014390:	f000 fb42 	bl	8014a18 <scalbn>
 8014394:	ab9a      	add	r3, sp, #616	; 0x268
 8014396:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801439a:	ec57 6b10 	vmov	r6, r7, d0
 801439e:	00ec      	lsls	r4, r5, #3
 80143a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80143a4:	46aa      	mov	sl, r5
 80143a6:	f1ba 0f00 	cmp.w	sl, #0
 80143aa:	f280 80d6 	bge.w	801455a <__kernel_rem_pio2+0x472>
 80143ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8014400 <__kernel_rem_pio2+0x318>
 80143b2:	462e      	mov	r6, r5
 80143b4:	2e00      	cmp	r6, #0
 80143b6:	f2c0 8104 	blt.w	80145c2 <__kernel_rem_pio2+0x4da>
 80143ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80143bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80143c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8014428 <__kernel_rem_pio2+0x340>
 80143c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80143c8:	f04f 0800 	mov.w	r8, #0
 80143cc:	1baf      	subs	r7, r5, r6
 80143ce:	e0ea      	b.n	80145a6 <__kernel_rem_pio2+0x4be>
 80143d0:	f04f 0b02 	mov.w	fp, #2
 80143d4:	e759      	b.n	801428a <__kernel_rem_pio2+0x1a2>
 80143d6:	f8d8 3000 	ldr.w	r3, [r8]
 80143da:	b955      	cbnz	r5, 80143f2 <__kernel_rem_pio2+0x30a>
 80143dc:	b123      	cbz	r3, 80143e8 <__kernel_rem_pio2+0x300>
 80143de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80143e2:	f8c8 3000 	str.w	r3, [r8]
 80143e6:	2301      	movs	r3, #1
 80143e8:	3201      	adds	r2, #1
 80143ea:	f108 0804 	add.w	r8, r8, #4
 80143ee:	461d      	mov	r5, r3
 80143f0:	e752      	b.n	8014298 <__kernel_rem_pio2+0x1b0>
 80143f2:	1acb      	subs	r3, r1, r3
 80143f4:	f8c8 3000 	str.w	r3, [r8]
 80143f8:	462b      	mov	r3, r5
 80143fa:	e7f5      	b.n	80143e8 <__kernel_rem_pio2+0x300>
 80143fc:	f3af 8000 	nop.w
	...
 801440c:	3ff00000 	.word	0x3ff00000
 8014410:	080251a8 	.word	0x080251a8
 8014414:	40200000 	.word	0x40200000
 8014418:	3ff00000 	.word	0x3ff00000
 801441c:	3e700000 	.word	0x3e700000
 8014420:	41700000 	.word	0x41700000
 8014424:	3fe00000 	.word	0x3fe00000
 8014428:	08025168 	.word	0x08025168
 801442c:	1e62      	subs	r2, r4, #1
 801442e:	ab0e      	add	r3, sp, #56	; 0x38
 8014430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014434:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014438:	a90e      	add	r1, sp, #56	; 0x38
 801443a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801443e:	e739      	b.n	80142b4 <__kernel_rem_pio2+0x1cc>
 8014440:	1e62      	subs	r2, r4, #1
 8014442:	ab0e      	add	r3, sp, #56	; 0x38
 8014444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014448:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801444c:	e7f4      	b.n	8014438 <__kernel_rem_pio2+0x350>
 801444e:	a90e      	add	r1, sp, #56	; 0x38
 8014450:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014454:	3b01      	subs	r3, #1
 8014456:	430a      	orrs	r2, r1
 8014458:	e789      	b.n	801436e <__kernel_rem_pio2+0x286>
 801445a:	3301      	adds	r3, #1
 801445c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014460:	2900      	cmp	r1, #0
 8014462:	d0fa      	beq.n	801445a <__kernel_rem_pio2+0x372>
 8014464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014466:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801446a:	446a      	add	r2, sp
 801446c:	3a98      	subs	r2, #152	; 0x98
 801446e:	920a      	str	r2, [sp, #40]	; 0x28
 8014470:	9a08      	ldr	r2, [sp, #32]
 8014472:	18e3      	adds	r3, r4, r3
 8014474:	18a5      	adds	r5, r4, r2
 8014476:	aa22      	add	r2, sp, #136	; 0x88
 8014478:	f104 0801 	add.w	r8, r4, #1
 801447c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8014480:	9304      	str	r3, [sp, #16]
 8014482:	9b04      	ldr	r3, [sp, #16]
 8014484:	4543      	cmp	r3, r8
 8014486:	da04      	bge.n	8014492 <__kernel_rem_pio2+0x3aa>
 8014488:	461c      	mov	r4, r3
 801448a:	e6a3      	b.n	80141d4 <__kernel_rem_pio2+0xec>
 801448c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801448e:	2301      	movs	r3, #1
 8014490:	e7e4      	b.n	801445c <__kernel_rem_pio2+0x374>
 8014492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014494:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014498:	f7ec f85c 	bl	8000554 <__aeabi_i2d>
 801449c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80144a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144a2:	46ab      	mov	fp, r5
 80144a4:	461c      	mov	r4, r3
 80144a6:	f04f 0900 	mov.w	r9, #0
 80144aa:	2600      	movs	r6, #0
 80144ac:	2700      	movs	r7, #0
 80144ae:	9b06      	ldr	r3, [sp, #24]
 80144b0:	4599      	cmp	r9, r3
 80144b2:	dd06      	ble.n	80144c2 <__kernel_rem_pio2+0x3da>
 80144b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80144ba:	f108 0801 	add.w	r8, r8, #1
 80144be:	930a      	str	r3, [sp, #40]	; 0x28
 80144c0:	e7df      	b.n	8014482 <__kernel_rem_pio2+0x39a>
 80144c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80144c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80144ca:	f7ec f8ad 	bl	8000628 <__aeabi_dmul>
 80144ce:	4602      	mov	r2, r0
 80144d0:	460b      	mov	r3, r1
 80144d2:	4630      	mov	r0, r6
 80144d4:	4639      	mov	r1, r7
 80144d6:	f7eb fef1 	bl	80002bc <__adddf3>
 80144da:	f109 0901 	add.w	r9, r9, #1
 80144de:	4606      	mov	r6, r0
 80144e0:	460f      	mov	r7, r1
 80144e2:	e7e4      	b.n	80144ae <__kernel_rem_pio2+0x3c6>
 80144e4:	3d01      	subs	r5, #1
 80144e6:	e748      	b.n	801437a <__kernel_rem_pio2+0x292>
 80144e8:	ec47 6b10 	vmov	d0, r6, r7
 80144ec:	f1ca 0000 	rsb	r0, sl, #0
 80144f0:	f000 fa92 	bl	8014a18 <scalbn>
 80144f4:	ec57 6b10 	vmov	r6, r7, d0
 80144f8:	4ba0      	ldr	r3, [pc, #640]	; (801477c <__kernel_rem_pio2+0x694>)
 80144fa:	ee10 0a10 	vmov	r0, s0
 80144fe:	2200      	movs	r2, #0
 8014500:	4639      	mov	r1, r7
 8014502:	f7ec fb17 	bl	8000b34 <__aeabi_dcmpge>
 8014506:	b1f8      	cbz	r0, 8014548 <__kernel_rem_pio2+0x460>
 8014508:	4b9d      	ldr	r3, [pc, #628]	; (8014780 <__kernel_rem_pio2+0x698>)
 801450a:	2200      	movs	r2, #0
 801450c:	4630      	mov	r0, r6
 801450e:	4639      	mov	r1, r7
 8014510:	f7ec f88a 	bl	8000628 <__aeabi_dmul>
 8014514:	f7ec fb22 	bl	8000b5c <__aeabi_d2iz>
 8014518:	4680      	mov	r8, r0
 801451a:	f7ec f81b 	bl	8000554 <__aeabi_i2d>
 801451e:	4b97      	ldr	r3, [pc, #604]	; (801477c <__kernel_rem_pio2+0x694>)
 8014520:	2200      	movs	r2, #0
 8014522:	f7ec f881 	bl	8000628 <__aeabi_dmul>
 8014526:	460b      	mov	r3, r1
 8014528:	4602      	mov	r2, r0
 801452a:	4639      	mov	r1, r7
 801452c:	4630      	mov	r0, r6
 801452e:	f7eb fec3 	bl	80002b8 <__aeabi_dsub>
 8014532:	f7ec fb13 	bl	8000b5c <__aeabi_d2iz>
 8014536:	1c65      	adds	r5, r4, #1
 8014538:	ab0e      	add	r3, sp, #56	; 0x38
 801453a:	f10a 0a18 	add.w	sl, sl, #24
 801453e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014542:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014546:	e720      	b.n	801438a <__kernel_rem_pio2+0x2a2>
 8014548:	4630      	mov	r0, r6
 801454a:	4639      	mov	r1, r7
 801454c:	f7ec fb06 	bl	8000b5c <__aeabi_d2iz>
 8014550:	ab0e      	add	r3, sp, #56	; 0x38
 8014552:	4625      	mov	r5, r4
 8014554:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014558:	e717      	b.n	801438a <__kernel_rem_pio2+0x2a2>
 801455a:	ab0e      	add	r3, sp, #56	; 0x38
 801455c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8014560:	f7eb fff8 	bl	8000554 <__aeabi_i2d>
 8014564:	4632      	mov	r2, r6
 8014566:	463b      	mov	r3, r7
 8014568:	f7ec f85e 	bl	8000628 <__aeabi_dmul>
 801456c:	4b84      	ldr	r3, [pc, #528]	; (8014780 <__kernel_rem_pio2+0x698>)
 801456e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8014572:	2200      	movs	r2, #0
 8014574:	4630      	mov	r0, r6
 8014576:	4639      	mov	r1, r7
 8014578:	f7ec f856 	bl	8000628 <__aeabi_dmul>
 801457c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014580:	4606      	mov	r6, r0
 8014582:	460f      	mov	r7, r1
 8014584:	e70f      	b.n	80143a6 <__kernel_rem_pio2+0x2be>
 8014586:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801458a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801458e:	f7ec f84b 	bl	8000628 <__aeabi_dmul>
 8014592:	4602      	mov	r2, r0
 8014594:	460b      	mov	r3, r1
 8014596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801459a:	f7eb fe8f 	bl	80002bc <__adddf3>
 801459e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80145a2:	f108 0801 	add.w	r8, r8, #1
 80145a6:	9b02      	ldr	r3, [sp, #8]
 80145a8:	4598      	cmp	r8, r3
 80145aa:	dc01      	bgt.n	80145b0 <__kernel_rem_pio2+0x4c8>
 80145ac:	45b8      	cmp	r8, r7
 80145ae:	ddea      	ble.n	8014586 <__kernel_rem_pio2+0x49e>
 80145b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80145b4:	ab4a      	add	r3, sp, #296	; 0x128
 80145b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80145ba:	ed87 7b00 	vstr	d7, [r7]
 80145be:	3e01      	subs	r6, #1
 80145c0:	e6f8      	b.n	80143b4 <__kernel_rem_pio2+0x2cc>
 80145c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80145c4:	2b02      	cmp	r3, #2
 80145c6:	dc0b      	bgt.n	80145e0 <__kernel_rem_pio2+0x4f8>
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	dc35      	bgt.n	8014638 <__kernel_rem_pio2+0x550>
 80145cc:	d059      	beq.n	8014682 <__kernel_rem_pio2+0x59a>
 80145ce:	9b04      	ldr	r3, [sp, #16]
 80145d0:	f003 0007 	and.w	r0, r3, #7
 80145d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80145d8:	ecbd 8b02 	vpop	{d8}
 80145dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80145e2:	2b03      	cmp	r3, #3
 80145e4:	d1f3      	bne.n	80145ce <__kernel_rem_pio2+0x4e6>
 80145e6:	ab4a      	add	r3, sp, #296	; 0x128
 80145e8:	4423      	add	r3, r4
 80145ea:	9306      	str	r3, [sp, #24]
 80145ec:	461c      	mov	r4, r3
 80145ee:	469a      	mov	sl, r3
 80145f0:	9502      	str	r5, [sp, #8]
 80145f2:	9b02      	ldr	r3, [sp, #8]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	f1aa 0a08 	sub.w	sl, sl, #8
 80145fa:	dc6b      	bgt.n	80146d4 <__kernel_rem_pio2+0x5ec>
 80145fc:	46aa      	mov	sl, r5
 80145fe:	f1ba 0f01 	cmp.w	sl, #1
 8014602:	f1a4 0408 	sub.w	r4, r4, #8
 8014606:	f300 8085 	bgt.w	8014714 <__kernel_rem_pio2+0x62c>
 801460a:	9c06      	ldr	r4, [sp, #24]
 801460c:	2000      	movs	r0, #0
 801460e:	3408      	adds	r4, #8
 8014610:	2100      	movs	r1, #0
 8014612:	2d01      	cmp	r5, #1
 8014614:	f300 809d 	bgt.w	8014752 <__kernel_rem_pio2+0x66a>
 8014618:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801461c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8014620:	f1bb 0f00 	cmp.w	fp, #0
 8014624:	f040 809b 	bne.w	801475e <__kernel_rem_pio2+0x676>
 8014628:	9b01      	ldr	r3, [sp, #4]
 801462a:	e9c3 5600 	strd	r5, r6, [r3]
 801462e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8014632:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014636:	e7ca      	b.n	80145ce <__kernel_rem_pio2+0x4e6>
 8014638:	3408      	adds	r4, #8
 801463a:	ab4a      	add	r3, sp, #296	; 0x128
 801463c:	441c      	add	r4, r3
 801463e:	462e      	mov	r6, r5
 8014640:	2000      	movs	r0, #0
 8014642:	2100      	movs	r1, #0
 8014644:	2e00      	cmp	r6, #0
 8014646:	da36      	bge.n	80146b6 <__kernel_rem_pio2+0x5ce>
 8014648:	f1bb 0f00 	cmp.w	fp, #0
 801464c:	d039      	beq.n	80146c2 <__kernel_rem_pio2+0x5da>
 801464e:	4602      	mov	r2, r0
 8014650:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014654:	9c01      	ldr	r4, [sp, #4]
 8014656:	e9c4 2300 	strd	r2, r3, [r4]
 801465a:	4602      	mov	r2, r0
 801465c:	460b      	mov	r3, r1
 801465e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014662:	f7eb fe29 	bl	80002b8 <__aeabi_dsub>
 8014666:	ae4c      	add	r6, sp, #304	; 0x130
 8014668:	2401      	movs	r4, #1
 801466a:	42a5      	cmp	r5, r4
 801466c:	da2c      	bge.n	80146c8 <__kernel_rem_pio2+0x5e0>
 801466e:	f1bb 0f00 	cmp.w	fp, #0
 8014672:	d002      	beq.n	801467a <__kernel_rem_pio2+0x592>
 8014674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014678:	4619      	mov	r1, r3
 801467a:	9b01      	ldr	r3, [sp, #4]
 801467c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014680:	e7a5      	b.n	80145ce <__kernel_rem_pio2+0x4e6>
 8014682:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8014686:	eb0d 0403 	add.w	r4, sp, r3
 801468a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801468e:	2000      	movs	r0, #0
 8014690:	2100      	movs	r1, #0
 8014692:	2d00      	cmp	r5, #0
 8014694:	da09      	bge.n	80146aa <__kernel_rem_pio2+0x5c2>
 8014696:	f1bb 0f00 	cmp.w	fp, #0
 801469a:	d002      	beq.n	80146a2 <__kernel_rem_pio2+0x5ba>
 801469c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146a0:	4619      	mov	r1, r3
 80146a2:	9b01      	ldr	r3, [sp, #4]
 80146a4:	e9c3 0100 	strd	r0, r1, [r3]
 80146a8:	e791      	b.n	80145ce <__kernel_rem_pio2+0x4e6>
 80146aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80146ae:	f7eb fe05 	bl	80002bc <__adddf3>
 80146b2:	3d01      	subs	r5, #1
 80146b4:	e7ed      	b.n	8014692 <__kernel_rem_pio2+0x5aa>
 80146b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80146ba:	f7eb fdff 	bl	80002bc <__adddf3>
 80146be:	3e01      	subs	r6, #1
 80146c0:	e7c0      	b.n	8014644 <__kernel_rem_pio2+0x55c>
 80146c2:	4602      	mov	r2, r0
 80146c4:	460b      	mov	r3, r1
 80146c6:	e7c5      	b.n	8014654 <__kernel_rem_pio2+0x56c>
 80146c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80146cc:	f7eb fdf6 	bl	80002bc <__adddf3>
 80146d0:	3401      	adds	r4, #1
 80146d2:	e7ca      	b.n	801466a <__kernel_rem_pio2+0x582>
 80146d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80146d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80146dc:	9b02      	ldr	r3, [sp, #8]
 80146de:	3b01      	subs	r3, #1
 80146e0:	9302      	str	r3, [sp, #8]
 80146e2:	4632      	mov	r2, r6
 80146e4:	463b      	mov	r3, r7
 80146e6:	4640      	mov	r0, r8
 80146e8:	4649      	mov	r1, r9
 80146ea:	f7eb fde7 	bl	80002bc <__adddf3>
 80146ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80146f2:	4602      	mov	r2, r0
 80146f4:	460b      	mov	r3, r1
 80146f6:	4640      	mov	r0, r8
 80146f8:	4649      	mov	r1, r9
 80146fa:	f7eb fddd 	bl	80002b8 <__aeabi_dsub>
 80146fe:	4632      	mov	r2, r6
 8014700:	463b      	mov	r3, r7
 8014702:	f7eb fddb 	bl	80002bc <__adddf3>
 8014706:	ed9d 7b08 	vldr	d7, [sp, #32]
 801470a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801470e:	ed8a 7b00 	vstr	d7, [sl]
 8014712:	e76e      	b.n	80145f2 <__kernel_rem_pio2+0x50a>
 8014714:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014718:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801471c:	4640      	mov	r0, r8
 801471e:	4632      	mov	r2, r6
 8014720:	463b      	mov	r3, r7
 8014722:	4649      	mov	r1, r9
 8014724:	f7eb fdca 	bl	80002bc <__adddf3>
 8014728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801472c:	4602      	mov	r2, r0
 801472e:	460b      	mov	r3, r1
 8014730:	4640      	mov	r0, r8
 8014732:	4649      	mov	r1, r9
 8014734:	f7eb fdc0 	bl	80002b8 <__aeabi_dsub>
 8014738:	4632      	mov	r2, r6
 801473a:	463b      	mov	r3, r7
 801473c:	f7eb fdbe 	bl	80002bc <__adddf3>
 8014740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014744:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014748:	ed84 7b00 	vstr	d7, [r4]
 801474c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014750:	e755      	b.n	80145fe <__kernel_rem_pio2+0x516>
 8014752:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014756:	f7eb fdb1 	bl	80002bc <__adddf3>
 801475a:	3d01      	subs	r5, #1
 801475c:	e759      	b.n	8014612 <__kernel_rem_pio2+0x52a>
 801475e:	9b01      	ldr	r3, [sp, #4]
 8014760:	9a01      	ldr	r2, [sp, #4]
 8014762:	601d      	str	r5, [r3, #0]
 8014764:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8014768:	605c      	str	r4, [r3, #4]
 801476a:	609f      	str	r7, [r3, #8]
 801476c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8014770:	60d3      	str	r3, [r2, #12]
 8014772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014776:	6110      	str	r0, [r2, #16]
 8014778:	6153      	str	r3, [r2, #20]
 801477a:	e728      	b.n	80145ce <__kernel_rem_pio2+0x4e6>
 801477c:	41700000 	.word	0x41700000
 8014780:	3e700000 	.word	0x3e700000
 8014784:	00000000 	.word	0x00000000

08014788 <__kernel_sin>:
 8014788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801478c:	ed2d 8b04 	vpush	{d8-d9}
 8014790:	eeb0 8a41 	vmov.f32	s16, s2
 8014794:	eef0 8a61 	vmov.f32	s17, s3
 8014798:	ec55 4b10 	vmov	r4, r5, d0
 801479c:	b083      	sub	sp, #12
 801479e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80147a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80147a6:	9001      	str	r0, [sp, #4]
 80147a8:	da06      	bge.n	80147b8 <__kernel_sin+0x30>
 80147aa:	ee10 0a10 	vmov	r0, s0
 80147ae:	4629      	mov	r1, r5
 80147b0:	f7ec f9d4 	bl	8000b5c <__aeabi_d2iz>
 80147b4:	2800      	cmp	r0, #0
 80147b6:	d051      	beq.n	801485c <__kernel_sin+0xd4>
 80147b8:	4622      	mov	r2, r4
 80147ba:	462b      	mov	r3, r5
 80147bc:	4620      	mov	r0, r4
 80147be:	4629      	mov	r1, r5
 80147c0:	f7eb ff32 	bl	8000628 <__aeabi_dmul>
 80147c4:	4682      	mov	sl, r0
 80147c6:	468b      	mov	fp, r1
 80147c8:	4602      	mov	r2, r0
 80147ca:	460b      	mov	r3, r1
 80147cc:	4620      	mov	r0, r4
 80147ce:	4629      	mov	r1, r5
 80147d0:	f7eb ff2a 	bl	8000628 <__aeabi_dmul>
 80147d4:	a341      	add	r3, pc, #260	; (adr r3, 80148dc <__kernel_sin+0x154>)
 80147d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147da:	4680      	mov	r8, r0
 80147dc:	4689      	mov	r9, r1
 80147de:	4650      	mov	r0, sl
 80147e0:	4659      	mov	r1, fp
 80147e2:	f7eb ff21 	bl	8000628 <__aeabi_dmul>
 80147e6:	a33f      	add	r3, pc, #252	; (adr r3, 80148e4 <__kernel_sin+0x15c>)
 80147e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ec:	f7eb fd64 	bl	80002b8 <__aeabi_dsub>
 80147f0:	4652      	mov	r2, sl
 80147f2:	465b      	mov	r3, fp
 80147f4:	f7eb ff18 	bl	8000628 <__aeabi_dmul>
 80147f8:	a33c      	add	r3, pc, #240	; (adr r3, 80148ec <__kernel_sin+0x164>)
 80147fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fe:	f7eb fd5d 	bl	80002bc <__adddf3>
 8014802:	4652      	mov	r2, sl
 8014804:	465b      	mov	r3, fp
 8014806:	f7eb ff0f 	bl	8000628 <__aeabi_dmul>
 801480a:	a33a      	add	r3, pc, #232	; (adr r3, 80148f4 <__kernel_sin+0x16c>)
 801480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014810:	f7eb fd52 	bl	80002b8 <__aeabi_dsub>
 8014814:	4652      	mov	r2, sl
 8014816:	465b      	mov	r3, fp
 8014818:	f7eb ff06 	bl	8000628 <__aeabi_dmul>
 801481c:	a337      	add	r3, pc, #220	; (adr r3, 80148fc <__kernel_sin+0x174>)
 801481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014822:	f7eb fd4b 	bl	80002bc <__adddf3>
 8014826:	9b01      	ldr	r3, [sp, #4]
 8014828:	4606      	mov	r6, r0
 801482a:	460f      	mov	r7, r1
 801482c:	b9eb      	cbnz	r3, 801486a <__kernel_sin+0xe2>
 801482e:	4602      	mov	r2, r0
 8014830:	460b      	mov	r3, r1
 8014832:	4650      	mov	r0, sl
 8014834:	4659      	mov	r1, fp
 8014836:	f7eb fef7 	bl	8000628 <__aeabi_dmul>
 801483a:	a325      	add	r3, pc, #148	; (adr r3, 80148d0 <__kernel_sin+0x148>)
 801483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014840:	f7eb fd3a 	bl	80002b8 <__aeabi_dsub>
 8014844:	4642      	mov	r2, r8
 8014846:	464b      	mov	r3, r9
 8014848:	f7eb feee 	bl	8000628 <__aeabi_dmul>
 801484c:	4602      	mov	r2, r0
 801484e:	460b      	mov	r3, r1
 8014850:	4620      	mov	r0, r4
 8014852:	4629      	mov	r1, r5
 8014854:	f7eb fd32 	bl	80002bc <__adddf3>
 8014858:	4604      	mov	r4, r0
 801485a:	460d      	mov	r5, r1
 801485c:	ec45 4b10 	vmov	d0, r4, r5
 8014860:	b003      	add	sp, #12
 8014862:	ecbd 8b04 	vpop	{d8-d9}
 8014866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486a:	4b1b      	ldr	r3, [pc, #108]	; (80148d8 <__kernel_sin+0x150>)
 801486c:	ec51 0b18 	vmov	r0, r1, d8
 8014870:	2200      	movs	r2, #0
 8014872:	f7eb fed9 	bl	8000628 <__aeabi_dmul>
 8014876:	4632      	mov	r2, r6
 8014878:	ec41 0b19 	vmov	d9, r0, r1
 801487c:	463b      	mov	r3, r7
 801487e:	4640      	mov	r0, r8
 8014880:	4649      	mov	r1, r9
 8014882:	f7eb fed1 	bl	8000628 <__aeabi_dmul>
 8014886:	4602      	mov	r2, r0
 8014888:	460b      	mov	r3, r1
 801488a:	ec51 0b19 	vmov	r0, r1, d9
 801488e:	f7eb fd13 	bl	80002b8 <__aeabi_dsub>
 8014892:	4652      	mov	r2, sl
 8014894:	465b      	mov	r3, fp
 8014896:	f7eb fec7 	bl	8000628 <__aeabi_dmul>
 801489a:	ec53 2b18 	vmov	r2, r3, d8
 801489e:	f7eb fd0b 	bl	80002b8 <__aeabi_dsub>
 80148a2:	a30b      	add	r3, pc, #44	; (adr r3, 80148d0 <__kernel_sin+0x148>)
 80148a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a8:	4606      	mov	r6, r0
 80148aa:	460f      	mov	r7, r1
 80148ac:	4640      	mov	r0, r8
 80148ae:	4649      	mov	r1, r9
 80148b0:	f7eb feba 	bl	8000628 <__aeabi_dmul>
 80148b4:	4602      	mov	r2, r0
 80148b6:	460b      	mov	r3, r1
 80148b8:	4630      	mov	r0, r6
 80148ba:	4639      	mov	r1, r7
 80148bc:	f7eb fcfe 	bl	80002bc <__adddf3>
 80148c0:	4602      	mov	r2, r0
 80148c2:	460b      	mov	r3, r1
 80148c4:	4620      	mov	r0, r4
 80148c6:	4629      	mov	r1, r5
 80148c8:	f7eb fcf6 	bl	80002b8 <__aeabi_dsub>
 80148cc:	e7c4      	b.n	8014858 <__kernel_sin+0xd0>
 80148ce:	bf00      	nop
 80148d0:	55555549 	.word	0x55555549
 80148d4:	3fc55555 	.word	0x3fc55555
 80148d8:	3fe00000 	.word	0x3fe00000
 80148dc:	5acfd57c 	.word	0x5acfd57c
 80148e0:	3de5d93a 	.word	0x3de5d93a
 80148e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80148e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80148ec:	57b1fe7d 	.word	0x57b1fe7d
 80148f0:	3ec71de3 	.word	0x3ec71de3
 80148f4:	19c161d5 	.word	0x19c161d5
 80148f8:	3f2a01a0 	.word	0x3f2a01a0
 80148fc:	1110f8a6 	.word	0x1110f8a6
 8014900:	3f811111 	.word	0x3f811111

08014904 <fabs>:
 8014904:	ec51 0b10 	vmov	r0, r1, d0
 8014908:	ee10 2a10 	vmov	r2, s0
 801490c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014910:	ec43 2b10 	vmov	d0, r2, r3
 8014914:	4770      	bx	lr
	...

08014918 <floor>:
 8014918:	ec51 0b10 	vmov	r0, r1, d0
 801491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014920:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014924:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014928:	2e13      	cmp	r6, #19
 801492a:	ee10 5a10 	vmov	r5, s0
 801492e:	ee10 8a10 	vmov	r8, s0
 8014932:	460c      	mov	r4, r1
 8014934:	dc32      	bgt.n	801499c <floor+0x84>
 8014936:	2e00      	cmp	r6, #0
 8014938:	da14      	bge.n	8014964 <floor+0x4c>
 801493a:	a333      	add	r3, pc, #204	; (adr r3, 8014a08 <floor+0xf0>)
 801493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014940:	f7eb fcbc 	bl	80002bc <__adddf3>
 8014944:	2200      	movs	r2, #0
 8014946:	2300      	movs	r3, #0
 8014948:	f7ec f8fe 	bl	8000b48 <__aeabi_dcmpgt>
 801494c:	b138      	cbz	r0, 801495e <floor+0x46>
 801494e:	2c00      	cmp	r4, #0
 8014950:	da57      	bge.n	8014a02 <floor+0xea>
 8014952:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014956:	431d      	orrs	r5, r3
 8014958:	d001      	beq.n	801495e <floor+0x46>
 801495a:	4c2d      	ldr	r4, [pc, #180]	; (8014a10 <floor+0xf8>)
 801495c:	2500      	movs	r5, #0
 801495e:	4621      	mov	r1, r4
 8014960:	4628      	mov	r0, r5
 8014962:	e025      	b.n	80149b0 <floor+0x98>
 8014964:	4f2b      	ldr	r7, [pc, #172]	; (8014a14 <floor+0xfc>)
 8014966:	4137      	asrs	r7, r6
 8014968:	ea01 0307 	and.w	r3, r1, r7
 801496c:	4303      	orrs	r3, r0
 801496e:	d01f      	beq.n	80149b0 <floor+0x98>
 8014970:	a325      	add	r3, pc, #148	; (adr r3, 8014a08 <floor+0xf0>)
 8014972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014976:	f7eb fca1 	bl	80002bc <__adddf3>
 801497a:	2200      	movs	r2, #0
 801497c:	2300      	movs	r3, #0
 801497e:	f7ec f8e3 	bl	8000b48 <__aeabi_dcmpgt>
 8014982:	2800      	cmp	r0, #0
 8014984:	d0eb      	beq.n	801495e <floor+0x46>
 8014986:	2c00      	cmp	r4, #0
 8014988:	bfbe      	ittt	lt
 801498a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801498e:	fa43 f606 	asrlt.w	r6, r3, r6
 8014992:	19a4      	addlt	r4, r4, r6
 8014994:	ea24 0407 	bic.w	r4, r4, r7
 8014998:	2500      	movs	r5, #0
 801499a:	e7e0      	b.n	801495e <floor+0x46>
 801499c:	2e33      	cmp	r6, #51	; 0x33
 801499e:	dd0b      	ble.n	80149b8 <floor+0xa0>
 80149a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80149a4:	d104      	bne.n	80149b0 <floor+0x98>
 80149a6:	ee10 2a10 	vmov	r2, s0
 80149aa:	460b      	mov	r3, r1
 80149ac:	f7eb fc86 	bl	80002bc <__adddf3>
 80149b0:	ec41 0b10 	vmov	d0, r0, r1
 80149b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80149bc:	f04f 33ff 	mov.w	r3, #4294967295
 80149c0:	fa23 f707 	lsr.w	r7, r3, r7
 80149c4:	4207      	tst	r7, r0
 80149c6:	d0f3      	beq.n	80149b0 <floor+0x98>
 80149c8:	a30f      	add	r3, pc, #60	; (adr r3, 8014a08 <floor+0xf0>)
 80149ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ce:	f7eb fc75 	bl	80002bc <__adddf3>
 80149d2:	2200      	movs	r2, #0
 80149d4:	2300      	movs	r3, #0
 80149d6:	f7ec f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 80149da:	2800      	cmp	r0, #0
 80149dc:	d0bf      	beq.n	801495e <floor+0x46>
 80149de:	2c00      	cmp	r4, #0
 80149e0:	da02      	bge.n	80149e8 <floor+0xd0>
 80149e2:	2e14      	cmp	r6, #20
 80149e4:	d103      	bne.n	80149ee <floor+0xd6>
 80149e6:	3401      	adds	r4, #1
 80149e8:	ea25 0507 	bic.w	r5, r5, r7
 80149ec:	e7b7      	b.n	801495e <floor+0x46>
 80149ee:	2301      	movs	r3, #1
 80149f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80149f4:	fa03 f606 	lsl.w	r6, r3, r6
 80149f8:	4435      	add	r5, r6
 80149fa:	4545      	cmp	r5, r8
 80149fc:	bf38      	it	cc
 80149fe:	18e4      	addcc	r4, r4, r3
 8014a00:	e7f2      	b.n	80149e8 <floor+0xd0>
 8014a02:	2500      	movs	r5, #0
 8014a04:	462c      	mov	r4, r5
 8014a06:	e7aa      	b.n	801495e <floor+0x46>
 8014a08:	8800759c 	.word	0x8800759c
 8014a0c:	7e37e43c 	.word	0x7e37e43c
 8014a10:	bff00000 	.word	0xbff00000
 8014a14:	000fffff 	.word	0x000fffff

08014a18 <scalbn>:
 8014a18:	b570      	push	{r4, r5, r6, lr}
 8014a1a:	ec55 4b10 	vmov	r4, r5, d0
 8014a1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014a22:	4606      	mov	r6, r0
 8014a24:	462b      	mov	r3, r5
 8014a26:	b99a      	cbnz	r2, 8014a50 <scalbn+0x38>
 8014a28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014a2c:	4323      	orrs	r3, r4
 8014a2e:	d036      	beq.n	8014a9e <scalbn+0x86>
 8014a30:	4b39      	ldr	r3, [pc, #228]	; (8014b18 <scalbn+0x100>)
 8014a32:	4629      	mov	r1, r5
 8014a34:	ee10 0a10 	vmov	r0, s0
 8014a38:	2200      	movs	r2, #0
 8014a3a:	f7eb fdf5 	bl	8000628 <__aeabi_dmul>
 8014a3e:	4b37      	ldr	r3, [pc, #220]	; (8014b1c <scalbn+0x104>)
 8014a40:	429e      	cmp	r6, r3
 8014a42:	4604      	mov	r4, r0
 8014a44:	460d      	mov	r5, r1
 8014a46:	da10      	bge.n	8014a6a <scalbn+0x52>
 8014a48:	a32b      	add	r3, pc, #172	; (adr r3, 8014af8 <scalbn+0xe0>)
 8014a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4e:	e03a      	b.n	8014ac6 <scalbn+0xae>
 8014a50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014a54:	428a      	cmp	r2, r1
 8014a56:	d10c      	bne.n	8014a72 <scalbn+0x5a>
 8014a58:	ee10 2a10 	vmov	r2, s0
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	4629      	mov	r1, r5
 8014a60:	f7eb fc2c 	bl	80002bc <__adddf3>
 8014a64:	4604      	mov	r4, r0
 8014a66:	460d      	mov	r5, r1
 8014a68:	e019      	b.n	8014a9e <scalbn+0x86>
 8014a6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014a6e:	460b      	mov	r3, r1
 8014a70:	3a36      	subs	r2, #54	; 0x36
 8014a72:	4432      	add	r2, r6
 8014a74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014a78:	428a      	cmp	r2, r1
 8014a7a:	dd08      	ble.n	8014a8e <scalbn+0x76>
 8014a7c:	2d00      	cmp	r5, #0
 8014a7e:	a120      	add	r1, pc, #128	; (adr r1, 8014b00 <scalbn+0xe8>)
 8014a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a84:	da1c      	bge.n	8014ac0 <scalbn+0xa8>
 8014a86:	a120      	add	r1, pc, #128	; (adr r1, 8014b08 <scalbn+0xf0>)
 8014a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a8c:	e018      	b.n	8014ac0 <scalbn+0xa8>
 8014a8e:	2a00      	cmp	r2, #0
 8014a90:	dd08      	ble.n	8014aa4 <scalbn+0x8c>
 8014a92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a9e:	ec45 4b10 	vmov	d0, r4, r5
 8014aa2:	bd70      	pop	{r4, r5, r6, pc}
 8014aa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014aa8:	da19      	bge.n	8014ade <scalbn+0xc6>
 8014aaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014aae:	429e      	cmp	r6, r3
 8014ab0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014ab4:	dd0a      	ble.n	8014acc <scalbn+0xb4>
 8014ab6:	a112      	add	r1, pc, #72	; (adr r1, 8014b00 <scalbn+0xe8>)
 8014ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d1e2      	bne.n	8014a86 <scalbn+0x6e>
 8014ac0:	a30f      	add	r3, pc, #60	; (adr r3, 8014b00 <scalbn+0xe8>)
 8014ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac6:	f7eb fdaf 	bl	8000628 <__aeabi_dmul>
 8014aca:	e7cb      	b.n	8014a64 <scalbn+0x4c>
 8014acc:	a10a      	add	r1, pc, #40	; (adr r1, 8014af8 <scalbn+0xe0>)
 8014ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d0b8      	beq.n	8014a48 <scalbn+0x30>
 8014ad6:	a10e      	add	r1, pc, #56	; (adr r1, 8014b10 <scalbn+0xf8>)
 8014ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014adc:	e7b4      	b.n	8014a48 <scalbn+0x30>
 8014ade:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ae2:	3236      	adds	r2, #54	; 0x36
 8014ae4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ae8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014aec:	4620      	mov	r0, r4
 8014aee:	4b0c      	ldr	r3, [pc, #48]	; (8014b20 <scalbn+0x108>)
 8014af0:	2200      	movs	r2, #0
 8014af2:	e7e8      	b.n	8014ac6 <scalbn+0xae>
 8014af4:	f3af 8000 	nop.w
 8014af8:	c2f8f359 	.word	0xc2f8f359
 8014afc:	01a56e1f 	.word	0x01a56e1f
 8014b00:	8800759c 	.word	0x8800759c
 8014b04:	7e37e43c 	.word	0x7e37e43c
 8014b08:	8800759c 	.word	0x8800759c
 8014b0c:	fe37e43c 	.word	0xfe37e43c
 8014b10:	c2f8f359 	.word	0xc2f8f359
 8014b14:	81a56e1f 	.word	0x81a56e1f
 8014b18:	43500000 	.word	0x43500000
 8014b1c:	ffff3cb0 	.word	0xffff3cb0
 8014b20:	3c900000 	.word	0x3c900000

08014b24 <_init>:
 8014b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b26:	bf00      	nop
 8014b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b2a:	bc08      	pop	{r3}
 8014b2c:	469e      	mov	lr, r3
 8014b2e:	4770      	bx	lr

08014b30 <_fini>:
 8014b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b32:	bf00      	nop
 8014b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b36:	bc08      	pop	{r3}
 8014b38:	469e      	mov	lr, r3
 8014b3a:	4770      	bx	lr
